(* Generated by ebnf2bnf V3.00 from 'ahC.gtb' Nov 19 2004 11:55:08 *)

(****** 
COMMENT OUT EITHER THE RI options or the RNGLR options in the script
*******)


translation_unit ::= external_declaration |
                     translation_unit external_declaration .


external_declaration ::= function_definition |
                         declaration .


function_definition ::= declaration_specifiers declarator declaration_list compound_statement |
                        declarator declaration_list compound_statement |
                        declaration_specifiers declarator compound_statement |
                        declarator compound_statement .


declaration ::= declaration_specifiers init_declarator_list white_space ';'  |
                declaration_specifiers white_space ';'  .


declaration_list ::= declaration |
                     declaration_list declaration .


declaration_specifiers ::= declaration_specifiers storage_class_specifier |
                           storage_class_specifier |
                           declaration_specifiers type_specifier |
                           type_specifier |
                           declaration_specifiers type_qualifier |
                           type_qualifier .


storage_class_specifier ::= white_space 'a' 'u' 't' 'o'  |
                            white_space 'r' 'e' 'g' 'i' 's' 't' 'e' 'r'  |
                            white_space 's' 't' 'a' 't' 'i' 'c'  |
                            white_space 'e' 'x' 't' 'e' 'r' 'n'  |
                            white_space 't' 'y' 'p' 'e' 'd' 'e' 'f'  .


type_specifier ::= white_space 'v' 'o' 'i' 'd'  |
                   white_space 'c' 'h' 'a' 'r'  |
                   white_space 's' 'h' 'o' 'r' 't'  |
                   white_space 'i' 'n' 't'  |
                   white_space 'l' 'o' 'n' 'g'  |
                   white_space 'f' 'l' 'o' 'a' 't'  |
                   white_space 'd' 'o' 'u' 'b' 'l' 'e'  |
                   white_space 's' 'i' 'g' 'n' 'e' 'd'  |
                   white_space 'u' 'n' 's' 'i' 'g' 'n' 'e' 'd'  |
                   struct_or_union_specifier |
                   enum_specifier |
                   typedef_name .


type_qualifier ::= white_space 'c' 'o' 'n' 's' 't'  |
                   white_space 'v' 'o' 'l' 'a' 't' 'i' 'l' 'e'  .


struct_or_union_specifier ::= struct_or_union identifier white_space '{'  struct_declaration_list white_space '}'  |
                              struct_or_union white_space '{'  struct_declaration_list white_space '}'  |
                              struct_or_union identifier .


struct_or_union ::= white_space 's' 't' 'r' 'u' 'c' 't'  |
                    white_space 'u' 'n' 'i' 'o' 'n'  .


struct_declaration_list ::= struct_declaration |
                            struct_declaration_list struct_declaration .


init_declarator_list ::= init_declarator |
                         init_declarator_list white_space ','  init_declarator .


init_declarator ::= declarator |
                    declarator white_space '='  initializer .


struct_declaration ::= ~specifier_qualifier_list struct_declarator_list white_space ';'  .


specifier_qualifier_list ::= specifier_qualifier_list type_specifier |
                             type_specifier |
                             specifier_qualifier_list type_qualifier |
                             type_qualifier .


struct_declarator_list ::= struct_declarator |
                           struct_declarator_list white_space ','  struct_declarator .


struct_declarator ::= declarator |
                      declarator white_space ':'  constant_expression |
                      white_space ':'  constant_expression .


enum_specifier ::= white_space 'e' 'n' 'u' 'm'  identifier white_space '{'  enumerator_list white_space '}'  |
                   white_space 'e' 'n' 'u' 'm'  white_space '{'  enumerator_list white_space '}'  |
                   white_space 'e' 'n' 'u' 'm'  identifier .


enumerator_list ::= enumerator |
                    enumerator_list white_space ','  enumerator .


enumerator ::= identifier |
               identifier white_space '='  constant_expression .


declarator ::= pointer ~direct_declarator |
               ~direct_declarator .


direct_declarator ::= identifier |
                      white_space '('  declarator white_space ')'  |
                      direct_declarator white_space '['  constant_expression white_space ']'  |
                      direct_declarator white_space '['  white_space ']'  |
                      direct_declarator white_space '('  parameter_type_list white_space ')'  |
                      direct_declarator white_space '('  identifier_list white_space ')'  |
                      direct_declarator white_space '('  white_space ')'  .


pointer ::= white_space '*'  type_qualifier_list |
            white_space '*'  |
            white_space '*'  type_qualifier_list ~pointer |
            white_space '*'  ~pointer .


type_qualifier_list ::= type_qualifier |
                        type_qualifier_list type_qualifier .


parameter_type_list ::= parameter_list |
                        parameter_list white_space ','  white_space '.' '.' '.'  .


parameter_list ::= parameter_declaration |
                   parameter_list white_space ','  parameter_declaration .


parameter_declaration ::= declaration_specifiers declarator |
                          declaration_specifiers abstract_declarator |
                          declaration_specifiers .


identifier_list ::= identifier |
                    identifier_list white_space ','  identifier .


initializer ::= assignment_expression |
                white_space '{'  ~initializer_list white_space '}'  |
                white_space '{'  ~initializer_list white_space ','  white_space '}'  .


initializer_list ::= initializer |
                     initializer_list white_space ','  initializer .


type_name ::= ~specifier_qualifier_list abstract_declarator |
              ~specifier_qualifier_list .


abstract_declarator ::= pointer |
                        pointer ~direct_abstract_declarator |
                        ~direct_abstract_declarator .


direct_abstract_declarator ::= white_space '('  abstract_declarator white_space ')'  |
                               direct_abstract_declarator white_space '['  constant_expression white_space ']'  |
                               white_space '['  constant_expression white_space ']'  |
                               direct_abstract_declarator white_space '['  white_space ']'  |
                               white_space '['  white_space ']'  |
                               direct_abstract_declarator white_space '('  parameter_type_list white_space ')'  |
                               white_space '('  parameter_type_list white_space ')'  |
                               direct_abstract_declarator white_space '('  white_space ')'  |
                               white_space '('  white_space ')'  .


statement ::= labeled_statement |
              expression_statement |
              compound_statement |
              selection_statement |
              iteration_statement |
              jump_statement .


labeled_statement ::= identifier white_space ':'  ~statement |
                      white_space 'c' 'a' 's' 'e'  constant_expression white_space ':'  ~statement |
                      white_space 'd' 'e' 'f' 'a' 'u' 'l' 't'  white_space ':'  ~statement .


expression_statement ::= expression white_space ';'  |
                         white_space ';'  .


compound_statement ::= white_space '{'  declaration_list ~statement_list white_space '}'  |
                       white_space '{'  ~statement_list white_space '}'  |
                       white_space '{'  declaration_list white_space '}'  |
                       white_space '{'  white_space '}'  .


statement_list ::= statement |
                   statement_list statement .


selection_statement ::= white_space 'i' 'f'  white_space '('  expression white_space ')'  ~statement |
                        white_space 'i' 'f'  white_space '('  expression white_space ')'  ~statement white_space 'e' 'l' 's' 'e'  ~statement |
                        white_space 's' 'w' 'i' 't' 'c' 'h'  white_space '('  expression white_space ')'  ~statement .


iteration_statement ::= white_space 'w' 'h' 'i' 'l' 'e'  white_space '('  expression white_space ')'  ~statement |
                        white_space 'd' 'o'  ~statement white_space 'w' 'h' 'i' 'l' 'e'  white_space '('  expression white_space ')'  |
                        white_space 'f' 'o' 'r'  white_space '('  expression white_space ';'  expression white_space ';'  expression white_space ')'  ~statement |
                        white_space 'f' 'o' 'r'  white_space '('  expression white_space ';'  expression white_space ';'  white_space ')'  ~statement |
                        white_space 'f' 'o' 'r'  white_space '('  expression white_space ';'  white_space ';'  expression white_space ')'  ~statement |
                        white_space 'f' 'o' 'r'  white_space '('  expression white_space ';'  white_space ';'  white_space ')'  ~statement |
                        white_space 'f' 'o' 'r'  white_space '('  white_space ';'  expression white_space ';'  expression white_space ')'  ~statement |
                        white_space 'f' 'o' 'r'  white_space '('  white_space ';'  expression white_space ';'  white_space ')'  ~statement |
                        white_space 'f' 'o' 'r'  white_space '('  white_space ';'  white_space ';'  expression white_space ')'  ~statement |
                        white_space 'f' 'o' 'r'  white_space '('  white_space ';'  white_space ';'  white_space ')'  ~statement .


jump_statement ::= white_space 'g' 'o' 't' 'o'  identifier white_space ';'  |
                   white_space 'c' 'o' 'n' 't' 'i' 'n' 'u' 'e'  white_space ';'  |
                   white_space 'b' 'r' 'e' 'a' 'k'  white_space ';'  |
                   white_space 'r' 'e' 't' 'u' 'r' 'n'  expression white_space ';'  |
                   white_space 'r' 'e' 't' 'u' 'r' 'n'  white_space ';'  .


expression ::= assignment_expression |
               expression white_space ','  assignment_expression .


assignment_expression ::= ~conditional_expression |
                          unary_expression assignment_operator ~assignment_expression .


assignment_operator ::= white_space '='  |
                        white_space '*' '='  |
                        white_space '/' '='  |
                        white_space '%' '='  |
                        white_space '+' '='  |
                        white_space '-' '='  |
                        white_space '<' '<' '='  |
                        white_space '>' '>' '='  |
                        white_space '&' '='  |
                        white_space '^' '='  |
                        white_space '|' '='  .


conditional_expression ::= logical_or_expression |
                           logical_or_expression white_space '?'  ~expression white_space ':'  ~conditional_expression .


constant_expression ::= ~conditional_expression .


logical_or_expression ::= logical_and_expression |
                          logical_or_expression white_space '|' '|'  logical_and_expression .


logical_and_expression ::= inclusive_or_expression |
                           logical_and_expression white_space '&' '&'  inclusive_or_expression .


inclusive_or_expression ::= exclusive_or_expression |
                            inclusive_or_expression white_space '|'  exclusive_or_expression .


exclusive_or_expression ::= and_expression |
                            exclusive_or_expression white_space '^'  and_expression .


and_expression ::= ~equality_expression |
                   and_expression white_space '&'  ~equality_expression .


equality_expression ::= relational_expression |
                        equality_expression white_space '=' '='  relational_expression |
                        equality_expression white_space '!' '='  relational_expression .


relational_expression ::= shift_expression |
                          relational_expression white_space '<'  shift_expression |
                          relational_expression white_space '>'  shift_expression |
                          relational_expression white_space '<' '='  shift_expression |
                          relational_expression white_space '>' '='  shift_expression .


shift_expression ::= additive_expression |
                     shift_expression white_space '<' '<'  additive_expression |
                     shift_expression white_space '>' '>'  additive_expression .


additive_expression ::= multiplicative_expression |
                        additive_expression white_space '+'  multiplicative_expression |
                        additive_expression white_space '-'  multiplicative_expression .


multiplicative_expression ::= cast_expression |
                              multiplicative_expression white_space '*'  cast_expression |
                              multiplicative_expression white_space '/'  cast_expression |
                              multiplicative_expression white_space '%'  cast_expression .


cast_expression ::= unary_expression |
                    white_space '('  type_name white_space ')'  ~cast_expression .


unary_expression ::= postfix_expression |
                     white_space '+' '+'  ~unary_expression |
                     white_space '-' '-'  ~unary_expression |
                     unary_operator ~cast_expression |
                     white_space 's' 'i' 'z' 'e' 'o' 'f'  ~unary_expression |
                     white_space 's' 'i' 'z' 'e' 'o' 'f'  white_space '('  type_name white_space ')'  .


unary_operator ::= white_space '&'  |
                   white_space '*'  |
                   white_space '+'  |
                   white_space '-'  |
                   white_space '~'  |
                   white_space '!'  .


postfix_expression ::= primary_expression |
                       postfix_expression white_space '['  ~expression white_space ']'  |
                       postfix_expression white_space '('  ~argument_expression_list white_space ')'  |
                       postfix_expression white_space '('  white_space ')'  |
                       postfix_expression white_space '.'  identifier |
                       postfix_expression white_space '-' '>'  identifier |
                       postfix_expression white_space '+' '+'  |
                       postfix_expression white_space '-' '-'  .


primary_expression ::= identifier |
                       constant |
                       string |
                       white_space '('  ~expression white_space ')'  .


argument_expression_list ::= assignment_expression |
                             argument_expression_list white_space ','  assignment_expression .


constant ::= integer_constant |
             floating_constant |
             enumeration_constant .

(*
identifier ::= white_space 'I' 'D'  .
*)

identifier ::= white_space Letter Letter_Digit .

Letter ::= 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' |
'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | '_' .

Letter_Digit ::= Letter_Digit Letter | Letter_Digit Digit | # .

Digit ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' .


string ::= white_space 'S' 'T' 'R' 'I' 'N' 'G'  |
           string white_space 'S' 'T' 'R' 'I' 'N' 'G'  .

(*
integer_constant ::= white_space 'I' 'N' 'T' 'E' 'G' 'E' 'R'  .
*)

integer_constant ::=  white_space INTEGER .

INTEGER ::= INTEGER Digit | Digit .



character_constant ::= white_space 'S' 'T' 'R' 'I' 'N' 'G'  .

(*
floating_constant ::= white_space 'R' 'E' 'A' 'L'  .
*)

floating_constant ::= white_space REAL .

REAL ::= INTEGER | INTEGER '.' INTEGER .


enumeration_constant ::= identifier  .


typedef_name ::= identifier .

white_space ::= 'white_space' .



(* GTB script follows *)
(

STRING := "
void gingsing ( void ) 
{ 
fred_1_identifier 
( STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
) ; 
} 
fred_1_identifier fred_1_identifier ; 
unsigned long fred_1_identifier ; 
char fred_1_identifier [ 123456 ] , 
* fred_1_identifier = fred_1_identifier , 
fred_1_identifier [ 123456 ] , 
fred_1_identifier [ 123456 ] = STRING ; 
struct fred_1_identifier 
{ 
int fred_1_identifier : 123456 , 
fred_1_identifier : 123456 , 
fred_1_identifier : 123456 , 
fred_1_identifier : 123456 , 
fred_1_identifier : 123456 , 
fred_1_identifier : 123456 , 
fred_1_identifier : 123456 ; 
} fred_1_identifier ; 
struct fred_1_identifier 
{ 
unsigned long fred_1_identifier , 
fred_1_identifier ; 
unsigned fred_1_identifier ; 
struct fred_1_identifier * fred_1_identifier , 
* fred_1_identifier ; 
char fred_1_identifier ; 
char fred_1_identifier ; 
} * fred_1_identifier [ 123456 ] ; 
int gingsing ( char * fred_1_identifier , ... ) 
{ 
int fred_1_identifier ; 
fred_1_identifier fred_1_identifier ; 
( ( void ) ( ( fred_1_identifier ) = ( fred_1_identifier ) ( ( char * ) ( & fred_1_identifier ) + ( ( sizeof ( fred_1_identifier ) + sizeof ( int ) - 123456 ) & ~ ( sizeof ( int ) - 123456 ) ) ) ) ) ; 
if ( fred_1_identifier . fred_1_identifier ) 
fred_1_identifier = gingsing ( fred_1_identifier , fred_1_identifier ) ; 
( ( void ) 123456 ) ; 
return ( fred_1_identifier ) ; 
} 
void gingsing ( struct fred_1_identifier * fred_1_identifier ) 
{ 
unsigned long fred_1_identifier = fred_1_identifier -> fred_1_identifier , 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
char fred_1_identifier = STRING ; 
if ( fred_1_identifier == 123456 ) 
{ 
if ( fred_1_identifier < 123456 ) 
gingsing ( STRING , fred_1_identifier ) ; 
} 
else 
while ( fred_1_identifier > 123456 ) 
{ 
if ( fred_1_identifier & 123456 ) 
{ 
if ( ! ( fred_1_identifier & 123456 ) ) 
gingsing ( STRING ) ; 
gingsing ( STRING , fred_1_identifier [ fred_1_identifier - STRING ] ) ; 
if ( fred_1_identifier > 123456 ) 
gingsing ( STRING ) ; 
} 
fred_1_identifier = fred_1_identifier >> 123456 ; 
fred_1_identifier = fred_1_identifier >> 123456 ; 
fred_1_identifier ++ ; 
} 
} 
void gingsing ( struct fred_1_identifier * fred_1_identifier ) 
{ 
if ( fred_1_identifier == 123456 ) 
gingsing ( STRING ) ; 
else 
while ( fred_1_identifier != 123456 ) 
{ 
gingsing ( fred_1_identifier ) ; 
if ( fred_1_identifier -> fred_1_identifier != 123456 ) 
{ 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier -> fred_1_identifier ) ; 
gingsing ( STRING ) ; 
} 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
if ( fred_1_identifier != 123456 ) 
gingsing ( STRING ) ; 
} 
} 
void gingsing ( struct fred_1_identifier * fred_1_identifier ) 
{ 
int fred_1_identifier = fred_1_identifier . fred_1_identifier ; 
fred_1_identifier . fred_1_identifier = 123456 ; 
gingsing ( fred_1_identifier ) ; 
fred_1_identifier . fred_1_identifier = fred_1_identifier ; 
} 
void gingsing ( char * * fred_1_identifier ) 
{ 
while ( * ++ fred_1_identifier != 123456 ) 
switch ( * ( ( * fred_1_identifier ) + 123456 ) ) 
{ 
case STRING : 
fred_1_identifier . fred_1_identifier = 123456 ; 
break ; 
case STRING : 
fred_1_identifier . fred_1_identifier = 123456 ; 
break ; 
case STRING : 
fred_1_identifier . fred_1_identifier = 123456 ; 
break ; 
case STRING : 
fred_1_identifier . fred_1_identifier = 123456 ; 
break ; 
case STRING : 
fred_1_identifier . fred_1_identifier = 123456 ; 
break ; 
case STRING : 
fred_1_identifier . fred_1_identifier = 123456 ; 
break ; 
case STRING : 
fred_1_identifier . fred_1_identifier = 123456 ; 
break ; 
default : 
gingsing ( ) ; 
gingsing ( 123456 ) ; 
} ; 
} 
void gingsing ( char fred_1_identifier ) 
{ 
if ( fred_1_identifier > STRING && fred_1_identifier <= STRING && fred_1_identifier - fred_1_identifier < 123456 ) 
* fred_1_identifier ++ = fred_1_identifier ; 
} 
int gingsing ( char fred_1_identifier , char fred_1_identifier ) 
{ 
return ( ( fred_1_identifier >= STRING && fred_1_identifier <= STRING ) || fred_1_identifier == STRING || fred_1_identifier == STRING || fred_1_identifier == STRING ) && 
( ( fred_1_identifier >= STRING && fred_1_identifier <= STRING ) || fred_1_identifier == STRING || fred_1_identifier == STRING || fred_1_identifier == STRING || fred_1_identifier == STRING ) ; 
} 
void gingsing ( void ) 
{ 
char fred_1_identifier , 
fred_1_identifier = 123456 ; 
fred_1_identifier = fred_1_identifier ; 
while ( ! ( ( ( & fred_1_identifier [ 123456 ] ) ) -> fred_1_identifier & 123456 ) && ( fred_1_identifier = ( ( -- ( ( ( & fred_1_identifier [ 123456 ] ) ) -> fred_1_identifier ) >= 123456 ) ? ( unsigned char ) ( * ( ( & fred_1_identifier [ 123456 ] ) ) -> fred_1_identifier ++ ) : gingsing ( ( & fred_1_identifier [ 123456 ] ) ) ) ) != STRING ) 
{ 
if ( gingsing ( fred_1_identifier , fred_1_identifier ) ) 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
if ( fred_1_identifier > STRING && fred_1_identifier <= STRING ) 
fred_1_identifier = fred_1_identifier ; 
} 
* fred_1_identifier = 123456 ; 
if ( fred_1_identifier - fred_1_identifier >= 123456 ) 
{ 
gingsing ( STRING ) ; 
* fred_1_identifier = 123456 ; 
} 
} 
unsigned gingsing ( char * fred_1_identifier ) 
{ 
char fred_1_identifier [ 123456 ] = STRING ; 
unsigned fred_1_identifier ; 
gingsing ( fred_1_identifier , fred_1_identifier , sizeof ( fred_1_identifier ) ) ; 
gingsing ( fred_1_identifier , fred_1_identifier , sizeof ( fred_1_identifier ) ) ; 
for ( fred_1_identifier = STRING ; * fred_1_identifier != 123456 ; fred_1_identifier ++ ) 
if ( * fred_1_identifier >= STRING && * fred_1_identifier <= STRING ) 
{ 
if ( fred_1_identifier [ * fred_1_identifier - STRING ] == STRING ) 
{ 
fred_1_identifier [ * fred_1_identifier - STRING ] = fred_1_identifier ; 
fred_1_identifier [ fred_1_identifier ++ - STRING ] = * fred_1_identifier ; 
} 
* fred_1_identifier = fred_1_identifier [ * fred_1_identifier - STRING ] ; 
} 
return ( fred_1_identifier - STRING ) ; 
} 
void gingsing ( void ) 
{ 
unsigned long fred_1_identifier = fred_1_identifier - fred_1_identifier ; 
if ( ! fred_1_identifier . fred_1_identifier ) 
gingsing ( STRING , fred_1_identifier ) ; 
gingsing ( STRING ) ; 
for ( fred_1_identifier = fred_1_identifier - fred_1_identifier ; fred_1_identifier > 123456 ; fred_1_identifier -- ) 
gingsing ( STRING ) ; 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier , 123456 ) ; 
} 
char gingsing ( void ) ; 
char gingsing ( void ) 
{ 
char fred_1_identifier = * fred_1_identifier , 
fred_1_identifier = * fred_1_identifier == STRING ? 123456 : 
* fred_1_identifier == STRING ? 123456 : 
* fred_1_identifier == STRING ? ( fred_1_identifier ++ , gingsing ( ) ) : 
( * fred_1_identifier >= STRING && * fred_1_identifier <= STRING ) ? 
123456 & ( fred_1_identifier >> ( ( * fred_1_identifier ) - STRING ) ) : 
( gingsing ( ) , 123456 ) ; 
if ( fred_1_identifier == STRING && * fred_1_identifier != STRING ) 
gingsing ( ) ; 
fred_1_identifier ++ ; 
return ( fred_1_identifier ) ; 
} 
char gingsing ( void ) 
{ 
if ( * fred_1_identifier == STRING ) 
{ 
fred_1_identifier ++ ; 
return ( ! gingsing ( ) ) ; 
} 
else 
return ( gingsing ( ) ) ; 
} 
char gingsing ( void ) 
{ 
char fred_1_identifier = gingsing ( ) ; 
while ( * fred_1_identifier == STRING ) 
{ 
fred_1_identifier ++ ; 
fred_1_identifier &= gingsing ( ) ; 
} return ( fred_1_identifier ) ; 
} 
char gingsing ( void ) 
{ 
char fred_1_identifier = gingsing ( ) ; 
while ( * fred_1_identifier == STRING ) 
{ 
fred_1_identifier ++ ; 
fred_1_identifier ^= gingsing ( ) ; 
} return ( fred_1_identifier ) ; 
} 
char gingsing ( void ) 
{ 
char fred_1_identifier = gingsing ( ) ; 
while ( * fred_1_identifier == STRING ) 
{ 
fred_1_identifier ++ ; 
fred_1_identifier |= gingsing ( ) ; 
} return ( fred_1_identifier ) ; 
} 
int gingsing ( struct fred_1_identifier * fred_1_identifier , struct fred_1_identifier * fred_1_identifier ) 
{ 
return ( ( ( fred_1_identifier -> fred_1_identifier | fred_1_identifier -> fred_1_identifier ) == fred_1_identifier -> fred_1_identifier ) && 
( fred_1_identifier -> fred_1_identifier & fred_1_identifier -> fred_1_identifier ) == ( fred_1_identifier -> fred_1_identifier & fred_1_identifier -> fred_1_identifier ) ) ; 
} 
int gingsing ( struct fred_1_identifier * fred_1_identifier , struct fred_1_identifier * fred_1_identifier ) 
{ 
return ( ( fred_1_identifier -> fred_1_identifier & fred_1_identifier -> fred_1_identifier ) == ( fred_1_identifier -> fred_1_identifier & fred_1_identifier -> fred_1_identifier ) && fred_1_identifier -> fred_1_identifier == fred_1_identifier -> fred_1_identifier ) ; 
} 
int gingsing ( struct fred_1_identifier * * fred_1_identifier , unsigned long fred_1_identifier , unsigned long fred_1_identifier ) 
{ 
struct fred_1_identifier * fred_1_identifier = * fred_1_identifier , 
* fred_1_identifier = gingsing ( sizeof ( * fred_1_identifier ) ) ; 
if ( fred_1_identifier == 123456 ) 
{ 
gingsing ( STRING ) ; 
gingsing ( 123456 ) ; 
} 
gingsing ( fred_1_identifier , 123456 , sizeof ( struct fred_1_identifier ) ) ; 
fred_1_identifier -> fred_1_identifier = fred_1_identifier ; 
fred_1_identifier -> fred_1_identifier = fred_1_identifier ; 
while ( fred_1_identifier != 123456 && ! gingsing ( fred_1_identifier , fred_1_identifier ) ) 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
if ( fred_1_identifier == 123456 ) 
{ 
fred_1_identifier -> fred_1_identifier = * fred_1_identifier ; 
* fred_1_identifier = fred_1_identifier ; 
return 123456 ; 
} 
else 
return 123456 ; 
} 
struct fred_1_identifier * gingsing ( char * fred_1_identifier , unsigned fred_1_identifier , 
int fred_1_identifier , unsigned long * fred_1_identifier ) 
{ 
struct fred_1_identifier * fred_1_identifier = 123456 ; 
unsigned fred_1_identifier ; 
* fred_1_identifier = 123456 ; 
if ( fred_1_identifier == 123456 ) 
{ 
gingsing ( & fred_1_identifier , 123456 , ( fred_1_identifier = fred_1_identifier , gingsing ( ) ) ) ; 
return ( fred_1_identifier ) ; 
} 
if ( fred_1_identifier ) 
{ 
for ( fred_1_identifier = 123456 ; fred_1_identifier < fred_1_identifier ; fred_1_identifier ++ ) 
gingsing ( STRING , fred_1_identifier [ fred_1_identifier ] ) ; 
gingsing ( STRING ) ; 
} 
for ( fred_1_identifier = 123456 ; fred_1_identifier <= ( 123456 << fred_1_identifier ) - 123456 ; fred_1_identifier ++ ) 
{ 
if ( fred_1_identifier ) 
{ 
unsigned long fred_1_identifier = fred_1_identifier , 
fred_1_identifier = fred_1_identifier ; 
while ( fred_1_identifier -- > 123456 ) 
{ 
gingsing ( STRING , fred_1_identifier & 123456 ) ; 
fred_1_identifier = fred_1_identifier >> 123456 ; 
} 
} 
if ( fred_1_identifier = fred_1_identifier , gingsing ( ) ) 
{ 
gingsing ( & fred_1_identifier , ( 123456 << fred_1_identifier ) - 123456 , fred_1_identifier ) ; 
( * fred_1_identifier ) ++ ; 
if ( fred_1_identifier ) 
gingsing ( STRING ) ; 
} 
else 
{ 
if ( fred_1_identifier ) 
gingsing ( STRING ) ; 
} 
} 
if ( fred_1_identifier == 123456 ) 
gingsing ( & fred_1_identifier , 123456 , 123456 ) ; 
return ( fred_1_identifier ) ; 
} 
void gingsing ( void ) 
{ 
unsigned fred_1_identifier , 
fred_1_identifier ; 
gingsing ( STRING , fred_1_identifier [ 123456 ] , fred_1_identifier [ 123456 ] ) ; 
for ( fred_1_identifier = 123456 ; fred_1_identifier < 123456 ; fred_1_identifier ++ ) 
{ 
if ( fred_1_identifier > 123456 && fred_1_identifier < 123456 ) 
gingsing ( STRING , fred_1_identifier [ 123456 ] ) ; 
else 
gingsing ( STRING ) ; 
for ( fred_1_identifier = 123456 ; fred_1_identifier < 123456 ; fred_1_identifier ++ ) 
{ 
fred_1_identifier = ( fred_1_identifier > 123456 ? fred_1_identifier ^ 123456 : fred_1_identifier ) + ( fred_1_identifier > 123456 ? fred_1_identifier ^ 123456 : fred_1_identifier ) * 123456 ; 
gingsing ( STRING , ( fred_1_identifier = fred_1_identifier , gingsing ( ) ) ) ; 
} 
if ( fred_1_identifier > 123456 ) 
gingsing ( STRING , fred_1_identifier [ 123456 ] ) ; 
else 
gingsing ( STRING ) ; 
gingsing ( STRING ) ; 
} 
gingsing ( STRING , fred_1_identifier [ 123456 ] , fred_1_identifier [ 123456 ] ) ; 
} 
int gingsing ( struct fred_1_identifier * fred_1_identifier ) 
{ 
unsigned long fred_1_identifier = fred_1_identifier -> fred_1_identifier , 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
int fred_1_identifier = 123456 ; 
while ( fred_1_identifier != 123456 ) 
{ 
if ( fred_1_identifier & 123456 && fred_1_identifier & 123456 ) 
fred_1_identifier ++ ; 
fred_1_identifier = fred_1_identifier >> 123456 ; 
fred_1_identifier = fred_1_identifier >> 123456 ; 
} 
return ( fred_1_identifier ) ; 
} 
struct fred_1_identifier * gingsing ( struct fred_1_identifier * fred_1_identifier , unsigned fred_1_identifier , 
unsigned long * fred_1_identifier ) 
{ 
struct fred_1_identifier * fred_1_identifier = 123456 , 
* fred_1_identifier [ 123456 ] [ 123456 ] ; 
int fred_1_identifier , 
fred_1_identifier = 123456 ; 
char fred_1_identifier ; 
* fred_1_identifier = 123456 ; 
gingsing ( fred_1_identifier , 123456 , sizeof ( fred_1_identifier ) ) ; 
while ( fred_1_identifier != 123456 ) 
{ 
gingsing ( & fred_1_identifier [ fred_1_identifier ] [ gingsing ( fred_1_identifier ) ] , 
fred_1_identifier -> fred_1_identifier , fred_1_identifier -> fred_1_identifier ) ; 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
} 
do 
{ 
struct fred_1_identifier * fred_1_identifier ; 
fred_1_identifier = 123456 ; 
gingsing ( STRING ) ; 
for ( fred_1_identifier = 123456 ; fred_1_identifier <= fred_1_identifier ; fred_1_identifier ++ ) 
{ 
gingsing ( STRING , fred_1_identifier ) ; 
gingsing ( fred_1_identifier [ fred_1_identifier ] [ fred_1_identifier ] ) ; 
gingsing ( STRING ) ; 
} 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
for ( fred_1_identifier = 123456 ; fred_1_identifier < fred_1_identifier ; fred_1_identifier ++ ) 
{ 
fred_1_identifier = fred_1_identifier [ fred_1_identifier ] [ fred_1_identifier ] ; 
fred_1_identifier [ 123456 - fred_1_identifier ] [ fred_1_identifier ] = 123456 ; 
while ( fred_1_identifier != 123456 ) 
{ 
struct fred_1_identifier * fred_1_identifier = fred_1_identifier [ fred_1_identifier ] [ fred_1_identifier + 123456 ] ; 
while ( fred_1_identifier != 123456 ) 
{ 
unsigned long fred_1_identifier = fred_1_identifier -> fred_1_identifier & ( fred_1_identifier -> fred_1_identifier ^ fred_1_identifier -> fred_1_identifier ) ; 
if ( fred_1_identifier -> fred_1_identifier == fred_1_identifier -> fred_1_identifier && fred_1_identifier != 123456 ) 
{ 
unsigned long fred_1_identifier = fred_1_identifier -> fred_1_identifier & ~ fred_1_identifier ; 
while ( ( fred_1_identifier & 123456 ) == 123456 ) 
fred_1_identifier = fred_1_identifier >> 123456 ; 
if ( ( fred_1_identifier >> 123456 ) == 123456 ) 
{ 
fred_1_identifier = 123456 ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
gingsing ( & fred_1_identifier [ 123456 - fred_1_identifier ] [ fred_1_identifier ] , fred_1_identifier , 
fred_1_identifier == 123456 ? 123456 : fred_1_identifier -> fred_1_identifier ) ; 
gingsing ( fred_1_identifier [ 123456 - fred_1_identifier ] [ fred_1_identifier ] ) ; 
gingsing ( STRING ) ; 
( * fred_1_identifier ) ++ ; 
fred_1_identifier -> fred_1_identifier = 123456 ; 
fred_1_identifier -> fred_1_identifier = 123456 ; 
} 
} 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
} 
if ( ! fred_1_identifier -> fred_1_identifier ) 
{ 
gingsing ( & fred_1_identifier , fred_1_identifier -> fred_1_identifier , fred_1_identifier -> fred_1_identifier ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
} 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
} 
} 
fred_1_identifier = fred_1_identifier [ fred_1_identifier ] [ fred_1_identifier ] ; 
while ( fred_1_identifier != 123456 ) 
{ 
if ( ! fred_1_identifier -> fred_1_identifier ) 
{ 
gingsing ( & fred_1_identifier , fred_1_identifier -> fred_1_identifier , fred_1_identifier -> fred_1_identifier ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
} 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
} 
fred_1_identifier [ 123456 - fred_1_identifier ] [ fred_1_identifier ] = 123456 ; 
fred_1_identifier = 123456 - fred_1_identifier ; 
} 
while ( fred_1_identifier ) ; 
return ( fred_1_identifier ) ; 
} 
int gingsing ( struct fred_1_identifier * fred_1_identifier , unsigned long * fred_1_identifier ) 
{ 
unsigned fred_1_identifier ; 
unsigned long fred_1_identifier ; 
* fred_1_identifier = 123456 ; 
for ( fred_1_identifier = 123456 ; fred_1_identifier != 123456 ; fred_1_identifier ++ , fred_1_identifier = fred_1_identifier -> fred_1_identifier ) 
{ 
( * fred_1_identifier ) ++ ; 
fred_1_identifier -> fred_1_identifier = STRING - fred_1_identifier ; 
if ( fred_1_identifier > 123456 ) 
return ( 123456 ) ; 
fred_1_identifier [ fred_1_identifier ] = fred_1_identifier ; 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
fred_1_identifier -> fred_1_identifier = 123456 ; 
while ( fred_1_identifier != 123456 ) 
{ 
if ( fred_1_identifier & 123456 ) 
fred_1_identifier -> fred_1_identifier ++ ; 
fred_1_identifier = fred_1_identifier >> 123456 ; 
} 
} 
return ( 123456 ) ; 
} 
void gingsing ( struct fred_1_identifier * fred_1_identifier , struct fred_1_identifier * fred_1_identifier ) 
{ 
char fred_1_identifier = 123456 ; 
fred_1_identifier = fred_1_identifier ; 
gingsing ( STRING ) ; 
while ( fred_1_identifier != 123456 ) 
{ 
struct fred_1_identifier * fred_1_identifier = fred_1_identifier ; 
char fred_1_identifier = 123456 ; 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
if ( fred_1_identifier ) 
fred_1_identifier = 123456 ; 
else 
gingsing ( STRING ) ; 
gingsing ( STRING ) ; 
while ( fred_1_identifier != 123456 ) 
{ 
if ( ( fred_1_identifier -> fred_1_identifier & fred_1_identifier -> fred_1_identifier ) == ( fred_1_identifier -> fred_1_identifier & fred_1_identifier -> fred_1_identifier ) ) 
{ 
if ( fred_1_identifier ) 
fred_1_identifier = 123456 ; 
else 
{ 
gingsing ( STRING ) ; 
gingsing ( STRING ) ; 
} 
gingsing ( fred_1_identifier ) ; 
gingsing ( fred_1_identifier -> fred_1_identifier ) ; 
} 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
} 
gingsing ( STRING ) ; 
gingsing ( STRING ) ; 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
} 
* fred_1_identifier = 123456 ; 
} 
void gingsing ( struct fred_1_identifier * fred_1_identifier ) 
{ 
gingsing ( STRING ) ; 
while ( fred_1_identifier != 123456 ) 
{ 
gingsing ( STRING , fred_1_identifier -> fred_1_identifier ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING , fred_1_identifier -> fred_1_identifier ) ; 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
} 
} 
void gingsing ( struct fred_1_identifier * fred_1_identifier ) 
{ 
while ( fred_1_identifier != 123456 ) 
{ 
unsigned long fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
unsigned fred_1_identifier = 123456 ; 
fred_1_identifier -> fred_1_identifier = 123456 ; 
while ( fred_1_identifier != 123456 ) 
{ 
if ( fred_1_identifier & 123456 ) 
fred_1_identifier -> fred_1_identifier += fred_1_identifier [ fred_1_identifier ] -> fred_1_identifier ; 
fred_1_identifier ++ ; 
fred_1_identifier = fred_1_identifier >> 123456 ; 
} 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
} 
} 
struct fred_1_identifier * gingsing ( struct fred_1_identifier * fred_1_identifier , unsigned long * fred_1_identifier ) 
{ 
struct fred_1_identifier * fred_1_identifier = 123456 ; 
unsigned fred_1_identifier = 123456 ; 
* fred_1_identifier = 123456 ; 
while ( fred_1_identifier != 123456 ) 
{ 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING , fred_1_identifier -> fred_1_identifier ) ; 
if ( fred_1_identifier -> fred_1_identifier < fred_1_identifier ) 
{ 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
fred_1_identifier = fred_1_identifier ; 
} 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
( * fred_1_identifier ) ++ ; 
} 
return ( fred_1_identifier ) ; 
} 
struct fred_1_identifier * gingsing ( struct fred_1_identifier * fred_1_identifier ) 
{ 
struct fred_1_identifier * fred_1_identifier = 123456 ; 
unsigned long fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
unsigned fred_1_identifier = 123456 ; 
while ( fred_1_identifier != 123456 ) 
{ 
if ( fred_1_identifier & 123456 ) 
gingsing ( & fred_1_identifier , fred_1_identifier [ fred_1_identifier ] -> fred_1_identifier , fred_1_identifier [ fred_1_identifier ] -> fred_1_identifier ) ; 
fred_1_identifier ++ ; 
fred_1_identifier = fred_1_identifier >> 123456 ; 
} 
return fred_1_identifier ; 
} 
void gingsing ( struct fred_1_identifier * * fred_1_identifier ) 
{ 
static unsigned fred_1_identifier [ 123456 * 123456 ] , 
fred_1_identifier , 
fred_1_identifier , 
fred_1_identifier ; 
struct fred_1_identifier * fred_1_identifier = * fred_1_identifier , 
* fred_1_identifier = 123456 , 
* fred_1_identifier = 123456 ; 
if ( fred_1_identifier == 123456 ) 
return ; 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
fred_1_identifier = 123456 ; 
gingsing ( fred_1_identifier , 123456 , sizeof ( fred_1_identifier ) ) ; 
while ( fred_1_identifier != 123456 ) 
{ 
unsigned long fred_1_identifier = fred_1_identifier -> fred_1_identifier , 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
fred_1_identifier = 123456 ; 
while ( fred_1_identifier != 123456 ) 
{ 
if ( fred_1_identifier & 123456 ) 
if ( fred_1_identifier & 123456 ) 
fred_1_identifier [ fred_1_identifier ] ++ ; 
else 
fred_1_identifier [ fred_1_identifier + 123456 ] ++ ; 
fred_1_identifier = fred_1_identifier >> 123456 ; 
fred_1_identifier = fred_1_identifier >> 123456 ; 
fred_1_identifier ++ ; 
} 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
} 
for ( fred_1_identifier = 123456 ; fred_1_identifier < 123456 * 123456 ; fred_1_identifier ++ ) 
{ 
if ( fred_1_identifier [ fred_1_identifier ] > 123456 ) 
gingsing ( STRING , 
fred_1_identifier < 123456 ? STRING : STRING , STRING + ( fred_1_identifier % 123456 ) , 
fred_1_identifier [ fred_1_identifier ] 
) ; 
if ( fred_1_identifier [ fred_1_identifier ] > fred_1_identifier ) 
{ 
fred_1_identifier = fred_1_identifier [ fred_1_identifier ] ; 
fred_1_identifier = fred_1_identifier ; 
} 
} 
if ( fred_1_identifier > 123456 ) 
{ 
gingsing ( & fred_1_identifier , 123456 << ( fred_1_identifier % 123456 ) , 
fred_1_identifier < 123456 ? 123456 : 123456 ) ; 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
fred_1_identifier = * fred_1_identifier ; 
while ( fred_1_identifier != 123456 ) 
{ 
struct fred_1_identifier * fred_1_identifier = fred_1_identifier ; 
fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
if ( gingsing ( fred_1_identifier , fred_1_identifier ) ) 
{ 
fred_1_identifier -> fred_1_identifier = fred_1_identifier -> fred_1_identifier & ~ fred_1_identifier -> fred_1_identifier ; 
if ( fred_1_identifier -> fred_1_identifier != 123456 ) 
{ 
fred_1_identifier -> fred_1_identifier = fred_1_identifier ; 
fred_1_identifier = fred_1_identifier ; 
} 
} 
else 
{ 
fred_1_identifier -> fred_1_identifier = fred_1_identifier -> fred_1_identifier ; 
fred_1_identifier -> fred_1_identifier = fred_1_identifier ; 
} 
} 
fred_1_identifier -> fred_1_identifier = fred_1_identifier ; 
gingsing ( & ( fred_1_identifier -> fred_1_identifier ) ) ; 
gingsing ( & ( fred_1_identifier -> fred_1_identifier ) ) ; 
* fred_1_identifier = fred_1_identifier ; 
} 
} 
void gingsing ( int fred_1_identifier , char * fred_1_identifier [ ] ) 
{ 
struct fred_1_identifier * fred_1_identifier , 
* fred_1_identifier , 
* fred_1_identifier , 
* fred_1_identifier ; 
unsigned long fred_1_identifier , 
fred_1_identifier , 
fred_1_identifier , 
fred_1_identifier , 
fred_1_identifier , 
fred_1_identifier ; 
unsigned fred_1_identifier , 
fred_1_identifier ; 
fred_1_identifier fred_1_identifier , 
fred_1_identifier , 
fred_1_identifier , 
fred_1_identifier , 
fred_1_identifier , 
fred_1_identifier , 
fred_1_identifier , 
fred_1_identifier ; 
* fred_1_identifier = 123456 ; 
gingsing ( fred_1_identifier ) ; 
switch ( gingsing ( fred_1_identifier ) ) 
; 
while ( ! ( ( ( & fred_1_identifier [ 123456 ] ) ) -> fred_1_identifier & 123456 ) ) 
{ 
gingsing ( ) ; 
fred_1_identifier = gingsing ( ) ; 
if ( * fred_1_identifier == 123456 ) 
continue ; 
gingsing ( STRING , fred_1_identifier ) ; 
if ( fred_1_identifier = fred_1_identifier , gingsing ( ) , * fred_1_identifier != 123456 ) 
gingsing ( ) ; 
fred_1_identifier = gingsing ( fred_1_identifier ) ; 
fred_1_identifier = gingsing ( ) ; 
fred_1_identifier = gingsing ( fred_1_identifier , fred_1_identifier , fred_1_identifier . fred_1_identifier , & fred_1_identifier ) ; 
fred_1_identifier = gingsing ( ) - fred_1_identifier ; 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
if ( fred_1_identifier . fred_1_identifier ) 
gingsing ( ) ; 
if ( fred_1_identifier . fred_1_identifier ) 
{ 
fred_1_identifier = gingsing ( ) ; 
fred_1_identifier = gingsing ( fred_1_identifier , fred_1_identifier , & fred_1_identifier ) ; 
fred_1_identifier = gingsing ( ) - fred_1_identifier ; 
if ( fred_1_identifier . fred_1_identifier && gingsing ( fred_1_identifier , & fred_1_identifier ) ) 
{ 
fred_1_identifier = gingsing ( ) ; 
gingsing ( fred_1_identifier , fred_1_identifier ) ; 
fred_1_identifier = gingsing ( ) - fred_1_identifier ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING , fred_1_identifier ) ; 
fred_1_identifier = gingsing ( fred_1_identifier ) ; 
fred_1_identifier = gingsing ( ) ; 
fred_1_identifier = gingsing ( fred_1_identifier , fred_1_identifier , 123456 , & fred_1_identifier ) ; 
fred_1_identifier = gingsing ( ) - fred_1_identifier ; 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
fred_1_identifier = gingsing ( ) ; 
fred_1_identifier = gingsing ( fred_1_identifier , fred_1_identifier , & fred_1_identifier ) ; 
fred_1_identifier = gingsing ( ) - fred_1_identifier ; 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
fred_1_identifier = gingsing ( fred_1_identifier , & fred_1_identifier ) ; 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( fred_1_identifier , fred_1_identifier , sizeof ( fred_1_identifier ) ) ; 
fred_1_identifier = gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
} 
else fred_1_identifier = fred_1_identifier ; 
} 
if ( fred_1_identifier . fred_1_identifier ) 
{ 
fred_1_identifier = gingsing ( ) ; 
gingsing ( & fred_1_identifier ) ; 
fred_1_identifier = gingsing ( ) - fred_1_identifier ; 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
} 
gingsing ( STRING ) ; 
gingsing ( fred_1_identifier ) ; 
gingsing ( STRING ) ; 
if ( fred_1_identifier . fred_1_identifier ) 
{ 
gingsing ( STRING , fred_1_identifier , fred_1_identifier == 123456 ? STRING : STRING ) ; 
if ( fred_1_identifier . fred_1_identifier ) 
{ 
gingsing ( STRING , fred_1_identifier , fred_1_identifier == 123456 ? STRING : STRING ) ; 
if ( fred_1_identifier . fred_1_identifier ) 
{ 
gingsing ( STRING , fred_1_identifier , fred_1_identifier == 123456 ? STRING : STRING ) ; 
gingsing ( STRING , fred_1_identifier , fred_1_identifier == 123456 ? STRING : STRING ) ; 
gingsing ( STRING , fred_1_identifier , fred_1_identifier == 123456 ? STRING : STRING ) ; 
gingsing ( STRING , fred_1_identifier , fred_1_identifier == 123456 ? STRING : STRING ) ; 
} 
} 
gingsing ( STRING ) ; 
gingsing ( STRING , ( ( double ) ( fred_1_identifier ) / ( double ) 0.411 ) ) ; 
if ( fred_1_identifier . fred_1_identifier ) 
{ 
gingsing ( STRING , ( ( double ) ( fred_1_identifier ) / ( double ) 0.411 ) ) ; 
if ( fred_1_identifier . fred_1_identifier ) 
{ 
gingsing ( STRING , ( ( double ) ( fred_1_identifier ) / ( double ) 0.411 ) ) ; 
gingsing ( STRING , ( ( double ) ( fred_1_identifier ) / ( double ) 0.411 ) ) ; 
gingsing ( STRING , ( ( double ) ( fred_1_identifier ) / ( double ) 0.411 ) ) ; 
} 
} 
else 
gingsing ( STRING ) ; 
if ( fred_1_identifier . fred_1_identifier ) 
gingsing ( STRING , fred_1_identifier ) ; 
gingsing ( STRING ) ; 
gingsing ( STRING , ( ( double ) ( gingsing ( ) - fred_1_identifier ) / ( double ) 0.411 ) ) ; 
} 
} 
} 
"

write["\n" gtb_version " processing '" gtb_main_file_name "' on " date_time "\n\n"]


this_grammar := grammar[translation_unit tilde_enabled] 


(* RNGLR bits *)
(*
this_nfa := nfa[this_grammar slr 1 nullable_reductions] 

write["\nStart DFA construction: total " CPU_time " CPU seconds elapsed\n\n"]
this_dfa := dfa[this_nfa]

lex_whitespace := "white_space" 

write["\nStart DFA write: total " CPU_time " CPU seconds elapsed\n\n"]

rnglr_recognise[this_dfa STRING]

write["\nTotal " CPU_time " CPU seconds elapsed\n\n"]
*)

(* AH bits *)

lex_whitespace := "white_space" 

terminalise_grammar[this_grammar terminal]

this_ah_table := ah_trie[this_grammar]

write["\nTotal " CPU_time " CPU seconds elapsed\n\n"]

ri_recognise[this_ah_table STRING]

write["\nTotal " CPU_time " CPU seconds elapsed\n\n"]

)





