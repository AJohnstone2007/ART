(* Generated by ebnf2bnf V1.00 from 'pascal.bnf'Oct 29 2000 15:02:33 *)

(* This is an RDP Pascal grammar originally reived from the ISO-Pascal
grammar  with som eextensions added to cope with Borland's Turbo-Pascal
dialect. *)

prog ::= 'program' ID prog_1 ';' block '.' .

prog_1 ::= # |
           '(' prog_2 ')' .

prog_2 ::= ID prog_2_tail .

prog_2_tail ::= # |
                prog_2_tail ',' ID .

block ::= block_3 'begin' statement block_4 'end' .

block_3 ::= # |
            block_3 declaration .

block_4 ::= # |
            block_4 ';' statement .

declaration ::= label_dcl_part |
                const_dcl_part |
                type_dcl_part |
                var_dcl_part |
                proc_dcl_part .

label_dcl_part ::= 'label' label_dcl_part_5 ';' .

label_dcl_part_5 ::= INTEGER label_dcl_part_5_tail .

label_dcl_part_5_tail ::= # |
                          label_dcl_part_5_tail ',' INTEGER .

const_dcl_part ::= 'const' const_dcl_part_6 .

const_dcl_part_6 ::= # |
                     const_dcl_part_6 ID '=' constant ';' .

constant ::= constant_7 constant_8 |
             'STRING' .

constant_7 ::= # |
               '+' |
               '-' .

constant_8 ::= unsigned_num |
               ID .

unsigned_num ::= INTEGER |
                 REAL .

type_dcl_part ::= 'type' type_dcl_part_9 .

type_dcl_part_9 ::= # |
                    type_dcl_part_9 ID '=' type ';' .

type ::= simple_type |
         type_10 struct_type |
         '^' ID .

type_10 ::= # |
            'packed' .

simple_type ::= '(' simple_type_11 ')' |
                constant simple_type_12 .

simple_type_11 ::= ID simple_type_11_tail .

simple_type_11_tail ::= # |
                        simple_type_11_tail ',' ID .

simple_type_12 ::= # |
                   '..' constant .

struct_type ::= 'array' '[' struct_type_13 ']' 'of' type |
                'record' field_list 'end' |
                'set' 'of' simple_type |
                'file' 'of' type .

struct_type_13 ::= simple_type struct_type_13_tail .

struct_type_13_tail ::= # |
                        struct_type_13_tail ',' simple_type .

field_list ::= fixed_part field_list_14 |
               variant_part .

field_list_14 ::= # |
                  ';' variant_part .

fixed_part ::= fixed_part_15 .

fixed_part_15 ::= fixed_part_16 fixed_part_15_tail .

fixed_part_15_tail ::= # |
                       fixed_part_15_tail ';' fixed_part_16 .

fixed_part_16 ::= # |
                  fixed_part_17 ':' type .

fixed_part_17 ::= ID fixed_part_17_tail .

fixed_part_17_tail ::= # |
                       fixed_part_17_tail ',' ID .

variant_part ::= 'case' ID variant_part_18 'of' variants .

variant_part_18 ::= # |
                    ':' ID .

variants ::= variants_19 .

variants_19 ::= variants_20 variants_19_tail .

variants_19_tail ::= # |
                     variants_19_tail ';' variants_20 .

variants_20 ::= # |
                variants_21 ':' '(' field_list ')' .

variants_21 ::= case_label variants_21_tail .

variants_21_tail ::= # |
                     variants_21_tail ',' case_label .

var_dcl_part ::= 'var' var_dcl_part_22 .

var_dcl_part_22 ::= # |
                    var_dcl_part_22 var_dcl_part_23 ':' type ';' .

var_dcl_part_23 ::= ID var_dcl_part_23_tail .

var_dcl_part_23_tail ::= # |
                         var_dcl_part_23_tail ',' ID .

proc_dcl_part ::= proc_dcl_part_24 ';' body ';' .

proc_dcl_part_24 ::= proc_heading |
                     func_heading .

proc_heading ::= 'procedure' ID formal_params .

func_heading ::= 'function' ID func_heading_25 .

func_heading_25 ::= # |
                    formal_params ':' ID .

body ::= block |
         'forward' .

formal_params ::= formal_params_26 .

formal_params_26 ::= # |
                     '(' formal_params_27 ')' .

formal_params_27 ::= formal_p_sect formal_params_27_tail .

formal_params_27_tail ::= # |
                          formal_params_27_tail ';' formal_p_sect .

formal_p_sect ::= param_group |
                  'var' param_group |
                  proc_heading |
                  func_heading .

param_group ::= param_group_28 ':' paramtype .

param_group_28 ::= ID param_group_28_tail .

param_group_28_tail ::= # |
                        param_group_28_tail ',' ID .

paramtype ::= ID |
              'array' '[' paramtype_29 ']' 'of' paramtype |
              'packed' 'array' '[' paramtype_30 ']' 'of' ID .

paramtype_29 ::= index_spec paramtype_29_tail .

paramtype_29_tail ::= # |
                      paramtype_29_tail ';' index_spec .

paramtype_30 ::= index_spec paramtype_30_tail .

paramtype_30_tail ::= # |
                      paramtype_30_tail ';' index_spec .

index_spec ::= ID '..' ID ':' ID .

statement ::= statement_31 .

statement_31 ::= # |
                 INTEGER ':' statement |
                 'begin' statement_32 'end' |
                 variable statement_33 |
                 'goto' INTEGER |
                 'if' expression 'then' statement statement_34 |
                 'case' expression 'of' statement_35 statement_36 statement_37 'end' |
                 'while' expression 'do' statement |
                 'repeat' statement_38 'until' expression |
                 'for' ID ':=' expression statement_39 expression 'do' statement |
                 'with' statement_40 'do' statement .

statement_32 ::= statement statement_32_tail .

statement_32_tail ::= # |
                      statement_32_tail ';' statement .

statement_33 ::= # |
                 ':=' expression .

statement_34 ::= # |
                 'else' statement .

statement_35 ::= case_list_elem statement_35_tail .

statement_35_tail ::= # |
                      statement_35_tail ';' case_list_elem .

statement_36 ::= # |
                 statement_41 statement .

statement_41 ::= 'else' |
                 'default' .

statement_37 ::= # |
                 statement_37 ';' .

statement_38 ::= statement statement_38_tail .

statement_38_tail ::= # |
                      statement_38_tail ';' statement .

statement_39 ::= 'to' |
                 'downto' .

statement_40 ::= variable statement_40_tail .

statement_40_tail ::= # |
                      statement_40_tail ',' variable .

case_list_elem ::= case_list_elem_42 .

case_list_elem_42 ::= # |
                      case_list_elem_43 ':' statement .

case_list_elem_43 ::= case_label case_list_elem_43_tail .

case_list_elem_43_tail ::= # |
                           case_list_elem_43_tail ',' case_label .

case_label ::= constant case_label_44 .

case_label_44 ::= # |
                  '..' constant .

expression ::= simple_expr expression_45 .

expression_45 ::= # |
                  expression_45 relational_op simple_expr .

relational_op ::= '=' |
                  '<' |
                  '>' |
                  '<=' |
                  '>=' |
                  '<>' |
                  'in' .

simple_expr ::= simple_expr_46 simple_expr_47 .

simple_expr_46 ::= term |
                   '+' term |
                   '-' term .

simple_expr_47 ::= # |
                   simple_expr_47 add_op term .

add_op ::= '+' |
           '-' |
           'or' .

term ::= factor term_48 .

term_48 ::= # |
            term_48 mult_op factor .

mult_op ::= '*' |
            '/' |
            'div' |
            'mod' |
            'and' .

factor ::= variable |
           unsigned_lit |
           '(' expression ')' |
           '[' factor_49 ']' |
           'not' factor .

factor_49 ::= # |
              factor_50 .

factor_50 ::= expression factor_51 factor_50_tail .

factor_50_tail ::= # |
                   factor_50_tail ',' expression factor_51 .

factor_51 ::= # |
              '..' expression .

unsigned_lit ::= unsigned_num |
                 'STRING' |
                 'nil' .

variable ::= ID variable_52 variable_53 .

variable_52 ::= # |
                actual_params .

variable_53 ::= # |
                variable_53 '[' variable_54 ']' |
                variable_53 '.' ID |
                variable_53 '^' .

variable_54 ::= expression variable_54_tail .

variable_54_tail ::= # |
                     variable_54_tail ',' expression .

actual_params ::= '(' actual_params_55 ')' .

actual_params_55 ::= expression actual_params_56 actual_params_55_tail .

actual_params_55_tail ::= # |
                          actual_params_55_tail ',' expression actual_params_56 .

actual_params_56 ::= # |
                     ':' expression actual_params_57 .

actual_params_57 ::= # |
                     ':' expression .

ID ::= 'ID' .

INTEGER ::= 'INTEGER' .

REAL ::= 'REAL' .


(
write["\n" gtb_version " processing '" gtb_main_file_name "' on " date_time "\n\n"]
)
