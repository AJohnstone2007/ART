(* Generated by ebnf2bnf V1.00 from 'verilog_hdl.bnf'Nov 28 2000 15:13:03 *)

always_construct ::= 'always' statement .

binary_base ::= '\'b' |
                '\'B' .

binary_digit ::= 'x' |
                 'X' |
                 'z' |
                 'Z' |
                 '0' |
                 '1' .

binary_number ::= binary_number_1 binary_base binary_digit binary_number_2 .

binary_number_1 ::= # |
                    size .

binary_number_2 ::= # |
                    binary_number_2 binary_number_3 .

binary_number_3 ::= # |
                    binary_digit .

binary_operator ::= '+' |
                    '-' |
                    '*' |
                    '/' |
                    '%' |
                    '==' |
                    '!=' |
                    '===' |
                    '!==' |
                    '&&' |
                    '||' |
                    '<' |
                    '<=' |
                    '>' |
                    '>=' |
                    '&' |
                    '|' |
                    '^' |
                    '^~' |
                    '~^' |
                    '>>' |
                    '<<' .

blocking_assignment ::= reg_lvalue '=' blocking_assignment_4 expression .

blocking_assignment_4 ::= # |
                          delay_or_event_control .

block_item_declaration ::= parameter_declaration |
                           reg_declaration |
                           integer_declaration |
                           real_declaration |
                           time_declaration |
                           realtime_declaration |
                           event_declaration .

case_item ::= expression case_item_5 ':' statement_or_null |
              'default' case_item_6 statement_or_null .

case_item_5 ::= # |
                case_item_5 ',' expression .

case_item_6 ::= # |
                ':' .

case_statement ::= 'case' '(' expression ')' case_item case_statement_7 'endcase' |
                   'casez' '(' expression ')' case_item case_statement_8 'endcase' |
                   'casex' '(' expression ')' case_item case_statement_9 'endcase' .

case_statement_7 ::= # |
                     case_statement_7 case_item .

case_statement_8 ::= # |
                     case_statement_8 case_item .

case_statement_9 ::= # |
                     case_statement_9 case_item .

charge_strength ::= '(' 'small' ')' |
                    '(' 'medium' ')' |
                    '(' 'large' ')' .

cmos_switchtype ::= 'cmos' |
                    'rcmos' .

cmos_switch_instance ::= cmos_switch_instance_10 '(' output_terminal ',' input_terminal ',' ncontrol_terminal ',' pcontrol_terminal ')' .

cmos_switch_instance_10 ::= # |
                            name_of_gate_instance .

combinational_body ::= 'table' combinational_entry combinational_body_11 'endtable' .

combinational_body_11 ::= # |
                          combinational_body_11 combinational_entry .

combinational_entry ::= level_input_list ':' output_symbol ';' .

comment ::= short_comment |
            long_comment .

comment_text ::= comment_text_12 .

comment_text_12 ::= # |
                    comment_text_12 Any_ASCII_character .

concatenation ::= '{' expression concatenation_13 '}' .

concatenation_13 ::= # |
                     concatenation_13 ',' expression .

conditional_statement ::= 'if' '(' expression ')' statement_or_null conditional_statement_14 .

conditional_statement_14 ::= # |
                             'else' statement_or_null .

constant_expression ::= constant_primary |
                        unary_operator constant_primary |
                        constant_expression binary_operator constant_expression |
                        constant_expression '?' constant_expression ':' constant_expression |
                        string .

constant_mintypmax_expression ::= constant_expression |
                                  constant_expression ':' constant_expression ':' constant_expression .

constant_primary ::= number |
                     parameter_identifier |
                     constant_concatenation |
                     constant_multiple_concatenation .

continuous_assign ::= 'assign' continuous_assign_15 continuous_assign_16 list_of_net_assignments ';' .

continuous_assign_15 ::= # |
                         drive_strength .

continuous_assign_16 ::= # |
                         delay3 .

controlled_timing_check_event ::= timing_check_event_control specify_terminal_descriptor controlled_timing_check_event_17 .

controlled_timing_check_event_17 ::= # |
                                     '&&&' timing_check_condition .

current_state ::= level_symbol .

data_source_expression ::= expression .

decimal_base ::= '\'d' |
                 '\'D' .

decimal_digit ::= '0' |
                  '1' |
                  '2' |
                  '3' |
                  '4' |
                  '5' |
                  '6' |
                  '7' |
                  '8' |
                  '9' |
                  '0' .

decimal_number ::= decimal_number_18 unsigned_number |
                   decimal_number_19 decimal_base unsigned_number .

decimal_number_18 ::= # |
                      sign .

decimal_number_19 ::= # |
                      size .

delay2 ::= '#' delay_value |
           '#' '(' delay_value delay2_20 ')' .

delay2_20 ::= # |
              ',' delay_value .

delay3 ::= '#' delay_value |
           '#' '(' delay_value delay3_21 ')' .

delay3_21 ::= # |
              ',' delay_value delay3_22 .

delay3_22 ::= # |
              ',' delay_value .

delay_control ::= '#' delay_value |
                  '#' '(' mintypmax_expression ')' .

delay_or_event_control ::= delay_control |
                           event_control |
                           'repeat' '(' expression ')' event_control .

delay_value ::= unsigned_number |
                parameter_identifier |
                constant_mintypmax_expression .

description ::= module_declaration |
                udp_declaration .

disable_statement ::= 'disable' task_identifier ';' |
                      'disable' block_identifier ';' .

drive_strength ::= '(' strength0 ',' strength1 ')' |
                   '(' strength1 ',' strength0 ')' |
                   '(' strength0 ',' 'highz1' ')' |
                   '(' strength1 ',' 'highz0' ')' |
                   '(' 'highz1' ',' strength0 ')' |
                   '(' 'highz0' ',' strength1 ')' .

edge_control_specifier ::= 'edge' '[' edge_descriptor edge_control_specifier_23 ']' .

edge_control_specifier_23 ::= # |
                              ',' edge_descriptor .

edge_descriptor ::= '01' |
                    '10' |
                    'Ox' |
                    'x1' |
                    '1x' |
                    'xO' .

edge_identifier ::= 'posedge' |
                    'negedge' .

edge_indicator ::= '(' level_symbol level_symbol ')' |
                   edge_symbol .

edge_input_list ::= edge_input_list_24 edge_indicator edge_input_list_25 .

edge_input_list_24 ::= # |
                       edge_input_list_24 level_symbol .

edge_input_list_25 ::= # |
                       edge_input_list_25 level_symbol .

edge_sensitive_path_declaration ::= parallel_edge_sensitive_path_description '=' path_delay_value |
                                    full_edge_sensitive_path_description '=' path_delay_value .

edge_symbol ::= 'r' |
                'R' |
                'f' |
                'F' |
                'p' |
                'P' |
                'n' |
                'N' |
                '*' .

enable_gatetype ::= 'bufif0' |
                    'bufif1' |
                    'notif0' |
                    'notif1' .

enable_gate_instance ::= enable_gate_instance_26 '(' output_terminal ',' input_terminal ',' enable_terminal ')' .

enable_gate_instance_26 ::= # |
                            name_of_gate_instance .

enable_terminal ::= scalar_expression .

escaped_identifier ::= '\\' escaped_identifier_27 white_space .

escaped_identifier_27 ::= # |
                          escaped_identifier_27 Any_ASCII_character_except_white_space .

event_control ::= '@' event_identifier |
                  '@' '(' event_expression ')' .

event_declaration ::= 'event' event_identifier event_declaration_28 ';' .

event_declaration_28 ::= # |
                         event_declaration_28 ',' event_identifier .

event_expression ::= expression |
                     event_identifier |
                     'posedge' expression |
                     'negedge' expression |
                     event_expression 'or' event_expression .

event_trigger ::= '->' event_identifier ';' .

expression ::= primary |
               unary_operator primary |
               expression binary_operator expression |
               expression '?' expression ':' expression |
               string .

full_edge_sensitive_path_description ::= '(' full_edge_sensitive_path_description_29 list_of_path_inputs '*>' list_of_path_outputs full_edge_sensitive_path_description_30 ':' data_source_expression ')' ')' .

full_edge_sensitive_path_description_29 ::= # |
                                            edge_identifier .

full_edge_sensitive_path_description_30 ::= # |
                                            polarity_operator .

full_path_description ::= '(' list_of_path_inputs full_path_description_31 '*>' list_of_path_outputs ')' .

full_path_description_31 ::= # |
                             polarity_operator .

function_call ::= function_identifier '(' expression function_call_32 ')' |
                  name_of_system_function function_call_33 .

function_call_32 ::= # |
                     function_call_32 ',' expression .

function_call_33 ::= # |
                     '(' expression function_call_34 ')' .

function_call_34 ::= # |
                     function_call_34 ',' expression .

function_declaration ::= 'function' function_declaration_35 function_identifier ';' function_item_declaration function_declaration_36 statement 'endfunction' .

function_declaration_35 ::= # |
                            range_or_type .

function_declaration_36 ::= # |
                            function_declaration_36 function_item_declaration .

function_item_declaration ::= block_item_declaration |
                              input_declaration .

gate_instantiation ::= n_input_gatetype gate_instantiation_37 gate_instantiation_38 n_input_gate_instance gate_instantiation_39 ';' |
                       n_output_gatetype gate_instantiation_40 gate_instantiation_41 n_output_gate_instance gate_instantiation_42 ';' |
                       enable_gatetype gate_instantiation_43 gate_instantiation_44 enable_gate_instance gate_instantiation_45 ';' |
                       mos_switchtype gate_instantiation_46 mos_switch_instance gate_instantiation_47 ';' |
                       pass_switchtype pass_switch_instance gate_instantiation_48 ';' |
                       pass_en_switchtype gate_instantiation_49 pass_enable_switch_instance gate_instantiation_50 ';' |
                       cmos_switchtype gate_instantiation_51 cmos_switch_instance gate_instantiation_52 ';' |
                       'pullup' gate_instantiation_53 pull_gate_instance gate_instantiation_54 ';' |
                       'pulldown' gate_instantiation_55 pull_gate_instance gate_instantiation_56 ';' .

gate_instantiation_37 ::= # |
                          drive_strength .

gate_instantiation_38 ::= # |
                          delay2 .

gate_instantiation_39 ::= # |
                          gate_instantiation_39 ',' n_input_gate_instance .

gate_instantiation_40 ::= # |
                          drive_strength .

gate_instantiation_41 ::= # |
                          delay2 .

gate_instantiation_42 ::= # |
                          gate_instantiation_42 ',' n_output_gate_instance .

gate_instantiation_43 ::= # |
                          drive_strength .

gate_instantiation_44 ::= # |
                          delay3 .

gate_instantiation_45 ::= # |
                          gate_instantiation_45 ',' enable_gate_instance .

gate_instantiation_46 ::= # |
                          delay3 .

gate_instantiation_47 ::= # |
                          gate_instantiation_47 ',' mos_switch_instance .

gate_instantiation_48 ::= # |
                          gate_instantiation_48 ',' pass_switch_instance .

gate_instantiation_49 ::= # |
                          delay3 .

gate_instantiation_50 ::= # |
                          gate_instantiation_50 ',' pass_enable_switch_instance .

gate_instantiation_51 ::= # |
                          delay3 .

gate_instantiation_52 ::= # |
                          gate_instantiation_52 ',' cmos_switch_instance .

gate_instantiation_53 ::= # |
                          pullup_strength .

gate_instantiation_54 ::= # |
                          gate_instantiation_54 ',' pull_gate_instance .

gate_instantiation_55 ::= # |
                          pulldown_strength .

gate_instantiation_56 ::= # |
                          gate_instantiation_56 ',' pull_gate_instance .

hex_base ::= '\'h' |
             '\'H' .

hex_digit ::= 'x' |
              'X' |
              'z' |
              'Z' |
              '0' |
              '1' |
              '2' |
              '3' |
              '4' |
              '5' |
              '6' |
              '7' |
              '8' |
              '9' |
              'a' |
              'b' |
              'c' |
              'd' |
              'e' |
              'f' |
              'A' |
              'B' |
              'C' |
              'D' |
              'E' |
              'F' .

hex_number ::= hex_number_57 hex_base hex_digit hex_number_58 .

hex_number_57 ::= # |
                  size .

hex_number_58 ::= # |
                  hex_number_58 hex_number_59 .

hex_number_59 ::= # |
                  hex_digit .

identifier ::= IDENTIFIER identifier_60 .

identifier_60 ::= # |
                  identifier_61 .

identifier_61 ::= # |
                  identifier_61 '.' IDENTIFIER .

IDENTIFIER ::= simple_identifier |
               escaped_identifier .

initial_construct ::= 'initial' statement .

init_val ::= '1\'b0' |
             '1\'b1' |
             '1\'bx' |
             '1\'bX' |
             '1\'B0' |
             '1\'B1' |
             '1\'Bx' |
             '1\'BX' |
             '1' |
             '0' .

inout_declaration ::= 'inout' inout_declaration_62 list_of_port_identifiers ';' .

inout_declaration_62 ::= # |
                         range .

inout_terminal ::= terminal_identifier |
                   terminal_identifier '[' constant_expression ']' .

input_declaration ::= 'input' input_declaration_63 list_of_port_identifiers ';' .

input_declaration_63 ::= # |
                         range .

input_identifier ::= input_port_identifier |
                     inout_port_identifier .

input_terminal ::= scalar_expression .

integer_declaration ::= 'integer' list_of_register_identifiers ';' .

level_input_list ::= level_symbol level_input_list_64 .

level_input_list_64 ::= # |
                        level_input_list_64 level_symbol .

level_symbol ::= '0' |
                 '1' |
                 'x' |
                 'X' |
                 '?' |
                 'b' |
                 'B' .

limit_value ::= constant_mintypmax_expression .

list_of_module_connections ::= ordered_port_connection list_of_module_connections_65 |
                               named_port_connection list_of_module_connections_66 .

list_of_module_connections_65 ::= # |
                                  list_of_module_connections_65 ',' ordered_port_connection .

list_of_module_connections_66 ::= # |
                                  list_of_module_connections_66 ',' named_port_connection .

list_of_net_assignments ::= net_assignment list_of_net_assignments_67 .

list_of_net_assignments_67 ::= # |
                               list_of_net_assignments_67 ',' net_assignment .

list_of_net_decl_assignments ::= net_decl_assignment list_of_net_decl_assignments_68 .

list_of_net_decl_assignments_68 ::= # |
                                    list_of_net_decl_assignments_68 ',' net_decl_assignment .

list_of_net_identifiers ::= net_identifier list_of_net_identifiers_69 .

list_of_net_identifiers_69 ::= # |
                               list_of_net_identifiers_69 ',' net_identifier .

list_of_param_assignments ::= param_assignment list_of_param_assignments_70 .

list_of_param_assignments_70 ::= # |
                                 list_of_param_assignments_70 ',' param_assignment .

list_of_path_delay_expressions ::= t_path_delay_expression |
                                   trise_path_delay_expression ',' tfall_path_delay_expression |
                                   trise_path_delay_expression ',' tfall_path_delay_expression ',' tz_path_delay_expression |
                                   t01_path_delay_expression ',' t10_path_delay_expression ',' t0z_path_delay_expression ',' tz1_path_delay_expression ',' t1z_path_delay_expression ',' tz0_path_delay_expression |
                                   t01_path_delay_expression ',' t10_path_delay_expression ',' t0z_path_delay_expression ',' tz1_path_delay_expression ',' t1z_path_delay_expression ',' tz0_path_delay_expression ',' t0x_path_delay_expression ',' tx1_path_delay_expression ',' t1x_path_delay_expression ',' tx0_path_delay_expression ',' txz_path_delay_expression ',' tzx_path_delay_expression .

list_of_path_inputs ::= specify_input_terminal_descriptor list_of_path_inputs_71 .

list_of_path_inputs_71 ::= # |
                           list_of_path_inputs_71 ',' specify_input_terminal_descriptor .

list_of_path_outputs ::= specify_output_terminal_descriptor list_of_path_outputs_72 .

list_of_path_outputs_72 ::= # |
                            list_of_path_outputs_72 ',' specify_output_terminal_descriptor .

list_of_ports ::= '(' port list_of_ports_73 '}' .

list_of_ports_73 ::= # |
                     list_of_ports_73 ',' port .

list_of_port_identifiers ::= port_identifier list_of_port_identifiers_74 .

list_of_port_identifiers_74 ::= # |
                                list_of_port_identifiers_74 ',' port_identifier .

list_of_real_identifiers ::= real_identifier list_of_real_identifiers_75 .

list_of_real_identifiers_75 ::= # |
                                list_of_real_identifiers_75 ',' real_identifier .

list_of_register_identifiers ::= register_name list_of_register_identifiers_76 .

list_of_register_identifiers_76 ::= # |
                                    list_of_register_identifiers_76 ',' register_name .

list_of_specparam_assignments ::= specparam_assignment list_of_specparam_assignments_77 .

list_of_specparam_assignments_77 ::= # |
                                     list_of_specparam_assignments_77 ',' specparam_assignment .

long_comment ::= '/*' comment_text '*/' .

loop_statement ::= 'forever' statement |
                   'repeat' '(' expression ')' statement |
                   'while' '(' expression ')' statement |
                   'for' '(' reg_assignment ';' expression ';' reg_assignment ')' statement .

mintypmax_expression ::= expression |
                         expression ':' expression ':' expression .

module_declaration ::= module_keyword module_identifier module_declaration_78 ';' module_declaration_79 'endmodule' .

module_declaration_78 ::= # |
                          list_of_ports .

module_declaration_79 ::= # |
                          module_declaration_79 module_item .

module_instance ::= name_of_instance '(' module_instance_80 ')' .

module_instance_80 ::= # |
                       list_of_module_connections .

module_instantiation ::= module_identifier module_instantiation_81 module_instance module_instantiation_82 ';' .

module_instantiation_81 ::= # |
                            parameter_value_assignment .

module_instantiation_82 ::= # |
                            module_instantiation_82 ',' module_instance .

module_item ::= module_item_declaration |
                parameter_override |
                continuous_assign |
                gate_instantiation |
                udp_instantiation |
                module_instantiation |
                specify_block |
                initial_construct |
                always_construct .

module_item_declaration ::= parameter_declaration |
                            input_declaration |
                            output_declaration |
                            inout_declaration |
                            net_declaration |
                            reg_declaration |
                            integer_declaration |
                            real_declaration |
                            time_declaration |
                            realtime_declaration |
                            event_declaration |
                            task_declaration |
                            function_declaration .

module_keyword ::= 'module' |
                   'macromodule' .

mos_switchtype ::= 'nmos' |
                   'pmos' |
                   'rnmos' |
                   'rpmos' .

mos_switch_instance ::= mos_switch_instance_83 '(' output_terminal ',' input_terminal ',' enable_terminal ')' .

mos_switch_instance_83 ::= # |
                           name_of_gate_instance .

multiple_concatenation ::= '{' expression '{' expression multiple_concatenation_84 '}' '}' .

multiple_concatenation_84 ::= # |
                              multiple_concatenation_84 ',' expression .

named_port_connection ::= '.' port_identifier '(' named_port_connection_85 ')' .

named_port_connection_85 ::= # |
                             expression .

name_of_gate_instance ::= gate_instance_identifier name_of_gate_instance_86 .

name_of_gate_instance_86 ::= # |
                             range .

name_of_instance ::= module_instance_identifier name_of_instance_87 .

name_of_instance_87 ::= # |
                        range .

name_of_system_function ::= '$' identifier .

name_of_udp_instance ::= udp_instance_identifier name_of_udp_instance_88 .

name_of_udp_instance_88 ::= # |
                            range .

ncontrol_terminal ::= scalar_expression .

net_assignment ::= net_lvalue '=' expression .

net_declaration ::= net_type net_declaration_89 net_declaration_90 net_declaration_91 list_of_net_identifiers ';' |
                    'trireg' net_declaration_92 net_declaration_93 net_declaration_94 net_declaration_95 list_of_net_identifiers ';' |
                    net_type net_declaration_96 net_declaration_97 net_declaration_98 net_declaration_99 list_of_net_decl_assignments ';' .

net_declaration_89 ::= # |
                       'vectored' |
                       'scalared' .

net_declaration_90 ::= # |
                       range .

net_declaration_91 ::= # |
                       delay3 .

net_declaration_92 ::= # |
                       'vectored' |
                       'scalared' .

net_declaration_93 ::= # |
                       charge_strength .

net_declaration_94 ::= # |
                       range .

net_declaration_95 ::= # |
                       delay3 .

net_declaration_96 ::= # |
                       'vectored' |
                       'scalared' .

net_declaration_97 ::= # |
                       drive_strength .

net_declaration_98 ::= # |
                       range .

net_declaration_99 ::= # |
                       delay3 .

net_decl_assignment ::= net_identifier '=' expression .

net_lvalue ::= net_identifier |
               net_identifier '[' expression ']' |
               net_identifier '[' msb_constant_expression ':' lsb_constant_expression ']' |
               net_concatenation .

net_type ::= 'wire' |
             'tri' |
             'tri1' |
             'supply0' |
             'wand' |
             'triand' |
             'tri0' |
             'supply1' |
             'wor' |
             'trior' .

next_state ::= output_symbol |
               '-' .

non_blocking_assignment ::= reg_lvalue '<=' non_blocking_assignment_100 expression .

non_blocking_assignment_100 ::= # |
                                delay_or_event_control .

notify_register ::= register_identifier .

number ::= decimal_number |
           octal_number |
           binary_number |
           hex_number |
           real_number .

n_input_gatetype ::= 'and' |
                     'nand' |
                     'or' |
                     'nor' |
                     'xor' |
                     'xnor' .

n_input_gate_instance ::= n_input_gate_instance_101 '(' output_terminal ',' input_terminal n_input_gate_instance_102 ')' .

n_input_gate_instance_101 ::= # |
                              name_of_gate_instance .

n_input_gate_instance_102 ::= # |
                              n_input_gate_instance_102 ',' input_terminal .

n_output_gatetype ::= 'buf' |
                      'not' .

n_output_gate_instance ::= n_output_gate_instance_103 '(' output_terminal n_output_gate_instance_104 ',' input_terminal ')' .

n_output_gate_instance_103 ::= # |
                               name_of_gate_instance .

n_output_gate_instance_104 ::= # |
                               n_output_gate_instance_104 ',' output_terminal .

octal_base ::= '\'o' |
               '\'O' .

octal_digit ::= 'x' |
                'X' |
                'z' |
                'Z' |
                '0' |
                '1' |
                '2' |
                '3' |
                '4' |
                '5' |
                '6' |
                '7' .

octal_number ::= octal_number_105 octal_base octal_digit octal_number_106 .

octal_number_105 ::= # |
                     size .

octal_number_106 ::= # |
                     octal_number_106 '_' |
                     octal_number_106 octal_digit .

ordered_port_connection ::= ordered_port_connection_107 .

ordered_port_connection_107 ::= # |
                                expression .

output_declaration ::= 'output' output_declaration_108 list_of_port_identifiers ';' .

output_declaration_108 ::= # |
                           range .

output_identifier ::= output_port_identifier |
                      inout_port_identifier .

output_symbol ::= '0' |
                  '1' |
                  'x' |
                  'X' .

output_terminal ::= terminal_identifier |
                    terminal_identifier '[' constant_expression ']' .

parallel_edge_sensitive_path_description ::= '(' parallel_edge_sensitive_path_description_109 specify_input_terminal_descriptor '=>' specify_output_terminal_descriptor parallel_edge_sensitive_path_description_110 ':' data_source_expression ')' ')' .

parallel_edge_sensitive_path_description_109 ::= # |
                                                 edge_identifier .

parallel_edge_sensitive_path_description_110 ::= # |
                                                 polarity_operator .

parallel_path_description ::= '(' specify_input_terminal_descriptor parallel_path_description_111 '=>' specify_output_terminal_descriptor ')' .

parallel_path_description_111 ::= # |
                                  polarity_operator .

parameter_declaration ::= 'parameter' list_of_param_assignments ';' .

parameter_override ::= 'defparam' list_of_param_assignments ';' .

parameter_value_assignment ::= '#' '(' expression parameter_value_assignment_112 ')' .

parameter_value_assignment_112 ::= # |
                                   parameter_value_assignment_112 ',' expression .

param_assignment ::= parameter_identifier '=' constant_expression .

par_block ::= 'fork' par_block_113 par_block_114 'join' .

par_block_113 ::= # |
                  ':' block_identifier par_block_115 .

par_block_115 ::= # |
                  par_block_115 block_item_declaration .

par_block_114 ::= # |
                  par_block_114 statement .

pass_enable_switch_instance ::= pass_enable_switch_instance_116 '(' inout_terminal ',' inout_terminal ',' enable_terminal ')' .

pass_enable_switch_instance_116 ::= # |
                                    name_of_gate_instance .

pass_en_switchtype ::= 'tranif0' |
                       'tranif1' |
                       'rtranif1' |
                       'rtranif0' .

pass_switchtype ::= 'tran' |
                    'rtran' .

pass_switch_instance ::= pass_switch_instance_117 '(' inout_terminal ',' inout_terminal ')' .

pass_switch_instance_117 ::= # |
                             name_of_gate_instance .

path_declaration ::= simple_path_declaration ';' |
                     edge_sensitive_path_declaration ';' |
                     state_dependent_path_declaration ';' .

path_delay_expression ::= constant_mintypmax_expression .

path_delay_value ::= list_of_path_delay_expressions |
                     '(' list_of_path_delay_expressions ')' .

pcontrol_terminal ::= scalar_expression .

polarity_operator ::= '+' |
                      '-' .

port ::= port_118 |
         '.' port_identifier '(' port_119 ')' .

port_118 ::= # |
             port_expression .

port_119 ::= # |
             port_expression .

port_expression ::= port_reference |
                    '{' port_reference port_expression_120 '}' .

port_expression_120 ::= # |
                        port_expression_120 ',' port_reference .

port_reference ::= port_identifier |
                   port_identifier '[' constant_expression ']' |
                   port_identifier '[' msb_constant_expression ':' lsb_constant_expression ']' .

primary ::= number |
            identifier |
            identifier '[' expression ']' |
            identifier '[' msb_constant_expression ':' lsb_constant_expression ']' |
            concatenation |
            multiple_concatenation |
            function_call |
            '(' mintypmax_expression ')' .

procedural_continuous_assignments ::= 'assign' reg_assignment ';' |
                                      'deassign' reg_lvalue ';' |
                                      'force' reg_assignment ';' |
                                      'force' net_assignment ';' |
                                      'release' reg_lvalue ';' |
                                      'release' net_lvalue ';' .

procedural_timing_control_statement ::= delay_or_event_control statement_or_null .

pulldown_strength ::= '(' strength0 ',' strength1 ')' |
                      '(' strength1 ',' strength0 ')' |
                      '(' strength0 ')' .

pullup_strength ::= '(' strength0 ',' strength1 ')' |
                    '(' strength1 ',' strength0 ')' |
                    '(' strength1 ')' .

pull_gate_instance ::= pull_gate_instance_121 '(' output_terminal ')' .

pull_gate_instance_121 ::= # |
                           name_of_gate_instance .

pulse_control_specparam ::= 'PATHPULSE$' '=' '(' reject_limit_value pulse_control_specparam_122 ')' ';' |
                            'PATHPULSE$' specify_input_terminal_descriptor '$' specify_output_terminal_descriptor '=' '(' reject_limit_value pulse_control_specparam_123 ')' ';' .

pulse_control_specparam_122 ::= # |
                                ',' error_limit_value .

pulse_control_specparam_123 ::= # |
                                ',' error_limit_value .

range ::= '[' msb_constant_expression ':' lsb_constant_expression ']' .

range_or_type ::= range |
                  'integer' |
                  'real' |
                  'realtime' |
                  'time' .

realtime_declaration ::= 'realtime' list_of_real_identifiers ';' .

real_declaration ::= 'real' list_of_real_identifiers ';' .

real_number ::= real_number_124 unsigned_number '.' unsigned_number |
                real_number_125 unsigned_number real_number_126 'e' real_number_127 unsigned_number |
                real_number_128 unsigned_number real_number_129 'E' real_number_130 unsigned_number .

real_number_124 ::= # |
                    sign .

real_number_125 ::= # |
                    sign .

real_number_126 ::= # |
                    '.' unsigned_number .

real_number_127 ::= # |
                    sign .

real_number_128 ::= # |
                    sign .

real_number_129 ::= # |
                    '.' unsigned_number .

real_number_130 ::= # |
                    sign .

register_name ::= register_identifier |
                  memory_identifier '[' upper_limit_constant_expression ':' lower_limit_constant_expression ']' .

reg_assignment ::= reg_lvalue '=' expression .

reg_declaration ::= 'reg' reg_declaration_131 list_of_register_identifiers ';' .

reg_declaration_131 ::= # |
                        range .

reg_lvalue ::= reg_identifier |
               reg_identifier '[' expression ']' |
               reg_identifier '[' msb_constant_expression ':' lsb_constant_expression ']' |
               reg_concatenation .

scalar_constant ::= '1\'b0' |
                    '1\'b1' |
                    '1\'B0' |
                    '1\'B1' |
                    '\'b0' |
                    '\'b1' |
                    '\'B0' |
                    '\'B1' |
                    '1' |
                    '0' .

scalar_timing_check_condition ::= expression |
                                  '~' expression |
                                  expression '==' scalar_constant |
                                  expression '===' scalar_constant |
                                  expression '!=' scalar_constant |
                                  expression '!==' scalar_constant .

sequential_body ::= sequential_body_132 'table' sequential_entry sequential_body_133 'endtable' .

sequential_body_132 ::= # |
                        udp_initial_statement .

sequential_body_133 ::= # |
                        sequential_body_133 sequential_entry .

sequential_entry ::= seq_input_list ':' current_state ':' next_state ';' .

seq_block ::= 'begin' seq_block_134 seq_block_135 'end' .

seq_block_134 ::= # |
                  ':' block_identifier seq_block_136 .

seq_block_136 ::= # |
                  seq_block_136 block_item_declaration .

seq_block_135 ::= # |
                  seq_block_135 statement .

seq_input_list ::= level_input_list |
                   edge_input_list .

short_comment ::= '//' comment_text newline .

sign ::= '+' |
         '-' .

simple_identifier ::= simple_identifier_137 simple_identifier_138 .

simple_identifier_137 ::= # |
                          'LETTER' .

simple_identifier_138 ::= # |
                          'LETTER_$' .

simple_path_declaration ::= parallel_path_description '=' path_delay_value |
                            full_path_description '=' path_delay_value .

size ::= unsigned_number .

source_text ::= source_text_139 .

source_text_139 ::= # |
                    source_text_139 description .

specify_block ::= 'specify' specify_block_140 'endspecify' .

specify_block_140 ::= # |
                      specify_item .

specify_input_terminal_descriptor ::= input_identifier |
                                      input_identifier '[' constant_expression ']' |
                                      input_identifier '[' msb_constant_expression ':' lsb_constant_expression ']' .

specify_item ::= specparam_declaration |
                 path_declaration |
                 system_timing_check .

specify_output_terminal_descriptor ::= output_identifier |
                                       output_identifier '[' constant_expression ']' |
                                       output_identifier '[' msb_constant_expression ':' lsb_constant_expression ']' .

specify_terminal_descriptor ::= specify_input_terminal_descriptor |
                                specify_output_terminal_descriptor .

specparam_assignment ::= specparam_identifier '=' constant_expression |
                         pulse_control_specparam .

specparam_declaration ::= 'specparam' list_of_specparam_assignments ';' .

statement ::= blocking_assignment ';' |
              non_blocking_assignment ';' |
              procedural_continuous_assignments ';' |
              procedural_timing_control_statement |
              conditional_statement |
              case_statement |
              loop_statement |
              wait_statement |
              disable_statement |
              event_trigger |
              seq_block |
              par_block |
              task_enable |
              system_task_enable .

statement_or_null ::= statement |
                      ';' .

state_dependent_path_declaration ::= 'if' '(' conditional_expression ')' simple_path_declaration |
                                     'if' '(' conditional_expression ')' edge_sensitive_path_declaration |
                                     'ifnone' simple_path_declaration .

strength0 ::= 'supply0' |
              'strong0' |
              'pull0' |
              'weak0' .

strength1 ::= 'supply1' |
              'strong1' |
              'pull1' |
              'weak1' .

string ::= '"' Any_ASCII_Characters_except_new_line '"' .

system_task_enable ::= system_task_name system_task_enable_141 ';' .

system_task_enable_141 ::= # |
                           '(' expression system_task_enable_142 ')' .

system_task_enable_142 ::= # |
                           system_task_enable_142 ',' expression .

system_task_name ::= '$' identifier .

system_timing_check ::= '$setup' '(' timing_check_event ',' timing_check_event ',' timing_check_limit system_timing_check_143 ')' ';' |
                        '$hold' '(' timing_check_event ',' timing_check_event ',' timing_check_limit system_timing_check_144 ')' ';' |
                        '$period' '(' controlled_timing_check_event ',' timing_check_limit system_timing_check_145 ')' ';' |
                        '$width' '(' controlled_timing_check_event ',' timing_check_limit ',' constant_expression system_timing_check_146 ')' ';' |
                        '$skew' '(' timing_check_event ',' timing_check_event ',' timing_check_limit system_timing_check_147 ')' ';' |
                        '$recovery' '(' controlled_timing_check_event ',' timing_check_event ',' timing_check_limit system_timing_check_148 ')' ';' |
                        '$setuphold' '(' timing_check_event ',' timing_check_event ',' timing_check_limit ',' timing_check_limit system_timing_check_149 ')' ';' .

system_timing_check_143 ::= # |
                            ',' notify_register .

system_timing_check_144 ::= # |
                            ',' notify_register .

system_timing_check_145 ::= # |
                            ',' notify_register .

system_timing_check_146 ::= # |
                            ',' notify_register .

system_timing_check_147 ::= # |
                            ',' notify_register .

system_timing_check_148 ::= # |
                            ',' notify_register .

system_timing_check_149 ::= # |
                            ',' notify_register .

task_argument_declaration ::= block_item_declaration |
                              output_declaration |
                              inout_declaration .

task_declaration ::= 'task' task_identifier ';' task_declaration_150 statement_or_null 'endtask' .

task_declaration_150 ::= # |
                         task_declaration_150 task_item_declaration .

task_enable ::= task_identifier task_enable_151 ';' .

task_enable_151 ::= # |
                    '(' expression task_enable_152 ')' .

task_enable_152 ::= # |
                    task_enable_152 ',' expression .

time_declaration ::= 'time' list_of_register_identifiers ';' .

timing_check_condition ::= scalar_timing_check_condition |
                           '(' scalar_timing_check_condition ')' .

timing_check_event ::= timing_check_event_153 specify_terminal_descriptor timing_check_event_154 .

timing_check_event_153 ::= # |
                           timing_check_event_control .

timing_check_event_154 ::= # |
                           '&&&' timing_check_condition .

timing_check_event_control ::= 'posedge' |
                               'negedge' |
                               edge_control_specifier .

timing_check_limit ::= expression .

udp_body ::= combinational_body |
             sequential_body .

udp_declaration ::= 'primitive' udp_identifier '(' udp_port_list ')' ';' udp_port_declaration udp_declaration_155 udp_body 'endprimitive' .

udp_declaration_155 ::= # |
                        udp_declaration_155 udp_port_declaration .

udp_initial_statement ::= 'initial' udp_output_port_identifier '=' init_val ';' .

udp_instance ::= udp_instance_156 '(' output_port_connection ',' input_port_connection udp_instance_157 ')' .

udp_instance_156 ::= # |
                     name_of_udp_instance .

udp_instance_157 ::= # |
                     udp_instance_157 ',' input_port_connection .

udp_instantiation ::= udp_identifier udp_instantiation_158 udp_instantiation_159 udp_instance udp_instantiation_160 ';' .

udp_instantiation_158 ::= # |
                          drive_strength .

udp_instantiation_159 ::= # |
                          delay2 .

udp_instantiation_160 ::= # |
                          udp_instantiation_160 ',' udp_instance .

udp_port_declaration ::= output_declaration |
                         input_declaration |
                         reg_declaration .

udp_port_list ::= output_port_identifier ',' input_port_identifier udp_port_list_161 .

udp_port_list_161 ::= # |
                      udp_port_list_161 ',' input_port_identifier .

unary_operator ::= '+' |
                   '-' |
                   '!' |
                   '~' |
                   '&' |
                   '~&' |
                   '|' |
                   '~|' |
                   '^' |
                   '~^' |
                   '^~' .

unsigned_number ::= decimal_digit unsigned_number_162 .

unsigned_number_162 ::= # |
                        unsigned_number_162 unsigned_number_163 .

unsigned_number_163 ::= # |
                        decimal_digit .

wait_statement ::= 'wait' '(' expression ')' statement_or_null .

white_space ::= space |
                tab |
                newline .

Any_ASCII_character ::= 'ANY_ASCII_CHARACTER' .

parameter_identifier ::= 'PARAMETER_IDENTIFIER' .

constant_concatenation ::= 'CONSTANT_CONCATENATION' .

constant_multiple_concatenation ::= 'CONSTANT_MULTIPLE_CONCATENATION' .

task_identifier ::= 'TASK_IDENTIFIER' .

block_identifier ::= 'BLOCK_IDENTIFIER' .

scalar_expression ::= 'SCALAR_EXPRESSION' .

Any_ASCII_character_except_white_space ::= 'ANY_ASCII_CHARACTER_EXCEPT_WHITE_SPACE' .

event_identifier ::= 'EVENT_IDENTIFIER' .

function_identifier ::= 'FUNCTION_IDENTIFIER' .

terminal_identifier ::= 'TERMINAL_IDENTIFIER' .

input_port_identifier ::= 'INPUT_PORT_IDENTIFIER' .

inout_port_identifier ::= 'INOUT_PORT_IDENTIFIER' .

net_identifier ::= 'NET_IDENTIFIER' .

t_path_delay_expression ::= 'T_PATH_DELAY_EXPRESSION' .

trise_path_delay_expression ::= 'TRISE_PATH_DELAY_EXPRESSION' .

tfall_path_delay_expression ::= 'TFALL_PATH_DELAY_EXPRESSION' .

tz_path_delay_expression ::= 'TZ_PATH_DELAY_EXPRESSION' .

t01_path_delay_expression ::= 'T01_PATH_DELAY_EXPRESSION' .

t10_path_delay_expression ::= 'T10_PATH_DELAY_EXPRESSION' .

t0z_path_delay_expression ::= 'T0Z_PATH_DELAY_EXPRESSION' .

tz1_path_delay_expression ::= 'TZ1_PATH_DELAY_EXPRESSION' .

t1z_path_delay_expression ::= 'T1Z_PATH_DELAY_EXPRESSION' .

tz0_path_delay_expression ::= 'TZ0_PATH_DELAY_EXPRESSION' .

t0x_path_delay_expression ::= 'T0X_PATH_DELAY_EXPRESSION' .

tx1_path_delay_expression ::= 'TX1_PATH_DELAY_EXPRESSION' .

t1x_path_delay_expression ::= 'T1X_PATH_DELAY_EXPRESSION' .

tx0_path_delay_expression ::= 'TX0_PATH_DELAY_EXPRESSION' .

txz_path_delay_expression ::= 'TXZ_PATH_DELAY_EXPRESSION' .

tzx_path_delay_expression ::= 'TZX_PATH_DELAY_EXPRESSION' .

port_identifier ::= 'PORT_IDENTIFIER' .

real_identifier ::= 'READ_IDENTIFIER' .

module_identifier ::= 'MODULE_IDENTIFIER' .

gate_instance_identifier ::= 'GATE_INSTANCE_IDENTIFIER' .

module_instance_identifier ::= 'MODULE_INSTANCE_IDENTIFIER' .

udp_instance_identifier ::= 'UDP_INSTANCE_IDENTIFIER' .

msb_constant_expression ::= 'MSB_CONSTANT_EXPRESSION' .

lsb_constant_expression ::= 'LSB_CONSTANT_EXPRESSION' .

net_concatenation ::= 'NET_CONCATENATION' .

register_identifier ::= 'REGISTER_IDENTIFIER' .

output_port_identifier ::= 'OUTPUT_PORT_IDENTIFIER' .

reject_limit_value ::= 'REJECT_LIMIT_VALUE' .

error_limit_value ::= 'ERROR_LIMIT_VALUE' .

memory_identifier ::= 'MEMORY_IDENTIFIER' .

upper_limit_constant_expression ::= 'UPPER_LIMIT_CONSTANT_EXPRESSION' .

lower_limit_constant_expression ::= 'LOWER_LIMIT_CONSTANT_EXPRESSION' .

reg_identifier ::= 'REG_IDENTIFIER' .

reg_concatenation ::= 'REG_CONCATENATION' .

specparam_identifier ::= 'SPECPARAM_IDENTIFIER' .

conditional_expression ::= 'CONDITIONAL_EXPRESSION' .

Any_ASCII_Characters_except_new_line ::= 'ANY_ASCII_CHARACTERS_EXCEPT_NEW_LINE' .

task_item_declaration ::= 'TASK_ITEM_DECLARATION' .

udp_identifier ::= 'UDP_IDENTIFIER' .

udp_output_port_identifier ::= 'UDP_OUTPUT_PORT_IDENTIFIER' .

output_port_connection ::= 'OUTPUT_PORT_CONNECTION' .

input_port_connection ::= 'INPUT_PORT_CONNECTION' .

space ::= 'SPACE' .

tab ::= 'TAB' .

newline ::= 'NEWLINE' .


(
write["\n" gtb_version " processing '" gtb_main_file_name "' on " date_time "\n\n"]

gdg_file := open["gdg.vcg"]
nfa_file := open["nfa.vcg"]
dfa_file := open["dfa.vcg"]
merged_dfa_file := open["merged.vcg"]
table_file := open["table.txt"]
ssg_file := open["ssg.vcg"]

this_grammar := grammar[source_text]

(* write[this_grammar]*)

(*
this_gdg := gdg[this_grammar]
write[gdg_file this_gdg]
*)
(*
generate[this_grammar 10 sentences]
generate[this_grammar 10 left_sentential_forms]
*)

write["\nStart NFA construction: total " CPU_time " CPU seconds elapsed\n\n"]
this_nfa := nfa[this_grammar lr 1 normal_reductions]
write["\nStart NFA write: total " CPU_time " CPU seconds elapsed\n\n"]
write[nfa_file this_nfa]

write["\nStart DFA construction: total " CPU_time " CPU seconds elapsed\n\n"]
this_dfa := dfa[this_nfa]
write["\nStart DFA write: total " CPU_time " CPU seconds elapsed\n\n"]
write[dfa_file this_dfa]

write["\nTotal " CPU_time " CPU seconds elapsed\n\n"]

)

