Start of provenance
  
java_language_specification_3.raw - the grammar from Chapter 18 of the
Java Language Specification, Second Edition

1. This is the grammar from Chapter 18 (pages 585--596) of 'The Java
Language Specification, Third Edition' by by Bill Joy, Guy Steele,
James Gosling, Gilad Bracha, Addison Wesley, (2005) ISBN: 0321246780.

2. This file was created by opening the pre-publication HTML version
of the book which is online at http://java.sun.com/docs/books/jls/
using Mozilla Firefox 1.5.0.6, opening chapter 18, selecting all text
and then pasting it into Emacs.

3. Tabs were changed to eight spaces.

4. The following typos were fixed:

   (a) In rule Expression2, the space between the left had side 
       nonterminal and its colon (:) delimiter was removed.

   (b) In rule BlockStatement, the space between the left had side 
       nonterminal and its colon (:) delimiter was removed.

   (c) In rule Selector, the repeated left hand side nonterminal was
       removed.

   (d) In rule ForVarControl, the missing colon (:) delimiter after
       the left hand side nonterminal was added.

   (e) In rule TypeArgument, production '?  [ ( extends |super ) Type ]'
       was changed to '?  [ ( extends | super ) Type ]'

   (f) The indentation of several rules was incorrect. This is significant
       because the grammar notation uses indentation/outdentation to 
       indicate continuation lines of a production. We checked the HTML
       version against the PDF and corrected the following rules:

         Primary
         Bound
         NormalInterfaceDeclaration
         ExplicitGenericInvocationSuffix
         Selector
         Statement
         CatchClause
         SwitchLabel
         Modifier

   (g) In several rules, the line breaking in the HTML did not match that
       in the PDF. We corrected the following rules:
          NormalClassDeclaration
          NormalInterfaceDeclaration
          MethodDeclaratorRest

We note in passing that the indentation in both the PDF and the HTML
is inconsistent: for instance rules AnnotationMethodOrConstantRest and
DefaultValue are indented, but we don't know why. This does not affect
the language generated by this grammar, so we have not changed the
indentation.

We've notified Sun of these issues: they may be fixed in later
versions of the online documents.

5. All instances of '[' were replaced with ' [ ', similarly for ], (,
), {, } and |.  This is because our gramex (grammar extract) tool
requires space delimiting of grammar elements. Delimiting | in this
way damages terminals such as |= and || which must be repaired at the
next stage.

6. The result was proof read against the PDF version of the book,
accessed from the same URL as above.

7. This grammar is Copyright © 1996 Sun Microsystems, Inc. I contacted
Sun to see if it would be acceptable to them to post this material and
received this kind message from Gilad Bracha, co-author of editions
two and three of the Java Language Specification.

  Adrian,

    Feel free to post the grammar with an appropriate acknowledgement of
    copyright. I'm pretty sure Sun will not come after you for your good 
    work.

If you intend to make use of this grammar, you must ensure you have
met Sun's terms and conditions on the use of the Java Language
Specification. Please contact Sun directly if in doubt.

8. You can process this file with the gramex tool to make something
close to a Bison input file, and use the gramconv tool to convert EBNF
constructs to pure BNF, and to translate to a variety of other
formats.

9. For tool and grammar downloads, see the Royal Holloway Compilers
Group homepage under http://www.cs.rhul.ac.uk, or contact us at
A.Johnstone@rhul.ac.uk or E.Scott@rhul.ac.uk.

10. Please don't change this file.

        Adrian Johnstone and Elizabeth Scott, 1 September 2006

End of provenance

Contents  |  Prev  |  Next  |  Index         Java Language Specification
Third Edition

CHAPTER 18
Syntax

This chapter presents a grammar for the Java programming language.

The grammar presented piecemeal in the preceding chapters is much better for exposition, but it is not well suited as a basis for a parser. The grammar presented in this chapter is the basis for the reference implementation. Note that it is not an LL ( 1 )  grammar, though in many cases it minimizes the necessary look ahead.

The grammar below uses the following BNF-style conventions:

    *  [ x ]  denotes zero or one occurrences of x.
    *  { x }  denotes zero or more occurrences of x. 

x  |  y means one of either x or y.

18.1 The Grammar of the Java Programming Language


    Identifier:
            IDENTIFIER

    QualifiedIdentifier:
            Identifier  {  . Identifier  } 

    Literal:
            IntegerLiteral
            FloatingPointLiteral
            CharacterLiteral
            StringLiteral
            BooleanLiteral
            NullLiteral

    Expression:
            Expression1  [ AssignmentOperator Expression1 ]  ] 

    AssignmentOperator: 
            =
            +=
            -=
            *=
            /=
            &=
             | =
            ^=
            %=
            <<=
            >>=
            >>>=

    Type:
            Identifier  [ TypeArguments ]  {    .   Identifier  [ TypeArguments ]  }   {  [  ]  } 
            BasicType

    TypeArguments:
            < TypeArgument  { , TypeArgument }  >

    TypeArgument:
            Type
            ?  [  (  extends  |  super  )  Type ] 

    StatementExpression:
            Expression

    ConstantExpression:
            Expression

    Expression1:
            Expression2  [ Expression1Rest ] 

    Expression1Rest:
            ?   Expression   :   Expression1

    Expression2:
            Expression3  [ Expression2Rest ] 

    Expression2Rest:
             { InfixOp Expression3 } 
            Expression3 instanceof Type

    InfixOp:
             |  | 
            &&
             | 
            ^
            &
            ==
            !=
            <
            >
            <=
            >=
            <<
            >>
            >>>
            +
            -
            *
            /
            %

    Expression3:
            PrefixOp Expression3
             (    Expression  |  Type    )    Expression3
            Primary  { Selector }   { PostfixOp } 

    Primary:
            ParExpression
            NonWildcardTypeArguments  ( ExplicitGenericInvocationSuffix  |  this
    Arguments ) 
            this  [ Arguments ] 
            super SuperSuffix
            Literal
            new Creator
            Identifier  {  . Identifier  }  [  IdentifierSuffix ] 
            BasicType  {  [  ]  }  .class
            void.class

    IdentifierSuffix:
             [   (   ]   {  [  ]  }  .   class  |  Expression  ]  ) 
            Arguments
            .    (  class  |  ExplicitGenericInvocation  |  this  |  super Arguments  |  new
     [ NonWildcardTypeArguments ]  InnerCreator  ) 

    ExplicitGenericInvocation:
            NonWildcardTypeArguments ExplicitGenericInvocationSuffix

    NonWildcardTypeArguments:
            < TypeList >


    ExplicitGenericInvocationSuffix:
            super SuperSuffix
            Identifier Arguments


    PrefixOp:
            ++
            --
            !
            ~
            +
            -

    PostfixOp:
            ++
            --

    Selector:
            . Identifier  [ Arguments ] 
            . ExplicitGenericInvocation
            . this
            . super SuperSuffix
            . new  [ NonWildcardTypeArguments ]  InnerCreator
             [  Expression  ] 

    SuperSuffix:
            Arguments
            . Identifier  [ Arguments ] 

    BasicType:
      byte
      short
      char
      int
      long
      float
      double
      boolean

    Arguments:
             (   [ Expression  {  , Expression  }  ]   ) 

    Creator:
             [ NonWildcardTypeArguments ]  CreatedName  (  ArrayCreatorRest   | 
    ClassCreatorRest  ) 

    CreatedName:
            Identifier  [ NonWildcardTypeArguments ]   { . Identifier
     [ NonWildcardTypeArguments ]  } 

    InnerCreator:
            Identifier ClassCreatorRest

    ArrayCreatorRest:
             [   (   ]   {  [  ]  }  ArrayInitializer  |  Expression  ]   {  [  Expression  ]  }   {  [  ]  }   ) 

    ClassCreatorRest:
             Arguments  [ ClassBody ] 

    ArrayInitializer:
             {   [ VariableInitializer  { , VariableInitializer }   [ , ]  ]   } 

    VariableInitializer:
            ArrayInitializer
            Expression

    ParExpression:
             (  Expression  ) 

    Block:
             {  BlockStatements  } 

    BlockStatements:
             {  BlockStatement  } 

    BlockStatement:
            LocalVariableDeclarationStatement
            ClassOrInterfaceDeclaration
             [ Identifier : ]  Statement

    LocalVariableDeclarationStatement:
             [ final ]  Type VariableDeclarators   ;

    Statement:
            Block
            assert Expression  [  : Expression ]  ;
            if ParExpression Statement  [ else Statement ] 
            for  (  ForControl  )  Statement
            while ParExpression Statement
            do Statement while ParExpression   ;
            try Block  (  Catches  |   [ Catches ]  finally Block  ) 
            switch ParExpression  {  SwitchBlockStatementGroups  } 
            synchronized ParExpression Block
            return  [ Expression ]  ;
            throw Expression   ;
            break  [ Identifier ] 
            continue  [ Identifier ] 
            ;
            StatementExpression ;
            Identifier   :   Statement

    Catches:
            CatchClause  { CatchClause } 

    CatchClause:
            catch  (  FormalParameter  )  Block

    SwitchBlockStatementGroups:
             {  SwitchBlockStatementGroup  } 

    SwitchBlockStatementGroup:
            SwitchLabel BlockStatements

    SwitchLabel:
            case ConstantExpression   :
            case EnumConstantName :
            default   :

    MoreStatementExpressions:
             {  , StatementExpression  } 

    ForControl:
            ForVarControl
            ForInit;    [ Expression ]    ;  [ ForUpdate ] 

    ForVarControl:
             [ final ]   [ Annotations ]  Type Identifier ForVarControlRest

    Annotations:
            Annotation  [ Annotations ] 

    Annotation:
            @ TypeName  [  (   [ Identifier = ]  ElementValue )  ] 

    ElementValue:
            ConditionalExpression
            Annotation
            ElementValueArrayInitializer

    ConditionalExpression:
            Expression2 Expression1Rest

        ElementValueArrayInitializer:
             {   [ ElementValues ]   [ , ]   } 

        ElementValues:
            ElementValue  [ ElementValues ] 

    ForVarControlRest:
            VariableDeclaratorsRest;    [ Expression ]    ;    [ ForUpdate ] 
            : Expression

    ForInit:
            StatementExpression Expressions

    Modifier:
            Annotation
            public
            protected
            private
            static
            abstract
            final
            native
            synchronized
            transient
            volatile
            strictfp

    VariableDeclarators:
            VariableDeclarator  {  ,   VariableDeclarator  } 

    VariableDeclaratorsRest:
            VariableDeclaratorRest  {  ,   VariableDeclarator  } 

    ConstantDeclaratorsRest:
            ConstantDeclaratorRest  {  ,   ConstantDeclarator  } 

    VariableDeclarator:
            Identifier VariableDeclaratorRest

    ConstantDeclarator:
            Identifier ConstantDeclaratorRest

    VariableDeclaratorRest:
             {  [  ]  }   [   =   VariableInitializer ] 

    ConstantDeclaratorRest:
             {  [  ]  }  =   VariableInitializer

    VariableDeclaratorId:
            Identifier  {  [  ]  } 

    CompilationUnit:
             [  [ Annotations ]  package QualifiedIdentifier   ;   ]   { ImportDeclaration } 
     { TypeDeclaration } 

    ImportDeclaration:
         import  [  static ]  Identifier  {    .   Identifier  }   [    .     *    ]  ;

    TypeDeclaration:
            ClassOrInterfaceDeclaration
            ;

    ClassOrInterfaceDeclaration:
             { Modifier }   ( ClassDeclaration  |  InterfaceDeclaration ) 

    ClassDeclaration:
            NormalClassDeclaration
            EnumDeclaration

    NormalClassDeclaration:
            class Identifier  [ TypeParameters ]   [ extends Type ]   [ implements
    TypeList ] ClassBody

    TypeParameters:
            < TypeParameter  { , TypeParameter }  >

    TypeParameter:
            Identifier  [ extends Bound ] 

    Bound:
            Type  { & Type } 


    EnumDeclaration:
            enum Identifier  [ implements TypeList ]  EnumBody

    EnumBody:
             {   [ EnumConstants ]   [ , ]   [ EnumBodyDeclarations ]   } 

    EnumConstants:
            EnumConstant
            EnumConstants , EnumConstant

    EnumConstant:
            Annotations Identifier  [ Arguments ]   [ ClassBody ] 

    EnumBodyDeclarations:
            ;  { ClassBodyDeclaration } 

    InterfaceDeclaration:
            NormalInterfaceDeclaration
            AnnotationTypeDeclaration

    NormalInterfaceDeclaration:
            interface Identifier  [  TypeParameters ]   [ extends TypeList ]
    InterfaceBody

    TypeList:
            Type  {   ,   Type } 

    AnnotationTypeDeclaration:
            @ interface Identifier AnnotationTypeBody

        AnnotationTypeBody:
             {   [ AnnotationTypeElementDeclarations ]   } 

        AnnotationTypeElementDeclarations:
            AnnotationTypeElementDeclaration
            AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration

    AnnotationTypeElementDeclaration:
             { Modifier }  AnnotationTypeElementRest

    AnnotationTypeElementRest:
             Type Identifier AnnotationMethodOrConstantRest;
            ClassDeclaration
            InterfaceDeclaration
            EnumDeclaration
            AnnotationTypeDeclaration

            AnnotationMethodOrConstantRest:
            AnnotationMethodRest
            AnnotationConstantRest

    AnnotationMethodRest:
             (   )   [ DefaultValue ] 

    AnnotationConstantRest:
            VariableDeclarators


        DefaultValue:
            default ElementValue

    ClassBody:
             {   { ClassBodyDeclaration }   } 

    InterfaceBody:
             {   { InterfaceBodyDeclaration }   } 

    ClassBodyDeclaration:
            ;
             [ static ]  Block
             { Modifier }  MemberDecl

    MemberDecl:
            GenericMethodOrConstructorDecl
            MethodOrFieldDecl
            void Identifier VoidMethodDeclaratorRest
            Identifier ConstructorDeclaratorRest
            InterfaceDeclaration
            ClassDeclaration

    GenericMethodOrConstructorDecl:
            TypeParameters GenericMethodOrConstructorRest

    GenericMethodOrConstructorRest:
             ( Type  |  void )  Identifier MethodDeclaratorRest
            Identifier ConstructorDeclaratorRest

    MethodOrFieldDecl:
            Type Identifier MethodOrFieldRest

    MethodOrFieldRest:
            VariableDeclaratorRest
            MethodDeclaratorRest

    InterfaceBodyDeclaration:
            ;
             { Modifier }  InterfaceMemberDecl

    InterfaceMemberDecl:
            InterfaceMethodOrFieldDecl
            InterfaceGenericMethodDecl
            void Identifier VoidInterfaceMethodDeclaratorRest
            InterfaceDeclaration
            ClassDeclaration

    InterfaceMethodOrFieldDecl:
            Type Identifier InterfaceMethodOrFieldRest

    InterfaceMethodOrFieldRest:
            ConstantDeclaratorsRest ;
            InterfaceMethodDeclaratorRest

    MethodDeclaratorRest:
            FormalParameters  {  [  ]  }   [ throws QualifiedIdentifierList ]   (  MethodBody  | 
    ;  ) 

    VoidMethodDeclaratorRest:
            FormalParameters  [ throws QualifiedIdentifierList ]   (  MethodBody  |    ;   ) 

    InterfaceMethodDeclaratorRest:
            FormalParameters  {  [  ]  }   [ throws QualifiedIdentifierList ]    ;

    InterfaceGenericMethodDecl:
            TypeParameters  ( Type  |  void )  Identifier InterfaceMethodDeclaratorRest

    VoidInterfaceMethodDeclaratorRest:
            FormalParameters  [ throws QualifiedIdentifierList ]    ;

    ConstructorDeclaratorRest:
            FormalParameters  [ throws QualifiedIdentifierList ]  MethodBody

    QualifiedIdentifierList:
            QualifiedIdentifier  {  ,   QualifiedIdentifier } 

    FormalParameters:
             (   [ FormalParameterDecls ]   ) 

    FormalParameterDecls:
             [ final ]   [ Annotations ]  Type FormalParameterDeclsRest ] 

    FormalParameterDeclsRest:
            VariableDeclaratorId  [  , FormalParameterDecls ] 
            ... VariableDeclaratorId

    MethodBody:
            Block

    EnumConstantName:
            Identifier

Contents  |  Prev  |  Next  |  Index        Java Language Specification
Third Edition

Copyright © 1996-2005 Sun Microsystems, Inc. All rights reserved
Please send any comments or corrections via our feedback form 
