AbstractMethodDeclaration ::=  MethodHeader ';' ;
AdditiveExpression ::=  MultiplicativeExpression |  AdditiveExpression '+' MultiplicativeExpression |  AdditiveExpression '-' MultiplicativeExpression ;
AndExpression ::=  EqualityExpression |  AndExpression '&' EqualityExpression ;
ArgumentList ::=  Expression |  ArgumentList ',' Expression ;
ArrayAccess ::=  Name '[' Expression ']' |  PrimaryNoNewArray '[' Expression ']' ;
ArrayCreationExpression ::=  'new' PrimitiveType DimExprs Dims? |  'new' ClassOrInterfaceType DimExprs Dims? ;
ArrayInitializer ::=  '{' VariableInitializers? ','? '}' ;
ArrayType ::=  PrimitiveType '[' ']' |  Name '[' ']' |  ArrayType '[' ']' ;
Assignment ::=  LeftHandSide AssignmentOperator AssignmentExpression ;
AssignmentExpression ::=  ConditionalExpression |  Assignment ;
AssignmentOperator ::=  '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' ;
Block ::=  '{' BlockStatements? '}' ;
BlockStatement ::=  LocalVariableDeclarationStatement |  Statement ;
BlockStatements ::=  BlockStatement |  BlockStatements BlockStatement ;
BreakStatement ::=  'break' 'Identifier'? ';' ;
CastExpression ::=  '(' PrimitiveType Dims? ')' UnaryExpression |  '(' Expression ')' UnaryExpressionNotPlusMinus |  '(' Name Dims ')' UnaryExpressionNotPlusMinus ;
CatchClause ::=  'catch' '(' FormalParameter ')' Block ;
Catches ::=  CatchClause |  Catches CatchClause ;
ClassBody ::=  '{' ClassBodyDeclarations? '}' ;
ClassBodyDeclaration ::=  ClassMemberDeclaration |  StaticInitializer |  ConstructorDeclaration ;
ClassBodyDeclarations ::=  ClassBodyDeclaration |  ClassBodyDeclarations ClassBodyDeclaration ;
ClassDeclaration ::=  Modifiers? 'class' 'Identifier' Super? Interfaces? ClassBody ;
ClassInstanceCreationExpression ::=  'new' ClassType '(' ArgumentList? ')' ;
ClassMemberDeclaration ::=  FieldDeclaration |  MethodDeclaration ;
ClassOrInterfaceType ::=  Name ;
ClassType ::=  ClassOrInterfaceType ;
ClassTypeList ::=  ClassType |  ClassTypeList ',' ClassType ;
CompilationUnit ::=  PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
ConditionalAndExpression ::=  InclusiveOrExpression |  ConditionalAndExpression '&&' InclusiveOrExpression ;
ConditionalExpression ::=  ConditionalOrExpression |  ConditionalOrExpression '?' Expression ':' ConditionalExpression ;
ConditionalOrExpression ::=  ConditionalAndExpression |  ConditionalOrExpression '||' ConditionalAndExpression ;
ConstantDeclaration ::=  FieldDeclaration ;
ConstantExpression ::=  Expression ;
ConstructorBody ::=  '{' ExplicitConstructorInvocation? BlockStatements? '}' ;
ConstructorDeclaration ::=  Modifiers? ConstructorDeclarator Throws? ConstructorBody ;
ConstructorDeclarator ::=  SimpleName '(' FormalParameterList? ')' ;
ContinueStatement ::=  'continue' 'Identifier'? ';' ;
DimExpr ::=  '[' Expression ']' ;
DimExprs ::=  DimExpr |  DimExprs DimExpr ;
Dims ::=  '[' ']' |  Dims '[' ']' ;
DoStatement ::=  'do' Statement 'while' '(' Expression ')' ';' ;
EmptyStatement ::=  ';' ;
EqualityExpression ::=  RelationalExpression |  EqualityExpression '==' RelationalExpression |  EqualityExpression '!=' RelationalExpression ;
ExclusiveOrExpression ::=  AndExpression |  ExclusiveOrExpression '^' AndExpression ;
ExplicitConstructorInvocation ::=  'this' '(' ArgumentList? ')' ';' |  'super' '(' ArgumentList? ')' ';' ;
Expression ::=  AssignmentExpression ;
ExpressionStatement ::=  StatementExpression ';' ;
ExtendsInterfaces ::=  'extends' InterfaceType |  ExtendsInterfaces ',' InterfaceType ;
FieldAccess ::=  Primary '.' 'Identifier' |  'super' '.' 'Identifier' ;
FieldDeclaration ::=  Modifiers? Type VariableDeclarators ';' ;
Finally ::=  'finally' Block ;
FloatingPointType ::=  'float' | 'double' ;
ForInit ::=  StatementExpressionList |  LocalVariableDeclaration ;
FormalParameter ::=  Type VariableDeclaratorId ;
FormalParameterList ::=  FormalParameter |  FormalParameterList ',' FormalParameter ;
ForStatement ::=  'for' '(' ForInit? ';' Expression? ';' ForUpdate? ')' |  Statement ;
ForStatementNoShortIf ::=  'for' '(' ForInit? ';' Expression? ';' ForUpdate? ')' |  StatementNoShortIf ;
ForUpdate ::=  StatementExpressionList ;
Goal ::=  CompilationUnit ;
IfThenElseStatement ::=  'if' '(' Expression ')' StatementNoShortIf 'else' Statement ;
IfThenElseStatementNoShortIf ::=  'if' '(' Expression ')' StatementNoShortIf 'else' StatementNoShortIf ;
IfThenStatement ::=  'if' '(' Expression ')' Statement ;
ImportDeclaration ::=  SingleTypeImportDeclaration |  TypeImportOnDemandDeclaration ;
ImportDeclarations ::=  ImportDeclaration |  ImportDeclarations ImportDeclaration ;
InclusiveOrExpression ::=  ExclusiveOrExpression |  InclusiveOrExpression '|' ExclusiveOrExpression ;
IntegralType ::=  'byte' | 'short' | 'int' | 'long' | 'char' ;
InterfaceBody ::=  '{' InterfaceMemberDeclarations? '}' ;
InterfaceDeclaration ::=  Modifiers? 'interface' 'Identifier' ExtendsInterfaces? InterfaceBody ;
InterfaceMemberDeclaration ::=  ConstantDeclaration |  AbstractMethodDeclaration ;
InterfaceMemberDeclarations ::=  InterfaceMemberDeclaration |  InterfaceMemberDeclarations InterfaceMemberDeclaration ;
Interfaces ::=  'implements' InterfaceTypeList ;
InterfaceType ::=  ClassOrInterfaceType ;
InterfaceTypeList ::=  InterfaceType |  InterfaceTypeList ',' InterfaceType ;
LabeledStatement ::=  'Identifier' ':' Statement ;
LabeledStatementNoShortIf ::=  'Identifier' ':' StatementNoShortIf ;
LeftHandSide ::=  Name |  FieldAccess |  ArrayAccess ;
Literal ::=  'IntegerLiteral' |  'FloatingPointLiteral' |  'BooleanLiteral' |  'CharacterLiteral' |  'StringLiteral' |  'NullLiteral' ;
LocalVariableDeclaration ::=  Type VariableDeclarators ;
LocalVariableDeclarationStatement ::=  LocalVariableDeclaration ';' ;
MethodBody ::=  Block |  ';' ;
MethodDeclaration ::=  MethodHeader MethodBody ;
MethodDeclarator ::=  'Identifier' '(' FormalParameterList? ')' |  MethodDeclarator '[' ']' ;
MethodHeader ::=  Modifiers? Type MethodDeclarator Throws? |  Modifiers? 'void' MethodDeclarator Throws? ;
MethodInvocation ::=  Name '(' ArgumentList? ')' |  Primary '.' 'Identifier' '(' ArgumentList? ')' |  'super' '.' 'Identifier' '(' ArgumentList? ')' ;
Modifier ::=  'public' | 'protected' | 'private' |  'static' |  'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' ;
Modifiers ::=  Modifier |  Modifiers Modifier ;
MultiplicativeExpression ::=  UnaryExpression |  MultiplicativeExpression '*' UnaryExpression |  MultiplicativeExpression '/' UnaryExpression |  MultiplicativeExpression '%' UnaryExpression ;
Name ::=  SimpleName |  QualifiedName ;
NumericType ::=  IntegralType |  FloatingPointType ;
PackageDeclaration ::=  'package' Name ';' ;
PostDecrementExpression ::=  PostfixExpression '--' ;
PostfixExpression ::=  Primary |  Name |  PostIncrementExpression |  PostDecrementExpression ;
PostIncrementExpression ::=  PostfixExpression '++' ;
PreDecrementExpression ::=  '--' UnaryExpression ;
PreIncrementExpression ::=  '++' UnaryExpression ;
Primary ::=  PrimaryNoNewArray |  ArrayCreationExpression ;
PrimaryNoNewArray ::=  Literal |  'this' |  '(' Expression ')' |  ClassInstanceCreationExpression |  FieldAccess |  MethodInvocation |  ArrayAccess ;
PrimitiveType ::=  NumericType |  'boolean' ;
QualifiedName ::=  Name '.' 'Identifier' ;
ReferenceType ::=  ClassOrInterfaceType |  ArrayType ;
RelationalExpression ::=  ShiftExpression |  RelationalExpression '<' ShiftExpression |  RelationalExpression '>' ShiftExpression |  RelationalExpression '<=' ShiftExpression |  RelationalExpression '>=' ShiftExpression |  RelationalExpression 'instanceof' ReferenceType ;
ReturnStatement ::=  'return' Expression? ';' ;
ShiftExpression ::=  AdditiveExpression |  ShiftExpression '<<' AdditiveExpression |  ShiftExpression '>>' AdditiveExpression |  ShiftExpression '>>>' AdditiveExpression ;
SimpleName ::=  'Identifier' ;
SingleTypeImportDeclaration ::=  'import' Name ';' ;
Statement ::=  StatementWithoutTrailingSubstatement |  LabeledStatement |  IfThenStatement |  IfThenElseStatement |  WhileStatement |  ForStatement ;
StatementExpression ::=  Assignment |  PreIncrementExpression |  PreDecrementExpression |  PostIncrementExpression |  PostDecrementExpression |  MethodInvocation |  ClassInstanceCreationExpression ;
StatementExpressionList ::=  StatementExpression |  StatementExpressionList ',' StatementExpression ;
StatementNoShortIf ::=  StatementWithoutTrailingSubstatement |  LabeledStatementNoShortIf |  IfThenElseStatementNoShortIf |  WhileStatementNoShortIf |  ForStatementNoShortIf ;
StatementWithoutTrailingSubstatement ::=  Block |  EmptyStatement |  ExpressionStatement |  SwitchStatement |  DoStatement |  BreakStatement |  ContinueStatement |  ReturnStatement |  SynchronizedStatement |  ThrowStatement |  TryStatement ;
StaticInitializer ::=  'static' Block ;
Super ::=  'extends' ClassType ;
SwitchBlock ::=  '{' SwitchBlockStatementGroups? SwitchLabels? '}' ;
SwitchBlockStatementGroup ::=  SwitchLabels BlockStatements ;
SwitchBlockStatementGroups ::=  SwitchBlockStatementGroup |  SwitchBlockStatementGroups SwitchBlockStatementGroup ;
SwitchLabel ::=  'case' ConstantExpression ':' |  'default' ':' ;
SwitchLabels ::=  SwitchLabel |  SwitchLabels SwitchLabel ;
SwitchStatement ::=  'switch' '(' Expression ')' SwitchBlock ;
SynchronizedStatement ::=  'synchronized' '(' Expression ')' Block ;
Throws ::=  'throws' ClassTypeList ;
ThrowStatement ::=  'throw' Expression ';' ;
TryStatement ::=  'try' Block Catches |  'try' Block Catches? Finally ;
Type ::=  PrimitiveType |  ReferenceType ;
TypeDeclaration ::=  ClassDeclaration |  InterfaceDeclaration |  ';' ;
TypeDeclarations ::=  TypeDeclaration |  TypeDeclarations TypeDeclaration ;
TypeImportOnDemandDeclaration ::=  'import' Name '.' '*' ';' ;
UnaryExpression ::=  PreIncrementExpression |  PreDecrementExpression |  '+' UnaryExpression |  '-' UnaryExpression |  UnaryExpressionNotPlusMinus ;
UnaryExpressionNotPlusMinus ::=  PostfixExpression |  '~' UnaryExpression |  '!' UnaryExpression |  CastExpression ;
VariableDeclarator ::=  VariableDeclaratorId |  VariableDeclaratorId '=' VariableInitializer ;
VariableDeclaratorId ::=  'Identifier' |  VariableDeclaratorId '[' ']' ;
VariableDeclarators ::=  VariableDeclarator |  VariableDeclarators ',' VariableDeclarator ;
VariableInitializer ::=  Expression |  ArrayInitializer ;
VariableInitializers ::=  VariableInitializer |  VariableInitializers ',' VariableInitializer ;
WhileStatement ::=  'while' '(' Expression ')' Statement ;
WhileStatementNoShortIf ::=  'while' '(' Expression ')' StatementNoShortIf ;
