Annotation ::=  '@' 'TypeName' '[' '(' '[' Identifier '=' ']' ElementValue ')' ']' ;
AnnotationConstantRest ::=  VariableDeclarators ;
AnnotationMethodOrConstantRest ::=  AnnotationMethodRest |  AnnotationConstantRest ;
AnnotationMethodRest ::=  '(' ')' '[' DefaultValue ']' ;
Annotations ::=  Annotation '[' Annotations ']' ;
AnnotationTypeBody ::=  '{' '[' AnnotationTypeElementDeclarations ']' '}' ;
AnnotationTypeDeclaration ::=  '@' 'interface' Identifier AnnotationTypeBody ;
AnnotationTypeElementDeclaration ::=  '{' Modifier '}' AnnotationTypeElementRest ;
AnnotationTypeElementDeclarations ::=  AnnotationTypeElementDeclaration |  AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration ;
AnnotationTypeElementRest ::=  Type Identifier 'AnnotationMethodOrConstantRest;' |  ClassDeclaration |  InterfaceDeclaration |  EnumDeclaration |  AnnotationTypeDeclaration ;
Arguments ::=  '(' '[' Expression '{' ',' Expression '}' ']' ')' ;
ArrayCreatorRest ::=  '[' '(' ']' '{' '[' ']' '}' ArrayInitializer '|' Expression ']' '{' '[' Expression ']' '}' '{' '[' ']' '}' ')' ;
ArrayInitializer ::=  '{' '[' VariableInitializer '{' ',' VariableInitializer '}' '[' ',' ']' ']' '}' ;
AssignmentOperator ::=  '=' |  '+=' |  '-=' |  '*=' |  '/=' |  '&=' |  '|' '=' |  '^=' |  '%=' |  '<<=' |  '>>=' |  '>>>=' ;
BasicType ::=  'byte' |  'short' |  'char' |  'int' |  'long' |  'float' |  'double' |  'boolean' ;
Block ::=  '{' BlockStatements '}' ;
BlockStatement ::=  LocalVariableDeclarationStatement |  ClassOrInterfaceDeclaration |  '[' Identifier ':' ']' Statement ;
BlockStatements ::=  '{' BlockStatement '}' ;
Bound ::=  Type '{' '&' Type '}' ;
CatchClause ::=  'catch' '(' 'FormalParameter' ')' Block ;
Catches ::=  CatchClause '{' CatchClause '}' ;
ClassBody ::=  '{' '{' ClassBodyDeclaration '}' '}' ;
ClassBodyDeclaration ::=  ';' |  '[' 'static' ']' Block |  '{' Modifier '}' MemberDecl ;
ClassCreatorRest ::=  Arguments '[' ClassBody ']' ;
ClassDeclaration ::=  NormalClassDeclaration |  EnumDeclaration ;
ClassOrInterfaceDeclaration ::=  '{' Modifier '}' '(' ClassDeclaration '|' InterfaceDeclaration ')' ;
CompilationUnit ::=  '[' '[' Annotations ']' 'package' QualifiedIdentifier ';' ']' '{' ImportDeclaration '}' |  '{' TypeDeclaration '}' ;
ConditionalExpression ::=  Expression2 Expression1Rest ;
ConstantDeclarator ::=  Identifier ConstantDeclaratorRest ;
ConstantDeclaratorRest ::=  '{' '[' ']' '}' '=' VariableInitializer ;
ConstantDeclaratorsRest ::=  ConstantDeclaratorRest '{' ',' ConstantDeclarator '}' ;
ConstantExpression ::=  Expression ;
ConstructorDeclaratorRest ::=  FormalParameters '[' 'throws' QualifiedIdentifierList ']' MethodBody ;
CreatedName ::=  Identifier '[' NonWildcardTypeArguments ']' '{' '.' Identifier |  '[' NonWildcardTypeArguments ']' '}' ;
Creator ::=  '[' NonWildcardTypeArguments ']' CreatedName '(' ArrayCreatorRest '|' |  ClassCreatorRest ')' ;
DefaultValue ::=  'default' ElementValue ;
ElementValue ::=  ConditionalExpression |  Annotation |  ElementValueArrayInitializer ;
ElementValueArrayInitializer ::=  '{' '[' ElementValues ']' '[' ',' ']' '}' ;
ElementValues ::=  ElementValue '[' ElementValues ']' ;
EnumBody ::=  '{' '[' EnumConstants ']' '[' ',' ']' '[' EnumBodyDeclarations ']' '}' ;
EnumBodyDeclarations ::=  ';' '{' ClassBodyDeclaration '}' ;
EnumConstant ::=  Annotations Identifier '[' Arguments ']' '[' ClassBody ']' ;
EnumConstantName ::=  Identifier ;
EnumConstants ::=  EnumConstant |  EnumConstants ',' EnumConstant ;
EnumDeclaration ::=  'enum' Identifier '[' 'implements' TypeList ']' EnumBody ;
ExplicitGenericInvocation ::=  NonWildcardTypeArguments ExplicitGenericInvocationSuffix ;
ExplicitGenericInvocationSuffix ::=  'super' SuperSuffix |  Identifier Arguments ;
Expression ::=  Expression1 '[' AssignmentOperator Expression1 ']' ']' ;
Expression1 ::=  Expression2 '[' Expression1Rest ']' ;
Expression1Rest ::=  '?' Expression ':' Expression1 ;
Expression2 ::=  Expression3 '[' Expression2Rest ']' ;
Expression2Rest ::=  '{' InfixOp Expression3 '}' |  Expression3 'instanceof' Type ;
Expression3 ::=  PrefixOp Expression3 |  '(' Expression '|' Type ')' Expression3 |  Primary '{' Selector '}' '{' PostfixOp '}' ;
ForControl ::=  ForVarControl |  'ForInit;' '[' Expression ']' ';' '[' 'ForUpdate' ']' ;
ForInit ::=  StatementExpression 'Expressions' ;
FormalParameterDecls ::=  '[' 'final' ']' '[' Annotations ']' Type FormalParameterDeclsRest ']' ;
FormalParameterDeclsRest ::=  VariableDeclaratorId '[' ',' FormalParameterDecls ']' |  '...' VariableDeclaratorId ;
FormalParameters ::=  '(' '[' FormalParameterDecls ']' ')' ;
ForVarControl ::=  '[' 'final' ']' '[' Annotations ']' Type Identifier ForVarControlRest ;
ForVarControlRest ::=  'VariableDeclaratorsRest;' '[' Expression ']' ';' '[' 'ForUpdate' ']' |  ':' Expression ;
GenericMethodOrConstructorDecl ::=  TypeParameters GenericMethodOrConstructorRest ;
GenericMethodOrConstructorRest ::=  '(' Type '|' 'void' ')' Identifier MethodDeclaratorRest |  Identifier ConstructorDeclaratorRest ;
Identifier ::=  'IDENTIFIER' ;
IdentifierSuffix ::=  '[' '(' ']' '{' '[' ']' '}' '.' 'class' '|' Expression ']' ')' |  Arguments |  '.' '(' 'class' '|' ExplicitGenericInvocation '|' 'this' '|' 'super' Arguments '|' 'new' |  '[' NonWildcardTypeArguments ']' InnerCreator ')' ;
ImportDeclaration ::=  'import' '[' 'static' ']' Identifier '{' '.' Identifier '}' '[' '.' '*' ']' ';' ;
InfixOp ::=  '|' '|' |  '&&' |  '|' |  '^' |  '&' |  '==' |  '!=' |  '<' |  '>' |  '<=' |  '>=' |  '<<' |  '>>' |  '>>>' |  '+' |  '-' |  '*' |  '/' |  '%' ;
InnerCreator ::=  Identifier ClassCreatorRest ;
InterfaceBody ::=  '{' '{' InterfaceBodyDeclaration '}' '}' ;
InterfaceBodyDeclaration ::=  ';' |  '{' Modifier '}' InterfaceMemberDecl ;
InterfaceDeclaration ::=  NormalInterfaceDeclaration |  AnnotationTypeDeclaration ;
InterfaceGenericMethodDecl ::=  TypeParameters '(' Type '|' 'void' ')' Identifier InterfaceMethodDeclaratorRest ;
InterfaceMemberDecl ::=  InterfaceMethodOrFieldDecl |  InterfaceGenericMethodDecl |  'void' Identifier VoidInterfaceMethodDeclaratorRest |  InterfaceDeclaration |  ClassDeclaration ;
InterfaceMethodDeclaratorRest ::=  FormalParameters '{' '[' ']' '}' '[' 'throws' QualifiedIdentifierList ']' ';' ;
InterfaceMethodOrFieldDecl ::=  Type Identifier InterfaceMethodOrFieldRest ;
InterfaceMethodOrFieldRest ::=  ConstantDeclaratorsRest ';' |  InterfaceMethodDeclaratorRest ;
Literal ::=  'IntegerLiteral' |  'FloatingPointLiteral' |  'CharacterLiteral' |  'StringLiteral' |  'BooleanLiteral' |  'NullLiteral' ;
LocalVariableDeclarationStatement ::=  '[' 'final' ']' Type VariableDeclarators ';' ;
MemberDecl ::=  GenericMethodOrConstructorDecl |  MethodOrFieldDecl |  'void' Identifier VoidMethodDeclaratorRest |  Identifier ConstructorDeclaratorRest |  InterfaceDeclaration |  ClassDeclaration ;
MethodBody ::=  Block ;
MethodDeclaratorRest ::=  FormalParameters '{' '[' ']' '}' '[' 'throws' QualifiedIdentifierList ']' '(' MethodBody '|' |  ';' ')' ;
MethodOrFieldDecl ::=  Type Identifier MethodOrFieldRest ;
MethodOrFieldRest ::=  VariableDeclaratorRest |  MethodDeclaratorRest ;
Modifier ::=  Annotation |  'public' |  'protected' |  'private' |  'static' |  'abstract' |  'final' |  'native' |  'synchronized' |  'transient' |  'volatile' |  'strictfp' ;
MoreStatementExpressions ::=  '{' ',' StatementExpression '}' ;
NonWildcardTypeArguments ::=  '<' TypeList '>' ;
NormalClassDeclaration ::=  'class' Identifier '[' TypeParameters ']' '[' 'extends' Type ']' '[' 'implements' |  TypeList ']' ClassBody ;
NormalInterfaceDeclaration ::=  'interface' Identifier '[' TypeParameters ']' '[' 'extends' TypeList ']' |  InterfaceBody ;
ParExpression ::=  '(' Expression ')' ;
PostfixOp ::=  '++' |  '--' ;
PrefixOp ::=  '++' |  '--' |  '!' |  '~' |  '+' |  '-' ;
Primary ::=  ParExpression |  NonWildcardTypeArguments '(' ExplicitGenericInvocationSuffix '|' 'this' |  Arguments ')' |  'this' '[' Arguments ']' |  'super' SuperSuffix |  Literal |  'new' Creator |  Identifier '{' '.' Identifier '}' '[' IdentifierSuffix ']' |  BasicType '{' '[' ']' '}' '.class' |  'void.class' ;
QualifiedIdentifier ::=  Identifier '{' '.' Identifier '}' ;
QualifiedIdentifierList ::=  QualifiedIdentifier '{' ',' QualifiedIdentifier '}' ;
Selector ::=  '.' Identifier '[' Arguments ']' |  '.' ExplicitGenericInvocation |  '.' 'this' |  '.' 'super' SuperSuffix |  '.' 'new' '[' NonWildcardTypeArguments ']' InnerCreator |  '[' Expression ']' ;
Statement ::=  Block |  'assert' Expression '[' ':' Expression ']' ';' |  'if' ParExpression Statement '[' 'else' Statement ']' |  'for' '(' ForControl ')' Statement |  'while' ParExpression Statement |  'do' Statement 'while' ParExpression ';' |  'try' Block '(' Catches '|' '[' Catches ']' 'finally' Block ')' |  'switch' ParExpression '{' SwitchBlockStatementGroups '}' |  'synchronized' ParExpression Block |  'return' '[' Expression ']' ';' |  'throw' Expression ';' |  'break' '[' Identifier ']' |  'continue' '[' Identifier ']' |  ';' |  StatementExpression ';' |  Identifier ':' Statement ;
StatementExpression ::=  Expression ;
SuperSuffix ::=  Arguments |  '.' Identifier '[' Arguments ']' ;
SwitchBlockStatementGroup ::=  SwitchLabel BlockStatements ;
SwitchBlockStatementGroups ::=  '{' SwitchBlockStatementGroup '}' ;
SwitchLabel ::=  'case' ConstantExpression ':' |  'case' EnumConstantName ':' |  'default' ':' ;
Type ::=  Identifier '[' TypeArguments ']' '{' '.' Identifier '[' TypeArguments ']' '}' '{' '[' ']' '}' |  BasicType ;
TypeArgument ::=  Type |  '?' '[' '(' 'extends' '|' 'super' ')' Type ']' ;
TypeArguments ::=  '<' TypeArgument '{' ',' TypeArgument '}' '>' ;
TypeDeclaration ::=  ClassOrInterfaceDeclaration |  ';' ;
TypeList ::=  Type '{' ',' Type '}' ;
TypeParameter ::=  Identifier '[' 'extends' Bound ']' ;
TypeParameters ::=  '<' TypeParameter '{' ',' TypeParameter '}' '>' ;
VariableDeclarator ::=  Identifier VariableDeclaratorRest ;
VariableDeclaratorId ::=  Identifier '{' '[' ']' '}' ;
VariableDeclaratorRest ::=  '{' '[' ']' '}' '[' '=' VariableInitializer ']' ;
VariableDeclarators ::=  VariableDeclarator '{' ',' VariableDeclarator '}' ;
VariableDeclaratorsRest ::=  VariableDeclaratorRest '{' ',' VariableDeclarator '}' ;
VariableInitializer ::=  ArrayInitializer |  Expression ;
VoidInterfaceMethodDeclaratorRest ::=  FormalParameters '[' 'throws' QualifiedIdentifierList ']' ';' ;
VoidMethodDeclaratorRest ::=  FormalParameters '[' 'throws' QualifiedIdentifierList ']' '(' MethodBody '|' ';' ')' ;
