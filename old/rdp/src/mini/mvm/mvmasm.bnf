(*******************************************************************************
*
* RDP release 1.50 by Adrian Johnstone (A.Johnstone@rhbnc.ac.uk) 20 December 1997
*
* mvmasm.bnf - an assembler for Mini Virtual Machine assembler language
*
* This file may be freely distributed. Please mail improvements to the author.
*
*******************************************************************************)

(* Change to support three arbitrary operands *)

TITLE("mvmasm v1.5 - absolute assembler for mvm")
SUFFIX("mvm")
USES("mvm_aux.h")
USES("math.h")
USES("mvm_def.h")
PASSES(3)
PARSER(unit) (* name of start production *)

PRE_PARSE([* init(rdp_outputfilename); *])
POST_PARSE([* quit(rdp_outputfilename); *])

ARG_BOOLEAN(x execute_sim "execute assembled code using mvmsim simulator")
ARG_BLANK("")
ARG_BLANK("You can contact the author (Adrian Johnstone) at:")
ARG_BLANK("")
ARG_BLANK("Computer Science Department, Royal Holloway, University of London")
ARG_BLANK("Egham, Surrey, TW20 0EX UK. Email: A.Johnstone@rhbnc.ac.uk")

SYMBOL_TABLE(mvmasm 101 31 symbol_compare_string symbol_hash_string symbol_print_string [* char *id; integer val; *] )

unit    ::= [* emit_code = (rdp_pass == 3);
	       data_location = code_location = 0;  /* clear location counters */
	       location = &code_location;          /* make code counter current */
	       dummy_label = symbol_new_symbol(sizeof(mvmasm_data));             /* initialise error symbol */
	    *]
	    { code }.

code  ::= [* emit_eoln(); emit_loc(); last_label = NULL; *]
          [label ':'] [instr | directive ] [* emit_fill(); *] EOLN.

label ::= ID:lab
	  [* if ((last_label = symbol_lookup_key(mvmasm, &lab, NULL)) == NULL)
	       last_label = symbol_insert_key(mvmasm, &lab, sizeof(char*), sizeof(mvmasm_data));
	     mvmasm_cast(last_label)->val = *location;
	  *].

instr   ::= 'ADD' dst:d ',' src:s1 ',' src:s2 [* emitInstruction(OP_ADD, d, s1, s2); *] |
            'SUB' dst:d ',' src:s1 ',' src:s2 [* emitInstruction(OP_SUB, d, s1, s2); *] |
            'MUL' dst:d ',' src:s1 ',' src:s2 [* emitInstruction(OP_MUL, d, s1, s2); *] |
            'DIV' dst:d ',' src:s1 ',' src:s2 [* emitInstruction(OP_DIV, d, s1, s2); *] |
            'EXP' dst:d ',' src:s1 ',' src:s2 [* emitInstruction(OP_EXP, d, s1, s2); *] |

            'EQ'  dst:d ',' src:s1 ',' src:s2 [* emitInstruction(OP_EQ, d, s1, s2);  *] |
            'NE'  dst:d ',' src:s1 ',' src:s2 [* emitInstruction(OP_NE, d, s1, s2);  *] |
            'GT'  dst:d ',' src:s1 ',' src:s2 [* emitInstruction(OP_GT, d, s1, s2);  *] |
            'GE'  dst:d ',' src:s1 ',' src:s2 [* emitInstruction(OP_GE, d, s1, s2);  *] |
            'LT'  dst:d ',' src:s1 ',' src:s2 [* emitInstruction(OP_LT, d, s1, s2);  *] |
            'LE'  dst:d ',' src:s1 ',' src:s2 [* emitInstruction(OP_LE, d, s1, s2);  *] |

            'CPY' dst:d ',' src:s1 [* emitInstruction(OP_CPY, d, s1, unusedOperand); *] |

            'BEQ' src:test ',' src:target [* emitInstruction(OP_BEQ, target, test, unusedOperand); *] |
            'BNE' src:test ',' src:target [* emitInstruction(OP_BNE, target, test, unusedOperand); *] |
            'BRA' src:target [* emitInstruction(OP_BRA, target, unusedOperand, unusedOperand); *] |

            'PRTS' src:s1 [* emitInstruction(OP_PRTS, s1, unusedOperand, unusedOperand); *] |
            'PRTI' src:s1 [* emitInstruction(OP_PRTI, s1, unusedOperand, unusedOperand); *] |

            'PUSH' src:s1 [* emitInstruction(OP_PUSH, s1, unusedOperand, unusedOperand); *] |
            'POP'  dst:d [* emitInstruction(OP_POP, d, unusedOperand, unusedOperand); *] |

            'CALL' src:s1 [* emitInstruction(OP_CALL, s1, unusedOperand, unusedOperand); *] |
            'RET'  [* emitInstruction(OP_RET, unusedOperand, unusedOperand, unusedOperand); *] |

            'LDSP' src:s1 [* emitInstruction(OP_LDSP, s1, unusedOperand, unusedOperand); *] |
            'STSP' dst:d  [* emitInstruction(OP_LDSP, d, unusedOperand, unusedOperand); *] |

            'HALT' [* emitInstruction(OP_HALT, unusedOperand, unusedOperand, unusedOperand); *] .

src:operand ::= ( '#' e1:val1 [* result.mode = MODE_CONSTANT; *] |
                  e1:val1 [* result.mode = MODE_VARIABLE; *]
                  [ '[' ( e1:val2 [* result.mode = MODE_INDEXED; *] | 'sp' [* result.mode = MODE_SP_INDEXED; *] ) ']' ]
                ) [* result.val1 = val1; result.val2 = val2; *].

dst:operand ::= ( e1:val1 [* result.mode = MODE_VARIABLE; *]
                  [ '[' ( e1:val2 [* result.mode = MODE_INDEXED; *] | 'sp' [* result.mode = MODE_SP_INDEXED; *] ) ']' ]
                ) [* result.val1 = val1; result.val2 = val2; *].

directive  ::= 'INCLUDE' '(' string: filename ')'
	       [* if (text_open(filename) == NULL)
		     text_message(TEXT_ERROR_ECHO, "include file '%s' not found\n", filename);
		  else
		  {
		    text_get_char();
		    scan_();
		  }
	       *] |

	       'CODE' [* location = &code_location; *] [ e1:n [* *location = n; *] ] |
	       'DATA' [* location = &data_location; *] [ e1:n [* *location = n; *] ] |
	       'WORD' e1:val [* emit2(val); *] |
	       'BLOCKW' e1:val [* *location += 2 * val; *] |
	       'STRING' string:str [* while (*str!=0) emit1(*str++); emit1(0); *] |
	       'EQU' e1:val [* mvmasm_cast(current_label())->val = val; *] |
               'END' e1: val [* transfer = val; emit_transfer(); *] .

(* Expression interpreter using C operators and long int data ***************)

e1:integer ::= e2:result ['>'  e2:right [* result = result > right;  *] |  (* Greater than *)
			  '<'  e2:right [* result = result < right;  *] |  (* Less than *)
			  '>=' e2:right [* result = result >= right; *] |  (* Greater than or equal to *)
			  '<=' e2:right [* result = result <= right; *] |  (* Less than or equal to *)
			  '==' e2:right [* result = result == right; *] |  (* Equal to *)
			  '!=' e2:right [* result = result != right; *] ]. (* Not equal to *)

e2:integer ::= e3:result {'||' e3:right  [* result = result || right; *]}. (* Logical inclusive OR *)

e3:integer ::= e4:result {'&&' e4:right  [* result = result && right; *]}. (* Logical AND *)

e4:integer ::= e5:result {'^' e5:right  [* result ^= right; *]}.           (* Bitwise exclusive OR *)

e5:integer ::= e6:result {'|' e6:right  [* result |= right; *]}.           (* Bitwise inclusive OR *)

e6:integer ::= e7:result {'&' e7:right  [* result &= right; *]}.           (* Bitwise AND *)

e7:integer ::= e8:result {'<<' e8:right [* result <<= right; *] |          (* Shift left  *)
			  '>>' e8:right [* result >>= right; *] }.         (* Shift right *)

e8:integer ::= e9:result {'+' e9:right  [* result += right; *] |           (* Add *)
			  '-' e9:right  [* result -= right; *] }.          (* Subtract *)

e9:integer ::= e10:result {'*' e10:right  [* result *= right; *] |         (* Divide *)
			   '/' e10:right  [* result /= right; *] }.        (* Multiply *)

e10:integer ::= '+' e10:result |                                           (* Posite *)
		'-' e10:result [* result = -result; *] |                   (* Negate *)
		'~' e10:result [* result = ~result; *] |                   (* Bitwise complement *)
		'!' e10:result [* result = !result; *] |                   (* Logical not *)
		e11:result.

e11:integer ::= e0:result ['**' e10:right [* result = (integer) pow((double) result, (double) right); *]]. (* Exponentiate *)

e0:integer ::= [* mvmasm_data* temp; *]
	       ID:name
	       [* temp = mvmasm_cast(symbol_lookup_key(mvmasm, &name, NULL));
		  if (temp == NULL)
		  {
                    if (rdp_pass == 3)
 		      text_message(TEXT_ERROR_ECHO,"Undefined symbol '%s'\n", name);
		    result = 0;
		  }
		  else
		    result = temp->val;
	       *] |                                                        (* Variable *)
	       INTEGER:result |                                            (* Numeric literal *)
	       'TRUE' [* result = 1; *] |                                  (* Logical TRUE *)
	       'FALSE' [* result = 0; *] |                                 (* Logical FALSE *)

	       '(' e2:result ')'.                                          (* Do-first *)

string: char* ::= STRING_ESC('"' '\\'):result.

Comment ::= COMMENT_LINE(';').


