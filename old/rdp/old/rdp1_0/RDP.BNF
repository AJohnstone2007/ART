(*****************************************************************************
*
* RDP release 1.00 by Adrian Johnstone (adrian@dcs.rhbnc.ac.uk) 14 Feb 1994
*
* rdp.bnf - decorated rdp grammar
*
* This file may be freely distributed. Please mail improvements to the author.
*
*****************************************************************************)
TITLE("Recursive descent parser generator V1.00 (generated)")
SUFFIX("bnf")
SHOW_SKIPS
SET_SIZE(256)
HASH_SIZE(101)
HASH_PRIME(31)
TAB_WIDTH(2)
TEXT_SIZE(20000)
MAX_ERRORS(30)
MAX_WARNINGS(120)
OUTPUT_FILE("rdparser")
USES("rdp_aux.h")
HELP("bfilename Write expanded BNF to filename"
		 "bnffilename = *argv + 2;")
PRE_PROCESS("pre_process();")
POST_PROCESS("post_process(outputfilename, force, base);")

unit ::= { prod | dir} EOF.

dir::= 'INCLUDE' '(' code: filename
										 "if (scan__open_file(filename+1) == NULL)"
										 "	 scan__error_echo(\"Include file '%s' not found\", filename+1);"
								 ')' |
			 (* List directives *)
			 "struct string_list *temp = crash__malloc(sizeof(struct string_list), \"HELP node allocation\");"
			 'HELP' '(' code: s
									"temp->str1 = s+1;"
									"temp->next = dir_help;"
									"dir_help = temp;"
									code: s
									"temp->str2 = s+1;"
							')' |
			 "struct string_list *temp = crash__malloc(sizeof(struct string_list), \"HELP node allocation\");"
			 'USES' '(' code: s
									"temp = crash__malloc(sizeof(struct string_list), \"INCLUDE node allocation\");"
									"temp->str1 = s+1;"
									"temp->next = dir_include;"
									"dir_include = temp;"
							 ')' |
			 (* String directives *)
			 'TITLE' '(' code: s "dir_title = s+1;" ')' |
			 'SUFFIX' '(' code:s "dir_suffix = s+1;" ')' |
			 'PRE_PROCESS' '(' code:s "dir_pre_process = s+1;" ')' |
			 'POST_PROCESS' '(' code:s "dir_post_process = s+1;" ')' |
			 'OUTPUT_FILE' '(' code:s "dir_output_file = s+1;" ')' |
			 (* Numeric directives *)
			 'SET_SIZE' '(' NUMBER:n "dir_set_size = n;" ')' |
			 'HASH_SIZE' '(' NUMBER:n "dir_hash_size = n;" ')' |
			 'HASH_PRIME' '(' NUMBER:n "dir_hash_prime = n;" ')' |
			 'TAB_WIDTH' '(' NUMBER:n "dir_tab_width = n;" ')' |
			 'TEXT_SIZE' '(' NUMBER:n "dir_text_size = n;" ')' |
			 'MAX_ERRORS' '(' NUMBER:n "dir_max_errors = n;" ')' |
			 'MAX_WARNINGS' '(' NUMBER:n "dir_max_warnings = n;" ')' |
			 (* Boolean directives *)
			 'CASE_INSENSITIVE' "dir_case_insensitive = 1;" |
			 'SHOW_SKIPS' "dir_show_skips = 1;" |
			 'NEWLINE_VISIBLE' "dir_newline_visible = 1;" |
			 'COMMENTS_VISIBLE' "dir_comments_visible = 1;" .

prod:symbol__* ::= "unsigned stars = 0;"
								 "type = \"void\";"
								 (ID:name|NEW_ID:name)
								 "primary_id = name;"
								 "if (start_id == NULL) start_id = name;"
								 "component = 0;"
								 "result = find(primary_id, K_PRIMARY, 0);"
								 [':'(ID:type|NEW_ID:type) {'*' "stars++;" } ]
								 '::=' alt:body
								 "DATA(result, list) = body;"
								 "DATA(result, been_defined) = 1;"
								 "DATA(result, return_type) = type;"
								 "DATA(result, return_type_stars) = stars;"
								 '.'.

alt:list* ::= "list*end = result = crash__calloc(sizeof(list), \"sequence list node\");"
							< seq: body
								 "end->next = crash__calloc(sizeof(list), \"alt list node\");"
								 "end = end->next;"
								 "end->production = find(scan__insert_subid(primary_id, component++), K_SEQUENCE, 1);"
								 "DATA(end->production,list) = body;"
							> '|' "result = result->next;".


seq:list* ::= "list*end = result = crash__calloc(sizeof(list), \"sequence list node\");"
							{ "ret_name = NULL;"
								(item_ret:body [':'(ID:ret_name|NEW_ID:ret_name)] | item_inl: body)
								"end->next = crash__calloc(sizeof(list), \"sequence list node\");"
								"end = end->next;"
								"end->production = body;"
								"end->return_name = ret_name;"
							}
							"result = result->next;" .

item_ret:symbol__* ::= ID:name "result = find(name, K_PRIMARY, 0);" |
										 NEW_ID:name "result = find(name, K_PRIMARY, 0);" |

										 token:name
										 "check_token_valid(name);"
										 "result = find(name, K_TOKEN, 0);" |

										 'STRING' '(' token:name ')'
										 "check_token_valid(name);"
										 "result = find(name, K_TOKEN, 0);"
										 "DATA(result, extended_class) = E_STRING;" |

										 'STRING_ESC' '(' token:name token:quote ')'
										 "check_token_valid(name);"
										 "result = find(name, K_TOKEN, 0);"
										 "DATA(result, extended_class) = E_STRING_ESC;"
										 "DATA(result, close) = quote;" |

										 'COMMENT' '(' token:name token:close ')'
										 "check_token_valid(name);"
										 "result = find(name, K_TOKEN, 0);"
										 "DATA(result, extended_class) = E_COMMENT;"
										 "DATA(result, close) = close;" |

										 'COMMENT_NEST' '(' token:name token:close ')'
										 "check_token_valid(name);"
										 "result = find(name, K_TOKEN, 0);"
										 "DATA(result, extended_class) = E_COMMENT_NEST;"
										 "DATA(result, close) = close;" .


item_inl:symbol__* ::= code:name
										 "result = find(name, K_CODE, 0);"
										 "DATA(result, contains_null) = 1;" |

										 '('alt:body')'
										 "result = find(scan__insert_subid(primary_id, component++), K_DO_FIRST, 1);"
										 "DATA(result, list) = body;" |

										 '{'alt:body'}'
										 "result = find(scan__insert_subid(primary_id, component++), K_ITERATION, 1);"
										 "DATA(result, list) = body;"
										 "DATA(result, contains_null) = 1;" |

										 '['alt:body']'
										 "result = find(scan__insert_subid(primary_id, component++), K_CONDITIONAL, 1);"
										 "DATA(result, list) = body;"
										 "DATA(result, contains_null) = 1;" |

										 '<'alt:body'>' token:delimiter
										 "result = find(scan__insert_subid(primary_id, component++), K_LIST, 1);"
										 "DATA(result, list) = body;"
										 "DATA(result, supplementary_token) = find(delimiter, K_TOKEN, 0);".

code:char*  ::= STRING_ESC('"' '\\'):result .
token:char* ::= STRING_ESC('\'' '\\'):result .
comment     ::= COMMENT('(*' '*)').

(* End of rdp.bnf *)
