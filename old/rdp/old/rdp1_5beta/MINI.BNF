(*******************************************************************************
*
* RDP release 1.50 by Adrian Johnstone (adrian@dcs.rhbnc.ac.uk) 8 April 1996
*
* mini.bnf - a decorated mini grammar with interpreter semantics
*
* This file may be freely distributed. Please mail improvements to the author.
*
*******************************************************************************)
TITLE("Mini V1.50 (c) Adrian Johnstone 1996")
SUFFIX("min")
BUILD_TREE

SYMBOL_TABLE(mini 101 31
	     symbol_compare_string
	     symbol_hash_string
	     symbol_print_string
	     [* char* id; integer i; *]
	    )

program   ::= {([var_dec ] | [statement ]) ';' }.

var_dec   ::= 'int'
	      ( ID:name [ '=' e1:val ]
		[* mini_cast(symbol_insert_key(mini, &name, sizeof(char*), sizeof(mini_data)))->i = val; *]
	      )@','.

statement ::= ID:name
	      [* if (symbol_lookup_key(mini, &name, NULL) == NULL)
		 {
		   text_message(TEXT_ERROR, "Undeclared variable '%s'\n", name);
		   symbol_insert_key(mini, &name, sizeof(char*), sizeof(mini_data));
		 }
	      *]
	      '=' e1:val
	      [* mini_cast(symbol_lookup_key(mini, &name, NULL))->i = val; *] |

	      'print' '(' ( e1:val [* printf("%li", val); *] |
			    String:str [* printf("%s", str); *]
			  )@','
		      ')'.

e1:integer ::= e2:result {'+' e2:right [* result += right; *] |          (* Add *)
			  '-' e2:right [* result -= right; *] }.         (* Subtract *)

e2:integer ::= e3:result {'*' e3:right [* result *= right; *] |          (* Multiply *)
			  '/' e3:right [* result /= right; *] }.         (* Divide *)

e3:integer ::= '+' e4:result |                                           (* Posite *)
	       '-' e4:result [* result = -result; *] |                   (* Negate *)
	       e4:result.

e4:integer ::= ID:name [* result = mini_cast(symbol_lookup_key(mini, &name, NULL))->i; *] | (* Variable *)
	       INTEGER:result |                                          (* Numeric literal *)
	       '(' e1:result ')'.                                        (* Parenthesised expression *)

comment    ::= COMMENT_NEST('(*' '*)').                                  (* Comments *)

String: char * ::= STRING_ESC('"' '\\'):result.                          (* Strings for print *)

(* End of mini.bnf *)

