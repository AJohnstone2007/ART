

Set test start


*** Checking assignments, printing and array production ***

Assigning {5} to first using assign_element
First is {5} = {five}, cardinality 1, size 1

Assigning {8,1,3} to second using assign_list
Second is {1, 3, 8} = {one, three, eight}, cardinality 3, size 2

Assigning second to first using assign_set: note set size change
First is {1, 3, 8} = {one, three, eight}, cardinality 3, size 2

Comparing first and second sets: result 0

Assigning {5} to first using assign_element
First is {5} = {five}, cardinality 1, size 2

*** Checking comparison ***

Comparing first and second sets: result 0

*** Checking inversion ***

Inverting first set against universe 16
After inversion, first is {0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16} = {zero, one, two, three, four, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen}, cardinality 16, size 3

*** Checking growing, minimim size, normalisation and freeing ***

Assigning {5} to first using assign_element
First is {5} = {five}, cardinality 1, size 3

Growing first set to size 4
First is {5} = {five}, cardinality 1, size 4

Renormalising set
First is {5} = {five}, cardinality 1, size 1

Setting minimum size to 5 and renormalising
First is {5} = {five}, cardinality 1, size 5

Setting minimum size to 0 and renormalising
First is {5} = {five}, cardinality 1, size 1

Freeing first
First is {} = {}, cardinality 0, size 0

*** Checking uniting ***

Uniting {5} into first using unite_element
First is {5} = {five}, cardinality 1, size 1

Uniting {8,1,3} into first using unite_list
First is {1, 3, 5, 8} = {one, three, five, eight}, cardinality 4, size 2

Assigning {9,1,16,2} to second using assign_list
Second is {1, 2, 9, 16} = {one, two, nine, sixteen}, cardinality 4, size 3

Uniting second into first using unite_set
First is {1, 2, 3, 5, 8, 9, 16} = {one, two, three, five, eight, nine, sixteen}, cardinality 7, size 3

*** Checking differencing ***

Differencing {5} from first using difference_element
First is {1, 2, 3, 8, 9, 16} = {one, two, three, eight, nine, sixteen}, cardinality 6, size 3

Differencing {14, 1, 13} from first using difference_list
First is {2, 3, 8, 9, 16} = {two, three, eight, nine, sixteen}, cardinality 5, size 3

Assigning {8,1,2} to second using assign_list
Second is {1, 2, 8} = {one, two, eight}, cardinality 3, size 3

Differencing second from first using difference_set
First is {3, 9, 16} = {three, nine, sixteen}, cardinality 3, size 3

*** Checking inclusion ***

Assigning {8,1,3,16} to first using assign_list
First is {1, 3, 8, 16} = {one, three, eight, sixteen}, cardinality 4, size 3

Checking inclusion of {5} in first using includes_element: result 0

Checking inclusion of {16} in first using includes_element: result 1

Checking inclusion of {8,1,3} in first using includes_list: result 1

Checking inclusion of {2,1,3} in first using includes_list: result 0

Assigning {8,1,3} to second using assign_list
Second is {1, 3, 8} = {one, three, eight}, cardinality 3, size 3

Checking inclusion of second in first using includes_set: result 1

Assigning {2,1,3} to second using assign_list
Second is {1, 2, 3} = {one, two, three}, cardinality 3, size 3

Checking inclusion of second in first using includes_set: result 0

*** Checking intersecting ***

Assigning {8,1,3,16} to first using assign_list
First is {1, 3, 8, 16} = {one, three, eight, sixteen}, cardinality 4, size 3

Intersecting {3} against first using intersect_element
First is {3} = {three}, cardinality 1, size 3

Intersecting {16} against first using intersect_element
First is {} = {}, cardinality 0, size 3

Assigning {8,1,13,16} to first using assign_list
First is {1, 8, 13, 16} = {one, eight, thirteen, sixteen}, cardinality 4, size 3

Intersecting {14, 1, 13} against first using intersect_list
First is {1, 13} = {one, thirteen}, cardinality 2, size 3

Assigning {8,1,3,16} to first using assign_list
First is {1, 3, 8, 16} = {one, three, eight, sixteen}, cardinality 4, size 3

Assigning {8,1,3} to second using assign_list
Second is {1, 3, 8} = {one, three, eight}, cardinality 3, size 3

Intersecting second against first using intersect_set
First is {1, 3, 8} = {one, three, eight}, cardinality 3, size 3


Set test done

