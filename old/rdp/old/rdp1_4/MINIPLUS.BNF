(*******************************************************************************
*
* RDP release 1.40 by Adrian Johnstone (adrian@dcs.rhbnc.ac.uk) 30 Jan 1995
*
* miniplus.bnf - a decorated mini plus grammar with interpreter semantics
*
* This file may be freely distributed. Please mail improvements to the author.
*
*******************************************************************************)
TITLE("Mini plus V1.40 (c) Adrian Johnstone 1995")
SUFFIX("mpl")

SYMBOL_TABLE(miniplus 101 31
             symbol__compare_string
             symbol__hash_string
             symbol__print_string
             [* char* id; integer i; *]
            )

program   ::= [* int force = 1; *] {([var_dec(force)] | [statement(force)]) ';'}.

(* semantic productions - implemented as macros in the C code *)
_insert(id)       ::= [* if (interpret) symbol__insert_string_key(miniplus, id, sizeof(miniplus__data)); *].
_lookup(id ret)   ::= [* {
                           void * sym = symbol__lookup_key(miniplus, id);
                           if (sym == NULL) /* not found! */
                           {
                             text__message(TEXT__ERROR_ECHO, "undeclared variable, '%s'\n", id);
                             sym = symbol__insert_string_key(miniplus, id, sizeof(miniplus__data));
                           }
                           ret = miniplus__cast(sym)->i;
                         }
                       *].
_update(id val)   ::= [* if (interpret)
                         {
                           void * sym = symbol__lookup_key(miniplus, id);
                           if (sym == NULL) /* not found! */
                           {
                             text__message(TEXT__ERROR_ECHO, "undeclared variable, '%s'\n", id);
                             sym = symbol__insert_string_key(miniplus, id, sizeof(miniplus__data));
                           }
                           miniplus__cast(sym)->i = val;
                         }
                      *].
_and(dst a b)     ::= [* dst = a && b;  *].
_and_not(dst a b) ::= [* dst = !a && b; *].
_local_int(a)     ::= [* integer a = 0; *].

var_dec(interpret:integer) ::=
  'int' < ID:name _insert(name)                                  (* Declaration *)
          ['=' e0:val _update(name val) ]                        (* Initialisation *)
        > ','.

statement(interpret:integer) ::=
  ID:name '=' e0:value _update(name value) |                     (* Assignment *) 

  _local_int(flag)
  'if' e0:cnd 'then' _and(flag cnd interpret) statement(flag)    (* if statement *)
     [ 'else' _and_not(flag cnd interpret) statement(flag) ] |

  'print' '(' < e0:value [* if (interpret) printf("%li", value); *] | (* output *)
                String:str [* if (interpret) printf("%s", str); *]
              >','
          ')'.

e0:integer ::=
  e1:result {'>' e1:right  [* result = result > right; *] |      (* Greater than *)
             '<' e1:right  [* result = result < right; *] |      (* Less than *)
             '>=' e1:right [* result = result >= right; *] |     (* Greater than or equal *)
             '<=' e1:right [* result = result <= right; *] |     (* Less than or equal *)
             '==' e1:right [* result = result == right; *] |     (* Equal *)
             '!=' e1:right [* result = result != right; *] }.    (* Not equal *)

e1:integer ::= e2:result {'+' e2:right [* result += right; *] |  (* Add *)
                          '-' e2:right [* result -= right; *] }. (* Subtract *)

e2:integer ::= e3:result {'*' e3:right [* result *= right; *] |  (* Multiply *)
                          '/' e3:right [* result /= right; *] }. (* Divide *)

e3:integer ::= '+' e4:result |                                   (* Posite *)
               '-' e4:result [* result = -result; *] |           (* Negate *)
               e4:result.


e4:integer ::= ID:name _lookup(name result) |                    (* Variable access *)
               INTEGER:result |                                  (* Numeric literal *)
               '(' e0:result ')'.                                (* Parenthesised expression *)

comment    ::= COMMENT_NEST('(*' '*)').                          (* Comments *)

String: char* ::= STRING_ESC('"' '\\'):result.                   (* Strings for print *)

(* End of mpl.bnf *)
