(*****************************************************************************
*
* RDP release 1.40 by Adrian Johnstone (adrian@dcs.rhbnc.ac.uk) 30 Jan 1995
*
* ansi_c.bnf - an ANSI standard C grammar
*
* This file may be freely distributed. Please mail improvements to the author.
*
*****************************************************************************)

(* This is a transcription of the ANSI C grammar from the second edition of
   K&R: it is presently under construction and not yet ready to use...
*)

translation_unit ::= external_declaration {external_declaration}.

external_declaration ::= function_definition | declaration.

function_definition ::= [declaration_specifiers] declarator [declaration_list] compound_statement.

declaration ::= declaration_specifiers [init_declarator_list].

declaration_list ::= declaration {declaration}.

declaration_specifiers ::= storage_class_specifier[declaration_specifiers] | type_specifier[declaration_specifiers] | type_qualifier[declaration_specifiers].

storage_class_specifier ::= 'auto' | 'register' | 'static' | 'extern' | 'typedef'.

type_specifier ::= 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | struct_or_union_specifier | enum_specifier | typedef_name.

type_qualifier ::= 'const' | 'volatile'.

struct_or_union_specifier ::= struct_or_union [ID]'['struct_declaration_list']' | struct_or_union ID.

struct_or_union ::= 'struct' | 'union'.

struct_declaration_list ::= struct_declaration {struct_declaration}.

init_declarator_list ::= init_declarator {','init_declarator}.

init_declarator ::= declarator['='initializer].

struct_declaration ::= specifier_qualifier_list struct_declarator_list ';'.

specifier_qualifier_list ::= (type_specifier | type_qualifier) {type_specifier | type_qualifier}.

struct_declarator_list ::= struct_declarator {','struct_declarator}.

struct_declarator ::= declarator[declarator]':'constant_expression.

enum_specifier ::= 'enum'([ID]'['enumerator_list']' | ID).

enumerator_list ::= enumerator {','enumerator}.

enumerator ::= ID['='constant_expression].

declarator ::= [pointer]direct_declarator.

direct_declarator ::= (ID | '('declarator')') ('[' [constant_expression] ']' | '(' {parameter_type_list | [identifier_list] } ')' ).

pointer ::= '*'[type_qualifier_list] {'*'[type_qualifier_list]}.

type_qualifier_list ::= type_qualifier {type_qualifier}.

parameter_type_list ::= parameter_list[',' '...'].

parameter_list ::= parameter_declaration {','parameter_declaration}.

parameter_declaration ::= declaration_specifiers(declarator | [abstract_declarator]).

identifier_list ::= ID {','ID}.

initializer ::= assignment_expression'['initializer_list[',']']'.

initializer_list ::= initializer {','initializer}.

type_name ::= specifier_qualifier_list[abstract_declarator].

abstract_declarator ::= pointer[direct_abstract_declarator] | direct_abstract_declarator.

direct_abstract_declarator ::= '('abstract_declarator')' { '['constant_expression']' | '('[parameter_type_list]')'}.

typedef_name ::= ID.

statement ::= labeled_statement | expression_statement | compound_statement | selection_statement | iteration_statement | jump_statement.

labeled_statement ::= ID ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement.

expression_statement ::= [expression]';'.

compound_statement ::= '['[declaration_list][statement_list]']'.

statement_list ::= statement {statement}.

selection_statement ::= 'if' '(' expression ')' statement [ 'else' statement ] | 'switch' '(' expression ')' statement.

iteration_statement ::= 'while''('expression')'statement | 'do'statement'while''('expression')' | 'for''('[expression]';'[expression]';'[expression]')'statement.

jump_statement ::= 'goto' ID ';' | 'continue' ';' | 'break' ';' | 'return' [expression] ';'.

expression ::= assignment_expression {',' assignment_expression }.

assignment_expression ::=  {unary_expression assignment_operator} conditional_expression.

assignment_operator ::= '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|='.

conditional_expression ::= logical_or_expression['?'expression':'conditional_expression].

constant_expression ::= conditional_expression.

logical_or_expression ::= logical_and_expression { '||' logical_and_expression}.

logical_and_expression ::= inclusive_or_expression {'&&' inclusive_or_expression}.

inclusive_or_expression ::= exclusive_or_expression { '|' exclusive_or_expression}.

exclusive_or_expression ::= and_expression {'^' and_expression}.

and_expression ::= equality_expression {'&'equality_expression}.

equality_expression ::= relational_expression{ ('==' | '!=')relational_expression}.

relational_expression ::= shift_expression{ ('<' | '>' | '<\=' | '>\=')shift_expression}.

shift_expression ::= additive_expression{ ('<<' | '>>') additive_expression}.

additive_expression ::= multiplicative_expression{ ('+' | '-')multiplicative_expression}.

multiplicative_expression ::= cast_expression{ ('*' | '/' | '%')cast_expression}.

cast_expression ::= unary_expression | '('type_name')'cast_expression.

unary_expression ::= postfix_expression | ('+\+' | '-\-')unary_expression | unary_operator cast_expression | 'sizeof'(unary_expression | '('type_name')').

unary_operator ::= '&' | '*' | '+' | '-' | '~' | '!'.

postfix_expression ::= primary_expression { '[' expression ']' | '(' [argument_expression_list] ')' | '.' ID | '->' ID | '++' | '--' }.

primary_expression ::= ID | constant | STRING_ESC('"' '\\') (* string literal *)| '(' expression ')'.

argument_expression_list ::= assignment_expression {',' assignment_expression }.

constant ::= INTEGER | STRING_ESC('\'' '\\') (* character *) | REAL | ID (* enumeration constant *).
