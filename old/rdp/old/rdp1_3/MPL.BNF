(*****************************************************************************
*
* RDP release 1.30 by Adrian Johnstone (adrian@dcs.rhbnc.ac.uk) 28 Dec 1994
*
* mpl.bnf - a decorated mini-plus grammar with interpreter semantics
*
* This file may be freely distributed. Please mail improvements to the author.
*
*****************************************************************************)
TITLE("Mini plus V1.30 (c) Adrian Johnstone 1994")
SUFFIX("mpl")

program   ::= [* integer force = 1; *] {([var_dec(force)] | [statement(force)]) ';'}.

(* semantic productions - implemented as macros in the C code *)
_insert(id)       ::= [* if (interpret) symbol__insert_id(id)->token=P_ID;   *].
_update(id val)   ::= [* if (interpret) symbol__lookup_id(id)->data.i = val; *].
_and(dst a b)     ::= [* dst = a && b;  *].
_and_not(dst a b) ::= [* dst = !a && b; *].
_local_int(a)     ::= [* integer a = 0; *].

var_dec(interpret:integer) ::=
  'int' < NEW_ID:name _insert(name)       (* declaration *)
          ['=' e0:val _update(name val) ] (* optional initialisation *)
        > ','.

statement(interpret:integer) ::=
  ID:name '=' e0:value _update(name value) |

  _local_int(flag)
  'if' e0:cnd 'then' _and(flag cnd interpret) statement(flag)
     [ 'else' _and_not(flag cnd interpret) statement(flag) ] |

  'print' '(' < e0:value [* if (interpret) printf(INTEGER_FORMAT, value); *] |
                String:str [* if (interpret) printf(STRING_FORMAT, str+1); *]
              >','
          ')'.

e0:integer ::= 
  e1:result {'>' e1:right  [* result = result > right; *] |  (* Greater than *)
             '<' e1:right  [* result = result < right; *] |  (* Less than *)
             '>=' e1:right [* result = result >= right; *] | (* Greater than or equal to *)
             '<=' e1:right [* result = result <= right; *] | (* Less than or equal to *)
             '==' e1:right [* result = result == right; *] | (* Equal to *)
             '!=' e1:right [* result = result != right; *] }.(* Not equal to *)

e1:integer ::= e2:result {'+' e2:right [* result += right; *] |  (* Add *)
                          '-' e2:right [* result -= right; *] }. (* Subtract *)

e2:integer ::= e3:result {'*' e3:right [* result *= right; *] |  (* Divide *)
                          '/' e3:right [* result /= right; *] }. (* Multiply *)

e3:integer ::= '+' e4:result |                                   (* Posite *)
               '-' e4:result [* result = -result; *] |           (* Negate *)
	       e4:result.


e4:integer ::= ID:name [* result = symbol__lookup_id(name)->data.i; *] | (* Variable *)
               INTEGER:result |                                        (* Numeric literal *)
               '(' e0:result ')'.                                    (* Parenthesised expression *)

comment    ::= COMMENT_NEST('(*' '*)').                             (* Comments *)

String: string ::= STRING_ESC('"' '\\'):result.                                (* Strings for print *)

(* End of mpl.bnf *)
