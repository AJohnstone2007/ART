(* Lexer grammar generated by RDP *)

lexerGrammar ::= { INTEGER | REAL | ID |
'!' |
'!=' |
  STRING_ESC('\"' '\\') | |
'%' |
'%=' |
'&' |
'&&' |
'&=' |
  STRING_ESC('\'' '\\') | |
'(' |
')' |
'*' |
'*=' |
'+' |
'++' |
'+=' |
',' |
'-' |
'--' |
'-=' |
'->' |
'.' |
'..' |
'...' |
'/' |
'/=' |
':' |
';' |
'<' |
'<<' |
'<<=' |
'<=' |
'=' |
'==' |
'>' |
'>=' |
'>>' |
'>>=' |
'?' |
'REAL' |
'[' |
']' |
'^' |
'^=' |
'auto' |
'break' |
'case' |
'char' |
'const' |
'continue' |
'default' |
'do' |
'double' |
'else' |
'enum' |
'extern' |
'float' |
'for' |
'goto' |
'if' |
'int' |
'long' |
'register' |
'return' |
'short' |
'signed' |
'sizeof' |
'static' |
'struct' |
'switch' |
'typedef' |
'union' |
'unsigned' |
'void' |
'volatile' |
'while' |
'{' |
'|' |
'|=' |
'||' |
'}' |
'~'
}.


comment1 ::= COMMENT('/*' '*/').
comment2 ::= COMMENT_LINE('//').