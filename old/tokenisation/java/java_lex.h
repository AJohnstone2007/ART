/*******************************************************************************
*
* Header file generated by RDP on Dec 18 2015 03:02:34 from java_lex.bnf
*
*******************************************************************************/
#ifndef JAVA_LEX_H
#define JAVA_LEX_H

#include "arg.h"
#include "graph.h"
#include "hist.h"
#include "memalloc.h"
#include "scan.h"
#include "set.h"
#include "symbol.h"
#include "textio.h"


/* Maximum number of passes */
#define RDP_PASSES 1

/* Time and date stamp */
#define RDP_STAMP "Generated on Dec 18 2015 03:02:34 and compiled on " __DATE__ " at " __TIME__ 

/* Token enumeration */
enum
{
RDP_TT_BOTTOM = SCAN_P_TOP,
RDP_T_33 /* ! */ = SCAN_P_TOP,RDP_T_3361 /* != */,RDP_T_34 /* " */,RDP_T_37 /* % */,RDP_T_3761 /* %= */,RDP_T_38 /* & */,RDP_T_3838 /* && */,RDP_T_3861 /* &= */,
RDP_T_39 /* ' */,RDP_T_40 /* ( */,RDP_T_41 /* ) */,RDP_T_42 /* * */,RDP_T_4261 /* *= */,RDP_T_43 /* + */,RDP_T_4343 /* ++ */,RDP_T_4361 /* += */,
RDP_T_44 /* , */,RDP_T_45 /* - */,RDP_T_4545 /* -- */,RDP_T_4561 /* -= */,RDP_T_46 /* . */,RDP_T_4646 /* .. */,RDP_T_464646 /* ... */,RDP_T_47 /* / */,
RDP_T_4742 /* / * */,RDP_T_4747 /* // */,RDP_T_4761 /* /= */,RDP_T_58 /* : */,RDP_T_59 /* ; */,RDP_T_60 /* < */,RDP_T_6060 /* << */,RDP_T_606061 /* <<= */,
RDP_T_6061 /* <= */,RDP_T_61 /* = */,RDP_T_6161 /* == */,RDP_T_62 /* > */,RDP_T_6261 /* >= */,RDP_T_6262 /* >> */,RDP_T_626261 /* >>= */,RDP_T_626262 /* >>> */,
RDP_T_62626261 /* >>>= */,RDP_T_63 /* ? */,RDP_T_64 /* @ */,RDP_T_A,RDP_T_An,RDP_T_Ann,RDP_T_Anno,RDP_T_Annot,
RDP_T_Annota,RDP_T_Annotat,RDP_T_Annotati,RDP_T_Annotatio,RDP_T_Annotation,RDP_T_AnnotationM,RDP_T_AnnotationMe,RDP_T_AnnotationMet,
RDP_T_AnnotationMeth,RDP_T_AnnotationMetho,RDP_T_AnnotationMethod,RDP_T_AnnotationMethodO,RDP_T_AnnotationMethodOr,RDP_T_AnnotationMethodOrC,RDP_T_AnnotationMethodOrCo,RDP_T_AnnotationMethodOrCon,
RDP_T_AnnotationMethodOrCons,RDP_T_AnnotationMethodOrConst,RDP_T_AnnotationMethodOrConsta,RDP_T_AnnotationMethodOrConstan,RDP_T_AnnotationMethodOrConstant,RDP_T_AnnotationMethodOrConstantR,RDP_T_AnnotationMethodOrConstantRe,RDP_T_AnnotationMethodOrConstantRes,
RDP_T_AnnotationMethodOrConstantRest,RDP_T_6511011011111697116105111110771011161041111007911467111110115116971101168210111511659 /* AnnotationMethodOrConstantRest; */,RDP_T_BooleanLiteral,RDP_T_CharacterLiteral,RDP_T_Expressions,RDP_T_FloatingPointLiteral,RDP_T_Fo,RDP_T_For,
RDP_T_ForI,RDP_T_ForIn,RDP_T_ForIni,RDP_T_ForInit,RDP_T_701111147311010511659 /* ForInit; */,RDP_T_ForUpdate,RDP_T_FormalParameter,RDP_T_IDENTIFIER,
RDP_T_IntegerLiteral,RDP_T_NullLiteral,RDP_T_StringLiteral,RDP_T_TypeName,RDP_T_V,RDP_T_Va,RDP_T_Var,RDP_T_Vari,
RDP_T_Varia,RDP_T_Variab,RDP_T_Variabl,RDP_T_Variable,RDP_T_VariableD,RDP_T_VariableDe,RDP_T_VariableDec,RDP_T_VariableDecl,
RDP_T_VariableDecla,RDP_T_VariableDeclar,RDP_T_VariableDeclara,RDP_T_VariableDeclarat,RDP_T_VariableDeclarato,RDP_T_VariableDeclarator,RDP_T_VariableDeclarators,RDP_T_VariableDeclaratorsR,
RDP_T_VariableDeclaratorsRe,RDP_T_VariableDeclaratorsRes,RDP_T_VariableDeclaratorsRest,RDP_T_86971141059798108101681019910897114971161111141158210111511659 /* VariableDeclaratorsRest; */,RDP_T_91 /* [ */,RDP_T_93 /* ] */,RDP_T_94 /* ^ */,RDP_T_9461 /* ^= */,
RDP_T_abstract,RDP_T_assert,RDP_T_boolean,RDP_T_break,RDP_T_byte,RDP_T_case,RDP_T_catch,RDP_T_char,
RDP_T_class,RDP_T_continue,RDP_T_default,RDP_T_do,RDP_T_double,RDP_T_else,RDP_T_enum,RDP_T_extends,
RDP_T_final,RDP_T_finally,RDP_T_float,RDP_T_for,RDP_T_if,RDP_T_implements,RDP_T_import,RDP_T_instanceof,
RDP_T_int,RDP_T_interface,RDP_T_long,RDP_T_native,RDP_T_new,RDP_T_package,RDP_T_private,RDP_T_protected,
RDP_T_public,RDP_T_return,RDP_T_short,RDP_T_static,RDP_T_strictfp,RDP_T_super,RDP_T_switch,RDP_T_synchronized,
RDP_T_this,RDP_T_throw,RDP_T_throws,RDP_T_transient,RDP_T_try,RDP_T_void,RDP_T_11811110510046 /* void. */,RDP_T_1181111051004699 /* void.c */,
RDP_T_1181111051004699108 /* void.cl */,RDP_T_118111105100469910897 /* void.cla */,RDP_T_118111105100469910897115 /* void.clas */,RDP_T_118111105100469910897115115 /* void.class */,RDP_T_volatile,RDP_T_while,RDP_T_123 /* { */,RDP_T_124 /* | */,
RDP_T_124124 /* || */,RDP_T_125 /* } */,RDP_T_126 /* ~ */,
RDP_TT_TOP
};

/* Tree data types */

typedef struct rdp_tree_node_data_struct
{
  SCAN_DATA
  
} rdp_tree_node_data;
typedef struct rdp_tree_edge_data_struct
{
  int rdp_edge_kind;
  
} rdp_tree_edge_data;

/* Symbol table support */
/* Parser start production */
void lexerGrammar(void);



#endif

/* End of java_lex.h */
