(* Lexer grammar generated by RDP *)

lexerGrammar ::= { INTEGER | REAL | ID |
  STRING_ESC('\"' '\\') |
  '#' |
  STRING_ESC('\'' '\\') |
  '(' |
  ')' |
  '*' |
  '.' |
  ':' |
  '::' |
  '::=' |
  '<' |
  '>' |
  '@' |
  'ALT_ID' |
  'ANNOTATED_EPSILON_TREE' |
  'ARG_BLANK' |
  'ARG_BOOLEAN' |
  'ARG_NUMERIC' |
  'ARG_STRING' |
  'CASE_INSENSITIVE' |
  'CHAR' |
  'CHAR_ESC' |
  'COMMENT' |
  'COMMENT_LINE' |
  'COMMENT_LINE_VISIBLE' |
  'COMMENT_NEST' |
  'COMMENT_NEST_VISIBLE' |
  'COMMENT_VISIBLE' |
  'DERIVATION_TREE' |
  'EPSILON_TREE' |
  'HASH_PRIME' |
  'HASH_SIZE' |
  'INCLUDE' |
  'INTERPRETER' |
  'MAX_ERRORS' |
  'MAX_WARNINGS' |
  'MULTIPLE_SOURCE_FILES' |
  'NEW_ID' |
  'NUMBER' |
  'OPTION' |
  'OUTPUT_FILE' |
  'PARSER' |
  'PASSES' |
  'POST_PARSE' |
  'POST_PROCESS' |
  'PRE_PARSE' |
  'PRE_PROCESS' |
  'RETAIN_COMMENTS' |
  'SET_SIZE' |
  'SHOW_SKIPS' |
  'STRING' |
  'STRING_ESC' |
  'SUFFIX' |
  'SUPPRESS_BUILT_IN_ARGUMENTS' |
  'SYMBOL_TABLE' |
  'TAB_WIDTH' |
  'TEXT_SIZE' |
  'TITLE' |
  'TREE' |
  'USES' |
  '[' |
  ']' |
  '^' |
  '^^' |
  '^^^' |
  '^_' |
  '{' |
  '|' |
  '}'
}.


comment1 ::= COMMENT('(*' '*)').
comment2 ::= COMMENT_VISIBLE('[*' '*]').