/*******************************************************************************
*
* Parser generated by RDP on Feb 23 2017 15:34:35 from artparse.bnf
*
*******************************************************************************/
#include <time.h>
#include "artaux.h"
#include "artparse.h"

const char
  *rdp_sourcefilename,          /* current source file name */
  **rdp_sourcefilenames,        /* array of source file names */
  *rdp_outputfilename = "artparse.out";         /* output file name */

int
  rdp_symbol_echo = 0,                 /* symbol echo flag */
  rdp_verbose = 0,                     /* verbosity flag */
  rdp_sourcefilenumber,                /* Source file counter */
  rdp_pass;                            /* pass number */

int rdp_error_return = 0;              /* return value for main routine */

const char *rdp_tokens = "IGNORE\0" 
"ID\0" "INTEGER\0" "REAL\0" "CHAR\0" "CHAR_ESC\0" "STRING\0" "STRING_ESC\0" "COMMENT\0" 
"COMMENT_VISIBLE\0" "COMMENT_NEST\0" "COMMENT_NEST_VISIBLE\0" "COMMENT_LINE\0" "COMMENT_LINE_VISIBLE\0" "EOF\0" "EOLN\0" "'!'\0" 
"'\"'\0" "'#'\0" "'$'\0" "'%'\0" "'%%'\0" "'&'\0" "'\''\0" "'('\0" 
"'(*'\0" "')'\0" "'*'\0" "'+'\0" "','\0" "'.'\0" "'..'\0" "'/'\0" 
"'//'\0" "':'\0" "':/'\0" "':/='\0" "'::'\0" "'::='\0" "';'\0" "'<'\0" 
"'<-'\0" "'<-*'\0" "'<<'\0" "'<<<'\0" "'<='\0" "'<=*'\0" "'='\0" "'>'\0" 
"'>>'\0" "'>>>'\0" "'?'\0" "'@'\0" "'['\0" "']'\0" "'^'\0" "'^^'\0" 
"'^_'\0" "'`'\0" "'lexical'\0" "'prelude'\0" "'support'\0" "'{'\0" "'|'\0" "'~'\0" 
;


/* Tree update function for noterminal nodes */
static int rdp_tree_update = 0;

rdp_tree_node_data* rdp_tree_last_child;

rdp_tree_node_data* rdp_add_node(const char* id, rdp_tree_node_data* rdp_tree)
{
  if (rdp_tree_update)
  {
     rdp_tree_node_data *node  = (rdp_tree_node_data*) graph_insert_node(sizeof(rdp_tree_node_data), rdp_tree);
     if (id != NULL)
       node->id = id;
     else
       memcpy(node, text_scan_data, sizeof(scan_data));
       return node;
  }
  else
    return NULL;
}

rdp_tree_node_data* rdp_add_child(const char* id, rdp_tree_node_data* rdp_tree)
{
  if (rdp_tree_update)
  {
    rdp_tree_last_child = (rdp_tree_node_data*) graph_insert_node(sizeof(rdp_tree_node_data), rdp_tree);
      if (id != NULL)
        rdp_tree_last_child->id = id;
    else
      memcpy(rdp_tree_last_child, text_scan_data, sizeof(scan_data));

    ((rdp_tree_edge_data*) graph_insert_edge_after_final(sizeof(rdp_tree_edge_data), rdp_tree_last_child, rdp_tree))->rdp_edge_kind = 1;
    return rdp_tree_last_child;
  }
  else
    return NULL;
}

rdp_tree_node_data* rdp_add_parent(const char* id, rdp_tree_node_data* rdp_tree)
{
  if (rdp_tree_update)
  {
    rdp_tree_node_data *parent = (rdp_tree_node_data*) graph_insert_node_parent(sizeof(rdp_tree_node_data), sizeof(rdp_tree_edge_data), rdp_tree);
    if (id != NULL)
      parent->id = id;
    else
      memcpy(parent, text_scan_data, sizeof(scan_data));

    ((rdp_tree_edge_data*) graph_next_out_edge(parent))->rdp_edge_kind = 1;

    return parent;
  }
  else
    return NULL;
}


/* Load keywords */
static void rdp_load_keywords(void)
{
  scan_load_keyword("!", NULL, RDP_T_33 /* ! */, SCAN_P_IGNORE);
  scan_load_keyword("\"", "\\", RDP_T_34 /* " */, SCAN_P_STRING_ESC);
  scan_load_keyword("#", NULL, RDP_T_35 /* # */, SCAN_P_IGNORE);
  scan_load_keyword("$", "\\", RDP_T_36 /* $ */, SCAN_P_STRING_ESC);
  scan_load_keyword("%", "\\", RDP_T_37 /* % */, SCAN_P_STRING_ESC);
  scan_load_keyword("%%", NULL, RDP_T_3737 /* %% */, SCAN_P_IGNORE);
  scan_load_keyword("&", NULL, RDP_T_38 /* & */, SCAN_P_IGNORE);
  scan_load_keyword("\'", "\\", RDP_T_39 /* ' */, SCAN_P_STRING_ESC);
  scan_load_keyword("(", NULL, RDP_T_40 /* ( */, SCAN_P_IGNORE);
  scan_load_keyword("(*", "*)", RDP_T_4042 /* (* */, SCAN_P_COMMENT_NEST);
  scan_load_keyword(")", NULL, RDP_T_41 /* ) */, SCAN_P_IGNORE);
  scan_load_keyword("*", NULL, RDP_T_42 /* * */, SCAN_P_IGNORE);
  scan_load_keyword("+", NULL, RDP_T_43 /* + */, SCAN_P_IGNORE);
  scan_load_keyword(",", NULL, RDP_T_44 /* , */, SCAN_P_IGNORE);
  scan_load_keyword(".", NULL, RDP_T_46 /* . */, SCAN_P_IGNORE);
  scan_load_keyword("..", NULL, RDP_T_4646 /* .. */, SCAN_P_IGNORE);
  scan_load_keyword("/", NULL, RDP_T_47 /* / */, SCAN_P_IGNORE);
  scan_load_keyword("//", NULL, RDP_T_4747 /* // */, SCAN_P_COMMENT_LINE);
  scan_load_keyword(":", NULL, RDP_T_58 /* : */, SCAN_P_IGNORE);
  scan_load_keyword(":/", NULL, RDP_T_5847 /* :/ */, SCAN_P_IGNORE);
  scan_load_keyword(":/=", NULL, RDP_T_584761 /* :/= */, SCAN_P_IGNORE);
  scan_load_keyword("::", NULL, RDP_T_5858 /* :: */, SCAN_P_IGNORE);
  scan_load_keyword("::=", NULL, RDP_T_585861 /* ::= */, SCAN_P_IGNORE);
  scan_load_keyword(";", NULL, RDP_T_59 /* ; */, SCAN_P_IGNORE);
  scan_load_keyword("<", NULL, RDP_T_60 /* < */, SCAN_P_IGNORE);
  scan_load_keyword("<-", NULL, RDP_T_6045 /* <- */, SCAN_P_IGNORE);
  scan_load_keyword("<-*", NULL, RDP_T_604542 /* <-* */, SCAN_P_IGNORE);
  scan_load_keyword("<<", NULL, RDP_T_6060 /* << */, SCAN_P_IGNORE);
  scan_load_keyword("<<<", NULL, RDP_T_606060 /* <<< */, SCAN_P_IGNORE);
  scan_load_keyword("<=", NULL, RDP_T_6061 /* <= */, SCAN_P_IGNORE);
  scan_load_keyword("<=*", NULL, RDP_T_606142 /* <=* */, SCAN_P_IGNORE);
  scan_load_keyword("=", NULL, RDP_T_61 /* = */, SCAN_P_IGNORE);
  scan_load_keyword(">", NULL, RDP_T_62 /* > */, SCAN_P_IGNORE);
  scan_load_keyword(">>", NULL, RDP_T_6262 /* >> */, SCAN_P_IGNORE);
  scan_load_keyword(">>>", NULL, RDP_T_626262 /* >>> */, SCAN_P_IGNORE);
  scan_load_keyword("?", NULL, RDP_T_63 /* ? */, SCAN_P_IGNORE);
  scan_load_keyword("@", NULL, RDP_T_64 /* @ */, SCAN_P_IGNORE);
  scan_load_keyword("[", NULL, RDP_T_91 /* [ */, SCAN_P_IGNORE);
  scan_load_keyword("]", NULL, RDP_T_93 /* ] */, SCAN_P_IGNORE);
  scan_load_keyword("^", NULL, RDP_T_94 /* ^ */, SCAN_P_IGNORE);
  scan_load_keyword("^^", NULL, RDP_T_9494 /* ^^ */, SCAN_P_IGNORE);
  scan_load_keyword("^_", NULL, RDP_T_9495 /* ^_ */, SCAN_P_IGNORE);
  scan_load_keyword("`", "\\", RDP_T_96 /* ` */, SCAN_P_CHAR_ESC);
  scan_load_keyword("lexical", NULL, RDP_T_lexical, SCAN_P_IGNORE);
  scan_load_keyword("prelude", NULL, RDP_T_prelude, SCAN_P_IGNORE);
  scan_load_keyword("support", NULL, RDP_T_support, SCAN_P_IGNORE);
  scan_load_keyword("{", "}", RDP_T_123 /* { */, SCAN_P_COMMENT_NEST_VISIBLE);
  scan_load_keyword("|", NULL, RDP_T_124 /* | */, SCAN_P_IGNORE);
  scan_load_keyword("~", NULL, RDP_T_126 /* ~ */, SCAN_P_IGNORE);
}

/* Set declarations */

  set_ abbrev_first = SET_NULL;
  set_ abbrev_stop = SET_NULL;
  set_ alt_first = SET_NULL;
  set_ alt_stop = SET_NULL;
  set_ annotation_stop = SET_NULL;
  set_ attribute_first = SET_NULL;
  set_ attribute_stop = SET_NULL;
  set_ attributes_stop = SET_NULL;
  set_ body_first = SET_NULL;
  set_ body_stop = SET_NULL;
  set_ builtinTerm_stop = SET_NULL;
  set_ caseInsensTerm_stop = SET_NULL;
  set_ caseSensTerm_stop = SET_NULL;
  set_ cat_first = SET_NULL;
  set_ cat_stop = SET_NULL;
  set_ charTerm_stop = SET_NULL;
  set_ comment1_stop = SET_NULL;
  set_ comment2_stop = SET_NULL;
  set_ delay_stop = SET_NULL;
  set_ deleter_stop = SET_NULL;
  set_ diff_first = SET_NULL;
  set_ diff_stop = SET_NULL;
  set_ elem_first = SET_NULL;
  set_ elem_stop = SET_NULL;
  set_ epsilon_stop = SET_NULL;
  set_ equation_stop = SET_NULL;
  set_ equationBody_first = SET_NULL;
  set_ equationBody_stop = SET_NULL;
  set_ equationLabel_stop = SET_NULL;
  set_ fold_first = SET_NULL;
  set_ fold_stop = SET_NULL;
  set_ fullNonterm_first = SET_NULL;
  set_ fullNonterm_stop = SET_NULL;
  set_ gather_stop = SET_NULL;
  set_ identifier_first = SET_NULL;
  set_ identifier_stop = SET_NULL;
  set_ import_first = SET_NULL;
  set_ import_stop = SET_NULL;
  set_ importLHS_first = SET_NULL;
  set_ importLHS_stop = SET_NULL;
  set_ importOp_first = SET_NULL;
  set_ importOp_stop = SET_NULL;
  set_ importRHS_first = SET_NULL;
  set_ importRHS_stop = SET_NULL;
  set_ imports_stop = SET_NULL;
  set_ insertTearName_stop = SET_NULL;
  set_ insertion_stop = SET_NULL;
  set_ iter_first = SET_NULL;
  set_ iter_stop = SET_NULL;
  set_ lexical_stop = SET_NULL;
  set_ lexicalDisambiguator_first = SET_NULL;
  set_ lexicalDisambiguator_stop = SET_NULL;
  set_ lexicalGroup_first = SET_NULL;
  set_ lexicalGroup_stop = SET_NULL;
  set_ lexicalItem_first = SET_NULL;
  set_ lexicalItem_stop = SET_NULL;
  set_ major_first = SET_NULL;
  set_ major_stop = SET_NULL;
  set_ name_stop = SET_NULL;
  set_ nonTerm_first = SET_NULL;
  set_ nonTerm_stop = SET_NULL;
  set_ options_stop = SET_NULL;
  set_ pos_first = SET_NULL;
  set_ pos_stop = SET_NULL;
  set_ prelude_stop = SET_NULL;
  set_ production_stop = SET_NULL;
  set_ rdp_abbrev_3_first = SET_NULL;
  set_ rdp_abbrev_4_first = SET_NULL;
  set_ rdp_abbrev_5_first = SET_NULL;
  set_ rdp_abbrev_6_first = SET_NULL;
  set_ rdp_alt_2_first = SET_NULL;
  set_ rdp_attribute_0_first = SET_NULL;
  set_ rdp_attributes_0_first = SET_NULL;
  set_ rdp_attributes_1_first = SET_NULL;
  set_ rdp_body_2_first = SET_NULL;
  set_ rdp_cat_0_first = SET_NULL;
  set_ rdp_cat_1_first = SET_NULL;
  set_ rdp_cat_2_first = SET_NULL;
  set_ rdp_diff_2_first = SET_NULL;
  set_ rdp_elem_1_first = SET_NULL;
  set_ rdp_elem_14_first = SET_NULL;
  set_ rdp_elem_15_first = SET_NULL;
  set_ rdp_elem_16_first = SET_NULL;
  set_ rdp_elem_7_first = SET_NULL;
  set_ rdp_equationBody_0_first = SET_NULL;
  set_ rdp_fullNonterm_2_first = SET_NULL;
  set_ rdp_importLHS_0_first = SET_NULL;
  set_ rdp_importRHS_0_first = SET_NULL;
  set_ rdp_import_0_first = SET_NULL;
  set_ rdp_import_1_first = SET_NULL;
  set_ rdp_import_2_first = SET_NULL;
  set_ rdp_import_3_first = SET_NULL;
  set_ rdp_imports_0_first = SET_NULL;
  set_ rdp_imports_1_first = SET_NULL;
  set_ rdp_iter_2_first = SET_NULL;
  set_ rdp_lexicalDisambiguator_10_first = SET_NULL;
  set_ rdp_lexicalDisambiguator_11_first = SET_NULL;
  set_ rdp_lexicalDisambiguator_2_first = SET_NULL;
  set_ rdp_lexicalDisambiguator_3_first = SET_NULL;
  set_ rdp_lexicalDisambiguator_8_first = SET_NULL;
  set_ rdp_lexicalDisambiguator_9_first = SET_NULL;
  set_ rdp_lexicalGroup_0_first = SET_NULL;
  set_ rdp_lexicalItem_0_first = SET_NULL;
  set_ rdp_major_0_first = SET_NULL;
  set_ rdp_major_10_first = SET_NULL;
  set_ rdp_major_6_first = SET_NULL;
  set_ rdp_major_7_first = SET_NULL;
  set_ rdp_major_8_first = SET_NULL;
  set_ rdp_major_9_first = SET_NULL;
  set_ rdp_nonTerm_0_first = SET_NULL;
  set_ rdp_pos_6_first = SET_NULL;
  set_ rdp_pos_7_first = SET_NULL;
  set_ rdp_rewriteSet_0_first = SET_NULL;
  set_ rdp_rewriteSet_1_first = SET_NULL;
  set_ rdp_start_0_first = SET_NULL;
  set_ rdp_start_1_first = SET_NULL;
  set_ rdp_support_2_first = SET_NULL;
  set_ rdp_text_0_first = SET_NULL;
  set_ rdp_text_1_first = SET_NULL;
  set_ rdp_text_2_first = SET_NULL;
  set_ rdp_unarynot_2_first = SET_NULL;
  set_ rdp_whitespace_0_first = SET_NULL;
  set_ rdp_whitespace_4_first = SET_NULL;
  set_ rdp_whitespace_5_first = SET_NULL;
  set_ rdp_whitespace_6_first = SET_NULL;
  set_ rdp_whitespace_7_first = SET_NULL;
  set_ rewriteSet_stop = SET_NULL;
  set_ start_stop = SET_NULL;
  set_ support_stop = SET_NULL;
  set_ text_first = SET_NULL;
  set_ text_stop = SET_NULL;
  set_ unarynot_first = SET_NULL;
  set_ unarynot_stop = SET_NULL;
  set_ whitespace_first = SET_NULL;
  set_ whitespace_stop = SET_NULL;

/* Initialise sets */

static void rdp_set_initialise(void)
{
  set_assign_list(&abbrev_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_96 /* ` */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&abbrev_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_46 /* . */, 
RDP_T_59 /* ; */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_96 /* ` */, RDP_T_123 /* { */, 
RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&alt_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_46 /* . */, RDP_T_91 /* [ */, 
RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&alt_stop, SCAN_P_EOF, RDP_T_41 /* ) */,SET_END);
  set_assign_list(&annotation_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_37 /* % */, 
RDP_T_3737 /* %% */, RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_96 /* ` */, 
RDP_T_lexical, RDP_T_prelude, RDP_T_support, RDP_T_123 /* { */, RDP_T_124 /* | */, 
RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&attribute_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&attribute_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_62 /* > */,SET_END);
  set_assign_list(&attributes_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_585861 /* ::= */, 
RDP_T_60 /* < */, RDP_T_lexical, RDP_T_prelude, RDP_T_support, RDP_T_123 /* { */,SET_END);
  set_assign_list(&body_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_46 /* . */, RDP_T_91 /* [ */, 
RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&body_stop, SCAN_P_EOF, RDP_T_59 /* ; */,SET_END);
  set_assign_list(&builtinTerm_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_33 /* ! */, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, 
RDP_T_3737 /* %% */, RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, 
RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_47 /* / */, 
RDP_T_58 /* : */, RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_6060 /* << */, RDP_T_606060 /* <<< */, 
RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_626262 /* >>> */, RDP_T_63 /* ? */, 
RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, 
RDP_T_9495 /* ^_ */, RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&caseInsensTerm_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_33 /* ! */, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, 
RDP_T_3737 /* %% */, RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, 
RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_47 /* / */, 
RDP_T_58 /* : */, RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_6060 /* << */, RDP_T_606060 /* <<< */, 
RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_626262 /* >>> */, RDP_T_63 /* ? */, 
RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, 
RDP_T_9495 /* ^_ */, RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&caseSensTerm_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_33 /* ! */, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, 
RDP_T_3737 /* %% */, RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, 
RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_47 /* / */, 
RDP_T_58 /* : */, RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_6060 /* << */, RDP_T_606060 /* <<< */, 
RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_626262 /* >>> */, RDP_T_63 /* ? */, 
RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, 
RDP_T_9495 /* ^_ */, RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&cat_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_46 /* . */, RDP_T_91 /* [ */, 
RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&cat_stop, SCAN_P_EOF, RDP_T_41 /* ) */, RDP_T_59 /* ; */, RDP_T_93 /* ] */, RDP_T_124 /* | */,SET_END);
  set_assign_list(&charTerm_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_33 /* ! */, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, 
RDP_T_3737 /* %% */, RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, 
RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_47 /* / */, 
RDP_T_58 /* : */, RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_6060 /* << */, RDP_T_606060 /* <<< */, 
RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_626262 /* >>> */, RDP_T_63 /* ? */, 
RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, 
RDP_T_9495 /* ^_ */, RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&comment1_stop, SCAN_P_EOF,SET_END);
  set_assign_list(&comment2_stop, SCAN_P_EOF,SET_END);
  set_assign_list(&delay_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_33 /* ! */, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, 
RDP_T_3737 /* %% */, RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, 
RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_46 /* . */, RDP_T_47 /* / */, RDP_T_59 /* ; */, 
RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_63 /* ? */, RDP_T_64 /* @ */, RDP_T_91 /* [ */, 
RDP_T_93 /* ] */, RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, RDP_T_9495 /* ^_ */, 
RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&deleter_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_46 /* . */, RDP_T_91 /* [ */, 
RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&diff_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_96 /* ` */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&diff_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_42 /* * */, 
RDP_T_43 /* + */, RDP_T_46 /* . */, RDP_T_59 /* ; */, RDP_T_63 /* ? */, RDP_T_64 /* @ */, 
RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_124 /* | */, 
RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&elem_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_96 /* ` */, SET_END);
  set_assign_list(&elem_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_42 /* * */, 
RDP_T_43 /* + */, RDP_T_46 /* . */, RDP_T_47 /* / */, RDP_T_59 /* ; */, RDP_T_63 /* ? */, 
RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_96 /* ` */, RDP_T_123 /* { */, 
RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&epsilon_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_33 /* ! */, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, 
RDP_T_3737 /* %% */, RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, 
RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_46 /* . */, RDP_T_47 /* / */, RDP_T_58 /* : */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_63 /* ? */, 
RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, 
RDP_T_9495 /* ^_ */, RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&equation_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, 
RDP_T_support,SET_END);
  set_assign_list(&equationBody_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&equationBody_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, 
RDP_T_support,SET_END);
  set_assign_list(&equationLabel_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */,SET_END);
  set_assign_list(&fold_first, RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, 
RDP_T_9495 /* ^_ */, SET_END);
  set_assign_list(&fold_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_42 /* * */, 
RDP_T_43 /* + */, RDP_T_46 /* . */, RDP_T_47 /* / */, RDP_T_59 /* ; */, RDP_T_63 /* ? */, 
RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_96 /* ` */, RDP_T_123 /* { */, 
RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&fullNonterm_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&fullNonterm_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_44 /* , */, 
RDP_T_6045 /* <- */, RDP_T_604542 /* <-* */, RDP_T_6060 /* << */, RDP_T_606060 /* <<< */, 
RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */, RDP_T_62 /* > */, RDP_T_6262 /* >> */, 
RDP_T_626262 /* >>> */, RDP_T_94 /* ^ */,SET_END);
  set_assign_list(&gather_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_42 /* * */, 
RDP_T_43 /* + */, RDP_T_46 /* . */, RDP_T_47 /* / */, RDP_T_59 /* ; */, RDP_T_62 /* > */, 
RDP_T_6262 /* >> */, RDP_T_63 /* ? */, RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, 
RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, RDP_T_9495 /* ^_ */, RDP_T_96 /* ` */, 
RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&identifier_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&identifier_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_33 /* ! */, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, 
RDP_T_37 /* % */, RDP_T_3737 /* %% */, RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, 
RDP_T_41 /* ) */, RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_44 /* , */, RDP_T_46 /* . */, 
RDP_T_47 /* / */, RDP_T_58 /* : */, RDP_T_584761 /* :/= */, RDP_T_585861 /* ::= */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_6045 /* <- */, RDP_T_604542 /* <-* */, 
RDP_T_6060 /* << */, RDP_T_606060 /* <<< */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */, 
RDP_T_61 /* = */, RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_626262 /* >>> */, 
RDP_T_63 /* ? */, RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_94 /* ^ */, 
RDP_T_9494 /* ^^ */, RDP_T_9495 /* ^_ */, RDP_T_96 /* ` */, RDP_T_lexical, RDP_T_prelude, 
RDP_T_support, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&import_first, SCAN_P_ID, RDP_T_36 /* $ */, RDP_T_6045 /* <- */, RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, 
RDP_T_606142 /* <=* */, SET_END);
  set_assign_list(&import_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_6045 /* <- */, 
RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */,SET_END);
  set_assign_list(&importLHS_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&importLHS_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_6045 /* <- */, 
RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */,SET_END);
  set_assign_list(&importOp_first, RDP_T_6045 /* <- */, RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */, SET_END);
  set_assign_list(&importOp_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_40 /* ( */,SET_END);
  set_assign_list(&importRHS_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&importRHS_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_6045 /* <- */, 
RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */,SET_END);
  set_assign_list(&imports_stop, SCAN_P_EOF, RDP_T_40 /* ( */,SET_END);
  set_assign_list(&insertTearName_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_33 /* ! */, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, 
RDP_T_3737 /* %% */, RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, 
RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_46 /* . */, RDP_T_47 /* / */, RDP_T_58 /* : */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_63 /* ? */, 
RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, 
RDP_T_9495 /* ^_ */, RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&insertion_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_59 /* ; */, 
RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_124 /* | */, 
RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&iter_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_96 /* ` */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&iter_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_42 /* * */, 
RDP_T_43 /* + */, RDP_T_46 /* . */, RDP_T_59 /* ; */, RDP_T_63 /* ? */, RDP_T_91 /* [ */, 
RDP_T_93 /* ] */, RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&lexical_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, 
RDP_T_support,SET_END);
  set_assign_list(&lexicalDisambiguator_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_36 /* $ */, RDP_T_38 /* & */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_96 /* ` */, SET_END);
  set_assign_list(&lexicalDisambiguator_stop, SCAN_P_EOF, RDP_T_41 /* ) */, RDP_T_44 /* , */,SET_END);
  set_assign_list(&lexicalGroup_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_36 /* $ */, RDP_T_38 /* & */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_96 /* ` */, SET_END);
  set_assign_list(&lexicalGroup_stop, SCAN_P_EOF, RDP_T_41 /* ) */, RDP_T_44 /* , */, RDP_T_6060 /* << */, RDP_T_606060 /* <<< */, 
RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_626262 /* >>> */, RDP_T_94 /* ^ */,SET_END);
  set_assign_list(&lexicalItem_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_36 /* $ */, RDP_T_38 /* & */, RDP_T_39 /* ' */, 
RDP_T_96 /* ` */, SET_END);
  set_assign_list(&lexicalItem_stop, SCAN_P_EOF, RDP_T_41 /* ) */, RDP_T_44 /* , */, RDP_T_6060 /* << */, RDP_T_606060 /* <<< */, 
RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_626262 /* >>> */, RDP_T_94 /* ^ */,SET_END);
  set_assign_list(&major_first, SCAN_P_ID, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, RDP_T_support, SET_END);
  set_assign_list(&major_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, 
RDP_T_support,SET_END);
  set_assign_list(&name_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_33 /* ! */, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, 
RDP_T_3737 /* %% */, RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, 
RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_46 /* . */, RDP_T_47 /* / */, RDP_T_585861 /* ::= */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_63 /* ? */, 
RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, 
RDP_T_9495 /* ^_ */, RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&nonTerm_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&nonTerm_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_33 /* ! */, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, 
RDP_T_3737 /* %% */, RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, 
RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_46 /* . */, RDP_T_47 /* / */, RDP_T_58 /* : */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_63 /* ? */, 
RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, 
RDP_T_9495 /* ^_ */, RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&options_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, 
RDP_T_support,SET_END);
  set_assign_list(&pos_first, RDP_T_46 /* . */, RDP_T_91 /* [ */, RDP_T_123 /* { */, SET_END);
  set_assign_list(&pos_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_59 /* ; */, 
RDP_T_93 /* ] */, RDP_T_96 /* ` */, RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&prelude_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, 
RDP_T_support,SET_END);
  set_assign_list(&production_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_46 /* . */, RDP_T_91 /* [ */, 
RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&rdp_abbrev_3_first, RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_63 /* ? */, SET_END);
  set_assign_list(&rdp_abbrev_4_first, RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_63 /* ? */, SET_END);
  set_assign_list(&rdp_abbrev_5_first, RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_63 /* ? */, SET_END);
  set_assign_list(&rdp_abbrev_6_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_96 /* ` */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_alt_2_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_46 /* . */, RDP_T_91 /* [ */, 
RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_attribute_0_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_attributes_0_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_attributes_1_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_body_2_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_46 /* . */, RDP_T_91 /* [ */, 
RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_cat_0_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_96 /* ` */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_cat_1_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_96 /* ` */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_cat_2_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_46 /* . */, RDP_T_91 /* [ */, 
RDP_T_96 /* ` */, RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_diff_2_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_96 /* ` */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_elem_1_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_elem_14_first, RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, 
RDP_T_9495 /* ^_ */, SET_END);
  set_assign_list(&rdp_elem_15_first, RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_94 /* ^ */, RDP_T_9494 /* ^^ */, 
RDP_T_9495 /* ^_ */, SET_END);
  set_assign_list(&rdp_elem_16_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_96 /* ` */, SET_END);
  set_assign_list(&rdp_elem_7_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_96 /* ` */, SET_END);
  set_assign_list(&rdp_equationBody_0_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_fullNonterm_2_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_importLHS_0_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_importRHS_0_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_import_0_first, RDP_T_6045 /* <- */, RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */, SET_END);
  set_assign_list(&rdp_import_1_first, RDP_T_6045 /* <- */, RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */, SET_END);
  set_assign_list(&rdp_import_2_first, RDP_T_6045 /* <- */, RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */, SET_END);
  set_assign_list(&rdp_import_3_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_imports_0_first, SCAN_P_ID, RDP_T_36 /* $ */, RDP_T_6045 /* <- */, RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, 
RDP_T_606142 /* <=* */, SET_END);
  set_assign_list(&rdp_imports_1_first, SCAN_P_ID, RDP_T_36 /* $ */, RDP_T_6045 /* <- */, RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, 
RDP_T_606142 /* <=* */, SET_END);
  set_assign_list(&rdp_iter_2_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_96 /* ` */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_lexicalDisambiguator_10_first, RDP_T_6060 /* << */, RDP_T_606060 /* <<< */, RDP_T_62 /* > */, RDP_T_6262 /* >> */, 
RDP_T_626262 /* >>> */, RDP_T_94 /* ^ */, SET_END);
  set_assign_list(&rdp_lexicalDisambiguator_11_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_36 /* $ */, RDP_T_38 /* & */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_96 /* ` */, SET_END);
  set_assign_list(&rdp_lexicalDisambiguator_2_first, RDP_T_606060 /* <<< */, RDP_T_626262 /* >>> */, SET_END);
  set_assign_list(&rdp_lexicalDisambiguator_3_first, RDP_T_606060 /* <<< */, RDP_T_626262 /* >>> */, SET_END);
  set_assign_list(&rdp_lexicalDisambiguator_8_first, RDP_T_6060 /* << */, RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_94 /* ^ */, SET_END);
  set_assign_list(&rdp_lexicalDisambiguator_9_first, RDP_T_6060 /* << */, RDP_T_62 /* > */, RDP_T_6262 /* >> */, RDP_T_94 /* ^ */, SET_END);
  set_assign_list(&rdp_lexicalGroup_0_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_36 /* $ */, RDP_T_38 /* & */, RDP_T_39 /* ' */, 
RDP_T_96 /* ` */, SET_END);
  set_assign_list(&rdp_lexicalItem_0_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_major_0_first, SCAN_P_ID, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_38 /* & */, RDP_T_40 /* ( */, 
RDP_T_6045 /* <- */, RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */, 
RDP_T_96 /* ` */, SET_END);
  set_assign_list(&rdp_major_10_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_major_6_first, RDP_T_58 /* : */, RDP_T_585861 /* ::= */, RDP_T_60 /* < */, SET_END);
  set_assign_list(&rdp_major_7_first, RDP_T_58 /* : */, RDP_T_584761 /* :/= */, RDP_T_585861 /* ::= */, RDP_T_60 /* < */, SET_END);
  set_assign_list(&rdp_major_8_first, RDP_T_58 /* : */, RDP_T_584761 /* :/= */, RDP_T_585861 /* ::= */, RDP_T_60 /* < */, SET_END);
  set_assign_list(&rdp_major_9_first, SCAN_P_ID, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_38 /* & */, RDP_T_40 /* ( */, 
RDP_T_58 /* : */, RDP_T_584761 /* :/= */, RDP_T_585861 /* ::= */, RDP_T_60 /* < */, 
RDP_T_6045 /* <- */, RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */, 
RDP_T_96 /* ` */, SET_END);
  set_assign_list(&rdp_nonTerm_0_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_pos_6_first, RDP_T_91 /* [ */, RDP_T_123 /* { */, SET_END);
  set_assign_list(&rdp_pos_7_first, RDP_T_46 /* . */, RDP_T_91 /* [ */, RDP_T_123 /* { */, SET_END);
  set_assign_list(&rdp_rewriteSet_0_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_rewriteSet_1_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_start_0_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_start_1_first, SCAN_P_ID, RDP_T_36 /* $ */, SET_END);
  set_assign_list(&rdp_support_2_first, RDP_T_60 /* < */, RDP_T_123 /* { */, SET_END);
  set_assign_list(&rdp_text_0_first, SCAN_P_ID, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, RDP_T_support, SET_END);
  set_assign_list(&rdp_text_1_first, SCAN_P_ID, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, RDP_T_support, SET_END);
  set_assign_list(&rdp_text_2_first, SCAN_P_ID, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, RDP_T_support, SET_END);
  set_assign_list(&rdp_unarynot_2_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_96 /* ` */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_whitespace_0_first, SCAN_P_ID, RDP_T_36 /* $ */, RDP_T_6045 /* <- */, RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, 
RDP_T_606142 /* <=* */, SET_END);
  set_assign_list(&rdp_whitespace_4_first, RDP_T_35 /* # */, RDP_T_38 /* & */, RDP_T_96 /* ` */, SET_END);
  set_assign_list(&rdp_whitespace_5_first, RDP_T_35 /* # */, RDP_T_38 /* & */, RDP_T_96 /* ` */, SET_END);
  set_assign_list(&rdp_whitespace_6_first, SCAN_P_ID, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_38 /* & */, RDP_T_6045 /* <- */, 
RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */, RDP_T_96 /* ` */, SET_END);
  set_assign_list(&rdp_whitespace_7_first, SCAN_P_ID, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_38 /* & */, RDP_T_6045 /* <- */, 
RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */, RDP_T_96 /* ` */, SET_END);
  set_assign_list(&rewriteSet_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */,SET_END);
  set_assign_list(&start_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, 
RDP_T_support, RDP_T_123 /* { */,SET_END);
  set_assign_list(&support_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, 
RDP_T_support,SET_END);
  set_assign_list(&text_first, SCAN_P_ID, RDP_T_36 /* $ */, RDP_T_37 /* % */, RDP_T_lexical, RDP_T_prelude, RDP_T_support, SET_END);
  set_assign_list(&text_stop, SCAN_P_EOF,SET_END);
  set_assign_list(&unarynot_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_96 /* ` */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&unarynot_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_3737 /* %% */, 
RDP_T_38 /* & */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_42 /* * */, 
RDP_T_43 /* + */, RDP_T_46 /* . */, RDP_T_47 /* / */, RDP_T_59 /* ; */, RDP_T_63 /* ? */, 
RDP_T_64 /* @ */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, RDP_T_96 /* ` */, RDP_T_123 /* { */, 
RDP_T_124 /* | */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&whitespace_first, SCAN_P_ID, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_38 /* & */, RDP_T_6045 /* <- */, 
RDP_T_604542 /* <-* */, RDP_T_6061 /* <= */, RDP_T_606142 /* <=* */, RDP_T_96 /* ` */, SET_END);
  set_assign_list(&whitespace_stop, SCAN_P_EOF, RDP_T_40 /* ( */,SET_END);
}

/* Parser forward declarations and macros */
static void abbrev(rdp_tree_node_data* rdp_tree);
static void alt(rdp_tree_node_data* rdp_tree);
static void annotation(rdp_tree_node_data* rdp_tree);
static void attribute(rdp_tree_node_data* rdp_tree);
static void attributes(rdp_tree_node_data* rdp_tree);
static void body(rdp_tree_node_data* rdp_tree);
static void builtinTerm(rdp_tree_node_data* rdp_tree);
static void caseInsensTerm(rdp_tree_node_data* rdp_tree);
static void caseSensTerm(rdp_tree_node_data* rdp_tree);
static void cat(rdp_tree_node_data* rdp_tree);
static void charTerm(rdp_tree_node_data* rdp_tree);
static void delay(rdp_tree_node_data* rdp_tree);
static void deleter(rdp_tree_node_data* rdp_tree);
static void diff(rdp_tree_node_data* rdp_tree);
static void elem(rdp_tree_node_data* rdp_tree);
static void epsilon(rdp_tree_node_data* rdp_tree);
static void equation(rdp_tree_node_data* rdp_tree);
static void equationBody(rdp_tree_node_data* rdp_tree);
static void equationLabel(rdp_tree_node_data* rdp_tree);
static void fold(rdp_tree_node_data* rdp_tree);
static void fullNonterm(rdp_tree_node_data* rdp_tree);
static void gather(rdp_tree_node_data* rdp_tree);
static void identifier(rdp_tree_node_data* rdp_tree);
static void import(rdp_tree_node_data* rdp_tree);
static void importLHS(rdp_tree_node_data* rdp_tree);
static void importOp(rdp_tree_node_data* rdp_tree);
static void importRHS(rdp_tree_node_data* rdp_tree);
static void imports(rdp_tree_node_data* rdp_tree);
static void insertTearName(rdp_tree_node_data* rdp_tree);
static void insertion(rdp_tree_node_data* rdp_tree);
static void iter(rdp_tree_node_data* rdp_tree);
static void lexical(rdp_tree_node_data* rdp_tree);
static void lexicalDisambiguator(rdp_tree_node_data* rdp_tree);
static void lexicalGroup(rdp_tree_node_data* rdp_tree);
static void lexicalItem(rdp_tree_node_data* rdp_tree);
static void major(rdp_tree_node_data* rdp_tree);
static void name(rdp_tree_node_data* rdp_tree);
static void nonTerm(rdp_tree_node_data* rdp_tree);
static void options(rdp_tree_node_data* rdp_tree);
static void pos(rdp_tree_node_data* rdp_tree);
static void prelude(rdp_tree_node_data* rdp_tree);
static void production(rdp_tree_node_data* rdp_tree);
static void rewriteSet(rdp_tree_node_data* rdp_tree);
static void start(rdp_tree_node_data* rdp_tree);
static void support(rdp_tree_node_data* rdp_tree);
void text(rdp_tree_node_data* rdp_tree);
static void unarynot(rdp_tree_node_data* rdp_tree);
static void whitespace(rdp_tree_node_data* rdp_tree);

/* Global directive code */
 static int artLastParenthesisPosition = 0; 

/* Parser functions */
static void abbrev(rdp_tree_node_data* rdp_tree)
{
  {
    iter(rdp_add_child("iter", rdp_tree));
    if (scan_test_set(NULL, &rdp_abbrev_5_first, NULL))
    { /* Start of rdp_abbrev_5 */
      while (1)
      {
        {
           if (artLastParenthesisPosition != 0 && artLastParenthesisPosition + 1 != scan_column_number())\
                       text_message(TEXT_WARNING_ECHO, "postfix operator not contiguous with closing parenthesis\n"); 
          { /* Start of rdp_abbrev_3 */
            while (1)
            {
              scan_test_set(NULL, &rdp_abbrev_3_first, &abbrev_stop);
              {
                if (scan_test(NULL, RDP_T_42 /* * */, NULL))
                {
                  if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
                  scan_test(NULL, RDP_T_42 /* * */, &abbrev_stop);
                  scan_();
                }
                else
                if (scan_test(NULL, RDP_T_43 /* + */, NULL))
                {
                  if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
                  scan_test(NULL, RDP_T_43 /* + */, &abbrev_stop);
                  scan_();
                }
                else
                if (scan_test(NULL, RDP_T_63 /* ? */, NULL))
                {
                  if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
                  scan_test(NULL, RDP_T_63 /* ? */, &abbrev_stop);
                  scan_();
                }
                else
                  scan_test_set(NULL, &rdp_abbrev_3_first, &abbrev_stop)                ;
                }
              break;   /* hi limit is 1! */
            }
          } /* end of rdp_abbrev_3 */
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_abbrev_5 */
    else
    {
      /* default action processing for rdp_abbrev_5*/
      if (rdp_tree_update) {rdp_tree->id = NULL; rdp_tree->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &abbrev_stop, &abbrev_stop);
   }
}

static void alt(rdp_tree_node_data* rdp_tree)
{
  {
    cat(rdp_add_child("cat", rdp_tree));
    if (scan_test(NULL, RDP_T_124 /* | */, NULL))
    { /* Start of rdp_alt_1 */
      while (1)
      {
        {
          scan_test(NULL, RDP_T_124 /* | */, &alt_stop);
          scan_();
          cat(rdp_add_child("cat", rdp_tree));
          }
        if (!scan_test(NULL, RDP_T_124 /* | */, NULL)) break;
      }
    } /* end of rdp_alt_1 */
    else
    {
      /* default action processing for rdp_alt_1*/
      if (rdp_tree_update) {rdp_tree->id = NULL; rdp_tree->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &alt_stop, &alt_stop);
   }
}

static void annotation(rdp_tree_node_data* rdp_tree)
{
  {
    if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
    scan_test(NULL, RDP_T_123 /* { */, &annotation_stop);
    scan_();
    scan_test_set(NULL, &annotation_stop, &annotation_stop);
   }
}

static void attribute(rdp_tree_node_data* rdp_tree)
{
  {
    if(rdp_tree_update) {rdp_tree->id = "identifier"; rdp_tree->token = 0;}
identifier(rdp_tree);
    scan_test(NULL, RDP_T_58 /* : */, &attribute_stop);
    scan_();
    identifier(rdp_add_child("identifier", rdp_tree));
    scan_test_set(NULL, &attribute_stop, &attribute_stop);
   }
}

static void attributes(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_60 /* < */, &attributes_stop);
    scan_();
    if (scan_test_set(NULL, &rdp_attributes_1_first, NULL))
    { /* Start of rdp_attributes_1 */
      while (1)
      {
        {
          attribute(rdp_add_child("attribute", rdp_tree));
          }
        if (!scan_test_set(NULL, &rdp_attributes_1_first, NULL)) break;
      }
    } /* end of rdp_attributes_1 */
    else
    {
      /* default action processing for rdp_attributes_1*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test(NULL, RDP_T_62 /* > */, &attributes_stop);
    scan_();
    scan_test_set(NULL, &attributes_stop, &attributes_stop);
   }
}

static void body(rdp_tree_node_data* rdp_tree)
{
  {
    cat(rdp_add_child("cat", rdp_tree));
    if (scan_test(NULL, RDP_T_124 /* | */, NULL))
    { /* Start of rdp_body_1 */
      while (1)
      {
        {
          scan_test(NULL, RDP_T_124 /* | */, &body_stop);
          scan_();
          cat(rdp_add_child("cat", rdp_tree));
          }
        if (!scan_test(NULL, RDP_T_124 /* | */, NULL)) break;
      }
    } /* end of rdp_body_1 */
    else
    {
      /* default action processing for rdp_body_1*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &body_stop, &body_stop);
   }
}

static void builtinTerm(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_38 /* & */, &builtinTerm_stop);
    scan_();
    if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
    scan_test(NULL, SCAN_P_ID, &builtinTerm_stop);
    scan_();
    scan_test_set(NULL, &builtinTerm_stop, &builtinTerm_stop);
   }
}

static void caseInsensTerm(rdp_tree_node_data* rdp_tree)
{
  const char* val;
  {
    if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
    scan_test(NULL, RDP_T_34 /* " */, &caseInsensTerm_stop);
    val = SCAN_CAST->id;
    scan_();
     if (*val == 0) text_message(TEXT_ERROR_ECHO, "empty case insensitive terminal\n"); 
    scan_test_set(NULL, &caseInsensTerm_stop, &caseInsensTerm_stop);
   }
}

static void caseSensTerm(rdp_tree_node_data* rdp_tree)
{
  const char* val;
  {
    if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
    scan_test(NULL, RDP_T_39 /* ' */, &caseSensTerm_stop);
    val = SCAN_CAST->id;
    scan_();
     if (*val == 0) text_message(TEXT_ERROR_ECHO, "empty case sensitive terminal\n"); 
    scan_test_set(NULL, &caseSensTerm_stop, &caseSensTerm_stop);
   }
}

static void cat(rdp_tree_node_data* rdp_tree)
{
  {
    pos(rdp_add_child("pos", rdp_tree));
    { /* Start of rdp_cat_1 */
      while (1)
      {
        scan_test_set(NULL, &rdp_cat_1_first, &cat_stop);
        {
          abbrev(rdp_add_child("abbrev", rdp_tree));
          pos(rdp_add_child("pos", rdp_tree));
          }
        if (!scan_test_set(NULL, &rdp_cat_1_first, NULL)) break;
      }
    } /* end of rdp_cat_1 */
    scan_test_set(NULL, &cat_stop, &cat_stop);
   }
}

static void charTerm(rdp_tree_node_data* rdp_tree)
{
  {
    if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
    scan_test(NULL, RDP_T_96 /* ` */, &charTerm_stop);
    scan_();
    if (scan_test(NULL, RDP_T_4646 /* .. */, NULL))
    { /* Start of rdp_charTerm_1 */
      while (1)
      {
        {
          scan_test(NULL, RDP_T_4646 /* .. */, &charTerm_stop);
          scan_();
          if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
          scan_test(NULL, RDP_T_96 /* ` */, &charTerm_stop);
          scan_();
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_charTerm_1 */
    else
    {
      /* default action processing for rdp_charTerm_1*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &charTerm_stop, &charTerm_stop);
   }
}

static void delay(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_60 /* < */, &delay_stop);
    scan_();
    scan_test_set(NULL, &delay_stop, &delay_stop);
   }
}

static void deleter(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_584761 /* :/= */, &deleter_stop);
    scan_();
    scan_test_set(NULL, &deleter_stop, &deleter_stop);
   }
}

static void diff(rdp_tree_node_data* rdp_tree)
{
  {
    unarynot(rdp_add_child("unarynot", rdp_tree));
    if (scan_test(NULL, RDP_T_47 /* / */, NULL))
    { /* Start of rdp_diff_1 */
      while (1)
      {
        {
          scan_test(NULL, RDP_T_47 /* / */, &diff_stop);
          scan_();
          unarynot(rdp_add_child("unarynot", rdp_tree));
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_diff_1 */
    else
    {
      /* default action processing for rdp_diff_1*/
      if (rdp_tree_update) {rdp_tree->id = NULL; rdp_tree->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &diff_stop, &diff_stop);
   }
}

static void elem(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test_set(NULL, &rdp_elem_16_first, NULL))
    {
      { /* Start of rdp_elem_7 */
        while (1)
        {
          scan_test_set(NULL, &rdp_elem_7_first, &elem_stop);
          {
            if (scan_test(NULL, RDP_T_35 /* # */, NULL))
            {
              if(rdp_tree_update) {rdp_tree->id = "epsilon"; rdp_tree->token = 0;}
epsilon(rdp_tree);
            }
            else
            if (scan_test_set(NULL, &rdp_elem_1_first, NULL))
            {
              if(rdp_tree_update) {rdp_tree->id = "nonTerm"; rdp_tree->token = 0;}
nonTerm(rdp_tree);
            }
            else
            if (scan_test(NULL, RDP_T_39 /* ' */, NULL))
            {
              if(rdp_tree_update) {rdp_tree->id = "caseSensTerm"; rdp_tree->token = 0;}
caseSensTerm(rdp_tree);
            }
            else
            if (scan_test(NULL, RDP_T_34 /* " */, NULL))
            {
              if(rdp_tree_update) {rdp_tree->id = "caseInsensTerm"; rdp_tree->token = 0;}
caseInsensTerm(rdp_tree);
            }
            else
            if (scan_test(NULL, RDP_T_96 /* ` */, NULL))
            {
              if(rdp_tree_update) {rdp_tree->id = "charTerm"; rdp_tree->token = 0;}
charTerm(rdp_tree);
            }
            else
            if (scan_test(NULL, RDP_T_38 /* & */, NULL))
            {
              if(rdp_tree_update) {rdp_tree->id = "builtinTerm"; rdp_tree->token = 0;}
builtinTerm(rdp_tree);
            }
            else
            if (scan_test(NULL, RDP_T_3737 /* %% */, NULL))
            {
              if(rdp_tree_update) {rdp_tree->id = "insertTearName"; rdp_tree->token = 0;}
insertTearName(rdp_tree);
            }
            else
              scan_test_set(NULL, &rdp_elem_7_first, &elem_stop)            ;
            }
          break;   /* hi limit is 1! */
        }
      } /* end of rdp_elem_7 */
       artLastParenthesisPosition = 0; 
      if (scan_test(NULL, RDP_T_58 /* : */, NULL))
      { /* Start of rdp_elem_9 */
        while (1)
        {
          {
            name(rdp_add_child("name", rdp_tree));
            }
          break;   /* hi limit is 1! */
        }
      } /* end of rdp_elem_9 */
      else
      {
        /* default action processing for rdp_elem_9*/
        if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
      }
      if (scan_test(NULL, RDP_T_60 /* < */, NULL))
      { /* Start of rdp_elem_11 */
        while (1)
        {
          {
            delay(rdp_add_child("delay", rdp_tree));
            }
          break;   /* hi limit is 1! */
        }
      } /* end of rdp_elem_11 */
      else
      {
        /* default action processing for rdp_elem_11*/
        if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
      }
      if (scan_test(NULL, RDP_T_33 /* ! */, NULL))
      { /* Start of rdp_elem_13 */
        while (1)
        {
          {
            gather(rdp_add_child("gather", rdp_tree));
            }
          break;   /* hi limit is 1! */
        }
      } /* end of rdp_elem_13 */
      else
      {
        /* default action processing for rdp_elem_13*/
        if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
      }
      if (scan_test_set(NULL, &rdp_elem_15_first, NULL))
      { /* Start of rdp_elem_15 */
        while (1)
        {
          {
            fold(rdp_add_child("fold", rdp_tree));
            }
          break;   /* hi limit is 1! */
        }
      } /* end of rdp_elem_15 */
      else
      {
        /* default action processing for rdp_elem_15*/
        if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
      }
    }
    else
    if (scan_test(NULL, RDP_T_40 /* ( */, NULL))
    {
      scan_test(NULL, RDP_T_40 /* ( */, &elem_stop);
      scan_();
      alt(rdp_add_child("alt", rdp_tree));
       artLastParenthesisPosition = scan_column_number(); 
      if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
      scan_test(NULL, RDP_T_41 /* ) */, &elem_stop);
      scan_();
      if (scan_test(NULL, RDP_T_33 /* ! */, NULL))
      { /* Start of rdp_elem_18 */
        while (1)
        {
          {
            gather(rdp_add_child("gather", rdp_tree));
            }
          break;   /* hi limit is 1! */
        }
      } /* end of rdp_elem_18 */
      else
      {
        /* default action processing for rdp_elem_18*/
        if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
      }
    }
    else
      scan_test_set(NULL, &elem_first, &elem_stop)    ;
    scan_test_set(NULL, &elem_stop, &elem_stop);
   }
}

static void epsilon(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_35 /* # */, &epsilon_stop);
    scan_();
    scan_test_set(NULL, &epsilon_stop, &epsilon_stop);
   }
}

static void equation(rdp_tree_node_data* rdp_tree)
{
  {
    equationLabel(rdp_add_child("equationLabel", rdp_tree));
    equationBody(rdp_add_child("equationBody", rdp_tree));
    scan_test_set(NULL, &equation_stop, &equation_stop);
   }
}

static void equationBody(rdp_tree_node_data* rdp_tree)
{
  {
    identifier(rdp_add_child("identifier", rdp_tree));
    if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
    scan_test(NULL, RDP_T_61 /* = */, &equationBody_stop);
    scan_();
    identifier(rdp_add_child("identifier", rdp_tree));
    scan_test_set(NULL, &equationBody_stop, &equationBody_stop);
   }
}

static void equationLabel(rdp_tree_node_data* rdp_tree)
{
  {
    if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
    scan_test(NULL, RDP_T_37 /* % */, &equationLabel_stop);
    scan_();
    scan_test_set(NULL, &equationLabel_stop, &equationLabel_stop);
   }
}

static void fold(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test(NULL, RDP_T_9495 /* ^_ */, NULL))
    {
      if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
      scan_test(NULL, RDP_T_9495 /* ^_ */, &fold_stop);
      scan_();
    }
    else
    if (scan_test(NULL, RDP_T_94 /* ^ */, NULL))
    {
      if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
      scan_test(NULL, RDP_T_94 /* ^ */, &fold_stop);
      scan_();
    }
    else
    if (scan_test(NULL, RDP_T_9494 /* ^^ */, NULL))
    {
      if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
      scan_test(NULL, RDP_T_9494 /* ^^ */, &fold_stop);
      scan_();
    }
    else
    if (scan_test(NULL, RDP_T_62 /* > */, NULL))
    {
      if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
      scan_test(NULL, RDP_T_62 /* > */, &fold_stop);
      scan_();
    }
    else
    if (scan_test(NULL, RDP_T_6262 /* >> */, NULL))
    {
      if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
      scan_test(NULL, RDP_T_6262 /* >> */, &fold_stop);
      scan_();
    }
    else
      scan_test_set(NULL, &fold_first, &fold_stop)    ;
    scan_test_set(NULL, &fold_stop, &fold_stop);
   }
}

static void fullNonterm(rdp_tree_node_data* rdp_tree)
{
  {
    if(rdp_tree_update) {rdp_tree->id = "identifier"; rdp_tree->token = 0;}
identifier(rdp_tree);
    if (scan_test(NULL, RDP_T_46 /* . */, NULL))
    { /* Start of rdp_fullNonterm_1 */
      while (1)
      {
        {
          scan_test(NULL, RDP_T_46 /* . */, &fullNonterm_stop);
          scan_();
          identifier(rdp_add_child("identifier", rdp_tree));
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_fullNonterm_1 */
    else
    {
      /* default action processing for rdp_fullNonterm_1*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &fullNonterm_stop, &fullNonterm_stop);
   }
}

static void gather(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_33 /* ! */, &gather_stop);
    scan_();
    identifier(rdp_add_child("identifier", rdp_tree));
    scan_test_set(NULL, &gather_stop, &gather_stop);
   }
}

static void identifier(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test(NULL, SCAN_P_ID, NULL))
    {
      if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
      scan_test(NULL, SCAN_P_ID, &identifier_stop);
      scan_();
    }
    else
    if (scan_test(NULL, RDP_T_36 /* $ */, NULL))
    {
      if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
      scan_test(NULL, RDP_T_36 /* $ */, &identifier_stop);
      scan_();
    }
    else
      scan_test_set(NULL, &identifier_first, &identifier_stop)    ;
    scan_test_set(NULL, &identifier_stop, &identifier_stop);
   }
}

static void import(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test_set(NULL, &rdp_import_0_first, NULL))
    {
      importOp(rdp_add_child("importOp", rdp_tree));
      rewriteSet(rdp_add_child("rewriteSet", rdp_tree));
      importRHS(rdp_add_child("importRHS", rdp_tree));
    }
    else
    if (scan_test_set(NULL, &rdp_import_3_first, NULL))
    {
      importLHS(rdp_add_child("importLHS", rdp_tree));
      if (scan_test_set(NULL, &rdp_import_2_first, NULL))
      { /* Start of rdp_import_2 */
        while (1)
        {
          {
            importOp(rdp_add_child("importOp", rdp_tree));
            rewriteSet(rdp_add_child("rewriteSet", rdp_tree));
            importRHS(rdp_add_child("importRHS", rdp_tree));
            }
          break;   /* hi limit is 1! */
        }
      } /* end of rdp_import_2 */
      else
      {
        /* default action processing for rdp_import_2*/
        if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
      }
    }
    else
      scan_test_set(NULL, &import_first, &import_stop)    ;
    scan_test_set(NULL, &import_stop, &import_stop);
   }
}

static void importLHS(rdp_tree_node_data* rdp_tree)
{
  {
    fullNonterm(rdp_add_child("fullNonterm", rdp_tree));
    scan_test_set(NULL, &importLHS_stop, &importLHS_stop);
   }
}

static void importOp(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test(NULL, RDP_T_6045 /* <- */, NULL))
    {
      if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
      scan_test(NULL, RDP_T_6045 /* <- */, &importOp_stop);
      scan_();
    }
    else
    if (scan_test(NULL, RDP_T_6061 /* <= */, NULL))
    {
      if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
      scan_test(NULL, RDP_T_6061 /* <= */, &importOp_stop);
      scan_();
    }
    else
    if (scan_test(NULL, RDP_T_604542 /* <-* */, NULL))
    {
      if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
      scan_test(NULL, RDP_T_604542 /* <-* */, &importOp_stop);
      scan_();
    }
    else
    if (scan_test(NULL, RDP_T_606142 /* <=* */, NULL))
    {
      if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
      scan_test(NULL, RDP_T_606142 /* <=* */, &importOp_stop);
      scan_();
    }
    else
      scan_test_set(NULL, &importOp_first, &importOp_stop)    ;
    scan_test_set(NULL, &importOp_stop, &importOp_stop);
   }
}

static void importRHS(rdp_tree_node_data* rdp_tree)
{
  {
    fullNonterm(rdp_add_child("fullNonterm", rdp_tree));
    scan_test_set(NULL, &importRHS_stop, &importRHS_stop);
   }
}

static void imports(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_40 /* ( */, &imports_stop);
    scan_();
    if (scan_test_set(NULL, &rdp_imports_1_first, NULL))
    { /* Start of rdp_imports_1 */
      while (1)
      {
        {
          import(rdp_add_child("import", rdp_tree));
          }
        if (!scan_test_set(NULL, &rdp_imports_1_first, NULL)) break;
      }
    } /* end of rdp_imports_1 */
    else
    {
      /* default action processing for rdp_imports_1*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test(NULL, RDP_T_41 /* ) */, &imports_stop);
    scan_();
    scan_test_set(NULL, &imports_stop, &imports_stop);
   }
}

static void insertTearName(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_3737 /* %% */, &insertTearName_stop);
    scan_();
    identifier(rdp_add_child("identifier", rdp_tree));
    scan_test_set(NULL, &insertTearName_stop, &insertTearName_stop);
   }
}

static void insertion(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_91 /* [ */, &insertion_stop);
    scan_();
     if (artErrorOnWirth) text_message(TEXT_ERROR, "'[' character might be Wirth-style EBNF: add -w option to enable insertions\n"); 
    cat(rdp_add_child("cat", rdp_tree));
    scan_test(NULL, RDP_T_93 /* ] */, &insertion_stop);
    scan_();
    scan_test_set(NULL, &insertion_stop, &insertion_stop);
   }
}

static void iter(rdp_tree_node_data* rdp_tree)
{
  {
    diff(rdp_add_child("diff", rdp_tree));
    if (scan_test(NULL, RDP_T_64 /* @ */, NULL))
    { /* Start of rdp_iter_1 */
      while (1)
      {
        {
          scan_test(NULL, RDP_T_64 /* @ */, &iter_stop);
          scan_();
          diff(rdp_add_child("diff", rdp_tree));
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_iter_1 */
    else
    {
      /* default action processing for rdp_iter_1*/
      if (rdp_tree_update) {rdp_tree->id = NULL; rdp_tree->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &iter_stop, &iter_stop);
   }
}

static void lexical(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_lexical, &lexical_stop);
    scan_();
    scan_test(NULL, RDP_T_40 /* ( */, &lexical_stop);
    scan_();
    lexicalDisambiguator(rdp_add_child("lexicalDisambiguator", rdp_tree));
    if (scan_test(NULL, RDP_T_44 /* , */, NULL))
    { /* Start of rdp_lexical_1 */
      while (1)
      {
        {
          scan_test(NULL, RDP_T_44 /* , */, &lexical_stop);
          scan_();
          lexicalDisambiguator(rdp_add_child("lexicalDisambiguator", rdp_tree));
          }
        if (!scan_test(NULL, RDP_T_44 /* , */, NULL)) break;
      }
    } /* end of rdp_lexical_1 */
    else
    {
      /* default action processing for rdp_lexical_1*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test(NULL, RDP_T_41 /* ) */, &lexical_stop);
    scan_();
    scan_test_set(NULL, &lexical_stop, &lexical_stop);
   }
}

static void lexicalDisambiguator(rdp_tree_node_data* rdp_tree)
{
  {
    lexicalGroup(rdp_add_child("lexicalGroup", rdp_tree));
    if (scan_test_set(NULL, &rdp_lexicalDisambiguator_10_first, NULL))
    { /* Start of rdp_lexicalDisambiguator_10 */
      while (1)
      {
        {
          if (scan_test_set(NULL, &rdp_lexicalDisambiguator_3_first, NULL))
          {
            { /* Start of rdp_lexicalDisambiguator_2 */
              while (1)
              {
                scan_test_set(NULL, &rdp_lexicalDisambiguator_2_first, &lexicalDisambiguator_stop);
                {
                  if (scan_test(NULL, RDP_T_626262 /* >>> */, NULL))
                  {
                    if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
                    scan_test(NULL, RDP_T_626262 /* >>> */, &lexicalDisambiguator_stop);
                    scan_();
                  }
                  else
                  if (scan_test(NULL, RDP_T_606060 /* <<< */, NULL))
                  {
                    if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
                    scan_test(NULL, RDP_T_606060 /* <<< */, &lexicalDisambiguator_stop);
                    scan_();
                  }
                  else
                    scan_test_set(NULL, &rdp_lexicalDisambiguator_2_first, &lexicalDisambiguator_stop)                  ;
                  }
                break;   /* hi limit is 1! */
              }
            } /* end of rdp_lexicalDisambiguator_2 */
          }
          else
          if (scan_test_set(NULL, &rdp_lexicalDisambiguator_9_first, NULL))
          {
            { /* Start of rdp_lexicalDisambiguator_8 */
              while (1)
              {
                scan_test_set(NULL, &rdp_lexicalDisambiguator_8_first, &lexicalDisambiguator_stop);
                {
                  if (scan_test(NULL, RDP_T_62 /* > */, NULL))
                  {
                    if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
                    scan_test(NULL, RDP_T_62 /* > */, &lexicalDisambiguator_stop);
                    scan_();
                  }
                  else
                  if (scan_test(NULL, RDP_T_6262 /* >> */, NULL))
                  {
                    if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
                    scan_test(NULL, RDP_T_6262 /* >> */, &lexicalDisambiguator_stop);
                    scan_();
                  }
                  else
                  if (scan_test(NULL, RDP_T_6060 /* << */, NULL))
                  {
                    if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
                    scan_test(NULL, RDP_T_6060 /* << */, &lexicalDisambiguator_stop);
                    scan_();
                  }
                  else
                  if (scan_test(NULL, RDP_T_94 /* ^ */, NULL))
                  {
                    if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
                    scan_test(NULL, RDP_T_94 /* ^ */, &lexicalDisambiguator_stop);
                    scan_();
                  }
                  else
                    scan_test_set(NULL, &rdp_lexicalDisambiguator_8_first, &lexicalDisambiguator_stop)                  ;
                  }
                break;   /* hi limit is 1! */
              }
            } /* end of rdp_lexicalDisambiguator_8 */
            lexicalGroup(rdp_add_child("lexicalGroup", rdp_tree));
          }
          else
            scan_test_set(NULL, &rdp_lexicalDisambiguator_10_first, &lexicalDisambiguator_stop)          ;
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_lexicalDisambiguator_10 */
    else
    {
      /* default action processing for rdp_lexicalDisambiguator_10*/
      if (rdp_tree_update) {rdp_tree->id = NULL; rdp_tree->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &lexicalDisambiguator_stop, &lexicalDisambiguator_stop);
   }
}

static void lexicalGroup(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test_set(NULL, &rdp_lexicalGroup_0_first, NULL))
    {
      lexicalItem(rdp_add_child("lexicalItem", rdp_tree));
    }
    else
    if (scan_test(NULL, RDP_T_40 /* ( */, NULL))
    {
      scan_test(NULL, RDP_T_40 /* ( */, &lexicalGroup_stop);
      scan_();
      lexicalItem(rdp_add_child("lexicalItem", rdp_tree));
      if (scan_test(NULL, RDP_T_44 /* , */, NULL))
      { /* Start of rdp_lexicalGroup_2 */
        while (1)
        {
          {
            scan_test(NULL, RDP_T_44 /* , */, &lexicalGroup_stop);
            scan_();
            lexicalItem(rdp_add_child("lexicalItem", rdp_tree));
            }
          if (!scan_test(NULL, RDP_T_44 /* , */, NULL)) break;
        }
      } /* end of rdp_lexicalGroup_2 */
      else
      {
        /* default action processing for rdp_lexicalGroup_2*/
        if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
      }
      scan_test(NULL, RDP_T_41 /* ) */, &lexicalGroup_stop);
      scan_();
    }
    else
      scan_test_set(NULL, &lexicalGroup_first, &lexicalGroup_stop)    ;
    scan_test_set(NULL, &lexicalGroup_stop, &lexicalGroup_stop);
   }
}

static void lexicalItem(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test_set(NULL, &rdp_lexicalItem_0_first, NULL))
    {
      if(rdp_tree_update) {rdp_tree->id = "fullNonterm"; rdp_tree->token = 0;}
fullNonterm(rdp_tree);
    }
    else
    if (scan_test(NULL, RDP_T_39 /* ' */, NULL))
    {
      if(rdp_tree_update) {rdp_tree->id = "caseSensTerm"; rdp_tree->token = 0;}
caseSensTerm(rdp_tree);
    }
    else
    if (scan_test(NULL, RDP_T_34 /* " */, NULL))
    {
      if(rdp_tree_update) {rdp_tree->id = "caseInsensTerm"; rdp_tree->token = 0;}
caseInsensTerm(rdp_tree);
    }
    else
    if (scan_test(NULL, RDP_T_96 /* ` */, NULL))
    {
      if(rdp_tree_update) {rdp_tree->id = "charTerm"; rdp_tree->token = 0;}
charTerm(rdp_tree);
    }
    else
    if (scan_test(NULL, RDP_T_38 /* & */, NULL))
    {
      if(rdp_tree_update) {rdp_tree->id = "builtinTerm"; rdp_tree->token = 0;}
builtinTerm(rdp_tree);
    }
    else
      scan_test_set(NULL, &lexicalItem_first, &lexicalItem_stop)    ;
    scan_test_set(NULL, &lexicalItem_stop, &lexicalItem_stop);
   }
}

static void major(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test_set(NULL, &rdp_major_10_first, NULL))
    {
      identifier(rdp_add_child("identifier", rdp_tree));
      { /* Start of rdp_major_9 */
        while (1)
        {
          scan_test_set(NULL, &rdp_major_9_first, &major_stop);
          {
            if (scan_test_set(NULL, &rdp_major_0_first, NULL))
            {
              whitespace(rdp_add_child("whitespace", rdp_tree));
              imports(rdp_add_child("imports", rdp_tree));
              start(rdp_add_child("start", rdp_tree));
              options(rdp_add_child("options", rdp_tree));
            }
            else
            if (scan_test_set(NULL, &rdp_major_8_first, NULL))
            {
              { /* Start of rdp_major_7 */
                while (1)
                {
                  scan_test_set(NULL, &rdp_major_7_first, &major_stop);
                  {
                    if (scan_test(NULL, RDP_T_584761 /* :/= */, NULL))
                    {
                      if(rdp_tree_update) {rdp_tree->id = "deleter"; rdp_tree->token = 0;}
deleter(rdp_tree);
                    }
                    else
                    if (scan_test_set(NULL, &rdp_major_6_first, NULL))
                    {
                      if (scan_test(NULL, RDP_T_58 /* : */, NULL))
                      { /* Start of rdp_major_3 */
                        while (1)
                        {
                          {
                            name(rdp_add_child("name", rdp_tree));
                            }
                          break;   /* hi limit is 1! */
                        }
                      } /* end of rdp_major_3 */
                      else
                      {
                        /* default action processing for rdp_major_3*/
                        if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
                      }
                      if (scan_test(NULL, RDP_T_60 /* < */, NULL))
                      { /* Start of rdp_major_5 */
                        while (1)
                        {
                          {
                            attributes(rdp_add_child("attributes", rdp_tree));
                            }
                          break;   /* hi limit is 1! */
                        }
                      } /* end of rdp_major_5 */
                      else
                      {
                        /* default action processing for rdp_major_5*/
                        if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
                      }
                      if(rdp_tree_update) {rdp_tree->id = "production"; rdp_tree->token = 0;}
production(rdp_tree);
                    }
                    else
                      scan_test_set(NULL, &rdp_major_7_first, &major_stop)                    ;
                    }
                  break;   /* hi limit is 1! */
                }
              } /* end of rdp_major_7 */
              body(rdp_add_child("body", rdp_tree));
              scan_test(NULL, RDP_T_59 /* ; */, &major_stop);
              scan_();
            }
            else
              scan_test_set(NULL, &rdp_major_9_first, &major_stop)            ;
            }
          break;   /* hi limit is 1! */
        }
      } /* end of rdp_major_9 */
    }
    else
    if (scan_test(NULL, RDP_T_lexical, NULL))
    {
      if(rdp_tree_update) {rdp_tree->id = "lexical"; rdp_tree->token = 0;}
lexical(rdp_tree);
    }
    else
    if (scan_test(NULL, RDP_T_prelude, NULL))
    {
      if(rdp_tree_update) {rdp_tree->id = "prelude"; rdp_tree->token = 0;}
prelude(rdp_tree);
    }
    else
    if (scan_test(NULL, RDP_T_support, NULL))
    {
      if(rdp_tree_update) {rdp_tree->id = "support"; rdp_tree->token = 0;}
support(rdp_tree);
    }
    else
    if (scan_test(NULL, RDP_T_37 /* % */, NULL))
    {
      if(rdp_tree_update) {rdp_tree->id = "equation"; rdp_tree->token = 0;}
equation(rdp_tree);
    }
    else
      scan_test_set(NULL, &major_first, &major_stop)    ;
    scan_test_set(NULL, &major_stop, &major_stop);
   }
}

static void name(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_58 /* : */, &name_stop);
    scan_();
    identifier(rdp_add_child("identifier", rdp_tree));
    scan_test_set(NULL, &name_stop, &name_stop);
   }
}

static void nonTerm(rdp_tree_node_data* rdp_tree)
{
  {
    identifier(rdp_add_child("identifier", rdp_tree));
    scan_test_set(NULL, &nonTerm_stop, &nonTerm_stop);
   }
}

static void options(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test(NULL, RDP_T_123 /* { */, NULL))
    { /* Start of rdp_options_1 */
      while (1)
      {
        {
          annotation(rdp_add_child("annotation", rdp_tree));
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_options_1 */
    else
    {
      /* default action processing for rdp_options_1*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &options_stop, &options_stop);
   }
}

static void pos(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test(NULL, RDP_T_46 /* . */, NULL))
    { /* Start of rdp_pos_3 */
      while (1)
      {
        {
          if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
          scan_test(NULL, RDP_T_46 /* . */, &pos_stop);
          scan_();
          if (scan_test(NULL, RDP_T_58 /* : */, NULL))
          { /* Start of rdp_pos_1 */
            while (1)
            {
              {
                name(rdp_add_child("name", rdp_tree));
                }
              break;   /* hi limit is 1! */
            }
          } /* end of rdp_pos_1 */
          else
          {
            /* default action processing for rdp_pos_1*/
            if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
          }
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_pos_3 */
    else
    {
      /* default action processing for rdp_pos_3*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    if (scan_test_set(NULL, &rdp_pos_6_first, NULL))
    { /* Start of rdp_pos_6 */
      while (1)
      {
        {
          if (scan_test(NULL, RDP_T_91 /* [ */, NULL))
          {
            insertion(rdp_add_child("insertion", rdp_tree));
          }
          else
          if (scan_test(NULL, RDP_T_123 /* { */, NULL))
          {
            annotation(rdp_add_child("annotation", rdp_tree));
          }
          else
            scan_test_set(NULL, &rdp_pos_6_first, &pos_stop)          ;
          }
        if (!scan_test_set(NULL, &rdp_pos_6_first, NULL)) break;
      }
    } /* end of rdp_pos_6 */
    else
    {
      /* default action processing for rdp_pos_6*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &pos_stop, &pos_stop);
   }
}

static void prelude(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_prelude, &prelude_stop);
    scan_();
    { /* Start of rdp_prelude_1 */
      while (1)
      {
        scan_test(NULL, RDP_T_123 /* { */, &prelude_stop);
        {
          annotation(rdp_add_child("annotation", rdp_tree));
          }
        if (!scan_test(NULL, RDP_T_123 /* { */, NULL)) break;
      }
    } /* end of rdp_prelude_1 */
    scan_test_set(NULL, &prelude_stop, &prelude_stop);
   }
}

static void production(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_585861 /* ::= */, &production_stop);
    scan_();
    scan_test_set(NULL, &production_stop, &production_stop);
   }
}

static void rewriteSet(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test(NULL, RDP_T_40 /* ( */, NULL))
    { /* Start of rdp_rewriteSet_3 */
      while (1)
      {
        {
          scan_test(NULL, RDP_T_40 /* ( */, &rewriteSet_stop);
          scan_();
          if (scan_test_set(NULL, &rdp_rewriteSet_1_first, NULL))
          { /* Start of rdp_rewriteSet_1 */
            while (1)
            {
              {
                identifier(rdp_add_child("identifier", rdp_tree));
                }
              if (!scan_test_set(NULL, &rdp_rewriteSet_1_first, NULL)) break;
            }
          } /* end of rdp_rewriteSet_1 */
          else
          {
            /* default action processing for rdp_rewriteSet_1*/
            if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
          }
          scan_test(NULL, RDP_T_41 /* ) */, &rewriteSet_stop);
          scan_();
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_rewriteSet_3 */
    else
    {
      /* default action processing for rdp_rewriteSet_3*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &rewriteSet_stop, &rewriteSet_stop);
   }
}

static void start(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_40 /* ( */, &start_stop);
    scan_();
    if (scan_test_set(NULL, &rdp_start_1_first, NULL))
    { /* Start of rdp_start_1 */
      while (1)
      {
        {
          identifier(rdp_add_child("identifier", rdp_tree));
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_start_1 */
    else
    {
      /* default action processing for rdp_start_1*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test(NULL, RDP_T_41 /* ) */, &start_stop);
    scan_();
    scan_test_set(NULL, &start_stop, &start_stop);
   }
}

static void support(rdp_tree_node_data* rdp_tree)
{
  {
    scan_test(NULL, RDP_T_support, &support_stop);
    scan_();
    { /* Start of rdp_support_2 */
      while (1)
      {
        scan_test_set(NULL, &rdp_support_2_first, &support_stop);
        {
          if (scan_test(NULL, RDP_T_123 /* { */, NULL))
          {
            annotation(rdp_add_child("annotation", rdp_tree));
          }
          else
          if (scan_test(NULL, RDP_T_60 /* < */, NULL))
          {
            attributes(rdp_add_child("attributes", rdp_tree));
          }
          else
            scan_test_set(NULL, &rdp_support_2_first, &support_stop)          ;
          }
        if (!scan_test_set(NULL, &rdp_support_2_first, NULL)) break;
      }
    } /* end of rdp_support_2 */
    scan_test_set(NULL, &support_stop, &support_stop);
   }
}

void text(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test_set(NULL, &rdp_text_1_first, NULL))
    { /* Start of rdp_text_1 */
      while (1)
      {
        {
          major(rdp_add_child("major", rdp_tree));
          }
        if (!scan_test_set(NULL, &rdp_text_1_first, NULL)) break;
      }
    } /* end of rdp_text_1 */
    else
    {
      /* default action processing for rdp_text_1*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &text_stop, &text_stop);
   }
}

static void unarynot(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test(NULL, RDP_T_126 /* ~ */, NULL))
    { /* Start of rdp_unarynot_1 */
      while (1)
      {
        {
          scan_test(NULL, RDP_T_126 /* ~ */, &unarynot_stop);
          scan_();
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_unarynot_1 */
    else
    {
      /* default action processing for rdp_unarynot_1*/
      if (rdp_tree_update) {rdp_tree->id = NULL; rdp_tree->token = SCAN_P_ID;}
    }
    elem(rdp_add_child("elem", rdp_tree));
    scan_test_set(NULL, &unarynot_stop, &unarynot_stop);
   }
}

static void whitespace(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test_set(NULL, &rdp_whitespace_6_first, NULL))
    { /* Start of rdp_whitespace_6 */
      while (1)
      {
        {
          if (scan_test_set(NULL, &rdp_whitespace_0_first, NULL))
          {
            import(rdp_add_child("import", rdp_tree));
          }
          else
          if (scan_test_set(NULL, &rdp_whitespace_5_first, NULL))
          {
            { /* Start of rdp_whitespace_4 */
              while (1)
              {
                scan_test_set(NULL, &rdp_whitespace_4_first, &whitespace_stop);
                {
                  if (scan_test(NULL, RDP_T_96 /* ` */, NULL))
                  {
                    charTerm(rdp_add_child("charTerm", rdp_tree));
                  }
                  else
                  if (scan_test(NULL, RDP_T_38 /* & */, NULL))
                  {
                    builtinTerm(rdp_add_child("builtinTerm", rdp_tree));
                  }
                  else
                  if (scan_test(NULL, RDP_T_35 /* # */, NULL))
                  {
                    epsilon(rdp_add_child("epsilon", rdp_tree));
                  }
                  else
                    scan_test_set(NULL, &rdp_whitespace_4_first, &whitespace_stop)                  ;
                  }
                if (!scan_test_set(NULL, &rdp_whitespace_4_first, NULL)) break;
              }
            } /* end of rdp_whitespace_4 */
          }
          else
            scan_test_set(NULL, &rdp_whitespace_6_first, &whitespace_stop)          ;
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_whitespace_6 */
    else
    {
      /* default action processing for rdp_whitespace_6*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &whitespace_stop, &whitespace_stop);
   }
}

int main(int argc, const char *argv[])
{
  clock_t rdp_finish_time, rdp_start_time = clock();
  int
    rdp_symbol_statistics = 0,    /* show symbol_ table statistics flag */
    rdp_line_echo_all = 0,        /* make a listing on all passes flag */
    rdp_filter = 0,               /* filter flag */
    rdp_line_echo = 0,            /* make listing flag */

    rdp_lexicalise = 0;            /* print lexicalised output flag */

  unsigned long rdp_textsize = 100000l;   /* size of scanner text array */

  unsigned long rdp_tabwidth = 8l;   /* tab expansion width */

  const char* rdp_vcg_filename = NULL;      /* filename for -V option */

  rdp_tree_node_data* rdp_tree = (rdp_tree_node_data*) graph_insert_graph("RDP derivation tree");  /* hook for derivation tree */
  rdp_tree_node_data* rdp_tree_root;

  arg_message("ART V2.98 (c) Adrian Johnstone 2009-2016\n" RDP_STAMP "\n\n""Usage: artparse [options] source");

  arg_message("\nGrammar processing options - processing order is c/C, M, L, B");
  arg_boolean('c', "rewrite ()* and ()+ closures as right-recursive nonterminals", &artClosureRight);
  arg_boolean('C', "rewrite ()* and ()+ closures as left-recursive nonterminals", &artClosureLeft);
  arg_boolean('M', "multiply out EBNF brackets () and ()?", &artMultiplyOut);
  arg_boolean('L', "syntactically left factor BNF", &artLeftFactor);
  arg_boolean('B', "replace () brackets with nonterminals", &artBracketToNonterminal);
  arg_message("\nGenerated parser and lexer mode options");
  arg_boolean('U', "use clustered GSS (default: do not use)", &artClusteredGSS);
  arg_boolean('D', "enable delayed fetch of popping descriptors (default: treat all descriptors identically)", &artDelayPoppingDescriptors);
  arg_boolean('E', "enable predictive pops for nested do-firsts (default: EBNF standard pops throughout)", &artPredictivePops);
  arg_boolean('F', "use First-In, First-Out processing order for descriptors (default: use Last-In, first Out processing", &artFIFODescriptors);
  arg_string ('g', "target language - one of: C++ Java C++_OLD (default: Java)", &artTargetLanguageString);
  arg_string ('d', "despatch mode   - one of: dynamic static state fragment (default: fragment for Java; static for other languages)", &artDespatchModeString);
  arg_string ('s', "support mode    - one of: BigFastSimple HashPool ObjectOriented (default: HashPool)", &artSupportModeString);
  arg_boolean('S', "suppress instantiation of semantic actions into the L-attributed evaluator", &artSuppressSemantics);
  arg_numeric('T', "derivation tree level - one of: 0 (no tree generation), 1 (derivation tree), 2 (derivation tree showing GIFT annotations), 3 (Rewritten Derivation Tree [default])", &artTreeLevel);
  arg_boolean('e', "add End-Of-String ($) to all nonterminal follow sets", &artEOSFollow);
  arg_boolean('X', "MGLL parsing with ambiguous lexical input", &artMGLL);
  arg_message("\nGenerated GLL template optimisation control options");
  arg_boolean('l', "use deterministic parsing on LL(1) deterministic parts of the grammar", &artExploitDeterminism);
  arg_boolean('p', "suppress guard on pops (default: guard pops)", &artSuppressPopGuard);
  arg_boolean('P', "suppress guard on productions (default: guard productions)", &artSuppressProductionGuard);
  arg_boolean('Q', "suppress guard on nonterminals (default: guard nonterminals)", &artSuppressNonterminalGuard);
  arg_boolean('t', "suppress calls to testRepeat() except for closures (default: use all calls to testRepeat())", &artTestRepeatNo);
  arg_message("\nParanoia options");
  arg_boolean('m', "issue warning if multiple right hand sides are found in the same module (default: do not issue warning)", &artWarnOnMultiple);
  arg_boolean('w', "Wirth style EBNF metasymbols [] and {} generate error (default: on) add -w to ENABLE semantic actions and insertions", &artErrorOnWirth);
  arg_boolean('v', "output verbose diagnostic information", &artVerbose);
  arg_boolean('V', "output version information and exit", &artVersion);
  arg_message("\nOutput options");
  arg_string ('G', "print grammar in tool format - one of: antlr art bison dparser elkhound gtb rascal rdp rats spoofax sdf", &artGrammarFormatString);
  arg_string ('n', "output parser name (default: ARTGLLParser)", &artParserName);
  arg_string ('x', "output lexer name (default: ARTGLLLexer)", &artLexerName);
  arg_string ('N', "output name space, package or module (default: none)", &artParserNamespace);
  arg_string ('o', "output directory (default: .)", &artOutputDirectory);

  rdp_sourcefilenames = arg_process(argc, argv);

  /* Fix up filetypes */
  for (rdp_sourcefilenumber = 0; rdp_sourcefilenames[rdp_sourcefilenumber] != NULL; rdp_sourcefilenumber++)
    rdp_sourcefilenames[rdp_sourcefilenumber] = text_default_filetype(rdp_sourcefilenames[rdp_sourcefilenumber], "");

  if (rdp_filter)
  {
    rdp_sourcefilenames[0] = "-";
    rdp_outputfilename = "-";
    rdp_sourcefilenames[1] = NULL;     /* make sure no further filenames are taken from the array */

  }
  if ((rdp_sourcefilename = rdp_sourcefilenames[0]) == NULL)
     arg_help("no source files specified");

  text_init(rdp_textsize, 0, 100, (int) rdp_tabwidth);
  scan_init(0, 0, 0, rdp_symbol_echo, rdp_tokens);
  if (rdp_lexicalise)
    scan_lexicalise();
  rdp_set_initialise();
  rdp_load_keywords();
  if (rdp_verbose)
     text_printf("\nART V2.98 (c) Adrian Johnstone 2009-2016\n" RDP_STAMP "\n\n");
  for (rdp_pass = 1; rdp_pass <= RDP_PASSES; rdp_pass++)
  {
    rdp_tree_update = rdp_pass == RDP_PASSES;
    text_echo(rdp_line_echo_all || (rdp_line_echo && rdp_pass == RDP_PASSES));

    for (rdp_sourcefilenumber = 0; (rdp_sourcefilename = rdp_sourcefilenames[rdp_sourcefilenumber]) != NULL; rdp_sourcefilenumber++)
    {
      if (text_open(rdp_sourcefilename) == NULL)
        arg_help("unable to open source file");

      text_get_char();
      scan_();

      text(rdp_tree_root = rdp_add_node("text", rdp_tree));            /* call parser at top level */
      if (text_total_errors() != 0)
        text_message(TEXT_FATAL, "error%s detected in source file '%s'\n", text_total_errors() == 1 ? "" : "s", rdp_sourcefilename);   /* crash quietly */ 
      graph_epsilon_prune_rdp_tree(rdp_tree_root, sizeof(rdp_tree_edge_data));
    }
  }

  rdp_sourcefilename = rdp_sourcefilenames[0];     /* Reset filename to first file in the list */

  graph_set_root(rdp_tree, rdp_tree_root);
  if (rdp_vcg_filename != NULL)
  {
    FILE *rdp_vcg_file;

    if (*rdp_vcg_filename == '\0')   /* No filename supplied */
      rdp_vcg_filename = "rdparser";
    rdp_vcg_file = fopen((rdp_vcg_filename = text_default_filetype(rdp_vcg_filename, "vcg")), "w");

    if (rdp_vcg_file == NULL)
      text_message(TEXT_FATAL, "unable to open VCG file '%s' for write\n", rdp_vcg_filename);

    if (rdp_verbose)
      text_message(TEXT_INFO, "Dumping derivation tree to VCG file '%s'\n", rdp_vcg_filename);

    text_redirect(rdp_vcg_file);
    graph_vcg(rdp_tree, NULL, scan_vcg_print_node, scan_vcg_print_edge);
    text_redirect(stdout);
    fclose(rdp_vcg_file);
  }

   artPostParse(rdp_tree); 
  if (rdp_symbol_statistics)
  {
    symbol_print_all_table_statistics(11);
    symbol_print_all_table();

  }
  text_print_total_errors();
  if (rdp_verbose)
  {
    rdp_finish_time = clock();
    text_message(TEXT_INFO, "%.3f CPU seconds used\n", ((double) (rdp_finish_time-rdp_start_time)) / CLOCKS_PER_SEC);
  }
  return rdp_error_return;
}

/* End of artparse.c */
