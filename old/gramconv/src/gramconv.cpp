/*******************************************************************************
*
* Parser generated by RDP on Mar 17 2012 04:32:17 from gramconv.bnf
*
*******************************************************************************/
#include <time.h>
#include "gc_aux.h"
#include "gramconv.h"

char
  *rdp_sourcefilename,          /* current source file name */
  **rdp_sourcefilenames,        /* array of source file names */
  *rdp_outputfilename = "gramconv.out";         /* output file name */

int
  rdp_symbol_echo = 0,                 /* symbol echo flag */
  rdp_verbose = 0,                     /* verbosity flag */
  rdp_sourcefilenumber,                /* Source file counter */
  rdp_pass;                            /* pass number */

int rdp_error_return = 0;              /* return value for main routine */

char *rdp_tokens = "IGNORE\0" 
"ID\0" "INTEGER\0" "REAL\0" "CHAR\0" "CHAR_ESC\0" "STRING\0" "STRING_ESC\0" "COMMENT\0" 
"COMMENT_VISIBLE\0" "COMMENT_NEST\0" "COMMENT_NEST_VISIBLE\0" "COMMENT_LINE\0" "COMMENT_LINE_VISIBLE\0" "EOF\0" "EOLN\0" "'!'\0" 
"'!*'\0" "'!.'\0" "'!<'\0" "'!>'\0" "'!S'\0" "'!W'\0" "'!^'\0" "'!b'\0" 
"'!c'\0" "'!g'\0" "'!h'\0" "'!i'\0" "'!p'\0" "'!s'\0" "'!v'\0" "'!y'\0" 
"'!|'\0" "'\"'\0" "'#'\0" "'$'\0" "'\''\0" "'('\0" "'(*'\0" "')'\0" 
"'*'\0" "'+'\0" "','\0" "'-'\0" "'.'\0" "'..'\0" "'...'\0" "'/'\0" 
"'/*'\0" "'//'\0" "':'\0" "'::'\0" "'::='\0" "';'\0" "'<'\0" "'='\0" 
"'>'\0" "'?'\0" "'@'\0" "'P'\0" "'['\0" "'\\'\0" "']'\0" "'^'\0" 
"'^^'\0" "'^_'\0" "'{'\0" "'|'\0" "'||'\0" "'}'\0" "'~'\0" ;

terminals_data * terminals_temp = NULL;
void* terminals = NULL;
nonterminals_data * nonterminals_temp = NULL;
void* nonterminals = NULL;

/* Tree update function for noterminal nodes */
static int rdp_tree_update = 0;

rdp_tree_node_data* rdp_tree_last_child;

rdp_tree_node_data* rdp_add_node(char* id, rdp_tree_node_data* rdp_tree)
{
  if (rdp_tree_update)
  {
     rdp_tree_node_data *node  = (rdp_tree_node_data*) graph_insert_node(sizeof(rdp_tree_node_data), rdp_tree);
     if (id != NULL)
       node->id = id;
     else
       memcpy(node, text_scan_data, sizeof(scan_data));
       return node;
  }
  else
    return NULL;
}

rdp_tree_node_data* rdp_add_child(char* id, rdp_tree_node_data* rdp_tree)
{
  if (rdp_tree_update)
  {
    rdp_tree_last_child = (rdp_tree_node_data*) graph_insert_node(sizeof(rdp_tree_node_data), rdp_tree);
      if (id != NULL)
        rdp_tree_last_child->id = id;
    else
      memcpy(rdp_tree_last_child, text_scan_data, sizeof(scan_data));

    ((rdp_tree_edge_data*) graph_insert_edge_after_final(sizeof(rdp_tree_edge_data), rdp_tree_last_child, rdp_tree))->rdp_edge_kind = 1;
    return rdp_tree_last_child;
  }
  else
    return NULL;
}

rdp_tree_node_data* rdp_add_parent(char* id, rdp_tree_node_data* rdp_tree)
{
  if (rdp_tree_update)
  {
    rdp_tree_node_data *parent = (rdp_tree_node_data*) graph_insert_node_parent(sizeof(rdp_tree_node_data), sizeof(rdp_tree_edge_data), rdp_tree);
    if (id != NULL)
      parent->id = id;
    else
      memcpy(parent, text_scan_data, sizeof(scan_data));

    ((rdp_tree_edge_data*) graph_next_out_edge(parent))->rdp_edge_kind = 1;

    return parent;
  }
  else
    return NULL;
}


/* Load keywords */
static void rdp_load_keywords(void)
{
  scan_load_keyword("!", NULL, RDP_T_33 /* ! */, SCAN_P_IGNORE);
  scan_load_keyword("!*", NULL, RDP_T_3342 /* !* */, SCAN_P_IGNORE);
  scan_load_keyword("!.", NULL, RDP_T_3346 /* !. */, SCAN_P_IGNORE);
  scan_load_keyword("!<", NULL, RDP_T_3360 /* !< */, SCAN_P_IGNORE);
  scan_load_keyword("!>", NULL, RDP_T_3362 /* !> */, SCAN_P_IGNORE);
  scan_load_keyword("!S", NULL, RDP_T_3383 /* !S */, SCAN_P_IGNORE);
  scan_load_keyword("!W", NULL, RDP_T_3387 /* !W */, SCAN_P_IGNORE);
  scan_load_keyword("!^", NULL, RDP_T_3394 /* !^ */, SCAN_P_IGNORE);
  scan_load_keyword("!b", NULL, RDP_T_3398 /* !b */, SCAN_P_IGNORE);
  scan_load_keyword("!c", NULL, RDP_T_3399 /* !c */, SCAN_P_IGNORE);
  scan_load_keyword("!g", NULL, RDP_T_33103 /* !g */, SCAN_P_IGNORE);
  scan_load_keyword("!h", NULL, RDP_T_33104 /* !h */, SCAN_P_IGNORE);
  scan_load_keyword("!i", NULL, RDP_T_33105 /* !i */, SCAN_P_IGNORE);
  scan_load_keyword("!p", NULL, RDP_T_33112 /* !p */, SCAN_P_IGNORE);
  scan_load_keyword("!s", NULL, RDP_T_33115 /* !s */, SCAN_P_IGNORE);
  scan_load_keyword("!v", NULL, RDP_T_33118 /* !v */, SCAN_P_IGNORE);
  scan_load_keyword("!y", NULL, RDP_T_33121 /* !y */, SCAN_P_IGNORE);
  scan_load_keyword("!|", NULL, RDP_T_33124 /* !| */, SCAN_P_IGNORE);
  scan_load_keyword("\"", "\\", RDP_T_34 /* " */, SCAN_P_STRING_ESC);
  scan_load_keyword("#", NULL, RDP_T_35 /* # */, SCAN_P_IGNORE);
  scan_load_keyword("$", "//", RDP_T_36 /* $ */, SCAN_P_STRING_ESC);
  scan_load_keyword("\'", "\\", RDP_T_39 /* ' */, SCAN_P_STRING_ESC);
  scan_load_keyword("(", NULL, RDP_T_40 /* ( */, SCAN_P_IGNORE);
  scan_load_keyword("(*", "*)", RDP_T_4042 /* (* */, SCAN_P_COMMENT_NEST);
  scan_load_keyword(")", NULL, RDP_T_41 /* ) */, SCAN_P_IGNORE);
  scan_load_keyword("*", NULL, RDP_T_42 /* * */, SCAN_P_IGNORE);
  scan_load_keyword("+", NULL, RDP_T_43 /* + */, SCAN_P_IGNORE);
  scan_load_keyword(",", NULL, RDP_T_44 /* , */, SCAN_P_IGNORE);
  scan_load_keyword("-", NULL, RDP_T_45 /* - */, SCAN_P_IGNORE);
  scan_load_keyword(".", NULL, RDP_T_46 /* . */, SCAN_P_IGNORE);
  scan_load_keyword("..", NULL, RDP_T_4646 /* .. */, SCAN_P_IGNORE);
  scan_load_keyword("...", NULL, RDP_T_464646 /* ... */, SCAN_P_IGNORE);
  scan_load_keyword("/", NULL, RDP_T_47 /* / */, SCAN_P_IGNORE);
  scan_load_keyword("/*", "*/", RDP_T_4742 /* / * */, SCAN_P_COMMENT);
  scan_load_keyword("//", NULL, RDP_T_4747 /* // */, SCAN_P_COMMENT_LINE);
  scan_load_keyword(":", NULL, RDP_T_58 /* : */, SCAN_P_IGNORE);
  scan_load_keyword("::", NULL, RDP_T_5858 /* :: */, SCAN_P_IGNORE);
  scan_load_keyword("::=", NULL, RDP_T_585861 /* ::= */, SCAN_P_IGNORE);
  scan_load_keyword(";", NULL, RDP_T_59 /* ; */, SCAN_P_IGNORE);
  scan_load_keyword("<", NULL, RDP_T_60 /* < */, SCAN_P_IGNORE);
  scan_load_keyword("=", NULL, RDP_T_61 /* = */, SCAN_P_IGNORE);
  scan_load_keyword(">", NULL, RDP_T_62 /* > */, SCAN_P_IGNORE);
  scan_load_keyword("?", NULL, RDP_T_63 /* ? */, SCAN_P_IGNORE);
  scan_load_keyword("@", NULL, RDP_T_64 /* @ */, SCAN_P_IGNORE);
  scan_load_keyword("P", NULL, RDP_T_P, SCAN_P_IGNORE);
  scan_load_keyword("[", NULL, RDP_T_91 /* [ */, SCAN_P_IGNORE);
  scan_load_keyword("\\", NULL, RDP_T_92 /* \ */, SCAN_P_IGNORE);
  scan_load_keyword("]", NULL, RDP_T_93 /* ] */, SCAN_P_IGNORE);
  scan_load_keyword("^", NULL, RDP_T_94 /* ^ */, SCAN_P_IGNORE);
  scan_load_keyword("^^", NULL, RDP_T_9494 /* ^^ */, SCAN_P_IGNORE);
  scan_load_keyword("^_", NULL, RDP_T_9495 /* ^_ */, SCAN_P_IGNORE);
  scan_load_keyword("{", NULL, RDP_T_123 /* { */, SCAN_P_IGNORE);
  scan_load_keyword("|", NULL, RDP_T_124 /* | */, SCAN_P_IGNORE);
  scan_load_keyword("||", NULL, RDP_T_124124 /* || */, SCAN_P_IGNORE);
  scan_load_keyword("}", NULL, RDP_T_125 /* } */, SCAN_P_IGNORE);
  scan_load_keyword("~", NULL, RDP_T_126 /* ~ */, SCAN_P_IGNORE);
}

/* Set declarations */

  set_ alternates_first = SET_NULL;
  set_ alternates_stop = SET_NULL;
  set_ arguments_stop = SET_NULL;
  set_ comment1_stop = SET_NULL;
  set_ comment2_stop = SET_NULL;
  set_ comment3_stop = SET_NULL;
  set_ directive_first = SET_NULL;
  set_ directive_stop = SET_NULL;
  set_ immediate_action_stop = SET_NULL;
  set_ invert_first = SET_NULL;
  set_ invert_stop = SET_NULL;
  set_ iterator_first = SET_NULL;
  set_ iterator_stop = SET_NULL;
  set_ lhs_nonterminal_stop = SET_NULL;
  set_ nonterminal_stop = SET_NULL;
  set_ operand_first = SET_NULL;
  set_ operand_stop = SET_NULL;
  set_ parameters_stop = SET_NULL;
  set_ postfix_first = SET_NULL;
  set_ postfix_stop = SET_NULL;
  set_ range_first = SET_NULL;
  set_ range_stop = SET_NULL;
  set_ rdp_alternates_10_first = SET_NULL;
  set_ rdp_alternates_11_first = SET_NULL;
  set_ rdp_invert_0_first = SET_NULL;
  set_ rdp_iterator_6_first = SET_NULL;
  set_ rdp_operand_7_first = SET_NULL;
  set_ rdp_postfix_10_first = SET_NULL;
  set_ rdp_postfix_11_first = SET_NULL;
  set_ rdp_range_1_first = SET_NULL;
  set_ rdp_range_2_first = SET_NULL;
  set_ rdp_range_4_first = SET_NULL;
  set_ rdp_range_5_first = SET_NULL;
  set_ rdp_range_8_first = SET_NULL;
  set_ rdp_rule_4_first = SET_NULL;
  set_ rdp_rule_7_first = SET_NULL;
  set_ rdp_sequence_2_first = SET_NULL;
  set_ rdp_sequence_3_first = SET_NULL;
  set_ rdp_sequence_4_first = SET_NULL;
  set_ rdp_sequence_5_first = SET_NULL;
  set_ rdp_sequence_6_first = SET_NULL;
  set_ rdp_set_diff_2_first = SET_NULL;
  set_ rdp_terminal_2_first = SET_NULL;
  set_ rdp_terminal_3_first = SET_NULL;
  set_ rdp_text_0_first = SET_NULL;
  set_ rdp_text_3_first = SET_NULL;
  set_ rdp_text_4_first = SET_NULL;
  set_ rule_stop = SET_NULL;
  set_ sequence_first = SET_NULL;
  set_ sequence_stop = SET_NULL;
  set_ set_diff_first = SET_NULL;
  set_ set_diff_stop = SET_NULL;
  set_ terminal_first = SET_NULL;
  set_ terminal_stop = SET_NULL;
  set_ text_first = SET_NULL;
  set_ text_stop = SET_NULL;
  set_ tree_action_stop = SET_NULL;

/* Initialise sets */

static void rdp_set_initialise(void)
{
  set_assign_list(&alternates_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_124124 /* || */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&alternates_stop, SCAN_P_EOF, RDP_T_41 /* ) */, RDP_T_46 /* . */, RDP_T_59 /* ; */, RDP_T_62 /* > */, 
RDP_T_93 /* ] */, RDP_T_125 /* } */,SET_END);
  set_assign_list(&arguments_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_3342 /* !* */, RDP_T_3360 /* !< */, RDP_T_3362 /* !> */, 
RDP_T_3394 /* !^ */, RDP_T_33124 /* !| */, RDP_T_34 /* " */, RDP_T_35 /* # */, 
RDP_T_36 /* $ */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_42 /* * */, 
RDP_T_43 /* + */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_4646 /* .. */, RDP_T_464646 /* ... */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_63 /* ? */, RDP_T_64 /* @ */, 
RDP_T_91 /* [ */, RDP_T_92 /* \ */, RDP_T_93 /* ] */, RDP_T_9494 /* ^^ */, RDP_T_9495 /* ^_ */, 
RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_124124 /* || */, RDP_T_125 /* } */, 
RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&comment1_stop, SCAN_P_EOF,SET_END);
  set_assign_list(&comment2_stop, SCAN_P_EOF,SET_END);
  set_assign_list(&comment3_stop, SCAN_P_EOF,SET_END);
  set_assign_list(&directive_first, RDP_T_3342 /* !* */, RDP_T_3346 /* !. */, RDP_T_3360 /* !< */, RDP_T_3362 /* !> */, 
RDP_T_3383 /* !S */, RDP_T_3387 /* !W */, RDP_T_3394 /* !^ */, RDP_T_3398 /* !b */, 
RDP_T_3399 /* !c */, RDP_T_33103 /* !g */, RDP_T_33104 /* !h */, RDP_T_33105 /* !i */, 
RDP_T_33112 /* !p */, RDP_T_33115 /* !s */, RDP_T_33118 /* !v */, RDP_T_33121 /* !y */, 
RDP_T_33124 /* !| */, RDP_T_P, SET_END);
  set_assign_list(&directive_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_3342 /* !* */, RDP_T_3346 /* !. */, RDP_T_3360 /* !< */, 
RDP_T_3362 /* !> */, RDP_T_3383 /* !S */, RDP_T_3387 /* !W */, RDP_T_3394 /* !^ */, 
RDP_T_3398 /* !b */, RDP_T_3399 /* !c */, RDP_T_33103 /* !g */, RDP_T_33104 /* !h */, 
RDP_T_33105 /* !i */, RDP_T_33112 /* !p */, RDP_T_33115 /* !s */, RDP_T_33118 /* !v */, 
RDP_T_33121 /* !y */, RDP_T_33124 /* !| */, RDP_T_36 /* $ */, RDP_T_P,SET_END);
  set_assign_list(&immediate_action_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_3342 /* !* */, RDP_T_3346 /* !. */, RDP_T_3360 /* !< */, 
RDP_T_3362 /* !> */, RDP_T_3383 /* !S */, RDP_T_3387 /* !W */, RDP_T_3394 /* !^ */, 
RDP_T_3398 /* !b */, RDP_T_3399 /* !c */, RDP_T_33103 /* !g */, RDP_T_33104 /* !h */, 
RDP_T_33105 /* !i */, RDP_T_33112 /* !p */, RDP_T_33115 /* !s */, RDP_T_33118 /* !v */, 
RDP_T_33121 /* !y */, RDP_T_33124 /* !| */, RDP_T_36 /* $ */, RDP_T_P,SET_END);
  set_assign_list(&invert_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&invert_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_464646 /* ... */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_64 /* @ */, RDP_T_91 /* [ */, 
RDP_T_92 /* \ */, RDP_T_93 /* ] */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_124124 /* || */, 
RDP_T_125 /* } */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&iterator_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&iterator_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_464646 /* ... */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_91 /* [ */, RDP_T_93 /* ] */, 
RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_124124 /* || */, RDP_T_125 /* } */, 
RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&lhs_nonterminal_stop, SCAN_P_EOF, RDP_T_58 /* : */, RDP_T_5858 /* :: */, RDP_T_585861 /* ::= */, RDP_T_61 /* = */,SET_END);
  set_assign_list(&nonterminal_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_3342 /* !* */, RDP_T_3360 /* !< */, RDP_T_3362 /* !> */, 
RDP_T_3394 /* !^ */, RDP_T_33124 /* !| */, RDP_T_34 /* " */, RDP_T_35 /* # */, 
RDP_T_36 /* $ */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_42 /* * */, 
RDP_T_43 /* + */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_4646 /* .. */, RDP_T_464646 /* ... */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_63 /* ? */, RDP_T_64 /* @ */, 
RDP_T_91 /* [ */, RDP_T_92 /* \ */, RDP_T_93 /* ] */, RDP_T_9494 /* ^^ */, RDP_T_9495 /* ^_ */, 
RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_124124 /* || */, RDP_T_125 /* } */, 
RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&operand_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, SET_END);
  set_assign_list(&operand_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_3342 /* !* */, RDP_T_3360 /* !< */, RDP_T_3362 /* !> */, 
RDP_T_3394 /* !^ */, RDP_T_33124 /* !| */, RDP_T_34 /* " */, RDP_T_35 /* # */, 
RDP_T_36 /* $ */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_42 /* * */, 
RDP_T_43 /* + */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_464646 /* ... */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_63 /* ? */, RDP_T_64 /* @ */, 
RDP_T_91 /* [ */, RDP_T_92 /* \ */, RDP_T_93 /* ] */, RDP_T_9494 /* ^^ */, RDP_T_9495 /* ^_ */, 
RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_124124 /* || */, RDP_T_125 /* } */, 
RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&parameters_stop, SCAN_P_EOF, RDP_T_41 /* ) */, RDP_T_58 /* : */, RDP_T_5858 /* :: */, RDP_T_585861 /* ::= */, 
RDP_T_61 /* = */,SET_END);
  set_assign_list(&postfix_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, SET_END);
  set_assign_list(&postfix_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_464646 /* ... */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_64 /* @ */, RDP_T_91 /* [ */, 
RDP_T_92 /* \ */, RDP_T_93 /* ] */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_124124 /* || */, 
RDP_T_125 /* } */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&range_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_39 /* ' */, SET_END);
  set_assign_list(&range_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_3342 /* !* */, RDP_T_3360 /* !< */, RDP_T_3362 /* !> */, 
RDP_T_3394 /* !^ */, RDP_T_33124 /* !| */, RDP_T_34 /* " */, RDP_T_35 /* # */, 
RDP_T_36 /* $ */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_42 /* * */, 
RDP_T_43 /* + */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_464646 /* ... */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_63 /* ? */, RDP_T_64 /* @ */, 
RDP_T_91 /* [ */, RDP_T_92 /* \ */, RDP_T_93 /* ] */, RDP_T_9494 /* ^^ */, RDP_T_9495 /* ^_ */, 
RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_124124 /* || */, RDP_T_125 /* } */, 
RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&rdp_alternates_10_first, RDP_T_124 /* | */, RDP_T_124124 /* || */, SET_END);
  set_assign_list(&rdp_alternates_11_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_124124 /* || */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_invert_0_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, SET_END);
  set_assign_list(&rdp_iterator_6_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_operand_7_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_39 /* ' */, SET_END);
  set_assign_list(&rdp_postfix_10_first, RDP_T_3342 /* !* */, RDP_T_3360 /* !< */, RDP_T_3362 /* !> */, RDP_T_3394 /* !^ */, 
RDP_T_33124 /* !| */, RDP_T_42 /* * */, RDP_T_43 /* + */, RDP_T_63 /* ? */, RDP_T_9494 /* ^^ */, 
RDP_T_9495 /* ^_ */, SET_END);
  set_assign_list(&rdp_postfix_11_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, SET_END);
  set_assign_list(&rdp_range_1_first, RDP_T_34 /* " */, RDP_T_39 /* ' */, SET_END);
  set_assign_list(&rdp_range_2_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_39 /* ' */, SET_END);
  set_assign_list(&rdp_range_4_first, RDP_T_34 /* " */, RDP_T_39 /* ' */, SET_END);
  set_assign_list(&rdp_range_5_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_39 /* ' */, SET_END);
  set_assign_list(&rdp_range_8_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_39 /* ' */, SET_END);
  set_assign_list(&rdp_rule_4_first, RDP_T_58 /* : */, RDP_T_5858 /* :: */, RDP_T_585861 /* ::= */, RDP_T_61 /* = */, SET_END);
  set_assign_list(&rdp_rule_7_first, RDP_T_46 /* . */, RDP_T_59 /* ; */, SET_END);
  set_assign_list(&rdp_sequence_2_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_44 /* , */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, 
RDP_T_91 /* [ */, RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_sequence_3_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_44 /* , */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, 
RDP_T_91 /* [ */, RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_sequence_4_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_sequence_5_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_sequence_6_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_set_diff_2_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&rdp_terminal_2_first, RDP_T_34 /* " */, RDP_T_39 /* ' */, SET_END);
  set_assign_list(&rdp_terminal_3_first, RDP_T_34 /* " */, RDP_T_39 /* ' */, SET_END);
  set_assign_list(&rdp_text_0_first, RDP_T_3342 /* !* */, RDP_T_3346 /* !. */, RDP_T_3360 /* !< */, RDP_T_3362 /* !> */, 
RDP_T_3383 /* !S */, RDP_T_3387 /* !W */, RDP_T_3394 /* !^ */, RDP_T_3398 /* !b */, 
RDP_T_3399 /* !c */, RDP_T_33103 /* !g */, RDP_T_33104 /* !h */, RDP_T_33105 /* !i */, 
RDP_T_33112 /* !p */, RDP_T_33115 /* !s */, RDP_T_33118 /* !v */, RDP_T_33121 /* !y */, 
RDP_T_33124 /* !| */, RDP_T_P, SET_END);
  set_assign_list(&rdp_text_3_first, SCAN_P_ID, RDP_T_3342 /* !* */, RDP_T_3346 /* !. */, RDP_T_3360 /* !< */, RDP_T_3362 /* !> */, 
RDP_T_3383 /* !S */, RDP_T_3387 /* !W */, RDP_T_3394 /* !^ */, RDP_T_3398 /* !b */, 
RDP_T_3399 /* !c */, RDP_T_33103 /* !g */, RDP_T_33104 /* !h */, RDP_T_33105 /* !i */, 
RDP_T_33112 /* !p */, RDP_T_33115 /* !s */, RDP_T_33118 /* !v */, RDP_T_33121 /* !y */, 
RDP_T_33124 /* !| */, RDP_T_36 /* $ */, RDP_T_P, SET_END);
  set_assign_list(&rdp_text_4_first, SCAN_P_ID, RDP_T_3342 /* !* */, RDP_T_3346 /* !. */, RDP_T_3360 /* !< */, RDP_T_3362 /* !> */, 
RDP_T_3383 /* !S */, RDP_T_3387 /* !W */, RDP_T_3394 /* !^ */, RDP_T_3398 /* !b */, 
RDP_T_3399 /* !c */, RDP_T_33103 /* !g */, RDP_T_33104 /* !h */, RDP_T_33105 /* !i */, 
RDP_T_33112 /* !p */, RDP_T_33115 /* !s */, RDP_T_33118 /* !v */, RDP_T_33121 /* !y */, 
RDP_T_33124 /* !| */, RDP_T_36 /* $ */, RDP_T_P, SET_END);
  set_assign_list(&rule_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_3342 /* !* */, RDP_T_3346 /* !. */, RDP_T_3360 /* !< */, 
RDP_T_3362 /* !> */, RDP_T_3383 /* !S */, RDP_T_3387 /* !W */, RDP_T_3394 /* !^ */, 
RDP_T_3398 /* !b */, RDP_T_3399 /* !c */, RDP_T_33103 /* !g */, RDP_T_33104 /* !h */, 
RDP_T_33105 /* !i */, RDP_T_33112 /* !p */, RDP_T_33115 /* !s */, RDP_T_33118 /* !v */, 
RDP_T_33121 /* !y */, RDP_T_33124 /* !| */, RDP_T_36 /* $ */, RDP_T_P,SET_END);
  set_assign_list(&sequence_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&sequence_stop, SCAN_P_EOF, RDP_T_41 /* ) */, RDP_T_46 /* . */, RDP_T_59 /* ; */, RDP_T_62 /* > */, 
RDP_T_93 /* ] */, RDP_T_124 /* | */, RDP_T_124124 /* || */, RDP_T_125 /* } */,SET_END);
  set_assign_list(&set_diff_first, SCAN_P_ID, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_464646 /* ... */, RDP_T_60 /* < */, RDP_T_91 /* [ */, 
RDP_T_123 /* { */, RDP_T_126 /* ~ */, SET_END);
  set_assign_list(&set_diff_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_34 /* " */, RDP_T_35 /* # */, RDP_T_36 /* $ */, RDP_T_39 /* ' */, 
RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_464646 /* ... */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_64 /* @ */, RDP_T_91 /* [ */, 
RDP_T_93 /* ] */, RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_124124 /* || */, 
RDP_T_125 /* } */, RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&terminal_first, RDP_T_34 /* " */, RDP_T_39 /* ' */, SET_END);
  set_assign_list(&terminal_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_3342 /* !* */, RDP_T_3360 /* !< */, RDP_T_3362 /* !> */, 
RDP_T_3394 /* !^ */, RDP_T_33124 /* !| */, RDP_T_34 /* " */, RDP_T_35 /* # */, 
RDP_T_36 /* $ */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_42 /* * */, 
RDP_T_43 /* + */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_4646 /* .. */, RDP_T_464646 /* ... */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_63 /* ? */, RDP_T_64 /* @ */, 
RDP_T_91 /* [ */, RDP_T_92 /* \ */, RDP_T_93 /* ] */, RDP_T_9494 /* ^^ */, RDP_T_9495 /* ^_ */, 
RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_124124 /* || */, RDP_T_125 /* } */, 
RDP_T_126 /* ~ */,SET_END);
  set_assign_list(&text_first, SCAN_P_ID, RDP_T_3342 /* !* */, RDP_T_3346 /* !. */, RDP_T_3360 /* !< */, RDP_T_3362 /* !> */, 
RDP_T_3383 /* !S */, RDP_T_3387 /* !W */, RDP_T_3394 /* !^ */, RDP_T_3398 /* !b */, 
RDP_T_3399 /* !c */, RDP_T_33103 /* !g */, RDP_T_33104 /* !h */, RDP_T_33105 /* !i */, 
RDP_T_33112 /* !p */, RDP_T_33115 /* !s */, RDP_T_33118 /* !v */, RDP_T_33121 /* !y */, 
RDP_T_33124 /* !| */, RDP_T_36 /* $ */, RDP_T_P, SET_END);
  set_assign_list(&text_stop, SCAN_P_EOF,SET_END);
  set_assign_list(&tree_action_stop, SCAN_P_ID, SCAN_P_EOF, RDP_T_3342 /* !* */, RDP_T_3360 /* !< */, RDP_T_3362 /* !> */, 
RDP_T_3394 /* !^ */, RDP_T_33124 /* !| */, RDP_T_34 /* " */, RDP_T_35 /* # */, 
RDP_T_36 /* $ */, RDP_T_39 /* ' */, RDP_T_40 /* ( */, RDP_T_41 /* ) */, RDP_T_42 /* * */, 
RDP_T_43 /* + */, RDP_T_44 /* , */, RDP_T_46 /* . */, RDP_T_464646 /* ... */, 
RDP_T_59 /* ; */, RDP_T_60 /* < */, RDP_T_62 /* > */, RDP_T_63 /* ? */, RDP_T_64 /* @ */, 
RDP_T_91 /* [ */, RDP_T_92 /* \ */, RDP_T_93 /* ] */, RDP_T_9494 /* ^^ */, RDP_T_9495 /* ^_ */, 
RDP_T_123 /* { */, RDP_T_124 /* | */, RDP_T_124124 /* || */, RDP_T_125 /* } */, 
RDP_T_126 /* ~ */,SET_END);
}

/* Parser forward declarations and macros */
static void alternates(rdp_tree_node_data* rdp_tree);
static p_block* arguments(rdp_tree_node_data* rdp_tree);
static void directive(rdp_tree_node_data* rdp_tree);
static void immediate_action(rdp_tree_node_data* rdp_tree);
static void invert(rdp_tree_node_data* rdp_tree);
static void iterator(rdp_tree_node_data* rdp_tree);
static nonterminals_data* lhs_nonterminal(rdp_tree_node_data* rdp_tree);
static nonterminals_data* nonterminal(rdp_tree_node_data* rdp_tree);
static void operand(rdp_tree_node_data* rdp_tree);
static p_block* parameters(rdp_tree_node_data* rdp_tree);
static void postfix(rdp_tree_node_data* rdp_tree);
static void range(rdp_tree_node_data* rdp_tree);
static void rule(rdp_tree_node_data* rdp_tree);
static void sequence(rdp_tree_node_data* rdp_tree);
static void set_diff(rdp_tree_node_data* rdp_tree);
static terminals_data* terminal(rdp_tree_node_data* rdp_tree);
void text(rdp_tree_node_data* rdp_tree);
static void tree_action(rdp_tree_node_data* rdp_tree);

/* Parser functions */
static void alternates(rdp_tree_node_data* rdp_tree)
{
  {
    if(rdp_tree_update) {rdp_tree->id = "sequence"; rdp_tree->token = 0;}
sequence(rdp_tree);
    if (scan_test_set(NULL, &rdp_alternates_10_first, NULL))
    { /* Start of rdp_alternates_10 */
      while (1)
      {
        {
          if (scan_test(NULL, RDP_T_124 /* | */, NULL))
          {
            { /* Start of rdp_alternates_3 */
              while (1)
              {
                scan_test(NULL, RDP_T_124 /* | */, &alternates_stop);
                {
                  if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
                  scan_test(NULL, RDP_T_124 /* | */, &alternates_stop);
                  scan_();
                  if (rdp_pass == 2) { \
 rdp_tree->kind = EK_OR;  \
}
                  sequence(rdp_add_child("sequence", rdp_tree));
                  if (scan_test(NULL, RDP_T_124124 /* || */, NULL))
                  { /* Start of rdp_alternates_1 */
                    while (1)
                    {
                      {
                        scan_test(NULL, RDP_T_124124 /* || */, &alternates_stop);
                        scan_();
                         text_message(TEXT_ERROR_ECHO, "illegal mixing of | and || at the same level: use parentheses\n"); 
                        sequence(rdp_add_child("sequence", rdp_tree));
                        }
                      break;   /* hi limit is 1! */
                    }
                  } /* end of rdp_alternates_1 */
                  else
                  {
                    /* default action processing for rdp_alternates_1*/
                    if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
                  }
                  }
                if (!scan_test(NULL, RDP_T_124 /* | */, NULL)) break;
              }
            } /* end of rdp_alternates_3 */
          }
          else
          if (scan_test(NULL, RDP_T_124124 /* || */, NULL))
          {
            { /* Start of rdp_alternates_8 */
              while (1)
              {
                scan_test(NULL, RDP_T_124124 /* || */, &alternates_stop);
                {
                  if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
                  scan_test(NULL, RDP_T_124124 /* || */, &alternates_stop);
                  scan_();
                  if (rdp_pass == 2) { \
 rdp_tree->kind = EK_PERMUTE;  \
}
                  sequence(rdp_add_child("sequence", rdp_tree));
                  if (scan_test(NULL, RDP_T_124 /* | */, NULL))
                  { /* Start of rdp_alternates_6 */
                    while (1)
                    {
                      {
                        scan_test(NULL, RDP_T_124 /* | */, &alternates_stop);
                        scan_();
                         text_message(TEXT_ERROR_ECHO, "illegal mixing of | and || at the same level: use parentheses\n"); 
                        sequence(rdp_add_child("sequence", rdp_tree));
                        }
                      break;   /* hi limit is 1! */
                    }
                  } /* end of rdp_alternates_6 */
                  else
                  {
                    /* default action processing for rdp_alternates_6*/
                    if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
                  }
                  }
                if (!scan_test(NULL, RDP_T_124124 /* || */, NULL)) break;
              }
            } /* end of rdp_alternates_8 */
          }
          else
            scan_test_set(NULL, &rdp_alternates_10_first, &alternates_stop)          ;
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_alternates_10 */
    else
    {
      /* default action processing for rdp_alternates_10*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &alternates_stop, &alternates_stop);
   }
}

static p_block* arguments(rdp_tree_node_data* rdp_tree)
{
  p_block* result;
  char* id;
  {
     result = NULL; 
    scan_test(NULL, RDP_T_40 /* ( */, &arguments_stop);
    scan_();
    { /* Start of rdp_arguments_1 */
      while (1)
      {
        scan_test(NULL, SCAN_P_ID, &arguments_stop);
        {
          scan_test(NULL, SCAN_P_ID, &arguments_stop);
          id = SCAN_CAST->id;
          scan_();
          if (rdp_pass == 2) { \
 p_block *temp = (p_block*) mem_calloc(1, sizeof(p_block));\
                                 temp->id = id;\
                                 temp->next = result;\
                                 result = temp;\
                               \
}
          }
        if (!scan_test(NULL, SCAN_P_ID, NULL)) break;
      }
    } /* end of rdp_arguments_1 */
    scan_test(NULL, RDP_T_41 /* ) */, &arguments_stop);
    scan_();
    scan_test_set(NULL, &arguments_stop, &arguments_stop);
   }
  return result;
}

static void directive(rdp_tree_node_data* rdp_tree)
{
  long int value;
  char* nonterminal_id;
  {
    if (scan_test(NULL, RDP_T_3346 /* !. */, NULL))
    {
      scan_test(NULL, RDP_T_3346 /* !. */, &directive_stop);
      scan_();
       default_left_recursive = default_right_recursive = default_head_tail_expansion = default_multiply = 0; 
    }
    else
    if (scan_test(NULL, RDP_T_33124 /* !| */, NULL))
    {
      scan_test(NULL, RDP_T_33124 /* !| */, &directive_stop);
      scan_();
       default_head_tail_expansion = 1; 
    }
    else
    if (scan_test(NULL, RDP_T_3394 /* !^ */, NULL))
    {
      scan_test(NULL, RDP_T_3394 /* !^ */, &directive_stop);
      scan_();
       default_substitute = 1; 
    }
    else
    if (scan_test(NULL, RDP_T_3342 /* !* */, NULL))
    {
      scan_test(NULL, RDP_T_3342 /* !* */, &directive_stop);
      scan_();
       default_multiply = 1; 
    }
    else
    if (scan_test(NULL, RDP_T_3362 /* !> */, NULL))
    {
      scan_test(NULL, RDP_T_3362 /* !> */, &directive_stop);
      scan_();
       default_right_recursive = 1; default_left_recursive = 0; 
    }
    else
    if (scan_test(NULL, RDP_T_3360 /* !< */, NULL))
    {
      scan_test(NULL, RDP_T_3360 /* !< */, &directive_stop);
      scan_();
       default_left_recursive = 1; default_right_recursive = 0; 
    }
    else
    if (scan_test(NULL, RDP_T_3398 /* !b */, NULL))
    {
      scan_test(NULL, RDP_T_3398 /* !b */, &directive_stop);
      scan_();
       bison_output = 1; 
    }
    else
    if (scan_test(NULL, RDP_T_33103 /* !g */, NULL))
    {
      scan_test(NULL, RDP_T_33103 /* !g */, &directive_stop);
      scan_();
       gtb_output = 1; 
    }
    else
    if (scan_test(NULL, RDP_T_33105 /* !i */, NULL))
    {
      scan_test(NULL, RDP_T_33105 /* !i */, &directive_stop);
      scan_();
       iso_output = 1; 
    }
    else
    if (scan_test(NULL, RDP_T_33115 /* !s */, NULL))
    {
      scan_test(NULL, RDP_T_33115 /* !s */, &directive_stop);
      scan_();
       sdf_output = 1; 
    }
    else
    if (scan_test(NULL, RDP_T_33121 /* !y */, NULL))
    {
      scan_test(NULL, RDP_T_33121 /* !y */, &directive_stop);
      scan_();
       yacc_output = 1; 
    }
    else
    if (scan_test(NULL, RDP_T_33112 /* !p */, NULL))
    {
      scan_test(NULL, RDP_T_33112 /* !p */, &directive_stop);
      scan_();
       pure_grammar = 1; 
    }
    else
    if (scan_test(NULL, RDP_T_3399 /* !c */, NULL))
    {
      scan_test(NULL, RDP_T_3399 /* !c */, &directive_stop);
      scan_();
       curly_parenthesis = 1; 
    }
    else
    if (scan_test(NULL, RDP_T_33104 /* !h */, NULL))
    {
      scan_test(NULL, RDP_T_33104 /* !h */, &directive_stop);
      scan_();
      scan_test(NULL, SCAN_P_INTEGER, &directive_stop);
      value = SCAN_CAST->data.i;
      scan_();
       halt_level = value; 
    }
    else
    if (scan_test(NULL, RDP_T_33118 /* !v */, NULL))
    {
      scan_test(NULL, RDP_T_33118 /* !v */, &directive_stop);
      scan_();
       vcg_output = 1; 
    }
    else
    if (scan_test(NULL, RDP_T_P, NULL))
    {
      scan_test(NULL, RDP_T_P, &directive_stop);
      scan_();
       parser_output = 1; 
    }
    else
    if (scan_test(NULL, RDP_T_3383 /* !S */, NULL))
    {
      scan_test(NULL, RDP_T_3383 /* !S */, &directive_stop);
      scan_();
      if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
      scan_test(NULL, SCAN_P_ID, &directive_stop);
      nonterminal_id = SCAN_CAST->id;
      scan_();
       start_nonterminal = nonterminal_id; 
    }
    else
    if (scan_test(NULL, RDP_T_3387 /* !W */, NULL))
    {
      scan_test(NULL, RDP_T_3387 /* !W */, &directive_stop);
      scan_();
      if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
      scan_test(NULL, SCAN_P_ID, &directive_stop);
      nonterminal_id = SCAN_CAST->id;
      scan_();
       whitespace_nonterminal = nonterminal_id; 
    }
    else
      scan_test_set(NULL, &directive_first, &directive_stop)    ;
    scan_test_set(NULL, &directive_stop, &directive_stop);
   }
}

static void immediate_action(rdp_tree_node_data* rdp_tree)
{
  char* lc;
  {
    scan_test(NULL, RDP_T_36 /* $ */, &immediate_action_stop);
    lc = SCAN_CAST->id;
    scan_();
     lc_execute(lc); 
    scan_test_set(NULL, &immediate_action_stop, &immediate_action_stop);
   }
}

static void invert(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test_set(NULL, &rdp_invert_0_first, NULL))
    {
      if(rdp_tree_update) {rdp_tree->id = "postfix"; rdp_tree->token = 0;}
postfix(rdp_tree);
    }
    else
    if (scan_test(NULL, RDP_T_126 /* ~ */, NULL))
    {
      if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
      scan_test(NULL, RDP_T_126 /* ~ */, &invert_stop);
      scan_();
      if (rdp_pass == 2) { \
 rdp_tree->kind = EK_INVERT;  \
}
      invert(rdp_add_child("invert", rdp_tree));
    }
    else
      scan_test_set(NULL, &invert_first, &invert_stop)    ;
    scan_test_set(NULL, &invert_stop, &invert_stop);
   }
}

static void iterator(rdp_tree_node_data* rdp_tree)
{
  long int x;
  long int y;
  {
    if(rdp_tree_update) {rdp_tree->id = "set_diff"; rdp_tree->token = 0;}
set_diff(rdp_tree);
    if (scan_test(NULL, RDP_T_64 /* @ */, NULL))
    { /* Start of rdp_iterator_5 */
      while (1)
      {
        {
          if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
          scan_test(NULL, RDP_T_64 /* @ */, &iterator_stop);
          scan_();
          if (rdp_pass == 2) { \
 rdp_tree->kind = EK_ITER; rdp_tree->lo = 1; rdp_tree->hi = 0;  \
}
          if (scan_test(NULL, SCAN_P_INTEGER, NULL))
          { /* Start of rdp_iterator_3 */
            while (1)
            {
              {
                scan_test(NULL, SCAN_P_INTEGER, &iterator_stop);
                x = SCAN_CAST->data.i;
                scan_();
                if (rdp_pass == 2) { \
 rdp_tree->hi = x;  \
}
                if (scan_test(NULL, SCAN_P_INTEGER, NULL))
                { /* Start of rdp_iterator_1 */
                  while (1)
                  {
                    {
                      scan_test(NULL, SCAN_P_INTEGER, &iterator_stop);
                      y = SCAN_CAST->data.i;
                      scan_();
                      if (rdp_pass == 2) { \
 rdp_tree->lo = rdp_tree->hi; rdp_tree->hi = y;  \
}
                      }
                    break;   /* hi limit is 1! */
                  }
                } /* end of rdp_iterator_1 */
                else
                {
                  /* default action processing for rdp_iterator_1*/
                  if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
                }
                }
              break;   /* hi limit is 1! */
            }
          } /* end of rdp_iterator_3 */
          else
          {
            /* default action processing for rdp_iterator_3*/
            if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
          }
          set_diff(rdp_add_child("set_diff", rdp_tree));
          }
        if (!scan_test(NULL, RDP_T_64 /* @ */, NULL)) break;
      }
    } /* end of rdp_iterator_5 */
    else
    {
      /* default action processing for rdp_iterator_5*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &iterator_stop, &iterator_stop);
   }
}

static nonterminals_data* lhs_nonterminal(rdp_tree_node_data* rdp_tree)
{
  nonterminals_data* result;
  char* name;
  char* extension;
  p_block* p;
  {
    if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
    scan_test(NULL, SCAN_P_ID, &lhs_nonterminal_stop);
    name = SCAN_CAST->id;
    scan_();
    if (scan_test(NULL, RDP_T_45 /* - */, NULL))
    { /* Start of rdp_lhs_nonterminal_1 */
      while (1)
      {
        {
          if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
          scan_test(NULL, RDP_T_45 /* - */, &lhs_nonterminal_stop);
          scan_();
          scan_test(NULL, SCAN_P_ID, &lhs_nonterminal_stop);
          extension = SCAN_CAST->id;
          scan_();
          }
        if (!scan_test(NULL, RDP_T_45 /* - */, NULL)) break;
      }
    } /* end of rdp_lhs_nonterminal_1 */
    else
    {
      /* default action processing for rdp_lhs_nonterminal_1*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
     lhs_count++;\
                                           result = (nonterminals_data*) symbol_find(nonterminals, &name, sizeof(char*), sizeof(nonterminals_data), NULL, SYMBOL_ANY);\
                                           result->defined = 1;\
                                           result->rules_tree = rdp_tree;\
                                        if (rdp_pass == 2) { \
 rdp_tree->kind = EK_LHS_NONTERMINAL; rdp_tree->lo = 1; rdp_tree->hi = 1; rdp_tree->nonterminal_symbol_table_entry = result;  \
}
    if (scan_test(NULL, RDP_T_40 /* ( */, NULL))
    { /* Start of rdp_lhs_nonterminal_7 */
      while (1)
      {
        {
          scan_test(NULL, RDP_T_40 /* ( */, &lhs_nonterminal_stop);
          scan_();
          p = parameters(rdp_tree);
          scan_test(NULL, RDP_T_41 /* ) */, &lhs_nonterminal_stop);
          scan_();
          if (rdp_pass == 1) { \
 result->has_synthesized_attributes = 1;  \
}if (rdp_pass == 2) { \
 rdp_tree->synthesized = p;  \
}
          if (scan_test(NULL, RDP_T_40 /* ( */, NULL))
          { /* Start of rdp_lhs_nonterminal_3 */
            while (1)
            {
              {
                scan_test(NULL, RDP_T_40 /* ( */, &lhs_nonterminal_stop);
                scan_();
                p = parameters(rdp_tree);
                scan_test(NULL, RDP_T_41 /* ) */, &lhs_nonterminal_stop);
                scan_();
                if (rdp_pass == 1) { \
 result->has_inherited_attributes = 1;  \
}if (rdp_pass == 2) { \
 rdp_tree->inherited = rdp_tree->synthesized; rdp_tree->synthesized = p;  \
}
                }
              break;   /* hi limit is 1! */
            }
          } /* end of rdp_lhs_nonterminal_3 */
          else
          {
            /* default action processing for rdp_lhs_nonterminal_3*/
            if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
          }
          if (scan_test(NULL, SCAN_P_ID, NULL))
          { /* Start of rdp_lhs_nonterminal_5 */
            while (1)
            {
              {
                p = parameters(rdp_tree);
                if (rdp_pass == 1) { \
 result->has_local_attributes = 1;  \
}if (rdp_pass == 2) { \
 rdp_tree->local = p;  \
}
                }
              break;   /* hi limit is 1! */
            }
          } /* end of rdp_lhs_nonterminal_5 */
          else
          {
            /* default action processing for rdp_lhs_nonterminal_5*/
            if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
          }
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_lhs_nonterminal_7 */
    else
    {
      /* default action processing for rdp_lhs_nonterminal_7*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &lhs_nonterminal_stop, &lhs_nonterminal_stop);
   }
  return result;
}

static nonterminals_data* nonterminal(rdp_tree_node_data* rdp_tree)
{
  nonterminals_data* result;
  char* name;
  char* extension;
  p_block* a;
  {
    if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
    scan_test(NULL, SCAN_P_ID, &nonterminal_stop);
    name = SCAN_CAST->id;
    scan_();
    if (scan_test(NULL, RDP_T_45 /* - */, NULL))
    { /* Start of rdp_nonterminal_1 */
      while (1)
      {
        {
          if (rdp_tree_update) rdp_add_child(NULL, rdp_tree);
          scan_test(NULL, RDP_T_45 /* - */, &nonterminal_stop);
          scan_();
          scan_test(NULL, SCAN_P_ID, &nonterminal_stop);
          extension = SCAN_CAST->id;
          scan_();
          }
        if (!scan_test(NULL, RDP_T_45 /* - */, NULL)) break;
      }
    } /* end of rdp_nonterminal_1 */
    else
    {
      /* default action processing for rdp_nonterminal_1*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
     result = (nonterminals_data*) symbol_find(nonterminals, &name, sizeof(char*), sizeof(nonterminals_data), NULL, SYMBOL_ANY);\
                                       result->used = 1;\
                                    if (rdp_pass == 2) { \
 rdp_tree->kind = EK_NONTERMINAL; rdp_tree->lo = 1; rdp_tree->hi = 1; rdp_tree->nonterminal_symbol_table_entry = result;  \
} if (result->has_synthesized_attributes)\
                                       {\
                                    
    a = arguments(rdp_tree);
    if (rdp_pass == 2) { \
 rdp_tree->synthesized = a;  \
} } 
 if (result->has_inherited_attributes)\
                                       {\
                                    
    a = arguments(rdp_tree);
    if (rdp_pass == 2) { \
 rdp_tree->inherited = rdp_tree->synthesized; rdp_tree->synthesized = a;  \
} } 
    scan_test_set(NULL, &nonterminal_stop, &nonterminal_stop);
   }
  return result;
}

static void operand(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test(NULL, RDP_T_35 /* # */, NULL))
    {
      if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
      scan_test(NULL, RDP_T_35 /* # */, &operand_stop);
      scan_();
      if (rdp_pass == 2) { \
 rdp_tree->kind = EK_EPSILON;  \
}
    }
    else
    if (scan_test(NULL, RDP_T_464646 /* ... */, NULL))
    {
      if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
      scan_test(NULL, RDP_T_464646 /* ... */, &operand_stop);
      scan_();
      if (rdp_pass == 2) { \
 rdp_tree->kind = EK_ELLIPSIS;  \
}
    }
    else
    if (scan_test(NULL, RDP_T_36 /* $ */, NULL))
    {
      if(rdp_tree_update) {rdp_tree->id = "tree_action"; rdp_tree->token = 0;}
tree_action(rdp_tree);
    }
    else
    if (scan_test(NULL, RDP_T_123 /* { */, NULL))
    {
      scan_test(NULL, RDP_T_123 /* { */, &operand_stop);
      scan_();
      if(rdp_tree_update) {rdp_tree->id = "alternates"; rdp_tree->token = 0;}
alternates(rdp_tree);
      if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
      scan_test(NULL, RDP_T_125 /* } */, &operand_stop);
      scan_();
      if (rdp_pass == 2) { \
 rdp_tree->kind = EK_ITER; rdp_tree->lo = 0; rdp_tree->hi = 0;  \
}
    }
    else
    if (scan_test(NULL, RDP_T_91 /* [ */, NULL))
    {
      scan_test(NULL, RDP_T_91 /* [ */, &operand_stop);
      scan_();
      if(rdp_tree_update) {rdp_tree->id = "alternates"; rdp_tree->token = 0;}
alternates(rdp_tree);
      if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
      scan_test(NULL, RDP_T_93 /* ] */, &operand_stop);
      scan_();
      if (rdp_pass == 2) { \
 rdp_tree->kind = EK_ITER; rdp_tree->lo = 0; rdp_tree->hi = 1;  \
}
    }
    else
    if (scan_test(NULL, RDP_T_60 /* < */, NULL))
    {
      scan_test(NULL, RDP_T_60 /* < */, &operand_stop);
      scan_();
      if(rdp_tree_update) {rdp_tree->id = "alternates"; rdp_tree->token = 0;}
alternates(rdp_tree);
      if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
      scan_test(NULL, RDP_T_62 /* > */, &operand_stop);
      scan_();
      if (rdp_pass == 2) { \
 rdp_tree->kind = EK_ITER; rdp_tree->lo = 1; rdp_tree->hi = 0;  \
}
    }
    else
    if (scan_test(NULL, RDP_T_40 /* ( */, NULL))
    {
      scan_test(NULL, RDP_T_40 /* ( */, &operand_stop);
      scan_();
      if(rdp_tree_update) {rdp_tree->id = "alternates"; rdp_tree->token = 0;}
alternates(rdp_tree);
      if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
      scan_test(NULL, RDP_T_41 /* ) */, &operand_stop);
      scan_();
      if (rdp_pass == 2) { \
 rdp_tree->kind = EK_ITER; rdp_tree->lo = 1; rdp_tree->hi = 1;  \
}
    }
    else
    if (scan_test_set(NULL, &rdp_operand_7_first, NULL))
    {
      if(rdp_tree_update) {rdp_tree->id = "range"; rdp_tree->token = 0;}
range(rdp_tree);
    }
    else
      scan_test_set(NULL, &operand_first, &operand_stop)    ;
    scan_test_set(NULL, &operand_stop, &operand_stop);
   }
}

static p_block* parameters(rdp_tree_node_data* rdp_tree)
{
  p_block* result;
  char* id;
  char* type;
  {
     result = NULL; 
    { /* Start of rdp_parameters_1 */
      while (1)
      {
        scan_test(NULL, SCAN_P_ID, &parameters_stop);
        {
          scan_test(NULL, SCAN_P_ID, &parameters_stop);
          id = SCAN_CAST->id;
          scan_();
          scan_test(NULL, RDP_T_58 /* : */, &parameters_stop);
          scan_();
          scan_test(NULL, SCAN_P_ID, &parameters_stop);
          type = SCAN_CAST->id;
          scan_();
          if (rdp_pass == 2) { \
 p_block *temp = (p_block*) mem_calloc(1, sizeof(p_block));\
                             temp->id = id;\
                             temp->type = type;\
                             temp->next = result;\
                             result = temp;\
                           \
}
          }
        if (!scan_test(NULL, SCAN_P_ID, NULL)) break;
      }
    } /* end of rdp_parameters_1 */
    scan_test_set(NULL, &parameters_stop, &parameters_stop);
   }
  return result;
}

static void postfix(rdp_tree_node_data* rdp_tree)
{
  {
    if(rdp_tree_update) {rdp_tree->id = "operand"; rdp_tree->token = 0;}
operand(rdp_tree);
    if (scan_test_set(NULL, &rdp_postfix_10_first, NULL))
    { /* Start of rdp_postfix_10 */
      while (1)
      {
        {
          if (scan_test(NULL, RDP_T_63 /* ? */, NULL))
          {
            if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
            scan_test(NULL, RDP_T_63 /* ? */, &postfix_stop);
            scan_();
            if (rdp_pass == 2) { \
 rdp_tree->kind = EK_ITER; rdp_tree->lo = 0; rdp_tree->hi = 1;  \
}
          }
          else
          if (scan_test(NULL, RDP_T_42 /* * */, NULL))
          {
            if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
            scan_test(NULL, RDP_T_42 /* * */, &postfix_stop);
            scan_();
            if (rdp_pass == 2) { \
 rdp_tree->kind = EK_ITER; rdp_tree->lo = 0; rdp_tree->hi = 0;  \
}
          }
          else
          if (scan_test(NULL, RDP_T_43 /* + */, NULL))
          {
            if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
            scan_test(NULL, RDP_T_43 /* + */, &postfix_stop);
            scan_();
            if (rdp_pass == 2) { \
 rdp_tree->kind = EK_ITER; rdp_tree->lo = 1; rdp_tree->hi = 0;  \
}
          }
          else
          if (scan_test(NULL, RDP_T_9495 /* ^_ */, NULL))
          {
            scan_test(NULL, RDP_T_9495 /* ^_ */, &postfix_stop);
            scan_();
            if (rdp_pass == 2) { \
 rdp_tree->promotion = EP_UNDER;  \
}
          }
          else
          if (scan_test(NULL, RDP_T_9494 /* ^^ */, NULL))
          {
            scan_test(NULL, RDP_T_9494 /* ^^ */, &postfix_stop);
            scan_();
            if (rdp_pass == 2) { \
 rdp_tree->promotion = EP_OVER;  \
}
          }
          else
          if (scan_test(NULL, RDP_T_3394 /* !^ */, NULL))
          {
            scan_test(NULL, RDP_T_3394 /* !^ */, &postfix_stop);
            scan_();
            if (rdp_pass == 2) { \
 rdp_tree->substitute = 1;  \
}
          }
          else
          if (scan_test(NULL, RDP_T_33124 /* !| */, NULL))
          {
            scan_test(NULL, RDP_T_33124 /* !| */, &postfix_stop);
            scan_();
            if (rdp_pass == 2) { \
 rdp_tree->head_tail_expansion = 1;  \
}
          }
          else
          if (scan_test(NULL, RDP_T_3342 /* !* */, NULL))
          {
            scan_test(NULL, RDP_T_3342 /* !* */, &postfix_stop);
            scan_();
            if (rdp_pass == 2) { \
 rdp_tree->multiply = 1;  \
}
          }
          else
          if (scan_test(NULL, RDP_T_3362 /* !> */, NULL))
          {
            scan_test(NULL, RDP_T_3362 /* !> */, &postfix_stop);
            scan_();
            if (rdp_pass == 2) { \
 rdp_tree->right_recursive = 1; rdp_tree->left_recursive = 0;  \
}
          }
          else
          if (scan_test(NULL, RDP_T_3360 /* !< */, NULL))
          {
            scan_test(NULL, RDP_T_3360 /* !< */, &postfix_stop);
            scan_();
            if (rdp_pass == 2) { \
 rdp_tree->left_recursive = 1; rdp_tree->right_recursive = 0;  \
}
          }
          else
            scan_test_set(NULL, &rdp_postfix_10_first, &postfix_stop)          ;
          }
        if (!scan_test_set(NULL, &rdp_postfix_10_first, NULL)) break;
      }
    } /* end of rdp_postfix_10 */
    else
    {
      /* default action processing for rdp_postfix_10*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &postfix_stop, &postfix_stop);
   }
}

static void range(rdp_tree_node_data* rdp_tree)
{
  {
    { /* Start of rdp_range_2 */
      while (1)
      {
        scan_test_set(NULL, &rdp_range_2_first, &range_stop);
        {
          if (scan_test(NULL, SCAN_P_ID, NULL))
          {
            if(rdp_tree_update) {rdp_tree->id = "nonterminal"; rdp_tree->token = 0;}
nonterminal(rdp_tree);
          }
          else
          if (scan_test_set(NULL, &rdp_range_1_first, NULL))
          {
            if(rdp_tree_update) {rdp_tree->id = "terminal"; rdp_tree->token = 0;}
terminal(rdp_tree);
          }
          else
            scan_test_set(NULL, &rdp_range_2_first, &range_stop)          ;
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_range_2 */
    if (scan_test(NULL, RDP_T_4646 /* .. */, NULL))
    { /* Start of rdp_range_7 */
      while (1)
      {
        {
          if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
          scan_test(NULL, RDP_T_4646 /* .. */, &range_stop);
          scan_();
          if (rdp_pass == 2) { \
 rdp_tree->kind = EK_RANGE; rdp_tree->lo = 1; rdp_tree->hi = 1;  \
}
          { /* Start of rdp_range_5 */
            while (1)
            {
              scan_test_set(NULL, &rdp_range_5_first, &range_stop);
              {
                if (scan_test(NULL, SCAN_P_ID, NULL))
                {
                  nonterminal(rdp_add_child("nonterminal", rdp_tree));
                }
                else
                if (scan_test_set(NULL, &rdp_range_4_first, NULL))
                {
                  terminal(rdp_add_child("terminal", rdp_tree));
                }
                else
                  scan_test_set(NULL, &rdp_range_5_first, &range_stop)                ;
                }
              break;   /* hi limit is 1! */
            }
          } /* end of rdp_range_5 */
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_range_7 */
    else
    {
      /* default action processing for rdp_range_7*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &range_stop, &range_stop);
   }
}

static void rule(rdp_tree_node_data* rdp_tree)
{
  {
    if(rdp_tree_update) {rdp_tree->id = "lhs_nonterminal"; rdp_tree->token = 0;}
lhs_nonterminal(rdp_tree);
    { /* Start of rdp_rule_4 */
      while (1)
      {
        scan_test_set(NULL, &rdp_rule_4_first, &rule_stop);
        {
          if (scan_test(NULL, RDP_T_585861 /* ::= */, NULL))
          {
            scan_test(NULL, RDP_T_585861 /* ::= */, &rule_stop);
            scan_();
          }
          else
          if (scan_test(NULL, RDP_T_58 /* : */, NULL))
          {
            scan_test(NULL, RDP_T_58 /* : */, &rule_stop);
            scan_();
          }
          else
          if (scan_test(NULL, RDP_T_5858 /* :: */, NULL))
          {
            scan_test(NULL, RDP_T_5858 /* :: */, &rule_stop);
            scan_();
          }
          else
          if (scan_test(NULL, RDP_T_61 /* = */, NULL))
          {
            scan_test(NULL, RDP_T_61 /* = */, &rule_stop);
            scan_();
          }
          else
            scan_test_set(NULL, &rdp_rule_4_first, &rule_stop)          ;
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_rule_4 */
    alternates(rdp_add_child("alternates", rdp_tree));
    { /* Start of rdp_rule_7 */
      while (1)
      {
        scan_test_set(NULL, &rdp_rule_7_first, &rule_stop);
        {
          if (scan_test(NULL, RDP_T_46 /* . */, NULL))
          {
            scan_test(NULL, RDP_T_46 /* . */, &rule_stop);
            scan_();
          }
          else
          if (scan_test(NULL, RDP_T_59 /* ; */, NULL))
          {
            scan_test(NULL, RDP_T_59 /* ; */, &rule_stop);
            scan_();
          }
          else
            scan_test_set(NULL, &rdp_rule_7_first, &rule_stop)          ;
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_rule_7 */
    scan_test_set(NULL, &rule_stop, &rule_stop);
   }
}

static void sequence(rdp_tree_node_data* rdp_tree)
{
  {
    if (scan_test_set(NULL, &rdp_sequence_5_first, NULL))
    { /* Start of rdp_sequence_5 */
      while (1)
      {
        {
          if(rdp_tree_update) {rdp_tree->id = "iterator"; rdp_tree->token = 0;}
iterator(rdp_tree);
          if (scan_test_set(NULL, &rdp_sequence_3_first, NULL))
          { /* Start of rdp_sequence_3 */
            while (1)
            {
              {
                if (scan_test(NULL, RDP_T_44 /* , */, NULL))
                { /* Start of rdp_sequence_1 */
                  while (1)
                  {
                    {
                      if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
                      scan_test(NULL, RDP_T_44 /* , */, &sequence_stop);
                      scan_();
                      }
                    break;   /* hi limit is 1! */
                  }
                } /* end of rdp_sequence_1 */
                else
                {
                  /* default action processing for rdp_sequence_1*/
                  if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_parent(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
                }
                if (rdp_pass == 2) { \
 rdp_tree->kind = EK_SEQUENCE; rdp_tree->id = ",,";  \
}
                iterator(rdp_add_child("iterator", rdp_tree));
                }
              if (!scan_test_set(NULL, &rdp_sequence_3_first, NULL)) break;
            }
          } /* end of rdp_sequence_3 */
          else
          {
            /* default action processing for rdp_sequence_3*/
            if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
          }
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_sequence_5 */
    else
    {
      /* default action processing for rdp_sequence_5*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
 if (rdp_tree_update) { rdp_tree->kind = EK_EPSILON; rdp_tree->id = "#"; } 
    }
    scan_test_set(NULL, &sequence_stop, &sequence_stop);
   }
}

static void set_diff(rdp_tree_node_data* rdp_tree)
{
  {
    if(rdp_tree_update) {rdp_tree->id = "invert"; rdp_tree->token = 0;}
invert(rdp_tree);
    if (scan_test(NULL, RDP_T_92 /* \ */, NULL))
    { /* Start of rdp_set_diff_1 */
      while (1)
      {
        {
          if (rdp_tree_update) rdp_add_parent(NULL, rdp_tree);
          scan_test(NULL, RDP_T_92 /* \ */, &set_diff_stop);
          scan_();
          if (rdp_pass == 2) { \
 rdp_tree->kind = EK_DIFF; rdp_tree->lo = 1; rdp_tree->hi = 1;  \
}
          invert(rdp_add_child("invert", rdp_tree));
          }
        if (!scan_test(NULL, RDP_T_92 /* \ */, NULL)) break;
      }
    } /* end of rdp_set_diff_1 */
    else
    {
      /* default action processing for rdp_set_diff_1*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &set_diff_stop, &set_diff_stop);
   }
}

static terminals_data* terminal(rdp_tree_node_data* rdp_tree)
{
  terminals_data* result;
  char* name;
  {
    { /* Start of rdp_terminal_2 */
      while (1)
      {
        scan_test_set(NULL, &rdp_terminal_2_first, &terminal_stop);
        {
          if (scan_test(NULL, RDP_T_39 /* ' */, NULL))
          {
            if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
            scan_test(NULL, RDP_T_39 /* ' */, &terminal_stop);
            name = SCAN_CAST->id;
            scan_();
          }
          else
          if (scan_test(NULL, RDP_T_34 /* " */, NULL))
          {
            if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
            scan_test(NULL, RDP_T_34 /* " */, &terminal_stop);
            name = SCAN_CAST->id;
            scan_();
          }
          else
            scan_test_set(NULL, &rdp_terminal_2_first, &terminal_stop)          ;
          }
        break;   /* hi limit is 1! */
      }
    } /* end of rdp_terminal_2 */
     result = (terminals_data*) symbol_find(terminals, &name, sizeof(char*), sizeof(terminals_data), NULL, SYMBOL_ANY); if (rdp_pass == 2) { \
 rdp_tree->kind = EK_TERMINAL; rdp_tree->lo = 1; rdp_tree->hi = 1; rdp_tree->terminal_symbol_table_entry = result;  \
}
    scan_test_set(NULL, &terminal_stop, &terminal_stop);
   }
  return result;
}

void text(rdp_tree_node_data* rdp_tree)
{
  {
    if (rdp_pass == 2) { \
 rdp_tree->kind = EK_ROOT;  \
}
    if (scan_test_set(NULL, &rdp_text_3_first, NULL))
    { /* Start of rdp_text_3 */
      while (1)
      {
        {
          if (scan_test_set(NULL, &rdp_text_0_first, NULL))
          {
            directive(rdp_tree);
          }
          else
          if (scan_test(NULL, RDP_T_36 /* $ */, NULL))
          {
            immediate_action(rdp_tree);
          }
          else
          if (scan_test(NULL, SCAN_P_ID, NULL))
          {
            rule(rdp_add_child("rule", rdp_tree));
          }
          else
            scan_test_set(NULL, &rdp_text_3_first, &text_stop)          ;
          }
        if (!scan_test_set(NULL, &rdp_text_3_first, NULL)) break;
      }
    } /* end of rdp_text_3 */
    else
    {
      /* default action processing for rdp_text_3*/
      if (rdp_tree_update) {rdp_tree_node_data *temp = rdp_add_child(NULL, rdp_tree); temp->id = NULL; temp->token = SCAN_P_ID;}
    }
    scan_test_set(NULL, &text_stop, &text_stop);
   }
}

static void tree_action(rdp_tree_node_data* rdp_tree)
{
  {
    if (rdp_tree_update) memcpy(rdp_tree, text_scan_data, sizeof(scan_data));
    scan_test(NULL, RDP_T_36 /* $ */, &tree_action_stop);
    scan_();
    if (rdp_pass == 2) { \
 rdp_tree->kind = EK_ACTION;  \
}
    scan_test_set(NULL, &tree_action_stop, &tree_action_stop);
   }
}

int main(int argc, char *argv[])
{
  clock_t rdp_finish_time, rdp_start_time = clock();
  int
    rdp_symbol_statistics = 0,    /* show symbol_ table statistics flag */
    rdp_line_echo_all = 0,        /* make a listing on all passes flag */
    rdp_filter = 0,               /* filter flag */
    rdp_line_echo = 0,            /* make listing flag */

    rdp_lexicalise = 0;            /* print lexicalised output flag */

  unsigned long rdp_textsize = 100000l;   /* size of scanner text array */

  unsigned long rdp_tabwidth = 8l;   /* tab expansion width */

  char* rdp_vcg_filename = NULL;      /* filename for -V option */

  rdp_tree_node_data* rdp_tree = (rdp_tree_node_data*) graph_insert_graph("RDP derivation tree");  /* hook for derivation tree */
  rdp_tree_node_data* rdp_tree_root;

  arg_message("gramconv V2.2 (c) Adrian Johnstone 2006-2012\n" RDP_STAMP "\n\n""Usage: gramconv [options] source[.bnf]");

  arg_message("");
  arg_boolean('f', "Filter mode (read from stdin and write to stdout)", &rdp_filter);
  arg_boolean('l', "Make a listing", &rdp_line_echo);
  arg_boolean('L', "Print lexicalised source file", &rdp_lexicalise);
  arg_string ('o', "Write output to filename", &rdp_outputfilename);
  arg_boolean('s', "Echo each scanner symbol as it is read", &rdp_symbol_echo);
  arg_boolean('S', "Print summary symbol table statistics", &rdp_symbol_statistics);
  arg_numeric('t', "Tab expansion width (default 8)", &rdp_tabwidth);
  arg_numeric('T', "Text buffer size in bytes for scanner (default 20000)", &rdp_textsize);
  arg_boolean('v', "Set verbose mode", &rdp_verbose);
  arg_string ('V', "Write derivation tree to filename in VCG format", &rdp_vcg_filename);
  arg_message("");
  arg_message("Input styles");
  arg_boolean('c', "treat { } as ( ) rather than as Kleene closure", &curly_parenthesis);
  arg_message("");
  arg_message("EBNF to BNF translation control");
  arg_numeric('h', "halt after phase <n>:\n   -h0 parse\n   -h1 coalesce\n   -h2 sets\n   -h3 substitute\n   -h4 head/tail\n   -h5 iterator\n   -h6 multiply", &halt_level);
  arg_message("");
  arg_message("Output styles");
  arg_boolean('a', "ART style output to gt.art", &art_output);
  arg_boolean('b', "GNU Bison style output to gc.by", &bison_output);
  arg_boolean('g', "GTB style output to gc.gtb", &gtb_output);
  arg_boolean('i', "ISO-standard style output to gc.iso", &iso_output);
  arg_boolean('s', "SDF style output to gc.sdf", &sdf_output);
  arg_boolean('y', "YACC style output to gc.y", &yacc_output);
  arg_message("");
  arg_boolean('p', "pure grammar output: suppress lexical rules, actions, attributes and parameters from output", &pure_grammar);
  arg_string ('T', "use nonterminal <s> as start symbol", &start_nonterminal);
  arg_boolean('t', "treat undefined nonterminals as terminals", &terminalise);
  arg_message("");
  arg_boolean('v', "output internal grammar representation to gt.vcg", &vcg_output);
  arg_message("");
  arg_message("Unsupported options for RHUL internal use only");
  arg_boolean('L', "remove direct left recursion using EAS transform", &left_recursion_removal);
  arg_boolean('P', "output grd_scanner.cpp, grd_parser.cpp, and rd_semantics.cpp for grammar with start rule <s>", &parser_output);
  arg_string ('W', "use nonterminal <s> for whitespace rule", &whitespace_nonterminal);

  rdp_sourcefilenames = arg_process(argc, argv);

  /* Fix up filetypes */
  for (rdp_sourcefilenumber = 0; rdp_sourcefilenames[rdp_sourcefilenumber] != NULL; rdp_sourcefilenumber++)
    rdp_sourcefilenames[rdp_sourcefilenumber] = text_default_filetype(rdp_sourcefilenames[rdp_sourcefilenumber], "bnf");

  if (rdp_filter)
  {
    rdp_sourcefilenames[0] = "-";
    rdp_outputfilename = "-";
    rdp_sourcefilenames[1] = NULL;     /* make sure no further filenames are taken from the array */

  }
  if ((rdp_sourcefilename = rdp_sourcefilenames[0]) == NULL)
     arg_help("no source files specified");

  if (rdp_sourcefilenames[1] != NULL)
    arg_help("multiple source files not allowed\n");
  text_init(rdp_textsize, 25, 100, (int) rdp_tabwidth);
  scan_init(0, 0, 0, rdp_symbol_echo, rdp_tokens);
  if (rdp_lexicalise)
    scan_lexicalise();
  terminals = symbol_new_table("terminals", 101, 31, symbol_compare_string, symbol_hash_string, symbol_print_string);
  nonterminals = symbol_new_table("nonterminals", 101, 31, symbol_compare_string, symbol_hash_string, symbol_print_string);
  rdp_set_initialise();
  rdp_load_keywords();
  if (rdp_verbose)
     text_printf("\ngramconv V2.2 (c) Adrian Johnstone 2006-2012\n" RDP_STAMP "\n\n");
  for (rdp_pass = 1; rdp_pass <= RDP_PASSES; rdp_pass++)
  {
    rdp_tree_update = rdp_pass == RDP_PASSES;
    text_echo(rdp_line_echo_all || (rdp_line_echo && rdp_pass == RDP_PASSES));

    for (rdp_sourcefilenumber = 0; (rdp_sourcefilename = rdp_sourcefilenames[rdp_sourcefilenumber]) != NULL; rdp_sourcefilenumber++)
    {
      if (text_open(rdp_sourcefilename) == NULL)
        arg_help("unable to open source file");

      text_get_char();
      scan_();

      text(rdp_tree_root = rdp_add_node("text", rdp_tree));            /* call parser at top level */
      if (text_total_errors() != 0)
        text_message(TEXT_FATAL, "error%s detected in source file 'gramconv'\n", text_total_errors() == 1 ? "" : "s", rdp_sourcefilename);   /* crash quietly */ 
      graph_epsilon_prune_rdp_tree(rdp_tree_root, sizeof(rdp_tree_edge_data));
    }
  }

  rdp_sourcefilename = rdp_sourcefilenames[0];     /* Reset filename to first file in the list */

  graph_set_root(rdp_tree, rdp_tree_root);
  if (rdp_vcg_filename != NULL)
  {
    FILE *rdp_vcg_file;

    if (*rdp_vcg_filename == '\0')   /* No filename supplied */
      rdp_vcg_filename = "rdparser";
    rdp_vcg_file = fopen((rdp_vcg_filename = text_default_filetype(rdp_vcg_filename, "vcg")), "w");

    if (rdp_vcg_file == NULL)
      text_message(TEXT_FATAL, "unable to open VCG file '%s' for write\n", rdp_vcg_filename);

    if (rdp_verbose)
      text_message(TEXT_INFO, "Dumping derivation tree to VCG file '%s'\n", rdp_vcg_filename);

    text_redirect(rdp_vcg_file);
    graph_vcg(rdp_tree, NULL, scan_vcg_print_node, scan_vcg_print_edge);
    text_redirect(stdout);
    fclose(rdp_vcg_file);
  }

   gc_post_parse(rdp_tree, argc, argv); 
  if (rdp_symbol_statistics)
  {
    symbol_print_all_table_statistics(11);
    symbol_print_all_table();

  }
  text_print_total_errors();
  if (rdp_verbose)
  {
    rdp_finish_time = clock();
    text_message(TEXT_INFO, "%.3f CPU seconds used\n", ((double) (rdp_finish_time-rdp_start_time)) / CLOCKS_PER_SEC);
  }
  return rdp_error_return;
}

/* End of gramconv.c */
