program   ::=  { [var_dec | statement] ';'^}.

var_dec ::= 'int'^^ (dec_body)@','^.

dec_body ::= ID:name^^ ['='^ e0 ]:^ .

statement ::= ID:name check_declared '='^^ e0  |                       (* assignment *)
              'if'^^ e0 'then'^ statement [ 'else'^ statement ] |   (* if statement *)
              'while'^^ e0 'do'^ statement |                       (* while do statement *)
              'print'^^ '('^ ( e0  | String )@','^ ')'^ |            (* print statement *)
              'begin'^^ (statement)@';'^ 'end'^.                    (* compound statement *)

e0 ::= e1^^ [ '>'^^^ e1  |  (* Greater than *)
              '<'^^^ e1  |  (* Less than *)
              '>='^^^ e1 |  (* Greater than or equal *)
              '<='^^^ e1 |  (* Less than or equal *)
              '=='^^^ e1 |  (* Equal *)
              '!='^^^ e1    (* Not equal *)
            ] .

e1 ::= e2^^ { '+'^^^ e2  |  (* Add *)
              '-'^^^ e2     (* Subtract *)
          } .

e2 ::= e3^^ { '*'^^^ e3  |  (* Multiply *)
              '/'^^^ e3     (* Divide *)
            } .

e3 ::= e4^^ | 
       '+'^ e3  |  (* Posite: note suppression from intermediate form! *)
       '-'^^ e3 .  (* Negate *)
             

e4 ::= e5 [ '**'^^ e4 ]:^^.

e5 ::= ID:name^^  | (* Variable access *)
       INTEGER^^  |    (* Numeric literal *)
       '('^ e1^^ ')'^.    (* Parenthesised expression *)

comment ::= COMMENT_NEST('(*' '*)').  (* Comments: stripped by lexer *)
String^  ::= STRING_ESC('"' '\\').     (* Strings for print *)


