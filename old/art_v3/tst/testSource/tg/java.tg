jls1_life
$
Goal::=
  CompilationUnit ;

// Generated by gramex V1.2 from 'java_language_specification_1.raw' on Sep  1 2006 at 10:38:05
// Command line: C:\cg\dev\gramex\gramex.exe -i java_language_specification_1.raw

// Start of provenance

// CONVERTED TO ART FORMAT AUGUST 2012 by EAS

// java_language_specification_1.raw - the grammar from Chapter 19 of the
// Java Language Specification (First Edition)

// 1. This is the grammar from Chapter 19 (pages 433--454) of 'The Java
// Language Specification (First Edition)' by James Gosling, Bill Joy and
// Guy L. Steele, Addison Wesley, (1996) ISBN: 0201634511.

// 2. This file was created by opening the HTML version of the book which
// is online at http://java.sun.com/docs/books/jls/ using Mozilla Firefox
// 1.5.0.6, opening chapter 19, selecting all text and then pasting it
// into Emacs.

// 3. Most of section 19.1 was deleted.

// 4. Tabs were changed to eight spaces.

// 5. Double-new-lines within grammar rules were removed.

// 6. A new line was inserted before section headers 19.8.1 and 19.9.1.

// 7. The result was proof read against the PDF version of the book,
// accessed from the same URL as above.

// 8. This grammar is Copyright © 1996 Sun Microsystems, Inc. We contacted
// Sun to see if it would be acceptable to them to post this material and
// received this kind message from Gilad Bracha, co-author of editions
// two and three of the Java Language Specification.

//   Adrian,

//     Feel free to post the grammar with an appropriate acknowledgement of
//     copyright. I'm pretty sure Sun will not come after you for your good 
//     work.

// If you intend to make use of this grammar, you must ensure you have
// met Sun's terms and conditions on the use of the Java Language
// Specification. Please contact Sun directly if in doubt.

// 9. You can process this file with the gramex tool to make something
// close to a Bison input file, and use the gramconv tool to convert EBNF
// constructs to pure BNF, and to translate to a variety of other
// formats.

// 10. For tool and grammar downloads, see the Royal Holloway Compilers
// Group homepage under http://www.cs.rhul.ac.uk, or contact us at
// A.Johnstone@rhul.ac.uk or E.Scott@rhul.ac.uk.

// 11. Please don't change this file.

//         Adrian Johnstone and Elizabeth Scott, 1 September 2006

// End of provenance

// Contents | Prev | Next | Index         Java Language Specification
// First Edition

// CHAPTER 19
// LALR(1) Grammar

// This chapter presents a grammar for Java. The grammar has been
// mechanically checked to insure that it is LALR(1).

// ... Omitted text ...


// The remaining sections of this chapter constitute a LALR(1) grammar
// for Java syntax, in which the five problems described above have been
// solved.

// 19.2 Productions from §2.3: The Syntactic Grammar

//java1()(Goal)

// 19.3 Productions from §3: Lexical Structure

Literal::=
  'INTEGER' |
  'REAL' |
  'CHAR' |
  'STRING' |
  'true' | 'false' |
  'null' ;

// 19.4 Productions from §4: Types, Values, and Variables

Type::=
  PrimitiveType |
  ReferenceType ;

PrimitiveType::=
  NumericType |
  'boolean' ;

NumericType::=
  IntegralType |
  FloatingPointType ;

IntegralType::=
  'byte' | 'short' | 'int' | 'long' | 'char' ;

FloatingPointType::=
  'float' | 'double' ;

ReferenceType::=
  ClassOrInterfaceType |
  ArrayType ;

ClassOrInterfaceType::=
  Name ;

ClassType::=
  ClassOrInterfaceType ;

InterfaceType::=
  ClassOrInterfaceType ;

ArrayType::=
  PrimitiveType '[' ']' |
  Name '[' ']' |
  ArrayType '[' ']' ;

// 19.5 Productions from §6::= Names

Name::=
  SimpleName |
  QualifiedName ;

SimpleName::=
  'ID' ;

QualifiedName::=
  Name '.' 'ID' ;

// 19.6 Productions from §7: Packages

CompilationUnit::=
  PackageDeclaration? ImportDeclarations? TypeDeclarations? ;

ImportDeclarations::=
  ImportDeclaration |
  ImportDeclarations ImportDeclaration ;

TypeDeclarations::=
  TypeDeclaration |
  TypeDeclarations TypeDeclaration ;

PackageDeclaration::=
  'package' Name ';' ;

ImportDeclaration::=
  SingleTypeImportDeclaration |
  TypeImportOnDemandDeclaration ;

SingleTypeImportDeclaration::=
  'import' Name ';' ;

TypeImportOnDemandDeclaration::=
  'import' Name '.' '*' ';' ;

TypeDeclaration::=
  ClassDeclaration |
  InterfaceDeclaration |
  ';' ;

// 19.7 Productions Used Only in the LALR(1) Grammar

Modifiers::=
  Modifier |
  Modifiers Modifier ;

Modifier::=
  'public' | 'protected' | 'private' |
  'static' |
  'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' ;

// 19.8 Productions from §8: Classes

// 19.8.1 Productions from §8.1: Class Declaration

ClassDeclaration::=
  Modifiers? 'class' 'ID' Super? Interfaces? ClassBody ;

Super::=
  'extends' ClassType ;

Interfaces::=
  'implements' InterfaceTypeList ;

InterfaceTypeList::=
  InterfaceType |
  InterfaceTypeList ',' InterfaceType ;

ClassBody::=
  '{' ClassBodyDeclarations? '}' ;

ClassBodyDeclarations::=
  ClassBodyDeclaration |
  ClassBodyDeclarations ClassBodyDeclaration ;

ClassBodyDeclaration::=
  ClassMemberDeclaration |
  StaticInitializer |
  ConstructorDeclaration ;

ClassMemberDeclaration::=
  FieldDeclaration |
  MethodDeclaration ;

// 19.8.2 Productions from §8.3: Field Declarations

FieldDeclaration::=
  Modifiers? Type VariableDeclarators ';' ;

VariableDeclarators::=
  VariableDeclarator |
  VariableDeclarators ',' VariableDeclarator ;

VariableDeclarator::=
  VariableDeclaratorId |
  VariableDeclaratorId '=' VariableInitializer ;

VariableDeclaratorId::=
  'ID' |
  VariableDeclaratorId '[' ']' ;

VariableInitializer::=
  Expression |
  ArrayInitializer ;

// 19.8.3 Productions from §8.4::= Method Declarations

MethodDeclaration::=
  MethodHeader MethodBody ;

MethodHeader::=
  Modifiers? Type MethodDeclarator Throws? |
  Modifiers? 'void' MethodDeclarator Throws? ;

MethodDeclarator::=
  'ID' '(' FormalParameterList? ')' |
  MethodDeclarator '[' ']' ;

FormalParameterList::=
  FormalParameter |
  FormalParameterList ',' FormalParameter ;

FormalParameter::=
  Type VariableDeclaratorId ;

Throws::=
  'throws' ClassTypeList ;

ClassTypeList::=
  ClassType |
  ClassTypeList ',' ClassType ;

MethodBody::=
  Block |
  ';' ;

// 19.8.4 Productions from §8.5: Static Initializers

StaticInitializer::=
  'static' Block ;

// 19.8.5 Productions from §8.6: Constructor Declarations

ConstructorDeclaration::=
  Modifiers? ConstructorDeclarator Throws? ConstructorBody ;

ConstructorDeclarator::=
  SimpleName '(' FormalParameterList? ')' ;

ConstructorBody::=
  '{' ExplicitConstructorInvocation? BlockStatements? '}' ;

ExplicitConstructorInvocation::=
  'this' '(' ArgumentList? ')' ';' |
  'super' '(' ArgumentList? ')' ';' ;

// 19.9 Productions from §9: Interfaces

// 19.9.1 Productions from §9.1: Interface Declarations

InterfaceDeclaration::=
  Modifiers? 'interface' 'ID' ExtendsInterfaces? InterfaceBody ;

ExtendsInterfaces::=
  'extends' InterfaceType |
  ExtendsInterfaces ',' InterfaceType ;

InterfaceBody::=
  '{' InterfaceMemberDeclarations? '}' ;

InterfaceMemberDeclarations::=
  InterfaceMemberDeclaration |
  InterfaceMemberDeclarations InterfaceMemberDeclaration ;

InterfaceMemberDeclaration::=
  ConstantDeclaration |
  AbstractMethodDeclaration ;

ConstantDeclaration::=
  FieldDeclaration ;

AbstractMethodDeclaration::=
  MethodHeader ';' ;

// 19.10 Productions from §10: Arrays

ArrayInitializer::=
  '{' VariableInitializers? ','? '}' ;

VariableInitializers::=
  VariableInitializer |
  VariableInitializers ',' VariableInitializer ;

// 19.11 Productions from §14: Blocks and Statements
Block::=
  '{' BlockStatements? '}' ;

BlockStatements::=
  BlockStatement |
  BlockStatements BlockStatement ;

BlockStatement::=
  LocalVariableDeclarationStatement |
  Statement ;

LocalVariableDeclarationStatement::=
  LocalVariableDeclaration ';' ;

LocalVariableDeclaration::=
  Type VariableDeclarators ;

Statement::=
  StatementWithoutTrailingSubstatement |
  LabeledStatement |
  IfThenStatement |
  IfThenElseStatement |
  WhileStatement |
  ForStatement ;

StatementNoShortIf::=
  StatementWithoutTrailingSubstatement |
  LabeledStatementNoShortIf |
  IfThenElseStatementNoShortIf |
  WhileStatementNoShortIf |
  ForStatementNoShortIf ;

StatementWithoutTrailingSubstatement::=
  Block |
  EmptyStatement |
  ExpressionStatement |
  SwitchStatement |
  DoStatement |
  BreakStatement |
  ContinueStatement |
  ReturnStatement |
  SynchronizedStatement |
  ThrowStatement |
  TryStatement ;

EmptyStatement::=
  ';' ;

LabeledStatement::=
  'ID' ':' Statement ;

LabeledStatementNoShortIf::=
  'ID' ':' StatementNoShortIf ;

ExpressionStatement::=
  StatementExpression ';' ;

StatementExpression::=
  Assignment |
  PreIncrementExpression |
  PreDecrementExpression |
  PostIncrementExpression |
  PostDecrementExpression |
  MethodInvocation |
  ClassInstanceCreationExpression ;

IfThenStatement::=
  'if' '(' Expression ')' Statement ;

IfThenElseStatement::=
  'if' '(' Expression ')' StatementNoShortIf 'else' Statement ;

IfThenElseStatementNoShortIf::=
  'if' '(' Expression ')' StatementNoShortIf 'else' StatementNoShortIf ;

SwitchStatement::=
  'switch' '(' Expression ')' SwitchBlock ;

SwitchBlock::=
  '{' SwitchBlockStatementGroups? SwitchLabels? '}' ;

SwitchBlockStatementGroups::=
  SwitchBlockStatementGroup |
  SwitchBlockStatementGroups SwitchBlockStatementGroup ;

SwitchBlockStatementGroup::=
  SwitchLabels BlockStatements ;

SwitchLabels::=
  SwitchLabel |
  SwitchLabels SwitchLabel ;

SwitchLabel::=
  'case' ConstantExpression ':' |
  'default' ':' ;

WhileStatement::=
  'while' '(' Expression ')' Statement ;

WhileStatementNoShortIf::=
  'while' '(' Expression ')' StatementNoShortIf ;

DoStatement::=
  'do' Statement 'while' '(' Expression ')' ';' ;

ForStatement::=
  'for' '(' ForInit? ';' Expression? ';' ForUpdate? ')' 
  Statement ;

ForStatementNoShortIf::=
  'for' '(' ForInit? ';' Expression? ';' ForUpdate? ')' 
  StatementNoShortIf ;

ForInit::=
  StatementExpressionList |
  LocalVariableDeclaration ;

ForUpdate::=
  StatementExpressionList ;

StatementExpressionList::=
  StatementExpression |
  StatementExpressionList ',' StatementExpression ;

BreakStatement::=
  'break' 'ID'? ';' ;

ContinueStatement::=
  'continue' 'ID'? ';' ;

ReturnStatement::=
  'return' Expression? ';' ;

ThrowStatement::=
  'throw' Expression ';' ;

SynchronizedStatement::=
  'synchronized' '(' Expression ')' Block ;

TryStatement::=
  'try' Block Catches |
  'try' Block Catches? Finally ;

Catches::=
  CatchClause |
  Catches CatchClause ;

CatchClause::=
  'catch' '(' FormalParameter ')' Block ;

Finally::=
  'finally' Block ;

// 19.12 Productions from §15: Expressions

Primary::=
  PrimaryNoNewArray |
  ArrayCreationExpression ;

PrimaryNoNewArray::=
  Literal |
  'this' |
  '(' Expression ')' |
  ClassInstanceCreationExpression |
  FieldAccess |
  MethodInvocation |
  ArrayAccess ;

ClassInstanceCreationExpression::=
  'new' ClassType '(' ArgumentList? ')' ;

ArgumentList::=
  Expression |
  ArgumentList ',' Expression ;

ArrayCreationExpression::=
  'new' PrimitiveType DimExprs Dims? |
  'new' ClassOrInterfaceType DimExprs Dims? ;

DimExprs::=
  DimExpr |
  DimExprs DimExpr ;

DimExpr::=
  '[' Expression ']' ;

Dims::=
  '[' ']' |
  Dims '[' ']' ;

FieldAccess::=
  Primary '.' 'ID' |
  'super' '.' 'ID' ;

MethodInvocation::=
  Name '(' ArgumentList? ')' |
  Primary '.' 'ID' '(' ArgumentList? ')' |
  'super' '.' 'ID' '(' ArgumentList? ')' ;

ArrayAccess::=
  Name '[' Expression ']' |
  PrimaryNoNewArray '[' Expression ']' ;

PostfixExpression::=
  Primary |
  Name |
  PostIncrementExpression |
  PostDecrementExpression ;

PostIncrementExpression::=
  PostfixExpression '++' ;

PostDecrementExpression::=
  PostfixExpression '--' ;

UnaryExpression::=
  PreIncrementExpression |
  PreDecrementExpression |
  '+' UnaryExpression |
  '-' UnaryExpression |
  UnaryExpressionNotPlusMinus ;

PreIncrementExpression::=
  '++' UnaryExpression ;

PreDecrementExpression::=
  '--' UnaryExpression ;

UnaryExpressionNotPlusMinus::=
  PostfixExpression |
  '~' UnaryExpression |
  '!' UnaryExpression |
  CastExpression ;

CastExpression::=
  '(' PrimitiveType Dims? ')' UnaryExpression |
  '(' Expression ')' UnaryExpressionNotPlusMinus |
  '(' Name Dims ')' UnaryExpressionNotPlusMinus ;

MultiplicativeExpression::=
  UnaryExpression |
  MultiplicativeExpression '*' UnaryExpression |
  MultiplicativeExpression '/' UnaryExpression |
  MultiplicativeExpression '%' UnaryExpression ;

AdditiveExpression::=
  MultiplicativeExpression |
  AdditiveExpression '+' MultiplicativeExpression |
  AdditiveExpression '-' MultiplicativeExpression ;

ShiftExpression::=
  AdditiveExpression |
  ShiftExpression '<<' AdditiveExpression |
  ShiftExpression '>>' AdditiveExpression |
  ShiftExpression '>>>' AdditiveExpression ;

RelationalExpression::=
  ShiftExpression |
  RelationalExpression '<' ShiftExpression |
  RelationalExpression '>' ShiftExpression |
  RelationalExpression '<=' ShiftExpression |
  RelationalExpression '>=' ShiftExpression |
  RelationalExpression 'instanceof' ReferenceType ;

EqualityExpression::=
  RelationalExpression |
  EqualityExpression '==' RelationalExpression |
  EqualityExpression '!=' RelationalExpression ;

AndExpression::=
  EqualityExpression |
  AndExpression '&' EqualityExpression ;

ExclusiveOrExpression::=
  AndExpression |
  ExclusiveOrExpression '^' AndExpression ;

InclusiveOrExpression::=
  ExclusiveOrExpression |
  InclusiveOrExpression '|' ExclusiveOrExpression ;

ConditionalAndExpression::=
  InclusiveOrExpression |
  ConditionalAndExpression '&&' InclusiveOrExpression ;

ConditionalOrExpression::=
  ConditionalAndExpression |
  ConditionalOrExpression '||' ConditionalAndExpression ;

ConditionalExpression::=
  ConditionalOrExpression |
  ConditionalOrExpression '?' Expression ':' ConditionalExpression ;

AssignmentExpression::=
  ConditionalExpression |
  Assignment ;

Assignment::=
  LeftHandSide AssignmentOperator AssignmentExpression ;

LeftHandSide::=
  Name |
  FieldAccess |
  ArrayAccess ;

AssignmentOperator::=
  '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' ;

Expression::=
  AssignmentExpression ;

ConstantExpression::=
  Expression ;

// Contents | Prev | Next | Index         Java Language Specification
// First Edition

// Java Language Specification (HTML generated by Suzette Pelouch on April 03, 1998)
// Copyright © 1996 Sun Microsystems, Inc. All rights reserved
// Please send any comments or corrections via our feedback form 
$
accept
$class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 }$

(* !!!!!!!!!! *)
jls1_mult_life
$
(* ART3 grammar generated by ART from 'v2\jls1V2.art' on Jun 10 2018 08:39:23 *)
Goal ::=
   CompilationUnit 

AbstractMethodDeclaration ::=
   MethodHeader ';' 

AdditiveExpression ::=
   MultiplicativeExpression |
   AdditiveExpression '+' MultiplicativeExpression |
   AdditiveExpression '-' MultiplicativeExpression 

AndExpression ::=
   EqualityExpression |
   AndExpression '&' EqualityExpression 

ArgumentList ::=
   Expression |
   ArgumentList ',' Expression 

ArrayAccess ::=
   Name '[' Expression ']' |
   PrimaryNoNewArray '[' Expression ']' 

ArrayCreationExpression ::=
   'new' PrimitiveType DimExprs |
   'new' PrimitiveType DimExprs Dims |
   'new' ClassOrInterfaceType DimExprs |
   'new' ClassOrInterfaceType DimExprs Dims 

ArrayInitializer ::=
   '{' '}' |
   '{' ',' '}' |
   '{' VariableInitializers '}' |
   '{' VariableInitializers ',' '}' 

ArrayType ::=
   PrimitiveType '[' ']' |
   Name '[' ']' |
   ArrayType '[' ']' 

Assignment ::=
   LeftHandSide AssignmentOperator AssignmentExpression 

AssignmentExpression ::=
   ConditionalExpression |
   Assignment 

AssignmentOperator ::=
   '=' |
   '*=' |
   '/=' |
   '%=' |
   '+=' |
   '-=' |
   '<<=' |
   '>>=' |
   '>>>=' |
   '&=' |
   '^=' |
   '|=' 

Block ::=
   '{' '}' |
   '{' BlockStatements '}' 

BlockStatement ::=
   LocalVariableDeclarationStatement |
   Statement 

BlockStatements ::=
   BlockStatement |
   BlockStatements BlockStatement 

BreakStatement ::=
   'break' ';' |
   'break' 'ID' ';' 

CastExpression ::=
   '(' Expression ')' UnaryExpressionNotPlusMinus |
   '(' Name Dims ')' UnaryExpressionNotPlusMinus |
   '(' PrimitiveType ')' UnaryExpression |
   '(' PrimitiveType Dims ')' UnaryExpression 

CatchClause ::=
   'catch' '(' FormalParameter ')' Block 

Catches ::=
   CatchClause |
   Catches CatchClause 

ClassBody ::=
   '{' '}' |
   '{' ClassBodyDeclarations '}' 

ClassBodyDeclaration ::=
   ClassMemberDeclaration |
   StaticInitializer |
   ConstructorDeclaration 

ClassBodyDeclarations ::=
   ClassBodyDeclaration |
   ClassBodyDeclarations ClassBodyDeclaration 

ClassDeclaration ::=
   'class' 'ID' ClassBody |
   'class' 'ID' Interfaces ClassBody |
   'class' 'ID' Super ClassBody |
   'class' 'ID' Super Interfaces ClassBody |
   Modifiers 'class' 'ID' ClassBody |
   Modifiers 'class' 'ID' Interfaces ClassBody |
   Modifiers 'class' 'ID' Super ClassBody |
   Modifiers 'class' 'ID' Super Interfaces ClassBody 

ClassInstanceCreationExpression ::=
   'new' ClassType '(' ')' |
   'new' ClassType '(' ArgumentList ')' 

ClassMemberDeclaration ::=
   FieldDeclaration |
   MethodDeclaration 

ClassOrInterfaceType ::=
   Name 

ClassType ::=
   ClassOrInterfaceType 

ClassTypeList ::=
   ClassType |
   ClassTypeList ',' ClassType 

CompilationUnit ::=
   # |
   TypeDeclarations |
   ImportDeclarations |
   ImportDeclarations TypeDeclarations |
   PackageDeclaration |
   PackageDeclaration TypeDeclarations |
   PackageDeclaration ImportDeclarations |
   PackageDeclaration ImportDeclarations TypeDeclarations 

ConditionalAndExpression ::=
   InclusiveOrExpression |
   ConditionalAndExpression '&&' InclusiveOrExpression 

ConditionalExpression ::=
   ConditionalOrExpression |
   ConditionalOrExpression '?' Expression ':' ConditionalExpression 

ConditionalOrExpression ::=
   ConditionalAndExpression |
   ConditionalOrExpression '||' ConditionalAndExpression 

ConstantDeclaration ::=
   FieldDeclaration 

ConstantExpression ::=
   Expression 

ConstructorBody ::=
   '{' '}' |
   '{' BlockStatements '}' |
   '{' ExplicitConstructorInvocation '}' |
   '{' ExplicitConstructorInvocation BlockStatements '}' 

ConstructorDeclaration ::=
   ConstructorDeclarator ConstructorBody |
   ConstructorDeclarator Throws ConstructorBody |
   Modifiers ConstructorDeclarator ConstructorBody |
   Modifiers ConstructorDeclarator Throws ConstructorBody 

ConstructorDeclarator ::=
   SimpleName '(' ')' |
   SimpleName '(' FormalParameterList ')' 

ContinueStatement ::=
   'continue' ';' |
   'continue' 'ID' ';' 

DimExpr ::=
   '[' Expression ']' 

DimExprs ::=
   DimExpr |
   DimExprs DimExpr 

Dims ::=
   '[' ']' |
   Dims '[' ']' 

DoStatement ::=
   'do' Statement 'while' '(' Expression ')' ';' 

EmptyStatement ::=
   ';' 

EqualityExpression ::=
   RelationalExpression |
   EqualityExpression '==' RelationalExpression |
   EqualityExpression '!=' RelationalExpression 

ExclusiveOrExpression ::=
   AndExpression |
   ExclusiveOrExpression '^' AndExpression 

ExplicitConstructorInvocation ::=
   'this' '(' ')' ';' |
   'this' '(' ArgumentList ')' ';' |
   'super' '(' ')' ';' |
   'super' '(' ArgumentList ')' ';' 

Expression ::=
   AssignmentExpression 

ExpressionStatement ::=
   StatementExpression ';' 

ExtendsInterfaces ::=
   'extends' InterfaceType |
   ExtendsInterfaces ',' InterfaceType 

FieldAccess ::=
   Primary '.' 'ID' |
   'super' '.' 'ID' 

FieldDeclaration ::=
   Type VariableDeclarators ';' |
   Modifiers Type VariableDeclarators ';' 

Finally ::=
   'finally' Block 

FloatingPointType ::=
   'float' |
   'double' 

ForInit ::=
   StatementExpressionList |
   LocalVariableDeclaration 

ForStatement ::=
   'for' '(' ';' ';' ')' Statement |
   'for' '(' ';' ';' ForUpdate ')' Statement |
   'for' '(' ';' Expression ';' ')' Statement |
   'for' '(' ';' Expression ';' ForUpdate ')' Statement |
   'for' '(' ForInit ';' ';' ')' Statement |
   'for' '(' ForInit ';' ';' ForUpdate ')' Statement |
   'for' '(' ForInit ';' Expression ';' ')' Statement |
   'for' '(' ForInit ';' Expression ';' ForUpdate ')' Statement 

ForStatementNoShortIf ::=
   'for' '(' ';' ';' ')' StatementNoShortIf |
   'for' '(' ';' ';' ForUpdate ')' StatementNoShortIf |
   'for' '(' ';' Expression ';' ')' StatementNoShortIf |
   'for' '(' ';' Expression ';' ForUpdate ')' StatementNoShortIf |
   'for' '(' ForInit ';' ';' ')' StatementNoShortIf |
   'for' '(' ForInit ';' ';' ForUpdate ')' StatementNoShortIf |
   'for' '(' ForInit ';' Expression ';' ')' StatementNoShortIf |
   'for' '(' ForInit ';' Expression ';' ForUpdate ')' StatementNoShortIf 

ForUpdate ::=
   StatementExpressionList 

FormalParameter ::=
   Type VariableDeclaratorId 

FormalParameterList ::=
   FormalParameter |
   FormalParameterList ',' FormalParameter 

IfThenElseStatement ::=
   'if' '(' Expression ')' StatementNoShortIf 'else' Statement 

IfThenElseStatementNoShortIf ::=
   'if' '(' Expression ')' StatementNoShortIf 'else' StatementNoShortIf 

IfThenStatement ::=
   'if' '(' Expression ')' Statement 

ImportDeclaration ::=
   SingleTypeImportDeclaration |
   TypeImportOnDemandDeclaration 

ImportDeclarations ::=
   ImportDeclaration |
   ImportDeclarations ImportDeclaration 

InclusiveOrExpression ::=
   ExclusiveOrExpression |
   InclusiveOrExpression '|' ExclusiveOrExpression 

IntegralType ::=
   'byte' |
   'short' |
   'int' |
   'long' |
   'char' 

InterfaceBody ::=
   '{' '}' |
   '{' InterfaceMemberDeclarations '}' 

InterfaceDeclaration ::=
   'interface' 'ID' InterfaceBody |
   'interface' 'ID' ExtendsInterfaces InterfaceBody |
   Modifiers 'interface' 'ID' InterfaceBody |
   Modifiers 'interface' 'ID' ExtendsInterfaces InterfaceBody 

InterfaceMemberDeclaration ::=
   ConstantDeclaration |
   AbstractMethodDeclaration 

InterfaceMemberDeclarations ::=
   InterfaceMemberDeclaration |
   InterfaceMemberDeclarations InterfaceMemberDeclaration 

InterfaceType ::=
   ClassOrInterfaceType 

InterfaceTypeList ::=
   InterfaceType |
   InterfaceTypeList ',' InterfaceType 

Interfaces ::=
   'implements' InterfaceTypeList 

LabeledStatement ::=
   'ID' ':' Statement 

LabeledStatementNoShortIf ::=
   'ID' ':' StatementNoShortIf 

LeftHandSide ::=
   Name |
   FieldAccess |
   ArrayAccess 

Literal ::=
   'INTEGER' |
   'REAL' |
   'CHAR' |
   'STRING' |
   'true' |
   'false' |
   'null' 

LocalVariableDeclaration ::=
   Type VariableDeclarators 

LocalVariableDeclarationStatement ::=
   LocalVariableDeclaration ';' 

MethodBody ::=
   Block |
   ';' 

MethodDeclaration ::=
   MethodHeader MethodBody 

MethodDeclarator ::=
   MethodDeclarator '[' ']' |
   'ID' '(' ')' |
   'ID' '(' FormalParameterList ')' 

MethodHeader ::=
   Type MethodDeclarator |
   Type MethodDeclarator Throws |
   Modifiers Type MethodDeclarator |
   Modifiers Type MethodDeclarator Throws |
   'void' MethodDeclarator |
   'void' MethodDeclarator Throws |
   Modifiers 'void' MethodDeclarator |
   Modifiers 'void' MethodDeclarator Throws 

MethodInvocation ::=
   Name '(' ')' |
   Name '(' ArgumentList ')' |
   Primary '.' 'ID' '(' ')' |
   Primary '.' 'ID' '(' ArgumentList ')' |
   'super' '.' 'ID' '(' ')' |
   'super' '.' 'ID' '(' ArgumentList ')' 

Modifier ::=
   'public' |
   'protected' |
   'private' |
   'static' |
   'abstract' |
   'final' |
   'native' |
   'synchronized' |
   'transient' |
   'volatile' 

Modifiers ::=
   Modifier |
   Modifiers Modifier 

MultiplicativeExpression ::=
   UnaryExpression |
   MultiplicativeExpression '*' UnaryExpression |
   MultiplicativeExpression '/' UnaryExpression |
   MultiplicativeExpression '%' UnaryExpression 

Name ::=
   SimpleName |
   QualifiedName 

NumericType ::=
   IntegralType |
   FloatingPointType 

PackageDeclaration ::=
   'package' Name ';' 

PostDecrementExpression ::=
   PostfixExpression '--' 

PostIncrementExpression ::=
   PostfixExpression '++' 

PostfixExpression ::=
   Primary |
   Name |
   PostIncrementExpression |
   PostDecrementExpression 

PreDecrementExpression ::=
   '--' UnaryExpression 

PreIncrementExpression ::=
   '++' UnaryExpression 

Primary ::=
   PrimaryNoNewArray |
   ArrayCreationExpression 

PrimaryNoNewArray ::=
   Literal |
   'this' |
   '(' Expression ')' |
   ClassInstanceCreationExpression |
   FieldAccess |
   MethodInvocation |
   ArrayAccess 

PrimitiveType ::=
   NumericType |
   'boolean' 

QualifiedName ::=
   Name '.' 'ID' 

ReferenceType ::=
   ClassOrInterfaceType |
   ArrayType 

RelationalExpression ::=
   ShiftExpression |
   RelationalExpression '<' ShiftExpression |
   RelationalExpression '>' ShiftExpression |
   RelationalExpression '<=' ShiftExpression |
   RelationalExpression '>=' ShiftExpression |
   RelationalExpression 'instanceof' ReferenceType 

ReturnStatement ::=
   'return' ';' |
   'return' Expression ';' 

ShiftExpression ::=
   AdditiveExpression |
   ShiftExpression '<<' AdditiveExpression |
   ShiftExpression '>>' AdditiveExpression |
   ShiftExpression '>>>' AdditiveExpression 

SimpleName ::=
   'ID' 

SingleTypeImportDeclaration ::=
   'import' Name ';' 

Statement ::=
   StatementWithoutTrailingSubstatement |
   LabeledStatement |
   IfThenStatement |
   IfThenElseStatement |
   WhileStatement |
   ForStatement 

StatementExpression ::=
   Assignment |
   PreIncrementExpression |
   PreDecrementExpression |
   PostIncrementExpression |
   PostDecrementExpression |
   MethodInvocation |
   ClassInstanceCreationExpression 

StatementExpressionList ::=
   StatementExpression |
   StatementExpressionList ',' StatementExpression 

StatementNoShortIf ::=
   StatementWithoutTrailingSubstatement |
   LabeledStatementNoShortIf |
   IfThenElseStatementNoShortIf |
   WhileStatementNoShortIf |
   ForStatementNoShortIf 

StatementWithoutTrailingSubstatement ::=
   Block |
   EmptyStatement |
   ExpressionStatement |
   SwitchStatement |
   DoStatement |
   BreakStatement |
   ContinueStatement |
   ReturnStatement |
   SynchronizedStatement |
   ThrowStatement |
   TryStatement 

StaticInitializer ::=
   'static' Block 

Super ::=
   'extends' ClassType 

SwitchBlock ::=
   '{' '}' |
   '{' SwitchLabels '}' |
   '{' SwitchBlockStatementGroups '}' |
   '{' SwitchBlockStatementGroups SwitchLabels '}' 

SwitchBlockStatementGroup ::=
   SwitchLabels BlockStatements 

SwitchBlockStatementGroups ::=
   SwitchBlockStatementGroup |
   SwitchBlockStatementGroups SwitchBlockStatementGroup 

SwitchLabel ::=
   'case' ConstantExpression ':' |
   'default' ':' 

SwitchLabels ::=
   SwitchLabel |
   SwitchLabels SwitchLabel 

SwitchStatement ::=
   'switch' '(' Expression ')' SwitchBlock 

SynchronizedStatement ::=
   'synchronized' '(' Expression ')' Block 

ThrowStatement ::=
   'throw' Expression ';' 

Throws ::=
   'throws' ClassTypeList 

TryStatement ::=
   'try' Block Catches |
   'try' Block Finally |
   'try' Block Catches Finally 

Type ::=
   PrimitiveType |
   ReferenceType 

TypeDeclaration ::=
   ClassDeclaration |
   InterfaceDeclaration |
   ';' 

TypeDeclarations ::=
   TypeDeclaration |
   TypeDeclarations TypeDeclaration 

TypeImportOnDemandDeclaration ::=
   'import' Name '.' '*' ';' 

UnaryExpression ::=
   PreIncrementExpression |
   PreDecrementExpression |
   '+' UnaryExpression |
   '-' UnaryExpression |
   UnaryExpressionNotPlusMinus 

UnaryExpressionNotPlusMinus ::=
   PostfixExpression |
   '~' UnaryExpression |
   '!' UnaryExpression |
   CastExpression 

VariableDeclarator ::=
   VariableDeclaratorId |
   VariableDeclaratorId '=' VariableInitializer 

VariableDeclaratorId ::=
   'ID' |
   VariableDeclaratorId '[' ']' 

VariableDeclarators ::=
   VariableDeclarator |
   VariableDeclarators ',' VariableDeclarator 

VariableInitializer ::=
   Expression |
   ArrayInitializer 

VariableInitializers ::=
   VariableInitializer |
   VariableInitializers ',' VariableInitializer 

WhileStatement ::=
   'while' '(' Expression ')' Statement 

WhileStatementNoShortIf ::=
   'while' '(' Expression ')' StatementNoShortIf 

$
accept
$class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 }$
(*!!!!!!*)

jls2_life
$

CompilationUnit::=
  ( 'package' QualifiedIdentifier ';' )?  ( ImportDeclaration )*  
  ( TypeDeclaration )*  ;

// Generated by gramex V1.2 from 'java_language_specification_2.raw' on Sep  1 2006 at 10:38:05
// Command line: C:\cg\dev\gramex\gramex.exe -i -e java_language_specification_2.raw

// Start of provenance

// PUT INTO ART FORMAT AUGUST 2012 by EAS
// also some errors fixed where the raw -> gex hasn't worked propery
// the original uses bold to distinguish between the grammar terminals [,(
// and the corresponding ebnf meta symbols

// java_language_specification_2.raw - the grammar from Chapter 18 of the
// Java Language Specification, Second Edition

// 1. This is the grammar from Chapter 18 (pages 449--456) of 'The Java
// Language Specification, Second Edition' by by Bill Joy, Guy Steele,
// James Gosling, Gilad Bracha, Addison Wesley, (2000) ISBN: 0201310082.

// 2. This file was created by opening the HTML version of the book which
// is online at http://java.sun.com/docs/books/jls/ using Mozilla Firefox
// 1.5.0.6, opening chapter 18, selecting all text and then pasting it
// into Emacs.

// 3. Tabs were changed to eight spaces.

// 4. Three trivial typos were fixed:

//    (a) In rule Expression2, the space between the left had side 
//        nonterminal and its colon (:) delimiter was removed.

//    (b) In rule BlockStatement, the space between the left had side 
//        nonterminal and its colon (:) delimiter was removed.

//    (c) In rule SwitchLabel, the production 'default:' was changed to 
//        'default :'.

// We've notified Sun of these typos: they may be fixed in later versions of the
// online documents.

// 5. All instances of '[' were replaced with ' [ ', similarly for ], (,
// ), {, } and |.  This is because our gramex (grammar extract) tool
// requires space delimiting of grammar elements. Delimiting | in this
// way damages terminals such as |= and || which must be repaired at the
// next stage.

// 6. The result was proof read against the PDF version of the book,
// accessed from the same URL as above.

// 7. This grammar is Copyright © 1996 Sun Microsystems, Inc. I contacted
// Sun to see if it would be acceptable to them to post this material and
// received this kind message from Gilad Bracha, co-author of editions
// two and three of the Java Language Specification.

//   Adrian,

//     Feel free to post the grammar with an appropriate acknowledgement of
//     copyright. I'm pretty sure Sun will not come after you for your good 
//     work.

// If you intend to make use of this grammar, you must ensure you have
// met Sun's terms and conditions on the use of the Java Language
// Specification. Please contact Sun directly if in doubt.

// 8. You can process this file with the gramex tool to make something
// close to a Bison input file, and use the gramconv tool to convert EBNF
// constructs to pure BNF, and to translate to a variety of other
// formats.

// 9. For tool and grammar downloads, see the Royal Holloway Compilers
// Group homepage under http://www.cs.rhul.ac.uk, or contact us at
// A.Johnstone@rhul.ac.uk or E.Scott@rhul.ac.uk.

// 10. Please don't change this file.

//         Adrian Johnstone and Elizabeth Scott, 1 September 2006

// End of provenance

// Contents  |  Prev  |  Next  |  Index         Java Language Specification
// Second Edition

// CHAPTER 18
// Syntax

// This chapter presents a grammar for the Java programming language.

// The grammar presented piecemeal in the preceding chapters is much
// better for exposition, but it is not ideally suited as a basis for a
// parser. The grammar presented in this chapter is the basis for the
// reference implementation.

// The grammar below uses the following BNF-style conventions:

//     *  [ x ]  denotes zero or one occurrences of x.
//     *  { x }  denotes zero or more occurrences of x.
//     * x  |  y means one of either x or y. 

// 18.1 The Grammar of the Java Programming Language

//Java2ART()(CompilationUnit)

Identifier::=
  'ID' ;

QualifiedIdentifier::=
  Identifier (  '.' Identifier )*  ;

Literal::=
  'INTEGER' |
  'REAL' |
  'CHAR' |
  'STRING' |
  'true' | 'false' |
  'null' ;

Expression::=
  Expression1 ( AssignmentOperator Expression )?  ;
//EAS  changed this:  Expression1 [  AssignmentOperator Expression1 ]  ]  ;

AssignmentOperator::=
  '=' |
  '+=' |
  '-=' |
  '*=' |
  '/=' |
  '&=' |
  '|=' |
  '^=' |
  '%=' |
  '<<=' |
  '>>=' |
  '>>>=' ;

Type::=
  Identifier (  '.' Identifier )*  BracketsOpt |
  BasicType ;

StatementExpression::=
  Expression ;

ConstantExpression::=
  Expression ;

Expression1::=
  Expression2 ( Expression1Rest )?  ;

Expression1Rest::=
  ( '?' Expression ':' Expression1 )? ;

Expression2::=
  Expression3 ( Expression2Rest )? ;

Expression2Rest::=
  (  Infixop Expression3 )*  |
  Expression3 'instanceof' Type ;

Infixop::=
  '||'  |
  '&&' |
  '|'  |
  '^' |
  '&' |
  '==' |
  '!=' |
  '<' |
  '>' |
  '<=' |
  '>=' |
  '<<' |
  '>>' |
  '>>>' |
  '+' |
  '-' |
  '*' |
  '/' |
  '%' ;

Expression3::=
  PrefixOp Expression3 |
//  '('  'Expr' |  Type ')'  Expression3 |
  '('  Expression |  Type ')'  Expression3 |
  Primary (  Selector )*  (  PostfixOp )*  ;

Primary::=
  '(' Expression ')'  |
  'this' ( Arguments )?  |
  'super' SuperSuffix |
  Literal |
  'new' Creator |
  Identifier ( '.' Identifier )*  ( IdentifierSuffix )?  |
//White space issues here
  BasicType BracketsOpt '.' 'class' |
  'void.class' ;

IdentifierSuffix::=
  '['  (  ']'  BracketsOpt '.' 'class' |  Expression ']'  )  |
  Arguments |
  '.' (  'class' |  'this' |  'super' Arguments |  'new' InnerCreator )  ;

PrefixOp::=
  '++' |
  '--' |
  '!' |
  '~' |
  '+' |
  '-' ;

PostfixOp::=
  '++' |
  '--' ;

Selector::=
  '.' Identifier ( Arguments )?  |
  '.' 'this' |
  '.' 'super' SuperSuffix |
  '.' 'new' InnerCreator |
  '['  Expression ']'  ;

SuperSuffix::=
  Arguments |
  '.' Identifier ( Arguments )?  ;

BasicType::=
  'byte' |
  'short' |
  'char' |
  'int' |
  'long' |
  'float' |
  'double' |
  'boolean' ;

ArgumentsOpt::=
  ( Arguments )? ;

Arguments::=
  '('  ( Expression (  ',' Expression )* )?  ')'  ;

BracketsOpt::=
  (  '['  ']'  )*  ;

Creator::=
  QualifiedIdentifier (  ArrayCreatorRest |  ClassCreatorRest )  ;

InnerCreator::=
  Identifier ClassCreatorRest ;

ArrayCreatorRest::=
  '['  (  ']'  BracketsOpt ArrayInitializer |  Expression ']'  
             (  '['  Expression ']'  )*  BracketsOpt ) ;

ClassCreatorRest::=
  Arguments ( ClassBody )?  ;

ArrayInitializer::=
  '{' ( VariableInitializer (  ',' VariableInitializer )*  ( ',' )?  )?  '}'  ;

VariableInitializer::=
  ArrayInitializer |
  Expression ;

ParExpression::=
  '('  Expression ')'  ;

Block::=
  '{'  BlockStatements '}'  ;

BlockStatements::=
  (  BlockStatement )*  ;

BlockStatement::=
  LocalVariableDeclarationStatement |
  ClassOrInterfaceDeclaration |
  ( Identifier ':' )?  Statement ;

LocalVariableDeclarationStatement::=
  ( 'final' )? Type VariableDeclarators ';' ;

Statement::=
  Block |
  'if' ParExpression Statement ( 'else' Statement )? |
  'for' '(' (ForInit)? ';' (Expression)?  ';' (ForUpdate)? ')'  Statement |
//  'for' '(' 'ForInitOpt' ';' (Expression)?  ';' 'ForUpdateOpt' ')' Statement |
  'while' ParExpression Statement |
  'do' Statement 'while' ParExpression ';' |
  'try' Block (  Catches |  ( Catches )?  'finally' Block )  |
  'switch' ParExpression '{'  SwitchBlockStatementGroups '}'  |
  'synchronized' ParExpression Block |
  'return' (Expression)?  ';' |
  'throw' Expression ';' |
  'break' (Identifier)?  |
  'continue' (Identifier)?  |
  ';' |
  ExpressionStatement |
  Identifier ':' Statement ;

// added this rule
ExpressionStatement ::= StatementExpression ';' ;


Catches::=
  CatchClause ( CatchClause )*  ;

CatchClause::=
  'catch' '('  FormalParameter ')'  Block ;

SwitchBlockStatementGroups::=
  ( SwitchBlockStatementGroup )*  ;

SwitchBlockStatementGroup::=
  SwitchLabel BlockStatements ;

SwitchLabel::=
  'case' ConstantExpression ':' |
  'default' ':' ;

MoreStatementExpressions::=
  (  ',' StatementExpression )*  ;

ForInit::=
  StatementExpression MoreStatementExpressions |
  ( 'final' )?  Type VariableDeclarators ;

ForUpdate::=
  StatementExpression MoreStatementExpressions ;

ModifiersOpt::=
  ( Modifier )*  ;

Modifier::=
  'public' |
  'protected' |
  'private' |
  'static' |
  'abstract' |
  'final' |
  'native' |
  'synchronized' |
  'transient' |
  'volatile' |
  'strictfp' ;

VariableDeclarators::=
  VariableDeclarator ( ',' VariableDeclarator )*  ;

VariableDeclaratorsRest::=
  VariableDeclaratorRest (  ',' VariableDeclarator )*  ;

ConstantDeclaratorsRest::=
  ConstantDeclaratorRest (  ',' ConstantDeclarator )* ;

VariableDeclarator::=
  Identifier VariableDeclaratorRest ;

ConstantDeclarator::=
  Identifier ConstantDeclaratorRest ;

VariableDeclaratorRest::=
  BracketsOpt ( '=' VariableInitializer )?  ;

ConstantDeclaratorRest::=
  BracketsOpt '=' VariableInitializer ;

VariableDeclaratorId::=
  Identifier BracketsOpt ;

//CompilationUnit::=
//  ( 'package' QualifiedIdentifier ';' )?  ( ImportDeclaration )*  
//  ( TypeDeclaration )*  ;

ImportDeclaration::=
  'import' Identifier ( '.' Identifier )*  ( '.' '*' )?  ';' ;

TypeDeclaration::=
  ClassOrInterfaceDeclaration |
  ';' ;

ClassOrInterfaceDeclaration::=
  ModifiersOpt ( ClassDeclaration |  InterfaceDeclaration )  ;

ClassDeclaration::=
  'class' Identifier ( 'extends' Type )? ( 'implements' TypeList )? ClassBody ;

InterfaceDeclaration::=
  'interface' Identifier ( 'extends' TypeList )?  InterfaceBody ;

TypeList::=
  Type ( ',' Type )* ;

ClassBody::=
  '{'  ( ClassBodyDeclaration )*  '}'  ;

InterfaceBody::=
  '{' ( InterfaceBodyDeclaration )*  '}'  ;

ClassBodyDeclaration::=
  ';' |
  ( 'static' )?  Block |
  ModifiersOpt MemberDecl ;

MemberDecl::=
  MethodOrFieldDecl |
  'void' Identifier MethodDeclaratorRest |
  Identifier ConstructorDeclaratorRest |
  ClassOrInterfaceDeclaration ;

MethodOrFieldDecl::=
  Type Identifier MethodOrFieldRest ;

MethodOrFieldRest::=
//EAS changed   VariableDeclaratorRest
  VariableDeclaratorsRest |
  MethodDeclaratorRest ;

InterfaceBodyDeclaration::=
  ';' |
  ModifiersOpt InterfaceMemberDecl ;

InterfaceMemberDecl::=
  InterfaceMethodOrFieldDecl |
  'void' Identifier VoidInterfaceMethodDeclaratorRest |
  ClassOrInterfaceDeclaration ;

InterfaceMethodOrFieldDecl::=
  Type Identifier InterfaceMethodOrFieldRest ;

InterfaceMethodOrFieldRest::=
  ConstantDeclaratorsRest ';' |
  InterfaceMethodDeclaratorRest ;

MethodDeclaratorRest::=
  FormalParameters BracketsOpt ( 'throws' QualifiedIdentifierList )?  
       (  MethodBody |  ';' )  ;

VoidMethodDeclaratorRest::=
  FormalParameters ( 'throws' QualifiedIdentifierList )? ( MethodBody | ';' ) ;

InterfaceMethodDeclaratorRest::=
  FormalParameters BracketsOpt ( 'throws' QualifiedIdentifierList )? ';' ;

VoidInterfaceMethodDeclaratorRest::=
  FormalParameters ( 'throws' QualifiedIdentifierList )? ';' ;

ConstructorDeclaratorRest::=
  FormalParameters ( 'throws' QualifiedIdentifierList )?  MethodBody ;

QualifiedIdentifierList::=
  QualifiedIdentifier ( ',' QualifiedIdentifier )* ;

FormalParameters::=
  '('  ( FormalParameter ( ',' FormalParameter )* )?  ')'  ;

FormalParameter::=
  ( 'final' )? Type VariableDeclaratorId ;

MethodBody::=
  Block ;

// Contents  |  Prev  |  Next  |  Index         Java Language Specification
// Second Edition
// Copyright © 2000 Sun Microsystems, Inc. All rights reserved
// Please send any comments or corrections via our feedback form 
$
accept
$class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 }$

jls2_BNFright_life
$

(* ART3 grammar generated by ART from 'jls2V2.art' on May 13 2018 10:56:48 *)

CompilationUnit ::=
   ART_C_1 ART_C_2 |
   'package' QualifiedIdentifier ';' ART_C_1 ART_C_2 


ART_C_1 ::=
   ImportDeclaration ART_C_1 |
   # 

ART_C_10 ::=
   '[' ']' ART_C_10 |
   # 

ART_C_11 ::=
   '[' Expression ']' ART_C_11 |
   # 

ART_C_12 ::=
   ',' VariableInitializer ART_C_12 |
   # 

ART_C_13 ::=
   BlockStatement ART_C_13 |
   # 

ART_C_14 ::=
   CatchClause ART_C_14 |
   # 

ART_C_15 ::=
   SwitchBlockStatementGroup ART_C_15 |
   # 

ART_C_16 ::=
   ',' StatementExpression ART_C_16 |
   # 

ART_C_17 ::=
   Modifier ART_C_17 |
   # 

ART_C_18 ::=
   ',' VariableDeclarator ART_C_18 |
   # 

ART_C_19 ::=
   ',' VariableDeclarator ART_C_19 |
   # 

ART_C_2 ::=
   TypeDeclaration ART_C_2 |
   # 

ART_C_20 ::=
   ',' ConstantDeclarator ART_C_20 |
   # 

ART_C_21 ::=
   '.' Identifier ART_C_21 |
   # 

ART_C_22 ::=
   ',' Type ART_C_22 |
   # 

ART_C_23 ::=
   ClassBodyDeclaration ART_C_23 |
   # 

ART_C_24 ::=
   InterfaceBodyDeclaration ART_C_24 |
   # 

ART_C_25 ::=
   ',' QualifiedIdentifier ART_C_25 |
   # 

ART_C_26 ::=
   ',' FormalParameter ART_C_26 |
   # 

ART_C_3 ::=
   '.' Identifier ART_C_3 |
   # 

ART_C_4 ::=
   '.' Identifier ART_C_4 |
   # 

ART_C_5 ::=
   Infixop Expression3 ART_C_5 |
   # 

ART_C_6 ::=
   Selector ART_C_6 |
   # 

ART_C_7 ::=
   PostfixOp ART_C_7 |
   # 

ART_C_8 ::=
   '.' Identifier ART_C_8 |
   # 

ART_C_9 ::=
   ',' Expression ART_C_9 |
   # 

Arguments ::=
   '(' ')' |
   '(' Expression ART_C_9 ')' 

ArgumentsOpt ::=
   # |
   Arguments 

ArrayCreatorRest ::=
   '[' ']' BracketsOpt ArrayInitializer |
   '[' Expression ']' ART_C_11 BracketsOpt 

ArrayInitializer ::=
   '{' '}' |
   '{' VariableInitializer ART_C_12 '}' |
   '{' VariableInitializer ART_C_12 ',' '}' 

AssignmentOperator ::=
   '=' |
   '+=' |
   '-=' |
   '*=' |
   '/=' |
   '&=' |
   '|=' |
   '^=' |
   '%=' |
   '<<=' |
   '>>=' |
   '>>>=' 

BasicType ::=
   'byte' |
   'short' |
   'char' |
   'int' |
   'long' |
   'float' |
   'double' |
   'boolean' 

Block ::=
   '{' BlockStatements '}' 

BlockStatement ::=
   LocalVariableDeclarationStatement |
   ClassOrInterfaceDeclaration |
   Statement |
   Identifier ':' Statement 

BlockStatements ::=
   ART_C_13 

BracketsOpt ::=
   ART_C_10 

CatchClause ::=
   'catch' '(' FormalParameter ')' Block 

Catches ::=
   CatchClause ART_C_14 

ClassBody ::=
   '{' ART_C_23 '}' 

ClassBodyDeclaration ::=
   ';' |
   ModifiersOpt MemberDecl |
   Block |
   'static' Block 

ClassCreatorRest ::=
   Arguments |
   Arguments ClassBody 

ClassDeclaration ::=
   'class' Identifier ClassBody |
   'class' Identifier 'implements' TypeList ClassBody |
   'class' Identifier 'extends' Type ClassBody |
   'class' Identifier 'extends' Type 'implements' TypeList ClassBody 

ClassOrInterfaceDeclaration ::=
   ModifiersOpt ClassDeclaration |
   ModifiersOpt InterfaceDeclaration 

ConstantDeclarator ::=
   Identifier ConstantDeclaratorRest 

ConstantDeclaratorRest ::=
   BracketsOpt '=' VariableInitializer 

ConstantDeclaratorsRest ::=
   ConstantDeclaratorRest ART_C_20 

ConstantExpression ::=
   Expression 

ConstructorDeclaratorRest ::=
   FormalParameters MethodBody |
   FormalParameters 'throws' QualifiedIdentifierList MethodBody 

Creator ::=
   QualifiedIdentifier ArrayCreatorRest |
   QualifiedIdentifier ClassCreatorRest 

Expression ::=
   Expression1 |
   Expression1 AssignmentOperator Expression 

Expression1 ::=
   Expression2 |
   Expression2 Expression1Rest 

Expression1Rest ::=
   # |
   '?' Expression ':' Expression1 

Expression2 ::=
   Expression3 |
   Expression3 Expression2Rest 

Expression2Rest ::=
   ART_C_5 |
   Expression3 'instanceof' Type 

Expression3 ::=
   PrefixOp Expression3 |
   '(' Expression |
   Type ')' Expression3 |
   Primary ART_C_6 ART_C_7 

ExpressionStatement ::=
   StatementExpression ';' 

ForInit ::=
   StatementExpression MoreStatementExpressions |
   Type VariableDeclarators |
   'final' Type VariableDeclarators 

ForUpdate ::=
   StatementExpression MoreStatementExpressions 

FormalParameter ::=
   Type VariableDeclaratorId |
   'final' Type VariableDeclaratorId 

FormalParameters ::=
   '(' ')' |
   '(' FormalParameter ART_C_26 ')' 

Identifier ::=
   'ID' 

IdentifierSuffix ::=
   Arguments |
   '[' ']' BracketsOpt '.' 'class' |
   '[' Expression ']' |
   '.' 'class' |
   '.' 'this' |
   '.' 'super' Arguments |
   '.' 'new' InnerCreator 

ImportDeclaration ::=
   'import' Identifier ART_C_21 ';' |
   'import' Identifier ART_C_21 '.' '*' ';' 

Infixop ::=
   '||' |
   '&&' |
   '|' |
   '^' |
   '&' |
   '==' |
   '!=' |
   '<' |
   '>' |
   '<=' |
   '>=' |
   '<<' |
   '>>' |
   '>>>' |
   '+' |
   '-' |
   '*' |
   '/' |
   '%' 

InnerCreator ::=
   Identifier ClassCreatorRest 

InterfaceBody ::=
   '{' ART_C_24 '}' 

InterfaceBodyDeclaration ::=
   ';' |
   ModifiersOpt InterfaceMemberDecl 

InterfaceDeclaration ::=
   'interface' Identifier InterfaceBody |
   'interface' Identifier 'extends' TypeList InterfaceBody 

InterfaceMemberDecl ::=
   InterfaceMethodOrFieldDecl |
   'void' Identifier VoidInterfaceMethodDeclaratorRest |
   ClassOrInterfaceDeclaration 

InterfaceMethodDeclaratorRest ::=
   FormalParameters BracketsOpt ';' |
   FormalParameters BracketsOpt 'throws' QualifiedIdentifierList ';' 

InterfaceMethodOrFieldDecl ::=
   Type Identifier InterfaceMethodOrFieldRest 

InterfaceMethodOrFieldRest ::=
   ConstantDeclaratorsRest ';' |
   InterfaceMethodDeclaratorRest 

Literal ::=
   'INTEGER' |
   'REAL' |
   'CHAR' |
   'STRING' |
   'true' |
   'false' |
   'null' 

LocalVariableDeclarationStatement ::=
   Type VariableDeclarators ';' |
   'final' Type VariableDeclarators ';' 

MemberDecl ::=
   MethodOrFieldDecl |
   'void' Identifier MethodDeclaratorRest |
   Identifier ConstructorDeclaratorRest |
   ClassOrInterfaceDeclaration 

MethodBody ::=
   Block 

MethodDeclaratorRest ::=
   FormalParameters BracketsOpt MethodBody |
   FormalParameters BracketsOpt ';' |
   FormalParameters BracketsOpt 'throws' QualifiedIdentifierList MethodBody |
   FormalParameters BracketsOpt 'throws' QualifiedIdentifierList ';' 

MethodOrFieldDecl ::=
   Type Identifier MethodOrFieldRest 

MethodOrFieldRest ::=
   VariableDeclaratorsRest |
   MethodDeclaratorRest 

Modifier ::=
   'public' |
   'protected' |
   'private' |
   'static' |
   'abstract' |
   'final' |
   'native' |
   'synchronized' |
   'transient' |
   'volatile' |
   'strictfp' 

ModifiersOpt ::=
   ART_C_17 

MoreStatementExpressions ::=
   ART_C_16 

ParExpression ::=
   '(' Expression ')' 

PostfixOp ::=
   '++' |
   '--' 

PrefixOp ::=
   '++' |
   '--' |
   '!' |
   '~' |
   '+' |
   '-' 

Primary ::=
   '(' Expression ')' |
   'super' SuperSuffix |
   Literal |
   'new' Creator |
   BasicType BracketsOpt '.' 'class' |
   'void.class' |
   'this' |
   'this' Arguments |
   Identifier ART_C_8 |
   Identifier ART_C_8 IdentifierSuffix 

QualifiedIdentifier ::=
   Identifier ART_C_3 

QualifiedIdentifierList ::=
   QualifiedIdentifier ART_C_25 

Selector ::=
   '.' 'this' |
   '.' 'super' SuperSuffix |
   '.' 'new' InnerCreator |
   '[' Expression ']' |
   '.' Identifier |
   '.' Identifier Arguments 

Statement ::=
   Block |
   'while' ParExpression Statement |
   'do' Statement 'while' ParExpression ';' |
   'switch' ParExpression '{' SwitchBlockStatementGroups '}' |
   'synchronized' ParExpression Block |
   'throw' Expression ';' |
   ';' |
   ExpressionStatement |
   Identifier ':' Statement |
   'if' ParExpression Statement |
   'if' ParExpression Statement 'else' Statement |
   'try' Block Catches |
   'return' ';' |
   'return' Expression ';' |
   'break' |
   'break' Identifier |
   'continue' |
   'continue' Identifier |
   'try' Block 'finally' Block |
   'try' Block Catches 'finally' Block |
   'for' '(' ';' ';' ')' Statement |
   'for' '(' ';' ';' ForUpdate ')' Statement |
   'for' '(' ';' Expression ';' ')' Statement |
   'for' '(' ';' Expression ';' ForUpdate ')' Statement |
   'for' '(' ForInit ';' ';' ')' Statement |
   'for' '(' ForInit ';' ';' ForUpdate ')' Statement |
   'for' '(' ForInit ';' Expression ';' ')' Statement |
   'for' '(' ForInit ';' Expression ';' ForUpdate ')' Statement 

StatementExpression ::=
   Expression 

SuperSuffix ::=
   Arguments |
   '.' Identifier |
   '.' Identifier Arguments 

SwitchBlockStatementGroup ::=
   SwitchLabel BlockStatements 

SwitchBlockStatementGroups ::=
   ART_C_15 

SwitchLabel ::=
   'case' ConstantExpression ':' |
   'default' ':' 

Type ::=
   Identifier ART_C_4 BracketsOpt |
   BasicType 

TypeDeclaration ::=
   ClassOrInterfaceDeclaration |
   ';' 

TypeList ::=
   Type ART_C_22 

VariableDeclarator ::=
   Identifier VariableDeclaratorRest 

VariableDeclaratorId ::=
   Identifier BracketsOpt 

VariableDeclaratorRest ::=
   BracketsOpt |
   BracketsOpt '=' VariableInitializer 

VariableDeclarators ::=
   VariableDeclarator ART_C_18 

VariableDeclaratorsRest ::=
   VariableDeclaratorRest ART_C_19 

VariableInitializer ::=
   ArrayInitializer |
   Expression 

VoidInterfaceMethodDeclaratorRest ::=
   FormalParameters ';' |
   FormalParameters 'throws' QualifiedIdentifierList ';' 

VoidMethodDeclaratorRest ::=
   FormalParameters MethodBody |
   FormalParameters ';' |
   FormalParameters 'throws' QualifiedIdentifierList MethodBody |
   FormalParameters 'throws' QualifiedIdentifierList ';' 


$
accept
$class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 }$

jls2_BNFleft_life
$

(* ART3 grammar generated by ART from 'jls2V2.art' on May 13 2018 10:57:01 *)

CompilationUnit ::=
   ART_C_1 ART_C_2 |
   'package' QualifiedIdentifier ';' ART_C_1 ART_C_2 


ART_C_1 ::=
   ART_C_1 ImportDeclaration |
   # 

ART_C_10 ::=
   ART_C_10 '[' ']' |
   # 

ART_C_11 ::=
   ART_C_11 '[' Expression ']' |
   # 

ART_C_12 ::=
   ART_C_12 ',' VariableInitializer |
   # 

ART_C_13 ::=
   ART_C_13 BlockStatement |
   # 

ART_C_14 ::=
   ART_C_14 CatchClause |
   # 

ART_C_15 ::=
   ART_C_15 SwitchBlockStatementGroup |
   # 

ART_C_16 ::=
   ART_C_16 ',' StatementExpression |
   # 

ART_C_17 ::=
   ART_C_17 Modifier |
   # 

ART_C_18 ::=
   ART_C_18 ',' VariableDeclarator |
   # 

ART_C_19 ::=
   ART_C_19 ',' VariableDeclarator |
   # 

ART_C_2 ::=
   ART_C_2 TypeDeclaration |
   # 

ART_C_20 ::=
   ART_C_20 ',' ConstantDeclarator |
   # 

ART_C_21 ::=
   ART_C_21 '.' Identifier |
   # 

ART_C_22 ::=
   ART_C_22 ',' Type |
   # 

ART_C_23 ::=
   ART_C_23 ClassBodyDeclaration |
   # 

ART_C_24 ::=
   ART_C_24 InterfaceBodyDeclaration |
   # 

ART_C_25 ::=
   ART_C_25 ',' QualifiedIdentifier |
   # 

ART_C_26 ::=
   ART_C_26 ',' FormalParameter |
   # 

ART_C_3 ::=
   ART_C_3 '.' Identifier |
   # 

ART_C_4 ::=
   ART_C_4 '.' Identifier |
   # 

ART_C_5 ::=
   ART_C_5 Infixop Expression3 |
   # 

ART_C_6 ::=
   ART_C_6 Selector |
   # 

ART_C_7 ::=
   ART_C_7 PostfixOp |
   # 

ART_C_8 ::=
   ART_C_8 '.' Identifier |
   # 

ART_C_9 ::=
   ART_C_9 ',' Expression |
   # 

Arguments ::=
   '(' ')' |
   '(' Expression ART_C_9 ')' 

ArgumentsOpt ::=
   # |
   Arguments 

ArrayCreatorRest ::=
   '[' ']' BracketsOpt ArrayInitializer |
   '[' Expression ']' ART_C_11 BracketsOpt 

ArrayInitializer ::=
   '{' '}' |
   '{' VariableInitializer ART_C_12 '}' |
   '{' VariableInitializer ART_C_12 ',' '}' 

AssignmentOperator ::=
   '=' |
   '+=' |
   '-=' |
   '*=' |
   '/=' |
   '&=' |
   '|=' |
   '^=' |
   '%=' |
   '<<=' |
   '>>=' |
   '>>>=' 

BasicType ::=
   'byte' |
   'short' |
   'char' |
   'int' |
   'long' |
   'float' |
   'double' |
   'boolean' 

Block ::=
   '{' BlockStatements '}' 

BlockStatement ::=
   LocalVariableDeclarationStatement |
   ClassOrInterfaceDeclaration |
   Statement |
   Identifier ':' Statement 

BlockStatements ::=
   ART_C_13 

BracketsOpt ::=
   ART_C_10 

CatchClause ::=
   'catch' '(' FormalParameter ')' Block 

Catches ::=
   CatchClause ART_C_14 

ClassBody ::=
   '{' ART_C_23 '}' 

ClassBodyDeclaration ::=
   ';' |
   ModifiersOpt MemberDecl |
   Block |
   'static' Block 

ClassCreatorRest ::=
   Arguments |
   Arguments ClassBody 

ClassDeclaration ::=
   'class' Identifier ClassBody |
   'class' Identifier 'implements' TypeList ClassBody |
   'class' Identifier 'extends' Type ClassBody |
   'class' Identifier 'extends' Type 'implements' TypeList ClassBody 

ClassOrInterfaceDeclaration ::=
   ModifiersOpt ClassDeclaration |
   ModifiersOpt InterfaceDeclaration 

ConstantDeclarator ::=
   Identifier ConstantDeclaratorRest 

ConstantDeclaratorRest ::=
   BracketsOpt '=' VariableInitializer 

ConstantDeclaratorsRest ::=
   ConstantDeclaratorRest ART_C_20 

ConstantExpression ::=
   Expression 

ConstructorDeclaratorRest ::=
   FormalParameters MethodBody |
   FormalParameters 'throws' QualifiedIdentifierList MethodBody 

Creator ::=
   QualifiedIdentifier ArrayCreatorRest |
   QualifiedIdentifier ClassCreatorRest 

Expression ::=
   Expression1 |
   Expression1 AssignmentOperator Expression 

Expression1 ::=
   Expression2 |
   Expression2 Expression1Rest 

Expression1Rest ::=
   # |
   '?' Expression ':' Expression1 

Expression2 ::=
   Expression3 |
   Expression3 Expression2Rest 

Expression2Rest ::=
   ART_C_5 |
   Expression3 'instanceof' Type 

Expression3 ::=
   PrefixOp Expression3 |
   '(' Expression |
   Type ')' Expression3 |
   Primary ART_C_6 ART_C_7 

ExpressionStatement ::=
   StatementExpression ';' 

ForInit ::=
   StatementExpression MoreStatementExpressions |
   Type VariableDeclarators |
   'final' Type VariableDeclarators 

ForUpdate ::=
   StatementExpression MoreStatementExpressions 

FormalParameter ::=
   Type VariableDeclaratorId |
   'final' Type VariableDeclaratorId 

FormalParameters ::=
   '(' ')' |
   '(' FormalParameter ART_C_26 ')' 

Identifier ::=
   'ID' 

IdentifierSuffix ::=
   Arguments |
   '[' ']' BracketsOpt '.' 'class' |
   '[' Expression ']' |
   '.' 'class' |
   '.' 'this' |
   '.' 'super' Arguments |
   '.' 'new' InnerCreator 

ImportDeclaration ::=
   'import' Identifier ART_C_21 ';' |
   'import' Identifier ART_C_21 '.' '*' ';' 

Infixop ::=
   '||' |
   '&&' |
   '|' |
   '^' |
   '&' |
   '==' |
   '!=' |
   '<' |
   '>' |
   '<=' |
   '>=' |
   '<<' |
   '>>' |
   '>>>' |
   '+' |
   '-' |
   '*' |
   '/' |
   '%' 

InnerCreator ::=
   Identifier ClassCreatorRest 

InterfaceBody ::=
   '{' ART_C_24 '}' 

InterfaceBodyDeclaration ::=
   ';' |
   ModifiersOpt InterfaceMemberDecl 

InterfaceDeclaration ::=
   'interface' Identifier InterfaceBody |
   'interface' Identifier 'extends' TypeList InterfaceBody 

InterfaceMemberDecl ::=
   InterfaceMethodOrFieldDecl |
   'void' Identifier VoidInterfaceMethodDeclaratorRest |
   ClassOrInterfaceDeclaration 

InterfaceMethodDeclaratorRest ::=
   FormalParameters BracketsOpt ';' |
   FormalParameters BracketsOpt 'throws' QualifiedIdentifierList ';' 

InterfaceMethodOrFieldDecl ::=
   Type Identifier InterfaceMethodOrFieldRest 

InterfaceMethodOrFieldRest ::=
   ConstantDeclaratorsRest ';' |
   InterfaceMethodDeclaratorRest 

Literal ::=
   'INTEGER' |
   'REAL' |
   'CHAR' |
   'STRING' |
   'true' |
   'false' |
   'null' 

LocalVariableDeclarationStatement ::=
   Type VariableDeclarators ';' |
   'final' Type VariableDeclarators ';' 

MemberDecl ::=
   MethodOrFieldDecl |
   'void' Identifier MethodDeclaratorRest |
   Identifier ConstructorDeclaratorRest |
   ClassOrInterfaceDeclaration 

MethodBody ::=
   Block 

MethodDeclaratorRest ::=
   FormalParameters BracketsOpt MethodBody |
   FormalParameters BracketsOpt ';' |
   FormalParameters BracketsOpt 'throws' QualifiedIdentifierList MethodBody |
   FormalParameters BracketsOpt 'throws' QualifiedIdentifierList ';' 

MethodOrFieldDecl ::=
   Type Identifier MethodOrFieldRest 

MethodOrFieldRest ::=
   VariableDeclaratorsRest |
   MethodDeclaratorRest 

Modifier ::=
   'public' |
   'protected' |
   'private' |
   'static' |
   'abstract' |
   'final' |
   'native' |
   'synchronized' |
   'transient' |
   'volatile' |
   'strictfp' 

ModifiersOpt ::=
   ART_C_17 

MoreStatementExpressions ::=
   ART_C_16 

ParExpression ::=
   '(' Expression ')' 

PostfixOp ::=
   '++' |
   '--' 

PrefixOp ::=
   '++' |
   '--' |
   '!' |
   '~' |
   '+' |
   '-' 

Primary ::=
   '(' Expression ')' |
   'super' SuperSuffix |
   Literal |
   'new' Creator |
   BasicType BracketsOpt '.' 'class' |
   'void.class' |
   'this' |
   'this' Arguments |
   Identifier ART_C_8 |
   Identifier ART_C_8 IdentifierSuffix 

QualifiedIdentifier ::=
   Identifier ART_C_3 

QualifiedIdentifierList ::=
   QualifiedIdentifier ART_C_25 

Selector ::=
   '.' 'this' |
   '.' 'super' SuperSuffix |
   '.' 'new' InnerCreator |
   '[' Expression ']' |
   '.' Identifier |
   '.' Identifier Arguments 

Statement ::=
   Block |
   'while' ParExpression Statement |
   'do' Statement 'while' ParExpression ';' |
   'switch' ParExpression '{' SwitchBlockStatementGroups '}' |
   'synchronized' ParExpression Block |
   'throw' Expression ';' |
   ';' |
   ExpressionStatement |
   Identifier ':' Statement |
   'if' ParExpression Statement |
   'if' ParExpression Statement 'else' Statement |
   'try' Block Catches |
   'return' ';' |
   'return' Expression ';' |
   'break' |
   'break' Identifier |
   'continue' |
   'continue' Identifier |
   'try' Block 'finally' Block |
   'try' Block Catches 'finally' Block |
   'for' '(' ';' ';' ')' Statement |
   'for' '(' ';' ';' ForUpdate ')' Statement |
   'for' '(' ';' Expression ';' ')' Statement |
   'for' '(' ';' Expression ';' ForUpdate ')' Statement |
   'for' '(' ForInit ';' ';' ')' Statement |
   'for' '(' ForInit ';' ';' ForUpdate ')' Statement |
   'for' '(' ForInit ';' Expression ';' ')' Statement |
   'for' '(' ForInit ';' Expression ';' ForUpdate ')' Statement 

StatementExpression ::=
   Expression 

SuperSuffix ::=
   Arguments |
   '.' Identifier |
   '.' Identifier Arguments 

SwitchBlockStatementGroup ::=
   SwitchLabel BlockStatements 

SwitchBlockStatementGroups ::=
   ART_C_15 

SwitchLabel ::=
   'case' ConstantExpression ':' |
   'default' ':' 

Type ::=
   Identifier ART_C_4 BracketsOpt |
   BasicType 

TypeDeclaration ::=
   ClassOrInterfaceDeclaration |
   ';' 

TypeList ::=
   Type ART_C_22 

VariableDeclarator ::=
   Identifier VariableDeclaratorRest 

VariableDeclaratorId ::=
   Identifier BracketsOpt 

VariableDeclaratorRest ::=
   BracketsOpt |
   BracketsOpt '=' VariableInitializer 

VariableDeclarators ::=
   VariableDeclarator ART_C_18 

VariableDeclaratorsRest ::=
   VariableDeclaratorRest ART_C_19 

VariableInitializer ::=
   ArrayInitializer |
   Expression 

VoidInterfaceMethodDeclaratorRest ::=
   FormalParameters ';' |
   FormalParameters 'throws' QualifiedIdentifierList ';' 

VoidMethodDeclaratorRest ::=
   FormalParameters MethodBody |
   FormalParameters ';' |
   FormalParameters 'throws' QualifiedIdentifierList MethodBody |
   FormalParameters 'throws' QualifiedIdentifierList ';' 


$
accept
$class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 } 

 class ID 
 { 
 private int ID ; 
 private int ID = INTEGER ; 
 ID [ ] [ ] ID ; 
 ID [ ] [ ] ID ; 
 boolean ID ; 
 ID ID = new ID ( ) ; 
 
 ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
 { 
 ID = new ID [ ID ] [ ID ] ; 
 ID = new ID [ ID ] [ ID ] ; 
 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID ; ID ++ ) { 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 ID [ ID ] [ ID ] = new ID ( INTEGER ) ; 
 } 
 
 this . ID = ID ; 
 ID ( ID ) ; 
 if ( ID ) 
 ID ( ) ; 
 this . ID = ID ; 
 } 
 
 private void ID ( ) 
 { 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 if ( ID . ID ( ) > REAL ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 
 private void ID ( ID ID ) throws ID , ID 
 { 
 ID ID = new ID ( new ID ( ID ) ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 ID ID = ID . ID ( ) ; 
 if ( ID == ID ) 
 break ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
 if ( ID . ID ( ID ) == STRING ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 } 
 } 
 
 private void ID ( ) 
 { 
 ID . ID . ID ( STRING + ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
 { 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
 ID . ID . ID ( ID [ ID ] [ ID ] . ID ( ) > INTEGER ? STRING : STRING ) ; 
 
 ID . ID . ID ( ) ; 
 } 
 } 
 
 private int ID ( int ID , int ID ) 
 { 
 int ID = INTEGER ; 
 
 if ( ID [ ID - INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID - INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID + INTEGER ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID - INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 if ( ID [ ID ] [ ID + INTEGER ] . ID ( ) != INTEGER ) ID ++ ; 
 
 return ID ; 
 } 
 
 public int ID ( ) { return ID [ INTEGER ] . ID ; } 
 public int ID ( ) { return ID . ID ; } 
 public int ID ( ) { return ID ; } 
 public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] . ID ( ) ; } 
 
 public void ID ( ID ID ) 
 { 
 while ( ID ) 
 { 
 if ( ID != INTEGER && ID > ID ) 
 return ; 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 { 
 int ID = ID ( ID , ID ) ; 
 
 if ( ID [ ID ] [ ID ] . ID ( ) == INTEGER ) 
 { 
 if ( ID == INTEGER ) 
 ID [ ID ] [ ID ] = ID ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 else 
 { 
 if ( ID < INTEGER | ID > INTEGER ) 
 ID [ ID ] [ ID ] = INTEGER ; 
 else 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 } 
 } 
 
 for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
 ID [ ID ] [ ID ] = ID [ ID ] [ ID ] . ID ( ) ; 
 
 ID . ID ( ) ; 
 if ( ID ) 
 ID ( ) ; 
 
 ID ++ ; 
 } 
 } 
 } 
 
 class ID extends ID 
 { 
 int ID ; 
 
 public ID ( ID ID , int ID ) 
 { 
 ID ( STRING ) ; 
 this . ID = ID ; 
 ID ( new ID ( ID , ID ) ) ; 
 ID ( ID . ID ) ; 
 ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
 ID ( ID ) ; 
 } 
 } 
 
 class ID extends ID 
 { 
 ID ID ; 
 int ID ; 

 ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 
 
 
 protected void ID ( ID ID ) 
 { 
 super . ID ( ID ) ; 
 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
 { 
 int ID = ID . ID ( ID , ID ) ; 
 
 if ( ID > INTEGER ) 
 { 
 ID ID = ID . ID ; 
 
 if ( ID . ID ( ) - ID < ID . ID ) 
 ID = ID [ ID . ID ( ) - ID ] ; 
 
 ID . ID ( ID ) ; 
 ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
 } 
 } 
 } 
 } 
 
 class ID 
 { 
 private static void ID ( ) 
 { 
 ID . ID . ID ( STRING ) ; 
 ID . ID ( INTEGER ) ; 
 } 
 
 public static void ID ( ID [ ] ID ) throws ID , ID 
 { 
 int ID = INTEGER ; 
 int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
 ID ID ; 
 boolean ID = ID ; 
 boolean ID = ID ; 
 
 while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING ) 
 switch ( ID [ ID ] . ID ( INTEGER ) ) 
 { 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 case STRING : ID = ! ID ; ID += INTEGER ; break ; 
 default : ID ( ) ; 
 } 
 if ( ID == ID . ID ) 
 ID ( ) ; 
 
 ID = ID [ ID ] ; 
 
 ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
 ID ID = new ID ( ID , ID ) ; 
 ID . ID ( ID ) ; 
 } 
 }$
