(* Programming language examples *)
ansi_c_gtb_src
$
(****************************************************************************
*
* ART release 0.10 by Adrian Johnstone (a.johnstone@rhul.ac.uk) 1 August 2010
*
* ansi_c.gtb - an ANSI standard C grammar
*
* This file may be freely distributed. Please mail improvements to the author.
*
* Provenance: this grammar is a transcription of the rules in section A13 of
* 'The C Programming Language' by Brian W Kernighan and Dennis M Ritchie,
* second edition 1988 (Prentice Hall, ISBN 0-13-110362-8). 
*
* Optional productions have been expanded and a set of lexical rules created.
*
*****************************************************************************)
translation_unit ::= external_declaration |
                     translation_unit external_declaration;

external_declaration ::= function_definition |
                         declaration ;

function_definition ::= declaration_specifiers declarator declaration_list compound_statement |
                                               declarator declaration_list compound_statement |
                        declaration_specifiers declarator                  compound_statement |
                                               declarator                  compound_statement ;

declaration ::= declaration_specifiers init_declarator_list ';' |
                declaration_specifiers                      ';' ;

declaration_list ::= declaration |
                     declaration_list declaration; 

declaration_specifiers ::= storage_class_specifier declaration_specifiers |
                           storage_class_specifier                        |

                           type_specifier declaration_specifiers |
                           type_specifier                        |

                           type_qualifier declaration_specifiers |
                           type_qualifier                        ;

storage_class_specifier ::= 'auto' |
                            'register' |
                            'static' |
                            'extern' |
                            'typedef';

type_specifier ::= 'void' |
                   'char' |
                   'short' |
                   'int' |
                   'long' |
                   'float' |
                   'double' |
                   'signed' |
                   'unsigned' |
                   struct_or_union_specifier |
                   enum_specifier |
                   typedef_name;

type_qualifier ::= 'const' |
                   'volatile';

struct_or_union_specifier ::= struct_or_union identifier '{' struct_declaration_list '}' |
                              struct_or_union            '{' struct_declaration_list '}' |
                              struct_or_union identifier;
                             
struct_or_union ::= 'struct' |
                    'union';

struct_declaration_list ::= struct_declaration |
                            struct_declaration_list struct_declaration ;

init_declarator_list ::= init_declarator |
                         init_declarator_list ',' init_declarator ; 

init_declarator ::= declarator  |
                    declarator '=' initializer ; 

struct_declaration ::= specifier_qualifier_list struct_declarator_list ';';

specifier_qualifier_list ::= type_specifier specifier_qualifier_list |
                             type_specifier                          |
                             type_qualifier specifier_qualifier_list |
                             type_qualifier                          ;

struct_declarator_list ::= struct_declarator |
                           struct_declarator_list ',' struct_declarator; 

struct_declarator ::= declarator |
                      declarator ':' constant_expression |
                                 ':' constant_expression ; 

enum_specifier ::= 'enum' identifier '{' enumerator_list '}' |
                   'enum'            '{' enumerator_list '}' |
                   'enum' identifier ;

enumerator_list ::= enumerator |
                    enumerator_list ',' enumerator; 

enumerator ::= identifier |
               identifier '=' constant_expression ; 

declarator ::= pointer direct_declarator |
                       direct_declarator ;

direct_declarator ::= identifier |
                      '(' declarator ')' |
                      direct_declarator  '[' constant_expression ']' |
                      direct_declarator  '['                     ']' |
                      direct_declarator  '(' parameter_type_list ')'  |
                      direct_declarator  '(' identifier_list ')' |
                      direct_declarator  '('                 ')' ;

pointer ::= '*' type_qualifier_list |
            '*'                     |
            '*' type_qualifier_list pointer |
            '*'                     pointer ; 

type_qualifier_list ::= type_qualifier |
                        type_qualifier_list type_qualifier; 

parameter_type_list ::= parameter_list |
                        parameter_list ',' '...'; 

parameter_list ::= parameter_declaration |
                   parameter_list ',' parameter_declaration ; 

parameter_declaration ::= declaration_specifiers declarator |
                          declaration_specifiers abstract_declarator |
                          declaration_specifiers                     ; 

identifier_list ::= identifier |
                    identifier_list ',' identifier; 

initializer ::= assignment_expression |
                '{' initializer_list '}' |
                '{' initializer_list ','  '}'; 

initializer_list ::= initializer  |
                     initializer_list ',' initializer; 

type_name ::= specifier_qualifier_list abstract_declarator |
              specifier_qualifier_list                     ;

abstract_declarator ::= pointer |
                        pointer direct_abstract_declarator |
                                direct_abstract_declarator ; 

 
direct_abstract_declarator ::= '(' abstract_declarator ')' |
                                direct_abstract_declarator '[' constant_expression ']' |
                                                           '[' constant_expression ']' |
                                direct_abstract_declarator '['                     ']' |
                                                           '['                     ']' |

                                direct_abstract_declarator '(' parameter_type_list ')' |
                                                           '(' parameter_type_list ')' |
                                direct_abstract_declarator '('                     ')' |
                                                           '('                     ')' ;

statement ::= labeled_statement |
              expression_statement |
              compound_statement |
              selection_statement |
              iteration_statement |
              jump_statement ;

labeled_statement ::= identifier ':' statement |
                      'case' constant_expression ':' statement |
                      'default' ':' statement;

expression_statement ::= expression ';' |
                                    ';' ;

compound_statement ::= '{' declaration_list statement_list '}' |
                       '{'                  statement_list '}' |
                       '{' declaration_list                '}' |
                       '{'                                 '}' ;


statement_list ::= statement |
                   statement_list statement; 

selection_statement ::= 'if' '(' expression ')' statement |
                        'if' '(' expression ')' statement 'else' statement  |
                        'switch' '(' expression ')' statement;

iteration_statement ::= 'while' '(' expression ')' statement |
                        'do' statement 'while' '(' expression ')' |
                        'for' '(' expression ';' expression ';' expression ')' statement |
                        'for' '(' expression ';' expression ';'            ')' statement |
                        'for' '(' expression ';'            ';' expression ')' statement |
                        'for' '(' expression ';'            ';'            ')' statement |
                        'for' '('            ';' expression ';' expression ')' statement |
                        'for' '('            ';' expression ';'            ')' statement |
                        'for' '('            ';'            ';' expression ')' statement |
                        'for' '('            ';'            ';'            ')' statement ;

jump_statement ::= 'goto' identifier ';' |
                   'continue' ';' |
                   'break' ';' |
                   'return' expression ';' |
                   'return'            ';';

expression ::= assignment_expression |
               expression  ',' assignment_expression ; 

assignment_expression ::= conditional_expression  |
                          unary_expression  assignment_operator assignment_expression ;

assignment_operator ::= '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=';

conditional_expression ::= logical_or_expression |
                           logical_or_expression '?' expression ':' conditional_expression ; 

constant_expression ::= conditional_expression ;

logical_or_expression ::= logical_and_expression |
                          logical_or_expression '||' logical_and_expression; 

logical_and_expression ::= inclusive_or_expression |
                           logical_and_expression '&&' inclusive_or_expression; 

inclusive_or_expression ::= exclusive_or_expression |
                            inclusive_or_expression '|' exclusive_or_expression; 

exclusive_or_expression ::= and_expression |
                            exclusive_or_expression '^' and_expression; 

and_expression ::= equality_expression |
                   and_expression '&' equality_expression ; 

equality_expression ::= relational_expression |
                        equality_expression  '==' relational_expression  |
                        equality_expression '!=' relational_expression; 

relational_expression ::= shift_expression |
                          relational_expression '<' shift_expression |
                          relational_expression '>'  shift_expression |
                          relational_expression '<='  shift_expression |
                          relational_expression '>=' shift_expression  ;

shift_expression ::= additive_expression |
                     shift_expression '<<' additive_expression  |
                     shift_expression '>>' additive_expression; 

additive_expression ::= multiplicative_expression |
                        additive_expression '+' multiplicative_expression |
                        additive_expression '-' multiplicative_expression;

multiplicative_expression ::= cast_expression |
                              multiplicative_expression '*' cast_expression |
                              multiplicative_expression '/' cast_expression |
                              multiplicative_expression '%' cast_expression ; 

cast_expression ::= unary_expression |
                    '(' type_name ')' cast_expression ;

unary_expression ::= postfix_expression |
                     '++' unary_expression |
                     '--' unary_expression |
                     unary_operator cast_expression |
                     'sizeof' unary_expression |
                     'sizeof' '(' type_name')' ;

unary_operator ::= '&' | '*' | '+' | '-' | '~' | '!';

postfix_expression ::= primary_expression |
                       postfix_expression '[' expression ']' |
                       postfix_expression '(' argument_expression_list ')' |
                       postfix_expression '('                          ')' |
                       postfix_expression '.' identifier |
                       postfix_expression '->' identifier |
                       postfix_expression '++' |
                       postfix_expression '--';  

primary_expression ::= identifier |
                       constant |
                       string |
                       '(' expression ')';

argument_expression_list ::= assignment_expression |
                             argument_expression_list ',' assignment_expression ;

constant ::= integer_constant |
             (*character_constant |*) 
             floating_constant |
             enumeration_constant ;

(* Lexical producions *)
identifier ::= 'ID' ;
string ::= 'STRING' | string 'STRING' ;
integer_constant ::= 'INTEGER' ;
character_constant ::= 'STRING' ;
floating_constant ::= 'REAL' ;

(* Hack 1: the original grammar has a constant alternative for enumeration
   constants: this looks redundant because primary_expresion has an identifier
   alternative. We use a different keyword to avoid conflicts.
*)
enumeration_constant ::= 'ENUM_ID'; 

(* Hack 2: a declaration starting with a typedef-defined type identifier
   cannot be disambiguated unless the lexer returns a different token
   for such identifiers. Here we use a different keyword *)
typedef_name ::= 'ID' 
                 | 'TYPE_ID';
$
accept
(*gtb_src.tok*)
$char 
* ID ,  
* * ID ,  
* ID = STRING ;  

int 
ID = INTEGER ,  
ID = INTEGER ,  
ID ,  
ID ;  

int ID = INTEGER ;  

char * ID = STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING 
STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING ; 


 
static int ID = INTEGER ; 

ID * ID ; 

ID * ID ( char * ID , ID * ID ) 
{ 
if ( ID ) 
{ 
ID * ID = ( ID * ) ID ( sizeof ( ID ) , ID ) ; 
if ( ID != ID ) 
ID -> ID = ID ; 
else 
ID ( ID , ID , sizeof ( ID ) ) ; 
return ID ; 
} 
else 
return ID ; 
} 

ID * ID ( char * ID , ID * ID ) 
{ 
if ( ID ) 
{ 
ID = ( ID * ) ID ( sizeof ( ID ) , ID ) ; 
if ( ID != ID ) 
ID -> ID = ID ; 
else 
ID ( ID , ID , sizeof ( ID ) ) ; 

( ( ID * ) ID ( sizeof ( ID ) , ID , ID ) ) -> ID = INTEGER ; 
return ID ; 
} 
else 
return ID ; 
} 

ID * ID ( char * ID , ID * ID ) 
{ 
if ( ID ) 
{ 
ID * ID = ( ID * ) ID ( sizeof ( ID ) , sizeof ( ID ) , ID ) ; 
if ( ID != ID ) 
ID -> ID = ID ; 
else 
ID ( ID , ID , sizeof ( ID ) ) ; 

( ( ID * ) ID ( ID ) ) -> ID = INTEGER ; 

return ID ; 
} 
else 
return ID ; 
} 


 
static void ID ( void ) 
{ 
ID ( STRING , STRING , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , STRING , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , STRING , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , STRING , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
} 

 

ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 

 

static void ID ( void ) 
{ 
ID ( & ID , ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID , ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , 
ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID , ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID ) ; 
} 

 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static char * ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static char * ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
void ID ( ID * ID ) ; 

 
static void ID ( ID * ID ) 
{ 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
if ( ! ID ( ID , & ID , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
ID ( ID ( STRING , ID ) ) ; 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ( ID , & ID , ID ) ) 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
if ( ! ID ( ID , & ID , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
ID ( ID ( STRING , ID ) ) ; 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
if ( ! ID ( ID , ID  , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
if ( ! ID ( ID , ID  , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
if ( ! ID ( ID , ID  , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
if ( ! ID ( ID , & ID , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID ( ID ) ; 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
if ( ! ID ( ID , & ID , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
char * ID ; 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ( ID ) ;  
if ( ID -> ID -> ID == ID )  
{  
ID -> ID -> ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ;  
ID -> ID -> ID -> ID = ID ;  
ID -> ID -> ID = INTEGER ;  
}  
 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static char * ID ( ID * ID ) 
{ 
char * ID ; 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ( ID ) ;  
} 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
ID ( ID ( STRING , ID ) ) ; 
} 
if ( ! ID ( ID , & ID , ID ) ) break ; 
} 
}  
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
return ID ; 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ( STRING ) ;  
if ( ID -> ID -> ID == ID )  
{  
ID -> ID -> ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ;  
ID -> ID -> ID -> ID = ID ;  
ID -> ID -> ID = INTEGER ;  
}  
 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID ( ID , & ID , ID ) ) 
{ 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
if ( ! ID ( ID , & ID , ID ) ) break ; 
} 
}  
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
char * ID ; 
{ 
if ( ID == INTEGER ) {  
ID ( ) ;  
} 
if ( ID ) { ID -> ID = STRING ; ID -> ID = INTEGER ; } 
ID = ID ( ID ) ; 
if ( ID == INTEGER ) {  
ID ( ID ) ;  
} if ( ID == INTEGER ) {  
ID ( ID ) ;  
} 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
ID ( ID ( STRING , ID ) ) ; 
} 
if ( ID -> ID != ID  ) break ; 
ID ( ) ; 
} 
}  
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID ( ) ;  
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static char * ID ( ID * ID ) 
{ 
char * ID ; 
{ 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
if ( ID ) ID ( ID , ID , sizeof ( ID ) ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ( ID ) ;  
if ( ID -> ID -> ID == ID )  
{  
ID -> ID -> ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ;  
ID -> ID -> ID -> ID = ID ;  
ID -> ID -> ID -> ID = ID ;  
ID -> ID -> ID = INTEGER ;  
}  
 
} 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
ID ( ID ( STRING , ID ) ) ; 
} 
if ( ! ID ( ID , & ID , ID ) ) break ; 
} 
}  
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
return ID ; 
} 

static void ID ( ID * ID ) 
{ 
{ 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
ID ( ID ( STRING , ID ) ) ; 
} 
if ( ! ID ( ID , & ID , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
{ 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
ID ( ID ( STRING , ID ) ) ; 
} 
if ( ! ID ( ID , & ID , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID , & ID , & ID ) ; 
} 
} 

void ID ( ID * ID ) 
{ 
{ 
ID ( ID ( STRING , ID ) ) ; 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID == INTEGER ) {  
ID ( ) ; ID ( STRING ) ;  
} 
ID ( ID ( STRING , ID ) ) ; 
if ( ID == INTEGER ) {  
ID ( ) ;  
} 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
ID ( ID , STRING , ID ) ; 
} 
ID ( ID , & ID , & ID ) ; 
} 
} 

int ID ( int ID , char * ID [ ] ) 
{ 
ID ID , ID = ID ( ) ; 
int 
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  

ID = INTEGER ;  

unsigned long ID = INTEGER ;  

unsigned long ID = INTEGER ;  

char * ID = ID ;  

ID * ID = ( ID * ) ID ( STRING ) ;  
ID * ID ; 

ID ( STRING STRING STRING STRING ) ; 

ID ( STRING ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 

ID = ID ( ID , ID ) ; 

 
for ( ID = INTEGER ; ID [ ID ] != ID ; ID ++ ) 
ID [ ID ] = ID ( ID [ ID ] , STRING ) ; 

if ( ID ) 
{ 
ID [ INTEGER ] = STRING ; 
ID = STRING ; 
ID [ INTEGER ] = ID ;  

} 
if ( ( ID = ID [ INTEGER ] ) == ID ) 
ID ( STRING ) ; 

if ( ID [ INTEGER ] != ID ) 
ID ( ID , STRING ) ; 
ID ( ID , INTEGER , INTEGER , ( int ) ID ) ; 
ID ( INTEGER , INTEGER , INTEGER , ID , ID ) ; 
if ( ID ) 
ID ( ) ; 
ID ( ) ; 
ID ( ) ; 
ID ( ID ) ; 
if ( ID ) 
ID ( STRING STRING STRING ) ; 
for ( ID = INTEGER ; ID <= ID ; ID ++ ) 
{ 
ID = ID == ID ; 
ID ( ID || ( ID && ID == ID ) ) ; 

for ( ID = INTEGER ; ( ID = ID [ ID ] ) != ID ; ID ++ ) 
{ 
if ( ID ( ID ) == ID ) 
ID ( STRING ) ; 

ID ( ) ; 
ID ( ) ; 

ID ( ID = ID ( STRING , ID ) ) ;  
if ( ID ( ) != INTEGER ) 
ID ( ID , STRING , ID ( ) == INTEGER ? STRING : STRING , ID ) ;  
ID ( ID , sizeof ( ID ) ) ; 
} 
} 

ID = ID [ INTEGER ] ;  

ID ( ID , ID ) ; 
if ( ID != ID ) 
{ 
ID * ID ; 

if ( * ID == STRING )  
ID = STRING ; 
ID = ID ( ( ID = ID ( ID , STRING ) ) , STRING ) ; 

if ( ID == ID ) 
ID ( ID , STRING , ID ) ; 

if ( ID ) 
ID ( ID , STRING , ID ) ; 

ID ( ID ) ; 
ID ( ID , ID , ID , ID ) ; 
ID ( ID ) ; 
ID ( ID ) ; 
} 

ID ( ID ) ; 
if ( ID ) 
{ 
ID ( INTEGER ) ; 
ID ( ) ; 

} 
ID ( ) ; 
if ( ID ) 
{ 
ID = ID ( ) ; 
ID ( ID , STRING , ( ( double ) ( ID - ID ) ) / ID ) ; 
} 
return ID ; 
} 

 
 
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 

typedef struct ID { unsigned ID ; ID ID ; } ID ; 

typedef struct ID { ID ID ; 
struct ID * ID ; 
} ID ; 

static void * ID ; 
static ID ID = ID ; 
static ID ID = ID ; 

static ID * ID ( int ID , ID * ID , ID * ID , ID * ID ) 
{ 
ID ID = { INTEGER , ID } ; 
ID * ID ; 

 
ID ( STRING , 
ID -> ID , 
ID -> ID ) ; 
ID ( ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
 

ID . ID = ID -> ID ; 
ID ( & ID . ID , ID ) ; 

ID = ( ID * ) ID ( ID , & ID , ID ) ; 

if ( ID == ID )  
{ 
void * ID ; 

ID = ( ID * ) ID ( ID , 
& ID , 
sizeof ( ID ) , 
sizeof ( ID ) ) ; 

ID -> ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
ID -> ID -> ID . ID = ID -> ID ; 
ID ( & ID -> ID -> ID . ID , ID ) ; 

if ( ID == ID -> ID -> ID ) 
ID ( ID -> ID , ID -> ID ) ; 

ID ( & ID -> ID , ID ( ID -> ID ) ) ; 

for ( ID = ID ( ID -> ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 
void * ID ; 

ID * ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 

( ( ID * ) ID ( sizeof ( ID ) , ID , ID -> ID ) ) -> ID = 
ID ( ID -> ID -> ID , ID , ID ) ; 

ID -> ID . ID = ID ; 
ID ( & ID -> ID . ID , ID ) ; 

 
ID ( STRING ) ; 
ID ( ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
 

for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 

if ( ID -> ID -> ID != ID ) 
{ 
ID * ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
ID * ID = ( ID * ) ID ( sizeof ( ID ) , ID , ID ) ; 

 
ID ( STRING ) ; 
ID ( ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
 

ID -> ID . ID = ID ; 
ID ( & ID -> ID . ID , ID ) ; 

ID -> ID = ID -> ID ; 

if ( ID -> ID -> ID == ID ) 
{  

if ( ID == ID ) 
( ( ID * ) ID ( sizeof ( ID ) , ID ( ID , ID , ID -> ID , & ID ) , ID ) ) -> ID = 
ID ( ID -> ID -> ID , ID , ID ) ; 
else if ( ID == ID ) 
{ 
ID ID = ID ; 

ID ( & ID , & ID -> ID -> ID ) ; 
ID ( & ID , & ID ) ; 

( ( ID * ) ID ( sizeof ( ID ) , ID ( ID , ID , ID -> ID , & ID ) , ID ) ) -> ID = 
ID ( ID -> ID -> ID , ID , ID ) ; 

ID ( & ID ) ; 
} 
else if ( ID == ID ) 
{ 
ID ID = ID ; 
ID ID = ID ; 
unsigned * ID ; 
unsigned * ID ; 
void * ID ; 
int ID = INTEGER ; 

 
for ( ID = ID ( ID ) ; ID != ID ; ID = ID ( ID ) ) 
{ 
ID ( & ID , & ( ( ID * ) ID ( ID ) ) -> ID -> ID ) ; 
if ( ! ID ( & ( ( ID * ) ID ( ID ) ) -> ID -> ID , ID ) ) 
{ 
ID = INTEGER ; 
break ; 
} 
} 

if ( ID ) 
ID ( & ID , ID ) ; 

ID = ID ( & ID ) ; 
for ( ID = ID ; 
* ID != ID ; 
ID ++ ) 
{ 
ID * ID = ID ( ID -> ID -> ID , * ID ) ; 

ID ( & ID , * ID ) ; 

if ( ID -> ID == ID || ID -> ID == ID ) 
( ( ID * ) ID ( sizeof ( ID ) , ID ( ID , ID , ID -> ID , & ID ) , ID ) ) -> ID = 
ID ( ID -> ID -> ID , ID , ID ) ; 
} 
ID ( & ID ) ; 
ID ( ID ) ; 
} 
} 
ID = ID ; 
} 
} 
ID ( & ID -> ID , ID ( ID ) ) ; 
} 
 
ID ( STRING ) ; 
 
} 
 
else 
ID ( STRING ) ; 
 

return ID -> ID ; 
} 

ID * ID ( ID * ID , enum ID ID ) 
{ 
ID * ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID ID = ID ; 

ID -> ID = ID ( ID ) ; 
ID -> ID = ID ; 
ID -> ID = ID ; 

ID ( ID -> ID -> ID , ID , ID ) -> ID = ID ; 

ID -> ID = ID ( STRING ) ; 

ID = ID ( STRING , INTEGER , INTEGER , ID , ID , ID ) ; 

if ( ID == ID ) 
{  
unsigned ID ; 

ID ( & ID , ID ) ;  

for ( ID = INTEGER ; ID < ID ( ID ) ; ID ++ ) 
if ( ID ( ID -> ID , ID ) -> ID == ID ) 
ID ( & ID , ID ) ; 

ID ( & ID , ID ) ; 
} 

if ( ID == ID ) 
{  
unsigned ID ; 

ID ( & ID , ID ) ;  

for ( ID = INTEGER ; ID < ID ( ID ) ; ID ++ ) 
if ( ID ( ID -> ID , ID ) -> ID == ID ) 
ID ( & ID , ID ) ; 
} 

ID ( & ID , ID ) ; 

ID ( ID , ID , ID -> ID -> ID , & ID ) ; 

ID ( ID -> ID ) ; 
ID ( ID ) ; 
ID ( & ID ) ; 

return ID ; 
} 

 
static void * ID ; 

static ID * ID ( int ID , ID * ID , ID * ID ) 
{ 

} 

ID * ID ( ID * ID , int ID ) 
{ 
ID * ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 

ID -> ID = ID ( ID ) ; 
ID -> ID = ID ; 

ID ( ID -> ID -> ID , ID , ID ) -> ID = ID ; 

ID -> ID = ID ( STRING ) ; 

ID = ID ( STRING , INTEGER , INTEGER , ID , ID , ID ) ; 

ID ( ID , ID , ID -> ID -> ID ) ; 

ID ( ID -> ID ) ; 

return ID ; 
} 

 

static ID * ID ; 

void ID ( const void * ID ) 
{ 
if ( ID -> ID == ID )  
ID ( STRING , ID ) ;  
} 

void ID ( const void * ID ) 
{ 
ID * ID = ( ID * ) ID ; 

ID ( STRING , ID ( ID ) ) ; 

switch ( ID -> ID ) 
{ 
case ID : 
{ 
unsigned * ID , 
* ID = ID ( & ( ID -> ID . ID -> ID ) ) ; 

for ( ID = ID ; * ID != ID ; ID ++ ) 
{ 
ID * ID = ( ID * ) ( ID ( ID -> ID -> ID ) [ * ID ] ) ; 

if ( ! ID ( & ID -> ID -> ID , ID ( ID ) ) ) 
{ 
ID ( STRING , * ID ) ; 
ID ( ID -> ID . ID , INTEGER ) ; 

ID ( STRING ) ; 
ID ( & ID -> ID . ID , ID , INTEGER ) ; 
ID ( STRING ) ; 

if ( ID ( & ID -> ID -> ID , ID ( ID ) ) ) 
ID ( STRING , ID ( ID -> ID . ID ) ) ; 
} 
} 
} 
break ; 

case ID : 
{ 
unsigned * ID , 
* ID = ID ( & ( ID -> ID . ID -> ID ) ) ; 

for ( ID = ID ; * ID != ID ; ID ++ ) 
{ 
ID ( STRING , * ID ) ; 
ID ( ( ID * ) ( ID ( ID -> ID -> ID ) [ * ID ] ) , INTEGER ) ; 
} 
} 
break ; 

case ID : 
{ 
if ( ID ( & ID -> ID , ID ( ID ) ) ) 
ID ( STRING , ID -> ID . ID -> ID -> ID ) ; 
else 
ID ( ID -> ID . ID , INTEGER ) ; 

ID ( STRING ) ; 
ID ( & ID -> ID . ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
} 
break ; 

default : 
ID ( ID , STRING ) ; 
} 

ID ( STRING ) ; 

ID ( STRING , 
ID ( & ID -> ID , ID ( ID ) ) ? STRING : 
ID ( & ID -> ID , ID ( ID ) ) ? STRING : STRING ) ; 
} 

void ID ( const void * ID ) 
{ 
ID * ID = ( ID * ) ID ; 

if ( ID ( & ID -> ID , ID ( ( ID * ) ID ( ID ) ) ) ) 
ID ( STRING ) ; 
else if ( ID ( & ID -> ID , ID ( ( ID * ) ID ( ID ) ) ) ) 
ID ( STRING ) ; 
else 
{ 
ID ( STRING ) ; 
ID ( ID -> ID ) ; 
ID ( STRING ) ; 
} 
} 

void ID ( ID * ID , ID * ID ) 
{ 
ID * ID = ID ( ) ; 

ID ( ID ) ; 
ID = ID ; 
ID ( ID -> ID ) ; 
ID ( ID -> ID , ID , ID , ID ) ; 
ID ( ID ) ; 
} 

ID * ID ( ID * ID ) 
{ 
return ID ; 
} 

typedef struct ID 
{ 
ID * ID ; 
struct ID * ID ; 
} ID ; 

static ID ID = ID ; 
static ID ID = ID ; 
static ID ID = ID ; 
static ID ID = ID ; 
static ID ID = ID ; 

static void ID ( ID * ID ) 
{ 
ID * ID ; 

if ( ID ( & ( ID -> ID . ID ) ) != INTEGER ) 
{ 
ID ( & ID , & ( ID -> ID . ID ) ) ; 
return ; 
} 

if ( ID ( & ID , ID ( ID ) ) ) 
return ; 

ID ( & ID , ID ( ID ) ) ; 

for ( ID = ( ID * ) ID ( ID ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) ) 
if ( ID -> ID -> ID == ID ) 
ID ( ( ID * ) ID ( ID ) ) ; 
} 

 
static void ID ( ID * ID , unsigned ID ) 
{ 
unsigned ID ;  
unsigned ID ;  

 
ID ( STRING , ID ) ; 
ID ( & ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
 

 
for ( ID = INTEGER , ID = INTEGER ; ID < ID . ID ; ID ++ )  
{ 
unsigned ID ;  
unsigned ID = ID . ID [ ID ] ;  

for ( ID = INTEGER ; ID < INTEGER ; ID <<= INTEGER )  
{ 
if ( ( ID & ID ) != INTEGER )  
{ 
ID * ID ; 

for ( ID = ( ID * ) ID ( ID ( ID -> ID ) [ ID ] ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) ) 
if ( ID -> ID -> ID == ID ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 

if ( ID ( & ID -> ID . ID ) != INTEGER ) 
ID ( & ID , & ( ( ( ID * ) ID ( ID ) ) -> ID . ID ) ) ; 
else 
{ 
ID ( & ID ) ; 
ID ( ID ) ; 
ID ( & ID , & ID ) ; 
} 

} 
} 
ID ++ ; 
} 
} 
} 

 
static ID * ID ( void * ID , ID * * ID , ID * ID ) 
{ 
ID * ID = ( ID * ) ID ( ID , & ID , ID ) ; 

 
ID ( STRING ) ; 
ID ( & ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
if ( ID == ID ) 
ID ( STRING ) ; 
else 
ID ( STRING ) ; 
 

if ( ID == ID ) 
{ 
ID * ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID ID = ID ; 

 
ID ( & ID , & ID ) ; 

 
ID = ( ID * ) ID ( ID , & ID , sizeof ( ID ) , sizeof ( ID ) ) ; 

 
ID -> ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
ID -> ID -> ID . ID = ID ; 

 
ID -> ID = ID ; 
ID -> ID = * ID ; 
* ID = ID ; 

 
ID ( & ID , & ID ) ; 
if ( ID ( & ID ) != INTEGER ) 
ID ( & ID -> ID , ID ( ID -> ID ) ) ; 
} 

return ID ; 
} 

ID * ID ( ID * ID ) 
{ 
ID * ID ; 

for ( ID = ( ID * ) ID ( ID -> ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
if ( ID ( & ID -> ID , ID ( ID ) ) ) 
{ 
ID * ID ; 
ID * ID = ID ; 

do 
{ 
 
for ( ID = ( ID * ) ID ( ID ) ; 
ID != ID && ID -> ID -> ID == ID ; 
ID = ( ID * ) ID ( ID ) ) 
; 

 
if ( ID != ID ) 
{ 
if ( ID ( & ID -> ID -> ID , ID ) ) 
{ 
ID = ( ID * ) ID ( ID ) ; 
ID ( & ID -> ID , ID ( ID ) ) ; 
} 
else 
ID = ID ;  
} 
} 
while ( ID != ID ) ; 
} 
return ID ; 
} 

struct ID { ID * ID ; unsigned ID ; } ; 

int ID ( const void * ID , const void * ID ) 
{ 
struct ID * ID = ( struct ID * ) ID ; 
struct ID * ID = ( struct ID * ) ID ; 

if ( ID -> ID < ID -> ID ) 
return - INTEGER ; 
else if ( ID -> ID == ID -> ID ) 
return INTEGER ; 
else 
return INTEGER ; 
} 

ID * ID ( ID * ID ) 
{ 
ID * ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 

ID ID = ID ( ) , ID ; 
ID * ID = ID ; 
void * ID ; 
ID * ID ; 
unsigned ID ;  
unsigned ID ;  
unsigned ID = ID ( ID -> ID ) ; 
ID * ID = ID ; 
ID * ID = ID ; 

 
ID ( STRING , ID ) ; 
for ( ID = INTEGER ; ID <= ID ; ID ++ ) 
{ 
ID * ID = ( ID * ) ID ( ID -> ID ) [ ID ] ; 
ID ( STRING , ID , ID ) ; 
if ( ID != ID ) 
{ 
if ( ID ( & ID -> ID , ID ( ID ) ) ) 
ID ( STRING , ID -> ID . ID -> ID -> ID ) ; 
else 
ID ( ID -> ID . ID , INTEGER ) ; 
} 
else ID ( STRING ) ; 
ID ( STRING ) ; 
} 
 

ID = ID ( ) ; 
ID ( ID , STRING , ( ( double ) ( ID - ID ) ) / ID ) ; 

 
ID -> ID = ID ( STRING ) ; 
ID -> ID = ID ( ID -> ID ) ; 
ID -> ID = ID -> ID ; 
ID -> ID = ID ; 
ID -> ID = ID ( ID ) ; 
ID = ID ( STRING , INTEGER , INTEGER , ID , ID , ID ) ; 

 
ID ( & ID , ID ) ; 
ID ( & ID , ID ) ; 
ID ( & ID , ID ) ; 
ID ( & ID , ID ( ID -> ID ) - INTEGER ) ; 
ID ( & ID , ID ) ; 

 
ID ( & ID , & ID -> ID ) ; 

 
{ 
unsigned ID = INTEGER ; 
unsigned * ID = ID ( ID -> ID , INTEGER ) ; 
struct ID * ID ; 

ID = ID ( ) ; 
ID ( ID , STRING , ( ( double ) ( ID - ID ) ) / ID ) ; 

 
for ( ID = ( ID * ) ID ( ID -> ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
if ( ID ( & ID -> ID , ID ( ID ) ) ) 
ID ++ ; 

ID ( STRING , ID ) ; 

 
ID = ( struct ID * ) ID ( ID * sizeof ( struct ID ) ) ; 

 
ID = INTEGER ; 
for ( ID = ( ID * ) ID ( ID -> ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
if ( ID ( & ID -> ID , ID ( ID ) ) ) 
{ 
ID [ ID ] . ID = ID ; 
ID [ ID ] . ID = ID [ ID ( ID ) ] ; 
ID ++ ; 
} 

 
ID ( ID ) ; 

 
ID ( ID , ID , sizeof ( struct ID ) , ID ) ; 

ID ( & ID ) ; 
ID ( & ID ) ; 

for ( ID = ( ID * ) ID ( ID -> ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
if ( ID ( & ID -> ID , ID ( ID ) ) ) 
{ 
ID ( & ID ) ; 
ID ( ID ) ; 
ID ( ID , ID ( & ID ) ) ; 
ID ( ID , ID ( & ID ) ) ; 
ID ( & ID -> ID . ID , & ID ) ; 
} 
} 

ID = ID ( ) ; 
ID ( ID , STRING , ( ( double ) ( ID - ID ) ) / ID ) ; 

 
 
ID ( STRING , ID , ID == INTEGER ? STRING : STRING ) ; 

ID ( STRING , ID * sizeof ( unsigned * ) ) ; 
ID ( STRING , ( ID ( ID ) - ID ( ID , INTEGER ) ) * sizeof ( unsigned ) ) ; 
ID ( STRING , ID ( ID ) * sizeof ( unsigned ) ) ; 
ID ( ID ) ; 

ID ( STRING , ID * sizeof ( ID ) ) ; 
ID ( STRING , ID ( ID ) ) ; 
ID ( ID ) ; 
 
ID ( & ID ) ; 
ID ( & ID ) ; 

 
ID ( & ID , & ( ( ( ID * ) ID ( ID -> ID ) ) -> ID . ID ) ) ;  
ID ( ID -> ID , ID ( ID , & ID , ID ) -> ID ) ; 

while ( ID != ID ) 
{ 
 
ID * ID = ID ; 
ID ID = ID -> ID -> ID ; 
ID = ID -> ID ; 

 
ID ( & ID ) ; 
for ( ID = INTEGER , ID = INTEGER ; ID < ID . ID ; ID ++ )  
{ 
unsigned ID ;  
unsigned ID = ID . ID [ ID ] ;  

for ( ID = INTEGER ; ID < INTEGER ; ID <<= INTEGER )  
{ 
if ( ( ID & ID ) != INTEGER )  
{ 
ID * ID ; 

for ( ID = ( ID * ) ID ( ID ( ID -> ID ) [ ID ] ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) ) 
ID ( & ID , ID -> ID -> ID ) ; 
} 
ID ++ ; 
} 
} 

 
ID ( & ID , ID ) ; 

 
for ( ID = INTEGER , ID = INTEGER ; ID < ID . ID ; ID ++ )  
{ 
unsigned ID ;  
unsigned ID = ID . ID [ ID ] ;  

for ( ID = INTEGER ; ID < INTEGER ; ID <<= INTEGER )  
{ 
if ( ( ID & ID ) != INTEGER )  
{ 
ID ( & ID ) ; 
ID ( & ID , & ID ) ; 

ID ( ID , ID ) ; 

( ( ID * ) ID ( sizeof ( ID ) , 
ID ( ID , & ID , ID ) -> ID , 
ID -> ID -> ID ) ) -> ID = ID ( ID -> ID -> ID , ID ) ; 
} 
ID ++ ; 
} 
} 
ID ( ID ) ; 
} 

ID ( ID -> ID ) ; 

ID = ID ( ) ; 
ID ( ID , STRING , ( ( double ) ( ID - ID ) ) / ID ) ; 

return ID ; 
} 

typedef struct ID { ID ID ; 
struct ID * ID ; 
struct ID * ID ; 
} ID ; 

static ID * ID ( void * ID , ID ID , ID * ID ) 
{ 
ID * ID ; 

ID = ( ID * ) ID ( ID , & ID , ID ) ; 

 
ID ( STRING ) ; 
ID ( & ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
if ( ID == ID ) 
ID ( STRING ) ; 
else 
ID ( STRING ) ; 
 

if ( ID == ID ) 
{ 
ID ID = ID ; 

ID ( & ID , & ID ) ; 

 
ID = ( ID * ) ID ( ID , & ID , sizeof ( ID ) , sizeof ( ID ) ) ; 

 
ID -> ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
ID -> ID -> ID . ID = ( ID * ) ID ; 
} 

return ID ; 
} 

ID * ID ( void * ID , ID * ID , ID * ID ) 
{ 
static ID ID = ID ; 
unsigned * ID = ID ( & ID -> ID . ID -> ID ) ; 
unsigned * ID = ID ; 

ID ( & ID ) ; 

while ( * ID != ID ) 
{ 
ID * ID = ( ID * ) ID ( ID -> ID -> ID ) [ * ID ++ ] ; 

if ( ! ID ( & ID -> ID , ID ( ID ) ) ) 
{ 
 
ID ( STRING , ID ( ID -> ID ) , ID ( ID ) ) ; 
 

ID ( & ID , ID ( ID -> ID . ID ) ) ; 
} 
} 
ID ( ID ) ; 

return ID ( ID , ID , ID ) ; 
} 

ID * ID ( ID * ID ) 
{ 

void * ID ; 
ID * ID ; 
ID * ID ; 
ID * ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 

 
 
ID -> ID = ID ( STRING ) ; 
ID -> ID = ID ( ID -> ID ) ; 
ID -> ID = ID ( ID -> ID ) ; 
ID -> ID = ID -> ID ; 
ID -> ID = ID ; 
ID = ID ( STRING , INTEGER , INTEGER , ID , ID , ID ) ; 

 
for ( ID = ( ID * ) ID ( ID -> ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
{ 
ID * ID = ID ( ID , ID , ID ) ; 

 
ID ( STRING , ID ( ID ) ) ; 
 

if ( ID ( & ID -> ID , ID ( ID ) ) ) 
ID ( & ID -> ID , ID ( ID -> ID ) ) ; 

if ( ID ( ID ) == INTEGER ) 
ID ( ID -> ID , ID -> ID ) ; 
} 

 
for ( ID = ( ID * ) ID ( ID -> ID ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) ) 
{ 
ID * ID = ID ( ID , ID , ID ) -> ID ; 

for ( ID = ( ID * ) ID ( ID ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) ) 
{ 
ID * ID = ID ( ID , ( ID * ) ID ( ID ) , ID ) -> ID ; 
ID * ID ; 
int ID = INTEGER ; 

for ( ID = ( ID * ) ID ( ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
if ( ID ( ID ) == ID && ID -> ID -> ID == ID -> ID -> ID ) 
{ 
ID = INTEGER ; 
break ; 
} 

if ( ! ID ) 
( ( ID * ) ID ( sizeof ( ID ) , ID , ID ) ) -> ID = ID -> ID ; 
} 
} 

 
ID ( ID -> ID ) ; 

return ID ; 
} 

 
 
 
 
 
 
 
 

ID * ID ( ID * ID ) 
{ 
void * ID ; 
ID * ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID * * ID = ( ID * * ) ID ( ID ( ID ) , sizeof ( ID * ) ) ; 

ID -> ID = ID ( STRING ) ; 

ID -> ID = ID ( ID ) ; 

 
for ( ID = ID ( ID ( ID -> ID ) ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 

ID * ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 

ID -> ID = ID -> ID ; 
ID [ ID -> ID -> ID ] = ID ; 

if ( ID == ID -> ID -> ID ) 
ID ( ID -> ID , ID ) ; 
} 

 
for ( ID = ID ( ID ( ID -> ID ) ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 
void * ID ; 

for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 
void * ID ; 

for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 

if ( ID -> ID -> ID == ID ) 
{ 
ID * ID = ID [ ID -> ID -> ID ] ; 
ID * ID = ID [ ID -> ID -> ID ] ; 
void * ID ; 
int ID = INTEGER ; 

 
if ( ID ( ID ) == ID ) 
{ 
ID = INTEGER ; 
break ; 
} 

if ( ! ID ) 
ID ( INTEGER , ID , ID ) ; 
} 
} 
} 
} 
ID ( ID ) ; 

return ID ; 
} 

static unsigned * ID ; 
static ID * ID ; 

static void ID ( const void * ID ) 
{ 
ID * ID = ( ID * ) ID ; 

ID ( STRING , ID -> ID -> ID , ID [ ID ( ID ) ] , ID [ ID ( ID ) ] ) ; 
} 

void ID ( ID * ID , ID * ID ) 
{ 

ID = ID ; 
ID = ID ( ID -> ID , INTEGER ) ; 

ID ( ID ) ; 
ID ( ID -> ID , ID , ID , ID ) ; 
ID ( ID ) ; 

ID ( ID ) ; 
} 

 
 
 
 
 
 
 
 
 
 

static int ID ( ID * ID , unsigned * ID ) 
{ 
int ID = INTEGER ; 

while ( * ID != INTEGER ) 
ID |= ID ( ID -> ID , * ID ++ ) -> ID == ID ; 

return ID ; 
} 

static void ID ( ID * ID , unsigned * ID , unsigned ID , int ID ) 
{ 
unsigned ID = INTEGER ; 

if ( * ID == INTEGER ) 
{ 
if ( ID ) 
ID ( STRING ) ; 
else 
ID ( STRING , ID ) ; 
} 
else 
while ( * ID != INTEGER ) 
if ( ID ) 
{ 
ID += ID ( STRING , ID ( ID -> ID , * ID ++ ) -> ID ) ; 

if ( ID > ID - INTEGER && & ID != INTEGER ) 
{ 
ID ( STRING ) ; 
ID = INTEGER ; 
} 
} 
else 
{ 
ID ( ID ) ; 
ID += ID ( * ID ++ ) ; 
ID ( STRING ) ; 
} 

ID ( STRING ) ; 
} 

void ID ( ID * ID , unsigned long ID , int ID ) 
{ 
typedef struct ID 
{ 
unsigned * ID ; 
struct ID * ID ; 
} ID ; 
ID * ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID * ID = ID ; 
ID * ID ; 
unsigned long ID = INTEGER ; 

ID ( STRING , ID ? STRING : STRING ) ; 

 
ID -> ID = ( unsigned * ) ID ( INTEGER , sizeof ( unsigned ) ) ; 
* ( ID -> ID ) = ID -> ID -> ID ; 

do 
{ 
ID = ID ; 

 
if ( ! ( ID ( ID , ID -> ID ) && ! ID ) ) 
{ 
ID ( STRING , ID ++ ) ; 
ID ( ID , ID -> ID , INTEGER , ! ID ) ; 
} 

 
if ( ID ( ID , ID -> ID ) ) 
{ 
unsigned * ID = ID -> ID ; 
ID ID = INTEGER , 
ID = INTEGER ; 
unsigned ID ; 
void * ID , 
* ID ; 

 
while ( ID ( ID -> ID , * ID ++ ) -> ID != ID ) 
ID ++ ; 

ID = ID -> ID [ ID ] ; 

 
while ( * ID ++ != INTEGER ) 
ID ++ ; 

 
for ( ID = ID ( ID ( ID -> ID , ID ) -> ID ) ; 
ID != ID ; 
ID = ID ( ID ) 
) 
{ 
unsigned ID = INTEGER ; 
ID ID ; 
unsigned * ID , 
* ID ; 

 
for ( ID = ID ( ID ( ID ) ) ; 
ID != ID ; 
ID = ID ( ID ) 
) 
if ( ( ( ID * ) ID ( ID ) ) -> ID -> ID != ID ) 
ID ++ ; 

 
ID -> ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID = ID -> ID ; 

 
ID -> ID = ( unsigned * ) ID ( ID + ID + ID + INTEGER , sizeof ( unsigned ) ) ; 

 
for ( ID = INTEGER , ID = ID -> ID , ID = ID -> ID ; 
ID < ID ; 
ID ++ ) 
* ID ++ = * ID ++ ; 

 
for ( ID = ID ( ID ( ID ) ) ; 
ID != ID ; 
ID = ID ( ID ) 
) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 

if ( ID -> ID -> ID != ID ) 
* ID ++ = ID -> ID -> ID ; 
} 

 
for ( ID = INTEGER , ID ++ ; 
ID < ID ; 
ID ++ ) 
* ID ++ = * ID ++ ; 
} 
} 

 
ID = ID -> ID ; 
ID ( ID -> ID ) ; 
ID ( ID ) ; 
} 
while ( ID != ID && ( ID == INTEGER || ID <= ID ) ) ; 
} 

 
 
 
 
 
 
 
 
 
 

 
 

 
static ID * ID ; 

ID * ID ( void * ID , char * ID , int ID ) 
{ 
ID * ID ; 
struct ID { int ID ; char * ID ; } ID ; 

ID . ID = ID ; 
ID . ID = ID ; 

if ( ( ID = ( ID * ) ID ( ID , & ID , ID ) ) == ID ) 
{ 
ID = ( ID * ) ID ( ID , & ID , sizeof ( struct ID ) , sizeof ( ID ) ) ; 
ID -> ID = ID ( ID ) ; 
} 

return ID ; 
} 

ID * ID ( void * ID , unsigned ID ) 
{ 
 
ID * ID ; 

for ( ID = ( ID * ) ID ( ID ( ID ) ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) 
) 
if ( ID -> ID == ID ) 
return ID ; 

return ID ; 
} 

int ID ( ID * ID ) 
{ 
if ( ID == ID ) 
return ID ( STRING ) ; 
else 
return ID ( STRING , ID -> ID == ID ? STRING : STRING , 
ID -> ID , 
ID -> ID == ID ? STRING : STRING 
) ; 
} 

void ID ( ID * ID , unsigned ID , int ID ) 
{ 
unsigned ID = ID ( ID ) ; 
unsigned ID ; 
int ID = INTEGER ; 

for ( ID = ID ; ID < ID ; ID ++ ) 
{ 
ID * ID = ID ( ID -> ID , ID ) ; 

if ( ID != ID ) 
{ 
if ( ID -> ID != ID && ! ID ) 
{ 
if ( ID ) 
ID ( STRING ) ; 
ID = INTEGER ; 
} 
if ( ID ) 
ID ( STRING , ID ) ; 
else 
ID ( STRING , ID ) ; 

ID ( ID ) ; 
ID ( STRING ) ; 
} 
} 
} 

static void ID ( ID * ID ) 
{ 
void * ID , 
* ID , 
* ID ; 
ID * ID , 
* ID ; 

for ( ID = ID ( ( ID * ) ID ( ID -> ID ) ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID = ( ID * ) ID ( ID ) ; 

ID ( ID -> ID ) ; 

ID ( STRING ) ; 

for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID = ( ID * ) ID ( ID ) ; 

for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID ( STRING ) ; 
ID ( ( ( ID * ) ID ( ID ) ) -> ID ) ; 
} 

if ( ID ( ID ) == ID ) 
ID ( STRING ) ; 
else ID ( STRING ) ; 
} 
} 
} 

static void ID ( ID * ID ) 
{ 
ID * ID ; 
ID ID = ID ; 

ID ( & ID , & ( ID -> ID ) ) ; 
ID ( & ID , ID ( ID ) - INTEGER ) ; 
ID ( & ID , ID , ID , ID , ID ) ; 

ID ( STRING ) ; 
ID ( ID , ID -> ID , INTEGER ) ; 
ID ( STRING ) ; 
ID ( ID , ID , INTEGER ) ; 
ID ( STRING ) ; 

ID ( & ID ) ; 

for ( ID = ( ID * ) ID ( ID ( ID -> ID ) ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) ) 
if ( ID -> ID == ID || ID -> ID == ID ) 
{ 
ID ( STRING ) ; 
ID ( ID ) ; 
ID ( STRING ) ; 
ID ( ID , ID -> ID , INTEGER ) ; 
ID ( STRING ) ; 
ID ( ID ) ; 
ID ( STRING ) ; 
ID ( ID , ID -> ID , INTEGER ) ; 
ID ( STRING ) ; 
} 
} 

 
static int ID ( ID * ID , int ID ) 
{ 
if ( ID ( ID , ID ) ) 
return INTEGER ; 

ID ( ID , ID ) ; 
return INTEGER ; 
} 

static int ID ( ID * ID , ID * ID ) 
{ 
if ( ID ( ID , ID ) ) 
return INTEGER ; 

ID ( ID , ID ) ; 
return INTEGER ; 
} 
 

static ID * ID ( ID * ID ) 
{ 
ID * ID = ( ID * ) ID ( sizeof ( ID ) , ID ) ; 

ID ( INTEGER , ID , ID ) ; 

return ID ; 
} 

static void ID ( ID * ID ) 
{ 
 
ID * ID ; 

 
unsigned ID = ID + INTEGER ; 

 
ID ( ID -> ID , ID ( ID -> ID ) ) ; 

 
for ( ID = ( ID * ) ID ( ID ( ID -> ID ) ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) ) 
if ( ID -> ID == ID ) 
ID -> ID = ID ++ ;  

 
for ( ID = ( ID * ) ID ( ID ( ID -> ID ) ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) ) 
if ( ID -> ID == ID ) 
ID -> ID = ID ++ ;  
} 

static ID * ID ( ID * ID ) 
{ 
ID * ID = ID -> ID -> ID ; 
void * ID = ID ( ID ) ; 
ID * ID = ( ID * ) ID ( ID ) ; 
void * ID = ( ID * ) ID ( ID ) ; 
ID * ID = ( ID * ) ID ( ID ) ; 

if ( ID -> ID -> ID == ID && 
ID ( ID ) == ID && 
ID ( ID ) == ID ) 
return ID ; 
else 
{ 
char * ID ; 
ID * ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
ID * ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
ID * ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 

ID ( INTEGER , ID , ID ( ID -> ID ) ) ; 
ID ( INTEGER , ID , ID ) ; 
ID ( INTEGER , ID , ID ) ; 

ID = ( char * ) ID ( ID ( ID -> ID -> ID ) + ID ( ID ) + INTEGER , sizeof ( char ) ) ; 
ID ( ID ( ID , ID -> ID -> ID ) , ID ) ; 
ID -> ID = ID ( ID -> ID , ID , ID ) ; 
ID -> ID -> ID = ID ; 

ID -> ID = ID -> ID ; 

ID -> ID = ID -> ID ; 

return ID ; 
} 
} 

static void ID ( ID * ID , ID * ID ) 
{ 
void * ID , 
* ID ; 

if ( ID ( ID , ID -> ID -> ID ) ) 
return ; 


ID ( ID , ID -> ID -> ID ) ; 

for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
for ( ID = ID ( ID ( ID ) ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 

if ( ID -> ID -> ID == ID ) 
{ 
if ( ID -> ID -> ID != ID ) 
ID ( ID -> ID -> ID , ID ) ; 
else 
ID ( ID , STRING , ID -> ID -> ID , ID -> ID -> ID ) ; 
} 
else if ( ID -> ID -> ID == ID ) 
ID ( ID , ID -> ID -> ID ) ; 
else 
ID ( ID , ID ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
int ID ; 

do 
{ 
void * ID ; 

ID = INTEGER ; 

for ( ID = ID ( ID ( ID -> ID ) ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
void * ID ; 
ID * ID = ( ID * ) ID ( ID ) ; 

for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
void * ID ; 
ID ID = ID ;  
int ID = INTEGER ;  
ID * ID = ( ID * ) ID ( ID ) ; 
ID ( & ID , ID ) ;  

 
for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 

 
switch ( ID -> ID -> ID ) 
{ 
case ID : 
ID = INTEGER ; 
ID ( & ID , ID -> ID -> ID ) ; 
ID |= ID ( & ID -> ID -> ID , ID -> ID -> ID ) ; 
break ; 
case ID : 
if ( ID ( & ( ID -> ID -> ID ) , ID ) )  
{ 
ID ( & ID , & ( ID -> ID -> ID ) ) ; 
ID ( & ID , ID ) ; 
} 
else 
{ 
ID = INTEGER ; 
ID ( & ID , & ( ID -> ID -> ID ) ) ; 
} 
ID ( & ID , ID -> ID -> ID ) ; 
break ; 
} 
if ( ID ) 
ID |= ID ( & ( ID -> ID -> ID ) , ID ) ; 
} 
ID |= ID ( & ( ID -> ID -> ID ) , & ID ) ; 

if ( ID )  
ID |= ID ( & ( ID -> ID -> ID ) , ID ) ; 
} 
} 
} 
while ( ID ) ; 
} 

static void ID ( ID * ID ) 
{ 
ID * ID ; 
int ID ;  

for ( ID = ( ID * ) ID ( ID ( ID -> ID ) ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) ) 
ID ( & ID -> ID ) ; 

ID ( & ID -> ID -> ID , ID ) ;  

do 
{ 
ID = INTEGER ; 

 
for ( ID = ( ID * ) ID ( ID ( ID -> ID ) ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) ) 
{ 
ID * ID = ID -> ID ; 

if ( ID != ID && ID ( & ( ID -> ID ) ) != INTEGER  ) 
{ 
void * ID ; 

for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ID ( ID ) ; 
void * ID ; 

for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
void * ID ; 
int ID = INTEGER ; 
ID * ID = ID ( ID ) ; 

for ( ID = ID ( ID ) ; 
ID && ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ID ( ID ) ; 
ID ID = ID ; 

ID ( & ID , & ID -> ID -> ID ) ; 
ID ( & ID , ID -> ID -> ID ) ; 
if ( ID ( & ID , ID ) ) 
ID ( & ID , ID ) ; 
else 
ID = INTEGER ; 
ID |= ID ( & ID -> ID -> ID , & ID ) ; 
ID ( & ID ) ; 
} 

if ( ID ) 
ID |= ID ( & ( ID -> ID -> ID ) , & ID -> ID ) ; 
} 
} 
} 
} 
} 
while ( ID ) ; 
} 

ID * ID ( ID * ID , ID * ID ) 
{ 
ID * ID ; 
ID * ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
unsigned ID = INTEGER ; 
unsigned ID = INTEGER ; 

ID -> ID = ID ( STRING , INTEGER , INTEGER , ID , ID , ID ) ; 
ID ( ID -> ID , ID , ID ) -> ID = ID ; 
ID ( ID -> ID , ID , ID ) -> ID = ID ; 
ID ( ID -> ID , ID , ID ) -> ID = ID ; 

ID ( & ( ID ( ID -> ID , ID , ID ) -> ID ) , ID ) ; 
ID -> ID = ID ( STRING ) ; 
ID ( ID -> ID , ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ) ; 

 
for ( ID = ( ID * ) ID ( ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 
void * ID ; 
ID * ID = ( ID * ) ID ( ( ID * ) ID ( ID -> ID ) ) ; 

ID -> ID = ID ( ID -> ID , ID -> ID , ID ) ; 
ID -> ID -> ID = ID ; 

if ( ID ( ID -> ID , ID -> ID ) == INTEGER ) 
ID -> ID = ID -> ID ; 

ID ++ ; 

for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 
void * ID ; 
ID * ID = ID ( ID ) ; 

ID ++ ; 

for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 
ID * ID = ID ( ID ) ; 

switch ( ID -> ID -> ID -> ID ) 
{ 
case ID : 
ID -> ID = ID ( ID -> ID , ID -> ID , ID ) ; 
break ; 
case ID : 
ID -> ID = ID ( ID -> ID , ID -> ID , ID ) ; 
break ; 
case ID : 
ID -> ID = ID ( ID -> ID , ID , ID ) ; 
break ; 
default : 
ID ( ID , STRING ) ; 
} 
} 
} 
} 

ID ( STRING , ID , ID ) ; 
ID ( ID ) ; 

ID ( ID ) ; 

ID ( ID -> ID -> ID , & ( ID -> ID ) ) ; 

ID ( ) ; 

ID ( ID ) ; 
ID ( ID ) ; 

return ID ; 
} 

unsigned ID ( ID * ID ) 
{ 
unsigned ID = INTEGER ; 
ID * ID ; 

for ( ID = ( ID * ) ID ( ID ( ID -> ID ) ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) 
) 
if ( ID -> ID > ID ) 
ID = ID -> ID ; 

return ID + INTEGER ; 
} 

ID * ID ( ID * ID ) 
{ 
return ID ;  
} 

int ID ( ID * ID ) 
{ 
ID * ID , 
* ID ; 

if ( ID -> ID == ID )  
ID = ID ; 
else 
 
ID = ( ID * ) ID ( ID ( ID ) ) ; 

ID = ( ID * ) ID ( ID ( ID ) ) ; 

if ( ID == ID ) 
return INTEGER ; 
else if ( ID -> ID && ID -> ID -> ID == ID ) 
return INTEGER ; 
else 
return INTEGER ; 
} 

ID * ID ( ID * ID ) 
{ 
ID * ID , 
* ID ; 

if ( ID -> ID == ID )  
ID = ID ; 
else 
 
ID = ( ID * ) ID ( ID ( ID ) ) ; 

ID = ( ID * ) ID ( ID ( ID ) ) ; 

if ( ID == ID ) 
return ID ; 
else 
return ID -> ID ; 
} 

ID * ID ( ID * ID ) 
{ 
void * ID ; 

if ( ID == ID ) 
return ID ; 

if ( ID -> ID == ID )  
ID = ID ( ID ) ; 
else 
ID = ID ( ID ( ID ) ) ; 

if ( ID == ID ) 
return ID ; 
else 
return ( ID * ) ID ( ID ) ; 
} 

void ID ( ID * ID , ID * ID ) 
{ 
ID ( ID ) ; 

if ( ID == ID ) 
ID ( ID , ID ) ; 
else 
{ 
ID * ID = ID ( ID ) ; 

if ( ID == ID ) 
ID ( ID , ID ) ; 
else 
while ( ID != ID ) 
{ 
ID ( ID , & ID -> ID -> ID ) ; 
if ( ! ID ( & ID -> ID -> ID , ID ) ) 
{ 
ID ( ID , ID ) ; 
break ; 
} 
ID = ID ( ID ) ; 
} 
} 
} 

int ID ( ID * ID ) 
{ 
ID * ID , 
* ID ; 
int ID = INTEGER ; 

if ( ID -> ID == ID )  
{ 
ID = ID ; 
ID = INTEGER ; 
} 
else 
 
ID = ( ID * ) ID ( ID ( ID ) ) ; 

ID = ( ID * ) ID ( ID ( ID ) ) ; 

if ( ID == ID ) 
return INTEGER ; 
else if ( ID -> ID && ID -> ID -> ID == ID ) 
return INTEGER ; 
else 
return ID ; 
} 

void ID ( ID * ID , int ID ) 
{ 
ID * ID , 
* ID ; 
void * ID ; 

if ( ID -> ID == ID )  
ID = ID ; 
else 
 
ID = ( ID * ) ID ( ID ( ID ) ) ; 

ID = ( ID * ) ID ( ID ( ID ) ) ; 

if ( ID == ID ) 
ID ( STRING ) ; 
else 
ID ( ID -> ID ) ; 
ID ( STRING ) ; 

if ( ID -> ID == ID )  
if ( ID ) 
ID ( STRING ) ; 
else 
ID ( STRING ) ; 

for ( ID = ID ( ID ) ; 
ID != ID ; 
ID = ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 

ID ( ID -> ID ) ; 
ID ( STRING ) ; 

if ( ID == ID ) 
if ( ID ) 
ID ( STRING ) ; 
else 
ID ( STRING ) ; 
} 

} 

static void ID ( const void * ID ) 
{ 
ID * ID = ( ID * ) ID ; 

if ( ID -> ID == ID ) 
ID ( STRING , ID ( ID ) ) ; 
else 
switch ( ID -> ID -> ID ) 
{ 
case ID : 
case ID : 
ID ( STRING , ID ( ID ) ) ; 
ID ( ID -> ID ) ; 
ID ( STRING ) ; 
break ; 
case ID : 
ID ( STRING , ID ( ID ) , ID -> ID -> ID ) ; 
break ; 
default : 
ID ( ID ) ; 
ID ( ID , STRING ) ; 
break ; 
} 

ID ( STRING , ID ( ID ) ) ; 
} 

void ID ( ID * ID , ID * ID ) 
{ 
ID * ID = ID ( ) ; 
ID * ID = ID ( STRING , STRING ) ; 

ID ( ID ) ; 
ID ( STRING ) ; 
ID ( ID , INTEGER , INTEGER ) ; 
ID ( STRING ) ; 
ID ( ID ) ; 
ID ( STRING ) ; 
ID ( ID ) ; 
ID ( ID ) ; 
ID ( ID ) ; 
ID ( ID -> ID , ID , ID , ID ) ; 
ID ( ID ) ; 
ID ( ID ) ; 
} 

int ID ( const unsigned ID ) 
{ 
return ID ( ID ( ID -> ID , ID ) ) ; 
} 

void ID ( ID * ID ) 
{ 
ID = ID ; 
} 
 
 
 
 

 
 
 
 
 

 
 
 
 
 
 
 

 
 

unsigned ID ; 
unsigned ID ; 
char * ID ; 
char * * ID ; 

ID * ID ; 

static void * ID ; 
static void * ID ; 
static ID * ID ; 

static ID ID = ID ; 
static ID ID = ID ; 
static ID ID = ID ; 
static ID ID = ID ; 
static ID ID = ID ; 

static ID ID ( ID * ID , int ID ) ; 

char * ID ( char * ID )  
{ 
return ID ( ( char * ) ID ( ID ( ID ) + INTEGER ) , ID ) ; 
} 

ID * ID ( char * ID ) 
{ 
return ( ID * ) ID ( ID , & ID , sizeof ( char * ) , sizeof ( ID ) , ID , ID ) ; 
} 

void ID ( void ) 
{ 
ID ( ID , ID ) ; 
} 

void ID ( char * ID ) 
{ 
ID ( ID , ID ) ; 
} 

void ID ( void ) 
{ 
ID ( ID ( ID ) ) ; 
ID ( ID , ID ) ; 
} 

static char * ID ( int ID ) 
{ 
switch ( ID ) 
{ 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
case ID : return STRING ; 
default : return STRING ; 
} 
} 

static void ID ( ID ID ) 
{ 
switch ( ID . ID ) 
{ 
case ID : ID ( STRING , ID . ID ? STRING : STRING , ID ( ID . ID ) ) ; break ; 
case ID : ID ( STRING , ID . ID , ID ( ID . ID ) ) ; break ; 
case ID : ID ( STRING , ID . ID , ID ( ID . ID ) ) ; break ; 
case ID : ID ( STRING , ID . ID , ID ( ID . ID ) ) ; break ; 
case ID : ID ( STRING , ID . ID , ID . ID , ID ( ID . ID ) ) ; break ; 
case ID : ID ( STRING , ID . ID , ID ( ID . ID ) ) ; break ; 
default : ID ( STRING , ID ( ID . ID ) ) ; 
} 
} 

static void ID ( ID * ID , ID ID ) 
{ 
switch ( ID . ID ) 
{ 
case ID : ID ( ID , STRING , ID . ID ? STRING : STRING ) ; break ; 
case ID : ID ( ID , STRING , ID . ID ) ; break ; 
case ID : ID ( ID , STRING , ID . ID ) ; break ; 
case ID : ID ( ID , STRING , ID . ID ) ; break ; 
case ID : ID ( ID , STRING , ID . ID ) ; break ; 
case ID : ID ( ID , STRING , ID . ID ) ; break ; 
case ID : ID ( ID , ID . ID ) ; break ; 
case ID : ID ( ID , ID . ID ) ; break ; 
case ID : ID ( ID , ID . ID ) ; break ; 
case ID : ID ( ID , ID . ID ) ; break ; 
case ID : ID ( ID , ID . ID ) ; break ; 
default : ID ( ID , STRING , ID ( ID . ID ) ) ; 
} 
} 

static void ID ( ID * ID , ID ID , int ID ) 
{ 
switch ( ID . ID ) 
{ 
case ID : ID ( ID , ID . ID , ID ) ; break ; 
default : ID ( ID , ID ) ; 
} 
} 

static void ID ( ID * ID , ID ID ) 
{ 
switch ( ID . ID ) 
{ 
case ID : ID ( ID , ID . ID ) ; break ; 
default : 
ID ( STRING ) ; 
ID . ID = ID ; 
} 
} 

ID ID ( ID * ID , int ID ) 
{ 
ID ID ; 

ID . ID = ID ; 

if ( ID == ID ) 
ID ( STRING ) ; 
else if ( ID -> ID == ID ) 
ID ( STRING , ID -> ID ) ; 
else if ( ID -> ID -> ID == ID ) 
ID ( STRING , ID -> ID ) ; 
else if ( ID -> ID -> ID -> ID == ID ) 
{ 
 
ID ( STRING , ID -> ID ) ; 
 
ID = ID -> ID -> ID -> ID ( ID , ID ) ; 
} 
else 
{ 
 
ID ( STRING , ID -> ID ) ; 
ID ( ID ) ; 
ID ( STRING ) ; 
 
ID ( & ID , ID -> ID -> ID , sizeof ( ID ) ) ; 
} 

return ID ; 
} 

static void ID ( ID * ID , ID ID ) 
{ 

 
ID ( STRING , ID -> ID ) ; 
ID ( ID ) ; 
ID ( STRING ) ; 
 

if ( ID == ID ) 
ID ( STRING ) ; 
else if ( ID -> ID == ID ) 
ID ( STRING , ID -> ID ) ; 
else if ( ID -> ID -> ID == ID ) 
{ 
ID -> ID -> ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID ( ID -> ID -> ID , & ID , sizeof ( ID ) ) ; 
} 
else if ( ID . ID != ID -> ID -> ID -> ID ) 
{ 
ID ( STRING ) ; 
ID ( ID ) ; 
ID ( STRING , ID -> ID ) ; 
ID ( * ( ID -> ID -> ID ) ) ; 
ID ( STRING ) ; 
} 
else 
ID ( ID -> ID -> ID , & ID , sizeof ( ID ) ) ; 
} 

static int ID ( void * * ID , ID * ID , ID ID , char * ID , int ID ) 
{ 
if ( * ID == ID ) 
{ 
if ( ID != ID ) 
ID ( ID , STRING , ID ) ; 
ID -> ID = ID ; 
return INTEGER ; 
} 

* ID = ID ( ( ID * ) ID ( * ID ) , ID ) ; 

if ( ID -> ID != ID ) 
{ 
if ( ID != ID ) 
{ 
ID ( ID , STRING , 
ID , 
ID ( ID ) , 
ID ( ID -> ID ) ) ; 
} 
ID -> ID = ID ; 
return INTEGER ; 
} 

* ID = ID ( * ID ) ; 
return INTEGER ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 
int ID = ID ; 
char * ID ; 

ID . ID = ID ; 

if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 
ID = ID . ID ; 

if ( ID ( & ID , & ID , ID , ID , ID ) ) 
ID = ID . ID ; 

ID . ID = ID ; 

ID . ID = ID ; 

switch ( ID ) 
{ 
case ID : ID . ID = ID ( ID , STRING ) ; break ; 
case ID : ID . ID = ID ( ID , STRING ) ; break ; 
case ID : ID . ID = ID ( ID , STRING ) ; break ; 
case ID : ID . ID = ID ( ID , STRING ) ; break ; 
case ID : ID ( ID , STRING ) ; 
default : ID ( ID , STRING ) ; 
} 

if ( ID . ID == ID ) 
ID ( ID , STRING , ID ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
void * ID = ID ( ID ) ; 
ID ID ; 
ID * ID = ID ; 

ID . ID = ID ; 

if ( ID ) 
{ 
if ( ID ( & ID , & ID , ID , ID , ID ) ) 
ID = ID . ID ; 

for ( ; ID != ID ; ID = ID ( ID ) ) 
ID ( ID , ID = ID ( ( ID * ) ID ( ID ) , ID ) ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
void * ID = ID ( ID ) ; 
ID ID ; 
ID * ID = ID ; 

ID . ID = ID ; 

if ( ID ) 
{ 
if ( ID ( & ID , & ID , ID , ID , ID ) ) 
ID = ID . ID ; 

for ( ; ID != ID ; ID = ID ( ID ) ) 
ID ( ID , ID = ID ( ( ID * ) ID ( ID ) , ID ) , INTEGER ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
void * ID = ID ( ID ) ; 
ID ID ; 
ID * ID = ID ; 

ID . ID = ID ; 

if ( ID ) 
{ 
if ( ID ( & ID , & ID , ID , ID , ID ) ) 
ID = ID . ID ; 

for ( ; ID != ID ; ID = ID ( ID ) ) 
ID ( ID , ID = ID ( ( ID * ) ID ( ID ) , ID ) , INTEGER ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
void * ID = ID ( ID ) ; 
ID ID ; 
ID * ID = ID ; 

ID . ID = ID ; 

if ( ID ) 
{ 
if ( ID ( & ID , & ID , ID , ID , ID ) ) 
ID = ID . ID ; 

for ( ; ID != ID ; ID = ID ( ID ) ) 
ID ( ID , ID = ID ( ( ID * ) ID ( ID ) , ID ) ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 

ID . ID = ID ; 
if ( ID ) 
ID . ID = ( ( ID * ) ID ) -> ID ; 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 

ID . ID = ID ; 

if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 

ID . ID = ID ; 
ID . ID = ID ( ID , ( ID * ) ( ID . ID ) ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 

ID . ID = ID ; 

if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 

ID . ID = ID ; 
ID . ID = ID ( ID . ID ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
ID * ID ; 
unsigned ID ; 
void * ID = ID ( ID ) ; 
int ID = INTEGER ; 

if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 
ID = ID . ID ; 

ID ( & ID , & ID , ID , STRING , ID ) ; 
ID = ID . ID ; 

if ( ID ( & ID , & ID , ID , STRING , ID ) ) 
switch ( ID . ID ) 
{ 
case ID : ID = INTEGER ; break ; 
case ID : ID = INTEGER ; break ; 
case ID : ID ( ID , STRING ) ; break ; 
case ID : ID ( ID , STRING ) ; break ; 
default : ID ( ID , STRING ) ; 
} 

ID ( ID , ID , ID ) ; 
} 

ID . ID = ID ; 
return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 
ID * ID ; 

ID . ID = ID ; 

if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 
ID = ID . ID ; 

ID ( & ID , & ID , ID , STRING , ID ) ; 

switch ( ID . ID ) 
{ 
case ID : 
case ID : 
ID ( ID , STRING ) ; 

case ID : 
case ID : 
case ID : 
ID ( ID , STRING ) ; 

case ID : 
ID ( ID , STRING ) ; 

case ID : 
case ID : 
case ID : 
ID . ID = ID ; 
ID . ID = ID ( ID , ( enum ID ) ID . ID ) ; 
break ; 

case ID : 
ID . ID = ID ; 
 
break ; 

default : ID ( ID , STRING ) ; 
} 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 

ID . ID = ID ; 

if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 

ID . ID = ID ; 
ID . ID = ID ( ID . ID ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 

ID . ID = ID ; 

if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 

ID . ID = ID ; 
ID . ID = ID ( ID . ID ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 

ID . ID = ID ; 

if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 

ID . ID = ID ; 
ID . ID = ID ( ID . ID ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 

ID . ID = ID ; 
if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 

ID . ID = ID ; 
ID . ID = ID ( ID . ID , INTEGER ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 

ID . ID = ID ; 
if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 

ID . ID = ID ; 
ID . ID = ID ( ID . ID , INTEGER ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
ID * ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 

ID . ID = ID ; 
if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 
ID = ID . ID ; 

ID ( & ID , & ID , ID , STRING , ID ) ; 

ID . ID = ID ; 
ID . ID = ID ( ID , ID . ID ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
ID * ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 
ID ID = { INTEGER } ; 

ID . ID = ID ; 
if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 
ID = ID . ID ; 

ID ( & ID , & ID , ID , STRING , ID ) ; 

if ( ID != ID ) 
ID ( & ID , & ID , ID , STRING , ID ) ; 

ID . ID = ID ; 
ID . ID = ID ( ID , ID . ID , INTEGER , ID . ID ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
ID * ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 
ID ID = { INTEGER } ; 

ID . ID = ID ; 
if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 
ID = ID . ID ; 

ID ( & ID , & ID , ID , STRING , ID ) ; 

if ( ID != ID ) 
ID ( & ID , & ID , ID , STRING , ID ) ; 

ID . ID = ID ; 
ID . ID = ID ( ID , ID . ID , INTEGER , ID . ID ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 
ID * ID ; 
void * ID = ID ( ID ) ; 
ID ID ; 
ID ID = { INTEGER } ; 

ID . ID = ID ; 
if ( ID ) 
{ 
ID ( & ID , & ID , ID , STRING , ID ) ; 
ID = ID . ID ; 

ID ( & ID , & ID , ID , STRING , ID ) ; 

if ( ID != ID ) 
ID ( & ID , & ID , ID , STRING , ID ) ; 

ID . ID = ID ; 
ID . ID = ID ( ID , ID . ID , INTEGER , ID . ID ) ; 
} 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 

if ( ID ) 
ID . ID = ( ( ID * ) ID ) -> ID ; 
ID . ID = ID ; 
ID . ID = ID ( ) ; 

return ID ; 
} 

static ID ID ( void * ID , int ID ) 
{ 
ID ID ; 

if ( ID ) 
ID . ID = ( ( ID * ) ID ) -> ID ; 
ID . ID = ID ; 
ID . ID = ( float ) ( ID ( ) / ID ) ; 

return ID ; 
} 

void ID ( char * ID , ID ( * ID ) ( void * ID , int ID ) ) 
{ 
ID * ID = ID ( ID ) ; 

ID -> ID = INTEGER ; 

ID -> ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID -> ID -> ID = ID ; 
ID -> ID -> ID = ID ; 
} 

void ID ( char * ID , char * ID ) 
{ 
ID * ID = ID ( ID ) ; 

ID -> ID = INTEGER ; 

ID -> ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID -> ID -> ID = ID ; 
ID -> ID -> ID = ID ; 
} 

void ID ( char * ID , int ID ) 
{ 
ID * ID = ID ( ID ) ; 

ID -> ID = INTEGER ; 

ID -> ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID -> ID -> ID = ID ; 
ID -> ID -> ID = ID ; 
} 

void ID ( char * ID , int ID ) 
{ 
ID * ID = ID ( ID ) ; 

ID -> ID = INTEGER ; 

ID -> ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID -> ID -> ID = ID ; 
ID -> ID -> ID = ID ; 
} 

void ID ( char * ID , ID * ID ) 
{ 
ID * ID = ID ( ID ) ; 

ID -> ID = INTEGER ; 

ID -> ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID -> ID -> ID = ID ; 
ID -> ID -> ID = ID ; 
} 

void ID ( char * ID ) 
{ 
ID * ID = ID ( ID ) ; 

ID -> ID = INTEGER ; 

ID -> ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID -> ID -> ID = ID ; 

ID = ID ; 
} 

void ID ( char * ID ) 
{ 
ID = ID ( STRING , INTEGER , INTEGER , ID , ID , ID ) ; 
ID = ID ( ID ) ; 

ID ( STRING ) ; 

 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 

 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 

 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 

 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 

 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 
ID ( STRING , ID ) ; 

 
ID ( STRING , INTEGER ) ; 
ID ( STRING , INTEGER ) ; 
ID ( STRING , STRING ) ; 
ID ( STRING , ID ) ;  
ID ( STRING , ID ) ;  

 
ID ( STRING , ID ) ;  
ID ( STRING , ID ) ;  
} 

static void ID ( void * ID , char * ID ) 
{ 
ID * ID = ID ( ID , STRING ) ; 

if ( ID == ID ) 
ID ( ID , STRING , ID ) ; 

ID ( ID ) ; 
ID ( ID , ID , ID , ID ) ; 
ID ( ID ) ; 
ID ( ID ) ; 
} 

 
static unsigned long ID ( ID * ID , int ID ) 
{ 
unsigned long ID = INTEGER ; 

if ( ID ( ID -> ID , STRING ) == INTEGER ) 
{ 
 
unsigned long ID = ID ( ( ID * ) ID ( ID ( ID ( ID ) ) ) , INTEGER ) ; 

 
unsigned long ID = ID ( ( ID * ) ID ( ID ( ID ) ) , ID ) ; 

 
if ( ID ) 
ID ( STRING , ID + INTEGER ) ; 

 
ID ( ( ID * ) ID ( ID ( ID ( ID ) ) ) , ID ) ; 

ID = ID + ID + INTEGER ; 
} 
else if ( ID ( ID -> ID , STRING ) == INTEGER ) 
{ 
 
unsigned long ID = ID ( ( ID * ) ID ( ID ( ID ( ID ) ) ) , INTEGER ) ; 

 
unsigned long ID = ID ( ( ID * ) ID ( ID ( ID ) ) , ID ) ; 

 
if ( ID ) 
ID ( STRING , ID + INTEGER ) ; 

 
ID ( ( ID * ) ID ( ID ( ID ( ID ) ) ) , ID ) ; 

 
if ( ID ) 
ID ( STRING , ID + ID + INTEGER ) ; 

ID = ID + ID + INTEGER ; 
} 
else 
{  
void * ID ; 
int ID = ID ( ID -> ID , STRING ) == INTEGER ; 
 

 
if ( ID ) 
{ 
ID ++ ; 

if ( ID ) 
ID ( STRING ) ; 
} 

for ( ID = ID ( ID ) ; ID != ID ; ID = ID ( ID ) ) 
ID += ID ( ( ID * ) ID ( ID ) , ID ) ; 

if ( ID ) 
{ 
ID ++ ; 

if ( ID ) 
ID ( STRING ) ; 
else 
ID ( STRING , ID -> ID ) ; 
} 
} 

 
if ( ID ) 
ID ( STRING , ID ) ; 
 

return ID ; 
} 

static ID ID ( ID * ID , int ID ) 
{ 
 
void * ID ; 

ID ID , ID , ID ; 

ID * ID = ID ; 
ID * ID = ID ; 

if ( ID ( ID ) != ID ) 
{ 
ID = ( ID * ) ID ( ID ( ID ) ) ; 

if ( ID ( ID ( ID ) ) != ID ) 
ID = ( ID * ) ID ( ID ( ID ( ID ) ) ) ; 
} 

ID . ID = ID ;  

if ( ID == ID )  
return ID ; 

if ( ID ( & ID , ID -> ID ) ) 
ID = ID ( ID , ID ) ; 

if ( ID ( & ID , ID -> ID ) ) 
ID = ID ( ID , ID ) ; 

 
ID ( STRING , ID -> ID ) ; 
if ( ID -> ID != ID ) 
ID ( STRING , ID -> ID ) ; 

ID ( STRING , ID ? STRING : STRING ) ; 
ID ( STRING , ID == ID ? STRING : ID -> ID ) ; 
if ( ID != ID ) 
if ( ID -> ID != ID ) 
ID ( STRING , ID -> ID ) ; 
ID ( STRING , ID == ID ? STRING : ID -> ID , ID == ID ? ID : ID -> ID ) ; 
if ( ID != ID ) 
if ( ID -> ID != ID ) 
ID ( STRING , ID -> ID ) ; 
ID ( STRING ) ; 
 

if ( ID ( & ID , ID -> ID ) && ( ID . ID != ID . ID ) ) 
ID ( ID , STRING , ID -> ID ) ; 

switch ( ID -> ID ) 
{ 
 
case INTEGER  : 
for ( ID = ID ( ID ) ; ID != ID ; ID = ID ( ID ) ) 
ID = ID ( ( ID * ) ID ( ID ) , ID ) ; 
break ; 

case ID  :  
ID = ID ( ID , ID ) ; 

ID . ID = ID ; 

if ( ID . ID != ID ) 
ID ( STRING ) ; 
else 
ID = ID ( ID , ID && ID . ID ) ; 
break ; 

case ID  :  
ID = ID ( ID , ID ) ; 

ID . ID = ID ; 

if ( ID . ID != ID ) 
ID ( STRING ) ; 
else 
while ( ID && ID . ID ) 
{ 
ID = ID ( ID , ID && ID . ID ) ; 
ID = ID ( ID , ID ) ; 
} 
break ; 

 
case ID  :  
ID . ID = ID ; 
ID . ID = ( char * ) ( ID -> ID ) ; 
break ; 

case ID :  
ID = ID ( ID , ID ) ; 
break ; 

case ID :  
ID . ID = ID ; 
ID . ID = ID -> ID . ID ; 
break ; 

case ID :  
ID . ID = ID ; 
ID . ID = ( float ) ( ID -> ID . ID ) ; 
break ; 

} 

 
if ( ID && ID ( & ID , ID -> ID ) ) 
ID ( ID , ID ) ; 
else if ( ID && ID ( & ID , ID -> ID ) ) 
{ 
ID = ID ( ID , ID ) ; 
ID ( ID , ID ) ; 
ID = ID ; 
} 
 
ID ( STRING ) ; 
ID ( ID ) ; 
ID ( STRING ) ; 
 

return ID ; 
} 

void ID ( void * ID ) 
{ 
ID * ID = ( ID * ) ID ( ID ( ID ( ID ( ID ) ) ) ) ; 
ID ID ; 

ID = ( ID * ) ID ( ID ( ID ( ID ) ) ) ; 
ID ( ID , STRING ) ; 


ID ( & ID , 
ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 


ID  , 
ID  , 
ID  , 
ID  , 
ID  , 
ID  , 
ID ) ; 

ID ( & ID , 
ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 
ID  , 
ID  , 
ID  , 

ID  , 
ID ) ; 

ID ( & ID , 
ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 
ID  , 
ID  , 

ID  , 

ID  , 
ID  , 
ID  , 
ID  , 
ID  , 
ID  , 
ID ) ; 

ID ( & ID , 
ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 
ID ) ; 

ID ( & ID , 
ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 

ID  , 
ID ) ; 

if ( ID ( ID ) == ID ) 
ID ( ID , STRING ) ; 

 

ID = ID ( ID , INTEGER ) ; 
} 


void ID ( void ) 
{ 
if ( ID ( ) != INTEGER ) 
{ 
ID ( STRING ) ; 
ID ( ID , STRING , ID ( ) == INTEGER ? STRING : STRING , ID ) ; 
} 
} 

 
 
 
 
 
 
 
 
 
 
 
 

 

 
 

 
 
 
 

 

 

char * ID ( int ID ) 
{ 
switch ( ID ) 
{ 
case ID : 
return STRING ; 
case ID : 
return STRING ; 
case ID : 
return STRING ; 
case ID : 
return STRING ; 
case ID : 
return STRING ; 
case ID : 
return STRING ; 
case ID : 
return STRING ; 
case ID : 
return STRING ; 
case ID : 
return STRING ; 
default : 
return STRING ; 
} 
} 

void ID ( ID * ID , ID * ID ) 
{ 
if ( ID ( ID -> ID . ID ) ) 
{ 
ID ( STRING , ID ( ID ) ) ; 
ID ( ID -> ID . ID , INTEGER ) ; 
ID ( STRING ) ; 
ID ( & ID -> ID . ID , ID , INTEGER ) ; 
ID ( STRING , 
ID ( ID -> ID . ID ) ? STRING : STRING , 
ID ( & ID -> ID , ID ( ID ) ) ? STRING : STRING 
) ; 
} 
else 
{ 
ID ( STRING , ID ( ID ) , ID -> ID . ID -> ID -> ID ) ; 
ID ( & ID -> ID . ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
} 

} 

static void ID ( ID * ID , int ID , unsigned ID ) 
{ 
if ( ID == INTEGER ) 
ID ( STRING ) ; 
else if ( ID > INTEGER ) 
{ 
unsigned ID = ID ( ID -> ID [ ID ] . ID ) ; 

ID ( STRING , ID ( & ID -> ID , ID ) ? STRING : STRING , ID ) ; 
} 
else 
{ 
if ( ID < ID -> ID ) 
ID ( STRING , - ID ) ; 
else 
ID ( STRING , - ID ) ; 
} 
} 

typedef struct ID 
{ 
ID * ID ; 
ID * ID ; 
} ID ; 

typedef struct ID 
{ 
ID ID ; 
unsigned ID ; 
} ID ; 

static void * ID ; 
static unsigned ID ; 

unsigned ID ( ID * ID , ID * ID ) 
{ 
ID ID ; 
ID * ID ; 

 
ID ( STRING ) ; 
ID ( ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
ID ( ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
 

ID . ID = ID ; 
ID . ID = ID ; 
ID = ( ID * ) ID ( ID , & ID , ID ) ; 

if ( ID == ID )  
{ 
ID * ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID * ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 

ID ( ID , ID ) ; 
ID ( ID , ID ) ; 

ID . ID = ID ; 
ID . ID = ID ; 

ID = ( ID * ) ID ( ID , & ID , sizeof ( ID ) , sizeof ( ID ) ) ; 
ID -> ID = ID ; 
ID += ID ( ID ) ; 
ID += ID ( ID ) ; 
ID += INTEGER ;  
 
ID ( STRING ) ; 
ID ( ID , ID ) ; 
ID ( STRING ) ; 
 
} 
 
else 
ID ( STRING ) ; 
 

return ID -> ID ; 
} 

 
typedef enum ID {  ID , 
 ID , 
 ID , 
 ID , 
 ID , 
 ID , 
 ID , 
 ID , 
 ID , 
 ID 
} ID ; 

static int ID [ ID ] = { STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING } ; 

static void ID ( ID * ID , ID * ID , ID * ID , unsigned ID , ID * ID , ID * ID , ID * ID , int ID ) 
{ 
unsigned ID = ID ( ID ) ; 
unsigned ID = ID ( ID ) ; 

* ID = ID ; 

if ( ID + ID == INTEGER )  
* ID = ID ; 
else if ( ID + ID == INTEGER )  
* ID = ID ; 
else if ( ID > INTEGER && ID > INTEGER )  
* ID = ID ; 
else 
{ 
unsigned * ID = ID ( & ID -> ID . ID -> ID ) ; 
unsigned ID = ID ( & ID -> ID . ID -> ID ) ; 
unsigned ID = INTEGER ; 
unsigned ID = INTEGER ; 
ID * ID = ID -> ID ; 
void * ID = ID -> ID -> ID ; 
int ID ; 

if ( ID ( ID ) == ID ) 
ID ( ID ) ; 

if ( ID ( ID ) == ID ) 
ID ( ID ) ; 

 
 

 
for ( ID = INTEGER ; ID < ID ; ID ++ ) 
if ( ID ( ID ( ID [ ID ] ) ) && 
ID ( & ID -> ID , ID [ ID ] ) && 
ID ( & ( ID ( ID [ ID ] ) -> ID . ID ) , ID ) ) 
{ 
ID ++ ; 

if ( ID ( ID ( ID [ ID ] ) ) ) 
ID ++ ; 
} 

if ( ID > INTEGER ) 
* ID = ID ; 

 

 

 
 
{ 
unsigned * ID = ( unsigned * ) ID ( ID , sizeof ( unsigned ) ) ; 
ID * * ID = ( ID * * ) ID ( ID , sizeof ( ID * ) ) ; 
ID * * ID = ( ID * * ) ID ( ID , sizeof ( ID * ) ) ; 
ID * ID = ( ID * ) ID ( ID , sizeof ( ID ) ) ; 
ID * ID = ( ID * ) ID ( ID , sizeof ( ID ) ) ; 
int ID = INTEGER ; 
unsigned ID = INTEGER ; 
unsigned ID ; 
int ID = INTEGER ; 

for ( ID = INTEGER ; ID < ID ; ID ++ ) 
{ 
ID * ID = ID ( ID [ ID ] ) ; 
ID * ID = ID ( ID [ ID ] ) ; 

if ( ID ( ID ) ) 
ID [ ID ] = INTEGER ; 
else if ( ID ( ID ) == INTEGER ) 
ID [ ID ] = INTEGER ; 
else 
ID [ ID ] = ID - INTEGER ; 

if ( ID ( ID ) ) 
{ 
ID * ID = ID ( ID ) ; 

ID [ ID ] = ID ( ID ) ; 

if ( ID != ID ) 
{ 
ID [ ID ] = ID -> ID ; 

if ( ID [ ID ] -> ID == ID ) 
ID [ ID ] = ID ; 
} 

ID ( & ID [ ID ] , ID ) ; 
ID ( & ID [ ID ] , ID ) ; 
} 
} 

while ( ID ) 
{ 
int ID , ID ; 

ID = INTEGER ; 

for ( ID = INTEGER ; ID < ID ; ID ++ ) 
{ 
if ( ID ( ID ( ID [ ID ] ) ) ) 
for ( ID = INTEGER ; ID < ID ; ID ++ ) 
if ( ID ( ID ( ID [ ID ] ) ) && ! ID ( ID ( ID [ ID ] ) ) ) 
if ( ID [ ID ] == ID [ ID ] ) 
{ 
if ( ID ( & ID [ ID ] , ID ) ) 
ID ( & ID [ ID ] , & ( ID ( ID [ ID ] ) -> ID . ID ) ) ; 

if ( ID ( & ID [ ID ] , & ( ID ( ID [ ID ] ) -> ID . ID ) ) ) 
if ( ID [ ID ] > ID [ ID ] + INTEGER ) 
{ 
ID [ ID ] = ID [ ID ] + INTEGER ; 
ID = INTEGER ; 
} 
} 
} 
} 

 
for ( ID = INTEGER ; ID < ID ; ID ++ ) 
if ( ID ( ID ( ID [ ID ] ) ) && 
ID ( & ID -> ID , ID [ ID ] ) && 
ID ( & ( ID ( ID [ ID ] ) -> ID . ID ) , ID ) ) 
{ 
if ( ID [ ID ] == INTEGER ) 
{ 
ID ++ ; 
ID = ID ; 
} 
} 

 
for ( ID = INTEGER ; ID < ID ; ID ++ ) 
if ( ID ( ID ( ID [ ID ] ) ) ) 
{ 
if ( ID != ID ) 
if ( ID ( & ID [ ID ] , ID ) ) 
ID = INTEGER ; 
} 

if ( ! ID && ID < INTEGER ) 
{ 
unsigned * ID = ID ( ID ) ; 
unsigned * ID = ID ; 

* ID = ID ; 
if ( ID ) 
{ 
ID ( STRING , ID ( ID ) ) ; 
ID ( ID ( ID -> ID -> ID , ID ) ) ; 
ID ( STRING , ID ( ID ( ID [ ID ] ) ) ) ; 
ID ( ID , ID ( ID [ ID ] ) ) ; 
} 

while ( * ID != ID ) 
{ 
if ( ID ) 
ID ( STRING , ID ( ID [ * ID ] . ID ) ) ; 

if ( ID [ * ID ] . ID != ID ( ID [ ID ] ) ) 
{ 
if ( ID ) 
ID ( STRING ) ; 
ID ( ID , * ID ) ; 
} 
else 
if ( ID ) 
ID ( STRING ) ; 

ID ++ ; 
} 

ID ( ID ) ; 
} 
else if ( ID ) 
{ 
 
ID ( STRING , ID ( ID ) ) ; 
ID ( ID ( ID -> ID -> ID , ID ) ) ; 
ID ( STRING , 
ID , 
ID , 
ID == INTEGER ? STRING : STRING , 
ID , 
ID == INTEGER ? STRING : STRING ) ; 


for ( ID = INTEGER ; ID < ID ; ID ++ ) 
{ 
if ( ID != ID ) 
if ( ID [ ID ] == ID - INTEGER ) 
ID ( STRING ) ; 
else 
ID ( STRING , ID [ ID ] ) ; 

 
if ( ID [ ID ] != ID ) 
{ 
ID ( ID [ ID ] ) ; 
ID ( STRING ) ; 

ID ( STRING ) ; 
ID ( & ID [ ID ] , ID , INTEGER ) ; 
ID ( STRING ) ; 

if ( ID [ ID ] != ID ) 
{ 
ID ( ID [ ID ] ) ; 
ID ( STRING ) ; 
ID ( & ID [ ID ] , ID , INTEGER ) ; 
ID ( STRING ) ; 
} 
else 
ID ( STRING ) ; 
} 
else 
ID ( STRING ) ; 
 
ID ( ID , ID ( ID [ ID ] ) ) ; 
} 

ID ( STRING , ID == INTEGER ? STRING : STRING , ID , ID == INTEGER ? STRING : STRING ) ; 

if ( ID == INTEGER ) 
ID ( ID , ID ( ID [ ID ] ) ) ; 

for ( ID = INTEGER ; ID < ID ; ID ++ ) 
if ( ID ( ID ( ID [ ID ] ) ) ) 
{ 
if ( ID != ID ) 
if ( ID ( & ID [ ID ] , ID ) ) 
{ 
ID ( ID ( ID -> ID -> ID , ID ) ) ; 
ID ( STRING ) ; 
ID ( ID , ID ( ID [ ID ] ) ) ; 
} 
} 
} 

for ( ID = INTEGER ; ID < ID ; ID ++ ) 
{ 
ID ( & ID [ ID ] ) ; 
ID ( & ID [ ID ] ) ; 
} 

ID ( ID ) ; 
ID ( ID ) ; 
ID ( ID ) ; 
ID ( ID ) ; 
ID ( ID ) ; 
} 
 
ID ( ID ) ; 
} 

} 

ID * ID ( ID * ID , int ID ) 
{ 
ID * ID ; 
ID * ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID * ID ; 
ID * ID ; 
ID ID = ID ; 
ID ID ; 

ID -> ID = ID ( ID -> ID ) ; 
ID -> ID = ID ( ID ) ; 
ID -> ID = ID ( ID -> ID ) + INTEGER ; 
ID -> ID = ID -> ID ; 

ID ( STRING , ID ( ID -> ID ) , ID -> ID * ( ID -> ID - INTEGER ) ) ; 

if ( ID -> ID * ID -> ID == INTEGER ) 
ID ( ID , STRING ) ; 
else 
{ 
ID ID = ID ( ID -> ID -> ID -> ID ) + INTEGER ; 
ID * ID = ( ID * ) ID ( ID , sizeof ( ID ) ) ; 
ID ID = ID ; 
ID ID = ID ; 

 
ID -> ID = ID ( ID ( ID -> ID ) ) ; 

 
ID = ( ID * ) ID ( ID -> ID -> ID ) ; 
ID = ( ID * ) ID ( ID ) ; 
while ( ID != ID ) 
{ 

ID = ( ID * ) ID ( ID ) ; 
if ( ID ( & ID -> ID -> ID , ID ( ID ) ) ) 
ID ( & ID -> ID , ID ( ID -> ID . ID ) ) ; 

ID = ( ID * ) ID ( ID ) ; 

if ( ID != ID ) 
if ( ID -> ID -> ID == ID )  
ID = ( ID * ) ID ( ID ) ; 
} 

 
for ( ID -> ID = INTEGER ; 
ID ( ID -> ID -> ID -> ID , ID -> ID ) -> ID == ID ; 
ID -> ID ++ ) 
; 

 
ID -> ID = INTEGER ; 
ID ( ID -> ID -> ID , ID , ID ) ;  
if ( ID ( & ID -> ID -> ID , ID ( ID ) ) ) 
if ( ID [ ID ( ID -> ID . ID ) ] == INTEGER ) 
{ 
ID [ ID ( ID -> ID . ID ) ] = ID -> ID ++ ; 
} 

 
{ 
unsigned ID ; 
for ( ID = INTEGER ; ID < ID ; ID ++ ) 
ID ( STRING , ID , ID [ ID ] ) ; 
} 
 

 
ID -> ID = ( ID * ) ID ( ID -> ID , sizeof ( ID ) ) ; 

ID ( ID -> ID -> ID , ID , ID ) ;  
if ( ID ( & ID -> ID -> ID , ID ( ID ) ) ) 
{ 
ID * ID ; 
int ID = ID [ ID ( ID -> ID . ID ) ] ; 

ID -> ID [ ID ] . ID = ID -> ID . ID ; 

if ( ID -> ID . ID -> ID == ID )  
ID = ID -> ID . ID ; 
else 
{ 
void * ID ; 
ID = ( ID * ) ID ( ID ( ID -> ID . ID ) ) ; 

ID -> ID [ ID ] . ID = INTEGER ; 
for ( ID = ID ( ID ) ; ID != ID && ID ( ID ) != ID -> ID . ID ; ID = ID ( ID ) ) 
ID -> ID [ ID ] . ID += INTEGER ; 
} 

ID -> ID [ ID ] . ID = ( ( ID * ) ID ( ID ( ID ) ) ) -> ID ; 
} 

ID = ID ( STRING , INTEGER , INTEGER , ID , ID , ID ) ; 
ID = INTEGER ;  

ID -> ID = ( int * * ) ID ( ID -> ID * ID -> ID , sizeof ( int * ) ) ; 

if ( ID ) 
ID -> ID = ( unsigned * ) ID ( ID -> ID * ID -> ID , sizeof ( unsigned ) ) ; 

for ( ID = ( ID * ) ID ( ID -> ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) )  
{ 
unsigned ID ; 

for ( ID = INTEGER ; ID < ID -> ID ; ID ++ )  
{ 
ID * ID ; 

 
ID ( & ID ) ; 
for ( ID = ( ID * ) ID ( ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) )  
if ( ID -> ID -> ID == ID ) 
ID ( & ID , ID ( ID ( ID ) ) ) ; 

 
ID ( & ID ) ; 
if ( ID ( & ID -> ID , ID ( ID ) ) && ! ID ( & ID , ID ( ID ) ) ) 
{ 
unsigned * ID , 
* ID = ID ( & ( ID -> ID . ID -> ID ) ) ; 

for ( ID = ID ; * ID != ID ; ID ++ ) 
if ( ID ( & ID -> ID -> ID , ID ( ( ( ID * ) ID ( ID -> ID -> ID ) [ * ID ] ) ) ) ) 
if ( ID ( & ( ( ID * ) ID ( ID -> ID -> ID ) [ * ID ] ) -> ID . ID , ID ) ) 
ID ( & ID , ID [ ID ( ( ( ID * ) ID ( ID -> ID -> ID ) [ * ID ] ) -> ID . ID ) ] ) ; 
} 

if ( ID ) 
ID ( ID -> ID , ID , ID , ID , & ID , & ID , & ID , INTEGER ) ; 

 
if ( ID ( & ID ) != INTEGER || ID ( & ID ) != INTEGER ) 
ID ( & ID , & ID ) ; 
} 
} 

 
ID -> ID = ID ; 
ID -> ID = ( int * ) ID ( ID , sizeof ( int ) ) ; 

for ( ID = ( ID * ) ID ( ID ( ID ) ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
{ 
unsigned * ID , 
* ID ; 
int * ID = ID -> ID + ID -> ID ; 

 
ID = ID ( ID -> ID . ID ) ; 
for ( ID = ID ; * ID != ID ; ID ++ ) 
* ID ++ = - ( * ID ) ; 
ID ( ID ) ; 

 
ID = ID ( ID -> ID . ID ) ; 
for ( ID = ID ; * ID != ID ; ID ++ ) 
* ID ++ = * ID ; 
ID ( ID ) ; 

 
* ID = INTEGER ; 
} 

 
for ( ID = ( ID * ) ID ( ID -> ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) )  
{ 
unsigned ID ; 

for ( ID = INTEGER ; ID < ID -> ID ; ID ++ )  
{ 
ID * ID ; 

 
ID ( & ID ) ; 
for ( ID = ( ID * ) ID ( ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) )  
if ( ID -> ID -> ID == ID ) 
ID ( & ID , ID ( ID ( ID ) ) ) ; 

 
ID ( & ID ) ; 
if ( ID ( & ID -> ID , ID ( ID ) ) && ! ID ( & ID , ID ( ID ) ) ) 
{ 
unsigned * ID , 
* ID = ID ( & ( ID -> ID . ID -> ID ) ) ; 

for ( ID = ID ; * ID != ID ; ID ++ ) 
if ( ID ( & ID -> ID -> ID , ID ( ( ( ID * ) ID ( ID -> ID -> ID ) [ * ID ] ) ) ) ) 
if ( ID ( & ( ( ID * ) ID ( ID -> ID -> ID ) [ * ID ] ) -> ID . ID , ID ) ) 
ID ( & ID , ID [ ID ( ( ( ID * ) ID ( ID -> ID -> ID ) [ * ID ] ) -> ID . ID ) ] ) ; 
} 

if ( ID ) 
ID ( ID -> ID , ID , ID , ID , & ID , & ID , & ID , INTEGER ) ; 

 
if ( ID ( & ID ) != INTEGER || ID ( & ID ) != INTEGER ) 
* ( ID -> ID + ( ID ( ID ) * ID -> ID ) + ID ) = ID -> ID + ID ( & ID , & ID ) ; 
else 
* ( ID -> ID + ( ID ( ID ) * ID -> ID ) + ID ) = ID -> ID ; 

if ( ID ) 
* ( ID -> ID + ( ID ( ID ) * ID -> ID ) + ID ) = ID ; 
} 
} 
 
 
{ 
unsigned ID ; 
unsigned ID = INTEGER ; 

ID ( STRING ) ; 

for ( ID = INTEGER ; ID < ID ; ID ++ ) 
{ 
ID ( STRING , ID , ID -> ID [ ID ] ) ; 
if ( ID == INTEGER ) 
{ 
ID += ID -> ID [ ID ] ; 
ID ( STRING , ID ) ; 
} 
else 
{ 
ID ( ID -> ID [ ID ] , INTEGER ) ; 
ID -- ; 
} 
ID ( STRING ) ; 
} 

ID ( STRING ) ; 
for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
{ 
unsigned ID ; 

ID ( STRING , ID ) ; 
for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
ID ( STRING , * ( ID -> ID + ( ID * ID -> ID ) + ID ) ) ; 
ID ( STRING ) ; 
} 
} 
 

ID ( ID ) ; 
ID ( & ID ) ; 
ID ( & ID ) ; 
} 

ID ( & ID ) ; 

return ID ; 
} 

void ID ( ID * ID , ID * ID ) 
{ 
unsigned ID ; 
unsigned ID ; 
unsigned ID ; 
unsigned ID = ID -> ID -> ID -> ID -> ID ; 
int ID = INTEGER ; 
int * ID ; 

ID * ID = ID ( ) ; 

ID ( ID ) ; 

ID ( STRING STRING STRING , ID ( ID -> ID ) ) ; 
ID ( ) ; 
ID ( STRING , ID ) ; 

ID ( STRING ) ; 
ID ( ID -> ID -> ID , INTEGER , INTEGER ) ; 

ID ( STRING ) ; 
for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
{ 
ID ( STRING , 
ID ( ID -> ID [ ID ] . ID ) , 
ID -> ID [ ID ] . ID , 
ID -> ID [ ID ] . ID -> ID ) ; 

ID ( ID -> ID [ ID ] . ID , INTEGER ) ; 
ID ( STRING ) ; 
} 

ID ( STRING , ID -> ID ) ; 
ID ( STRING ) ; 
ID ( & ID -> ID , ID , INTEGER ) ; 
ID ( STRING ) ; 

 
ID ( STRING ) ; 
for ( ID = ID ; ID < ID -> ID ; ID ++ ) 
{ 
if ( ID == ID -> ID ) 
ID ( STRING ) ; 
if ( ID != ID ) 
ID ( STRING , ID ) ; 
} 
ID ( STRING ) ; 

 
ID ( STRING ) ; 
for ( ID = ID ; ID < ID -> ID ; ID ++ ) 
{ 
if ( ID == ID -> ID ) 
ID ( STRING ) ; 
if ( ID != ID ) 
{ 
char ID [ INTEGER ] = { INTEGER } ; 
char * ID = ID ( ID -> ID -> ID -> ID , ID ) -> ID ; 

ID ( ID , ID , INTEGER ) ; 

ID ( STRING , ID ) ; 
} 
} 
ID ( STRING ) ; 

 
ID ( STRING ) ; 
for ( ID = ID ; ID < ID -> ID ; ID ++ ) 
{ 
if ( ID == ID -> ID ) 
ID ( STRING ) ; 
if ( ID != ID ) 
ID ( STRING ) ; 
} 
ID ( STRING ) ; 


for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
{ 
ID ( STRING , ID ) ; 
for ( ID = ID ; ID < ID -> ID ; ID ++ ) 
{ 
ID = ID ( ID , ID , ID ) ; 

if ( ID == ID -> ID ) 
ID ( STRING ) ; 

if ( ID != ID ) 
if ( ! ( * ID == INTEGER || * ( ID + INTEGER ) == INTEGER ) ) 
ID ( STRING , ID ++ ) ; 
else 
ID ( ID , * ID , ID ) ; 
} 
ID ( STRING ) ; 
} 

ID ( STRING ) ; 

if ( ID <= INTEGER ) 
ID ( STRING ) ; 
else 
{ 
ID = INTEGER ; 
for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
{ 
for ( ID = ID ; ID < ID -> ID ; ID ++ ) 
{ 
ID = ID ( ID , ID , ID ) ; 

if ( ID != ID ) 
if ( ! ( * ID == INTEGER || * ( ID + INTEGER ) == INTEGER ) ) 
{ 
ID ( STRING , ID ++ ) ; 

while ( * ID != INTEGER ) 
ID ( ID , * ID ++ , ID ) ; 

ID ( STRING ) ; 
} 
} 
} 
} 
ID ( ID ) ; 
} 

 
static int ID ; 
static char ID [ ID ] ; 
static int ID ; 

void ID ( ID * ID ) 
{ 
while ( ID ( ID ) && ID != ID && ID != STRING && ID != STRING ) 
ID = ID ( ID ) ; 
} 

void ID ( ID * ID ) 
{ 
while ( ID != ID && ID != STRING && ID != STRING ) 
ID = ID ( ID ) ; 

ID = ID ( ID ) ; 

ID ( ID ) ; 
} 

void ID ( ID * ID ) 
{ 
while ( ID != ID && ID != STRING ) 
ID = ID ( ID ) ; 

ID = ID ( ID ) ; 

ID ( ID ) ; 
} 

void ID ( ID * ID ) 
{ 
char * ID = ID ; 

ID ( ID ) ; 

while ( ID - ID < ID - INTEGER && ! ID ( ID ) && ID != ID ) 
{ 
* ID ++ = ( char ) ID ; 
ID = ID ( ID ) ; 
} 

* ID = INTEGER ; 

ID ( ID ) ; 
} 

void ID ( ID * ID ) 
{ 
int ID = INTEGER ; 

ID = INTEGER ; 

while ( ID == STRING ) 
{ 
ID ^= INTEGER ; 
ID = ID ( ID ) ; 
} 

ID ( ID ) ; 

while ( ID ( ID ) ) 
{ 
ID = ID * INTEGER + ID - STRING ; 
ID = ID ( ID ) ; 
} 

if ( ID ) 
ID *= - INTEGER ; 

ID ( ID ) ; 
} 


void ID ( ID * ID , ID * ID ) 
{ 
int * ID = ( int * ) ID ( ID ( ID -> ID -> ID -> ID -> ID ) + INTEGER , sizeof ( int ) ) ; 
int * ID = ( int * ) ID ( INTEGER , sizeof ( int ) ) ; 

ID = ID ( ID ) ; 
while ( ID ( ID , STRING ) != INTEGER && ID != ID ) 
{ 
ID ( ID ) ; 

ID ( ID ) ; 
} 

ID ( ID ) ; 
ID ( ID ) ; 
ID ( ID ) ; 

while ( INTEGER ) 
{ 
int ID ; 
int ID ; 

ID ( ID ) ; 
ID = ID ; 
if ( ID == INTEGER )  
break ; 

ID ( ID ) ; 
ID = INTEGER ; 

while ( ID != STRING && ID != ID ) 
{ 
int ID = INTEGER ; 
int * ID ; 

while ( ID ( ID ) || ID == STRING || ID == STRING || ID == STRING || ID == STRING || ID == STRING ) 
{ 
if ( ID == STRING || ID == STRING || ID == STRING || ID == STRING ) 
ID = ID ( ID ) ;  

ID ( ID ) ; 

ID [ ID ++ ] = ID ; 
} 

ID ( ID ) ; 

if ( ID > INTEGER ) 
{ 
ID = ( int * ) ID ( ID + INTEGER , sizeof ( int ) ) ; 
ID ( ID , ID , ID * sizeof ( int ) ) ; 
* ( ID -> ID + ( ID * ID -> ID ) + ID ) = ID ; 
} 
else 
* ( ID -> ID + ( ID * ID -> ID ) + ID ) = ID ; 

ID ++ ; 
} 

ID ( ID ) ; 
} 

ID ( ID ) ; 
} 

void ID ( ID * ID , ID * ID , int ID ) 
{ 
unsigned ID ; 
unsigned ID ; 
unsigned ID ; 
int ID ; 
int ID ; 
int * ID ; 
ID * ID = ID -> ID -> ID ; 
ID * ID = ID -> ID ; 
ID * ID ; 
unsigned ID = INTEGER ; 

ID * ID = ID ( ) ; 

ID ( ID -> ID ) ; 

ID ( ID ) ; 

ID ( STRING STRING STRING , ID ( ID -> ID ) ) ; 
ID ( ) ; 
ID ( STRING , ID ) ; 

if ( ! ID ) 
{ 
ID ( STRING ) ; 
for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
{ 
ID ( STRING , ID ) ; 
ID ( ID ( ID -> ID -> ID -> ID , ID ) ) ; 
} 

ID ( STRING ) ; 
if ( ID ( ID -> ID -> ID ) == ID ) 
ID ( ID -> ID -> ID ) ; 

ID = ID ( ID -> ID -> ID ) ; 

for ( ID = INTEGER ; ID < ID ; ID ++ ) 
{ 
ID * ID = ( ID * ) ID ( ID -> ID -> ID ) [ ID ] ; 

if ( ID != ID && ID ( ID ) ) 
{ 
ID ( STRING , ID ( ID ) ) ; 
ID ( ID , INTEGER ) ; 
ID ( STRING , ID ( ID ) ? STRING : STRING ) ; 
} 
} 

ID ( STRING ) ; 
ID ( ID -> ID , ID , ID ) ;  
ID ( ID , ID ) ; 

ID ( STRING ) ; 
ID ( ID -> ID , ID , ID ) ;  
{ 
ID ( STRING , ID ( ID ) ) ; 
ID ( & ID -> ID . ID -> ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
} 
} 

ID ( STRING ) ; 
for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
{ 
ID ( STRING , 
ID , 
ID -> ID [ ID ] . ID , 
ID -> ID [ ID ] . ID -> ID , 
ID ( ID -> ID [ ID ] . ID ) ) ; 

ID ( ID -> ID [ ID ] . ID , INTEGER ) ; 
ID ( STRING ) ; 
} 

ID ( STRING , ID -> ID ) ; 

ID ( STRING ) ; 
ID ( & ID -> ID , ID , INTEGER ) ; 
ID ( STRING ) ; 

ID ( STRING ) ; 
for ( ID = ID ; ID < ID -> ID ; ID ++ ) 
ID ( STRING , ID ) ; 

ID ( STRING ) ; 

for ( ID = ID ; ID < ID -> ID ; ID ++ ) 
{ 
ID * ID = ID ( ID -> ID -> ID -> ID , ID ) ; 

ID ( STRING ) ; 
ID ( ID ) ; 
if ( ID == INTEGER && ID -> ID != ID ) 
ID = ID ; 
} 

if ( ! ID ) 
ID = ID -> ID ; 

ID ( STRING ) ; 

for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
{ 
ID ( STRING , ID ) ; 
for ( ID = ID ; ID < ID ; ID ++ ) 
{ 
int ID = INTEGER ; 
ID = ID ( ID , ID , ID ) ; 

if ( ID -> ID != ID ) 
ID ( STRING , ID [ ( * ( ID -> ID + ( ID * ID -> ID ) + ID ) ) ] ) ; 
else 
ID ( STRING ) ; 

while ( * ID != INTEGER ) 
{ 
if ( ID ) 
ID = INTEGER ; 
else 
ID ( STRING ) ; 

ID ( STRING , * ID ++ ) ; 
} 
} 
ID ( STRING ) ; 
} 

if ( ID -> ID != ID ) 
{ 
ID ( STRING ) ; 
for ( ID = ID ; ID < ID ; ID ++ ) 
ID ( STRING , ID ) ; 

ID ( STRING ) ; 

for ( ID = ID ; ID < ID ; ID ++ ) 
{ 
ID ( STRING ) ; 
ID ( ID ( ID -> ID -> ID -> ID , ID ) ) ; 
} 

ID ( STRING ) ; 

for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
{ 
ID ( STRING , ID ) ; 
for ( ID = ID ; ID < ID ; ID ++ ) 
ID ( STRING , ( * ( ID -> ID + ( ID * ID -> ID ) + ID ) ) ) ; 
ID ( STRING ) ; 
} 
} 

ID ( ID ) ; 
} 

static char * ID ; 
static ID ; 
static char * ID ; 
static int ID = INTEGER ; 

static void ID ( char * ID , ID * ID ) 
{ 
ID = INTEGER ; 
ID = ID ; 

ID = ID ( STRING ) -> ID -> ID ; 

if ( * ID != INTEGER ) 
ID = ID ( ID -> ID , ID , ID ) -> ID ; 

ID ( STRING , * ID == INTEGER ? STRING : ID , ID ) ; 
} 

static int ID ( ID * ID ) 
{ 
ID * ID , 
* ID ; 
int ID = INTEGER ; 

if ( ! ID ( * ID ) && * ID != INTEGER ) 
{ 
while ( ! ID ( * ID ) && * ID != INTEGER ) 
ID ++ ; 
if ( ID != INTEGER ) 
{ 
if ( * ID == INTEGER ) 
return ID ; 
else 
return ID ; 
} 
} 

while ( ! ID ( * ID ) && * ID != INTEGER ) 
ID ++ ; 

if ( * ID == INTEGER ) 
{ 
 
ID ( STRING ) ; 
 
return ID ; 
} 

for ( ID = ( ID * ) ID ( ID ( ID -> ID -> ID -> ID ) ) ; 
ID != ID ; 
ID = ( ID * ) ID ( ID ) ) 
if ( ID -> ID == ID ) 
{ 
int ID = ID ( ID -> ID ) ; 

if ( ID ( ID -> ID , ID , ID ) == INTEGER && ID > ID ) 
{ 
ID = ID ; 
ID = ID ; 
} 
} 

if ( ID > INTEGER ) 
{ 
 
ID ( STRING , ID -> ID , ID -> ID ) ; 
 
ID += ID ; 
return ID -> ID ; 
} 
else 
{ 
 
ID ( STRING ) ; 
 
return ID ; 
} 
} 

ID * ID ( ID * ID , char * ID ) 
{ 
 
unsigned ID = INTEGER ; 
unsigned ID = INTEGER ; 
unsigned ID = INTEGER ; 
 
int * ID = ( int * ) ID ( INTEGER ) ; 
int * ID = ID ; 
int ID ; 
ID * ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 

ID -> ID = ID ; 

ID ( ID , STRING , ID ) ; 

ID ( ID , ID -> ID -> ID ) ; 

ID ( ID ) ; 

* ++ ID = INTEGER ; 

while ( INTEGER ) 
{ 
int * ID = * ( ID -> ID + ( * ID * ID -> ID ) + ID ) ; 

if ( * ID == INTEGER ) 
{ 
ID ( ID , STRING ) ; 
ID ( ID ) ; 
return ( ID ) ; 
} 

 
{ 
int * ID ; 

ID ( STRING , * ( ID + INTEGER ) ) ; 
for ( ID = ID + INTEGER ; ID <= ID ; ID += INTEGER ) 
ID ( STRING , * ID , ID ( ID -> ID -> ID , * ID ) -> ID , * ( ID + INTEGER ) ) ; 
ID ( STRING , * ID ) ; 
} 
 

if ( * ID < INTEGER )  
{ 
* ++ ID = ID ; 
* ++ ID = - * ID ; 
 
ID ( STRING , ID - ID ) ; 
ID ++ ; 
if ( ID - ID > ID ) 
ID = ID - ID ; 
 
ID ( ID ) ; 
}  
else 
{ 
ID * ID = & ( ID -> ID [ * ID ] ) ; 
unsigned ID = ID ( ID -> ID ) ; 
unsigned ID = ID -> ID -> ID ; 
int ID ; 

if ( ID ( & ID -> ID , ID ) ) 
{ 
ID ( ID , STRING ) ; 
 
ID ( STRING , ID , ID , ID ) ; 
 
ID -> ID = INTEGER ; 
ID ( ID ) ; 
return ( ID ) ; 
} 

ID -= ID -> ID * INTEGER ; 
ID = - * ( * ( ID -> ID + ( * ID * ID -> ID ) + ID ) ) ;  
 
ID ( STRING , ID , ID -> ID * INTEGER , * ID , ID ) ; 
 
* ++ ID = ID ; 
* ++ ID = ID ; 
 
ID ( STRING , ID -> ID , ID - ID ) ; 
ID ++ ; 
if ( ID - ID > ID ) 
ID = ID - ID ; 
 
} 
} 
} 

enum ID 
{ 
ID , ID , ID , ID , ID 
} ; 

typedef struct ID 
{ 
struct ID * ID ; 
struct ID * ID ; 
} ID ; 

typedef struct ID 
{ 
unsigned ID ; 
enum ID ID ; 
struct ID * ID ; 
unsigned ID ; 
unsigned ID ; 
} ID ; 

typedef struct ID 
{ 
unsigned ID ; 
unsigned ID ; 
} ID ; 

static ID * ID = ID ; 
static ID * ID = ID ; 
static ID * ID = ID ; 
static int ID ; 

void ID ( ID * ID , void * ID ) 
{ 
ID * ID ; 
ID * ID ; 
ID * ID = ID ( ) ; 
unsigned ID = INTEGER ; 
unsigned ID = INTEGER ; 
unsigned ID = INTEGER ; 
unsigned ID = INTEGER ; 
unsigned ID = INTEGER ; 
ID * ID = ID ; 
ID * ID = ID ; 

ID ( & ID ) ; 
ID ( & ID ) ; 

ID ( ID ) ; 

for ( ID = ( ID * ) ID ( ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
{ 
if ( ID < ID -> ID ) 
ID = ID -> ID ; 


switch ( ID -> ID ) 
{ 
case ID : 
ID ( ID , ID -> ID ) ; 
ID ++ ; 
break ; 

case ID : 
ID ( ID , ID -> ID ) ; 
ID ++ ; 
break ; 

case ID : 
ID ( ID , ID -> ID ) ; 
ID ++ ; 
break ; 
} 

for ( ID = ( ID * ) ID ( ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
{ 
ID ++ ; 

ID ( ID , ID -> ID ) ; 
} 
} 

ID = ( ID + INTEGER ) / INTEGER ; 

ID ( STRING , 
ID , ID == INTEGER ? STRING : STRING , 
ID , ID == INTEGER ? STRING : STRING , 
ID , ID == INTEGER ? STRING : STRING , 
ID , ID == INTEGER ? STRING : STRING , 
ID - INTEGER , ID - INTEGER == INTEGER ? STRING : STRING ) ; 

ID ( STRING , ID ) ; 

ID ( STRING ) ; 
ID ( ID ) ; 
ID ( STRING , ID ( ID ) ) ; 

ID ( STRING ) ; 
ID ( ID ) ; 
ID ( STRING , ID ( ID ) ) ; 

ID ( STRING ) ; 
ID ( ID ) ; 
ID ( STRING , ID ( ID ) ) ; 
ID ( STRING , ID ( ID ) ) ; 

ID ( STRING ) ; 
ID ( ID ) ; 
ID ( STRING , ID ( ID ) ) ; 
ID ( STRING , ID ( ID ) ) ; 

ID ( STRING ) ; 
ID ( ID ) ; 
ID ( STRING , ID ( ID ) ) ; 
ID ( STRING , ID ( ID ) ) ; 

ID ( & ID ) ; 
ID ( & ID ) ; 
ID ( & ID ) ; 
ID ( & ID ) ; 
ID ( & ID ) ; 

ID ( ID ) ; 
} 

static ID * ID ; 

void ID ( const void * ID ) 
{ 
ID ( STRING , ID ) ;  
} 

void ID ( const void * ID ) 
{ 
ID * ID = ( ID * ) ID ; 

ID ( STRING , ID -> ID ) ; 

switch ( ID -> ID ) 
{ 
case ID : 
ID ( STRING ) ; 
break ; 
case ID : 
ID ( STRING ) ; 
break ; 
case ID : 
ID ( STRING , ID -> ID , ID -> ID ) ; 
break ; 
case ID : 
case ID : 
ID ( STRING , ID ( ID -> ID -> ID -> ID -> ID , ID -> ID ) -> ID , ID -> ID ) ; 
break ; 
default : 
ID ( STRING ) ; 
break ; 
} 
} 

void ID ( const void * ID ) 
{ 
ID * ID = ( ID * ) ID ; 

if ( ID -> ID != INTEGER ) 
{ 
ID ( STRING ) ; 
ID ( ID ( ID -> ID -> ID -> ID -> ID , ID -> ID ) ) ; 
ID ( STRING , ID -> ID ) ; 
} 
} 

void ID ( ID * ID , ID * ID ) 
{ 
ID * ID = ID ( ) ; 

ID ( ID ) ; 
ID = ID ; 
ID ( ID -> ID , ID , ID , ID ) ; 
ID ( ID ) ; 
} 

 

 
ID ( ID , ID , ID , ID , ID )  
{  
ID ( STRING , ID , ID ( ID -> ID -> ID -> ID , ID ) -> ID ) ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
 
ID ( ID , ID ) ;  
ID ( ID , ID ) ;  
 
if ( ++ ID == ID )  
ID = ID ;  
 
if ( ID == ID )  
ID ( ID , STRING ) ;  
 
if ( ID >= ID )  
{  
if ( ID < ID - ID )  
ID = ID - ID ;  
}  
else  
{  
if ( ID < ID - ( ID - ID ) )  
ID = ID - ( ID - ID ) ;  
}  
} 

ID * ID ( ID * ID , char * ID , int ID , int ID ) 
{ 
typedef struct ID 
{ 
ID * ID ; 
unsigned ID ; 
unsigned ID ; 
unsigned ID ; 
ID * ID ; 
} ID ; 

ID * ID ; 
ID * ID ; 
ID * ID ; 
ID * ID ; 

ID * * ID ;  
ID * * ID ;  
ID * * ID ;  
int ID ;  
int ID ;  
int ID ;  
int ID = INTEGER ; 
unsigned ID = ID -> ID ; 
unsigned ID = INTEGER ;  
ID * ID ;  


 
 
if ( ID == INTEGER ) 
ID = INTEGER ; 

ID = ID ( ID , sizeof ( ID ) ) ;  
ID = ID + ID ;  
ID = ID ;  
ID = ID ;  

ID ( STRING , ID , ID ? STRING : STRING , ID ) ; 
ID ( & ID -> ID , ID , INTEGER ) ; 
ID ( STRING ) ; 

 
ID = ( ID * * ) ID ( ID , sizeof ( ID * ) ) ; 
ID = ( ID * * ) ID ( ID , sizeof ( ID * ) ) ; 
ID = ( ID * * ) ID ( ID , sizeof ( ID * ) ) ; 

 
ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID -> ID = ID ; 
ID -> ID = ID ( STRING ) ; 
ID ( ID -> ID , ID ( sizeof ( ID ) , ID -> ID ) ) ; 
( ( ID * ) ID ( ID -> ID ) ) -> ID = ID ; 

 
ID [ ID -> ID ] = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
ID [ ID -> ID ] -> ID = ID -> ID ; 
ID [ ID -> ID ] -> ID = ID ; 
ID [ ID -> ID ] -> ID = ID ; 

 
ID ( sizeof ( ID ) , ID ( ID -> ID ) , ID [ ID -> ID ] ) ; 

 
ID ( ID , ID -> ID -> ID ) ; 
ID ( ID ) ; 

 
ID ( & ID ) ; 
ID ( & ID ) ; 
ID ( & ID ) ; 
ID = - INTEGER ; 

 
do 
{ 
 
 
for ( ID = ID - INTEGER ; ID > INTEGER ; ID -- ) 
if ( ID [ ID ] != ID ) 
{ 
int * ID = ID ( ID , ID , ID ) ; 

if ( * ID == INTEGER ) 
{ 
ID [ ID ] = ID ;  
ID ( STRING , ID , INTEGER ) ; 
} 
else 
{ 
while ( * ID < INTEGER )  
{ 
ID ++ ; 
ID ( STRING , ID , INTEGER ) ; 
} 

while ( * ID > INTEGER ) 
if ( ID ( & ID -> ID , ID ( ID -> ID [ * ID ] . ID ) ) ) 
{ 
ID = INTEGER ; 
ID ( STRING , ID ( ID -> ID [ * ID ] . ID ) , INTEGER ) ; 
ID ++ ; 
} 
else 
{ 
ID * ID = & ( ID -> ID [ * ID ] ) ; 
unsigned ID = ID -> ID * INTEGER ; 
unsigned ID = ID -> ID -> ID ; 

ID * ID = ID [ ID ] ; 
ID * ID ; 

ID ( STRING , ID ( ID -> ID [ * ID ] . ID ) , INTEGER ) ; 

for ( ID = ( ID * ) ID ( ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
{ 
ID ( ID , ID ) ; 
ID ( ID , ID , ID , ID , ID ) ; 
} 
ID ++ ; 
} 
} 
} 

 
while ( ID != ID ) 
{ 
int ID ; 
unsigned ID ; 
ID * ID ; 
int * ID ; 
unsigned ID = ID -> ID ; 
unsigned ID = ID -> ID ; 
unsigned ID = ID -> ID ; 
ID * ID = ID -> ID ; 
ID * ID = ( ID * ) ID ( ID ) ;  
ID * ID = ID -> ID ; 
ID * ID ; 
ID * ID ; 

ID ( STRING , ID , ID ) ; 
ID ( STRING , ID - ID , INTEGER ) ; 

 
if ( ++ ID == ID ) 
ID = ID ; 

 
while ( ID > INTEGER ) 
{ 
ID * ID ; 

ID -- ; 

ID = ( ID * ) ID ( ID ) ; 
ID -> ID ++ ; 
ID -> ID ++ ; 
ID = ( ID * ) ID ( ID ) ; 
ID ( STRING , ID , ID -> ID ) ; 

 
if ( ID != ID ) 
for ( ID = ( ID * ) ID ( ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
ID ( ID , ID , ID , ID , ID ) ; 
} 

ID ( STRING , ID -> ID , INTEGER ) ; 

 
ID = - * ( ID ( ID , ID -> ID , ID ) ) ; 
ID ( STRING , ID , INTEGER ) ; 
ID = ID [ ID ] ; 
if ( ID == ID ) 
{ 
ID ( STRING , ID , INTEGER ) ; 
ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
ID -> ID = ID ; 
ID -> ID = ID ; 
ID -> ID = ID ; 
ID [ ID ] = ID ; 

 
ID = INTEGER ; 
} 
else 
{  
void * ID ; 

for ( ID = ID ( ID ) ; ID != ID ; ID = ID ( ID ) ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 
void * ID ; 

for ( ID = ID ( ID ) ; ID != ID ; ID = ID ( ID ) ) 
if ( ID ( ID ) == ID ) 
goto ID ; 
} 

 
ID = INTEGER ; 
} 

 
 
 
ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
ID -> ID = ID ; 
ID -> ID = ID ; 
if ( ID -> ID == ID -> ID ) 
ID -> ID = ID -> ID ; 
else 
ID -> ID = ID -> ID - INTEGER ; 

ID ( sizeof ( ID ) , ID , ID ) ; 
ID = ( ID * ) ID ( sizeof ( ID ) , ID , ID ) ; 
 
ID = ( ID * ) ID ( sizeof ( ID ) , ID , ID ) ; 
 

 
ID = ID ( ID , ID , ID ) ; 

while ( * ID < INTEGER ) 
ID ++ ; 

while ( * ID > INTEGER ) 
if ( ID ( & ID -> ID , ID ( ID -> ID [ * ID ] . ID ) ) ) 
{ 
ID = INTEGER ; 
ID ( STRING , ID ( ID -> ID [ * ID ] . ID ) , INTEGER ) ; 
ID ++ ; 
} 
else 
{ 
ID * ID = & ( ID -> ID [ * ID ] ) ; 
unsigned ID = ID -> ID * INTEGER ; 
unsigned ID = ID -> ID -> ID ; 

 

ID ( STRING , ID ( ID -> ID [ * ID ] . ID ) , INTEGER ) ; 
if ( ! ( ID && 
ID -> ID == ID -> ID  && 
ID != INTEGER ) )  
if ( ID || ID != INTEGER ) 
{ 
ID ( ID , ID ) ; 
ID ( ID , ID , ID , ID , ID ) ; 
} 

ID ++ ;  
} 
ID : ; 

} 

 
 
ID ( ID , INTEGER , sizeof ( ID * ) * ID ) ;  
ID ( ID , INTEGER , sizeof ( ID * ) * ID ) ;  

 
for ( ID = INTEGER ; ID < ID ; ID ++ ) 
{ 
if ( ID [ ID ] != ID ) 
{ 
int * ID = ID ( ID , ID [ ID ] -> ID , ID ) ; 

while ( * ID < INTEGER ) 
{ 
ID * * ID = & ID [ - * ID ] ; 
ID * * ID = & ID [ - * ID ] ; 

if ( * ID == ID ) 
{ 
ID ( STRING , - * ID , INTEGER ) ; 

* ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
( * ID ) -> ID = - * ID ; 
( * ID ) -> ID = ID ; 
( * ID ) -> ID = ID + INTEGER ; 

* ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
( * ID ) -> ID = ID ; 
( * ID ) -> ID = ID ; 
( * ID ) -> ID = ID + INTEGER ; 

ID ( sizeof ( ID ) , * ID , * ID ) ; 
} 
ID ++ ; 
} 
} 
} 

if ( ID [ INTEGER ] != ID ) ID = INTEGER ; 

 
for ( ID = INTEGER , ID = INTEGER ; ID < ID ; ID ++ ) 
{ 
if ( ID [ ID ] != ID ) 
{ 
int * ID = ID ( ID , ID [ ID ] -> ID , ID ) ; 

if ( * ID < INTEGER ) 
{ 
ID ( STRING , - * ID , INTEGER ) ; 
ID = INTEGER ; 
ID ( sizeof ( ID ) , ID [ ID ] , ID [ - * ID ] ) ; 
} 
} 
ID [ ID ] = ID [ ID ] ; 
} 

 
ID ( STRING , ID , INTEGER ) ; 
ID ( ID ) ; 
ID += INTEGER ; 
} 
while ( ID ) ; 

if ( ID ) ID ( STRING ) ; else ID ( STRING ) ; 

 
ID ( ID , ID -> ID ) ; 

 
ID ( ID ) ; 
ID ( ID ) ; 
ID ( ID ) ; 

return ID ; 
} 

ID * ID ( ID * ID , char * ID , int ID , int ID ) 
{ 
typedef struct ID 
{ 
ID * ID ; 
unsigned ID ; 
unsigned ID ; 
unsigned ID ; 
ID * ID ; 
} ID ; 

ID * ID ; 
ID * ID ; 
ID * ID ; 
ID * ID ; 

ID * * ID ;  
ID * * ID ;  
int ID ;  
int ID ;  
int ID ;  
unsigned ID = ID -> ID ; 
unsigned ID = INTEGER ;  
ID * ID ;  
int ID = INTEGER ; 


 
 
if ( ID == INTEGER ) 
ID = INTEGER ; 

ID = ( ID * ) ID ( ID , sizeof ( ID ) ) ;  
ID = ID + ID ;  
ID = ID ;  
ID = ID ;  

ID ( STRING , ID , ID ? STRING : STRING , ID ) ; 
ID ( & ID -> ID , ID , INTEGER ) ; 
ID ( STRING ) ; 

 
ID = ( ID * * ) ID ( ID , sizeof ( ID * ) ) ; 
ID = ( ID * * ) ID ( ID , sizeof ( ID * ) ) ; 

 
ID = ( ID * ) ID ( INTEGER , sizeof ( ID ) ) ; 
ID -> ID = ID ; 
ID -> ID = ID ( STRING ) ; 
ID ( ID -> ID , ID ( sizeof ( ID ) , ID -> ID ) ) ; 
( ( ID * ) ID ( ID -> ID ) ) -> ID = ID ; 

 
ID [ ID -> ID ] = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
ID [ ID -> ID ] -> ID = ID -> ID ; 
ID [ ID -> ID ] -> ID = ID ; 
ID [ ID -> ID ] -> ID = ID ; 

 
ID ( sizeof ( ID ) , ID ( ID -> ID ) , ID [ ID -> ID ] ) ; 

 
ID ( ID , ID -> ID -> ID ) ; 
ID ( ID ) ; 

 
ID ( & ID ) ; 
ID ( & ID ) ; 
ID ( & ID ) ; 
ID = - INTEGER ; 

 
do 
{ 
 
 
for ( ID = ID - INTEGER ; ID > INTEGER ; ID -- ) 
if ( ID [ ID ] != ID ) 
{ 
int * ID = ID ( ID , ID , ID ) ; 

if ( * ID == INTEGER ) 
{ 
ID [ ID ] = ID ;  
ID ( STRING , ID , INTEGER ) ; 
} 
else 
{ 
while ( * ID < INTEGER )  
{ 
ID ++ ; 
ID ( STRING , ID , INTEGER ) ; 
} 

while ( * ID > INTEGER ) 
if ( ID ( & ID -> ID , ID ( ID -> ID [ * ID ] . ID ) ) ) 
{ 
 ID = INTEGER ; 
ID ( STRING , ID ( ID -> ID [ * ID ] . ID ) , INTEGER ) ; 
ID ++ ; 
} 
else 
{ 
ID * ID = & ( ID -> ID [ * ID ] ) ; 
unsigned ID = ID -> ID ; 
unsigned ID = ID -> ID -> ID ; 

ID * ID = ID [ ID ] ; 
ID * ID ; 

ID ( STRING , ID ( ID -> ID [ * ID ] . ID ) , INTEGER ) ; 

for ( ID = ( ID * ) ID ( ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
{ 
ID ( ID , ID ) ; 
ID ( ID , ID , ID , ID , ID ) ; 
} 
ID ++ ; 
} 
} 
} 

 
while ( ID != ID ) 
{ 
int ID ; 
unsigned ID ; 
ID * ID ; 
int * ID ; 
unsigned ID = ID -> ID ; 
unsigned ID = ID -> ID ; 
unsigned ID = ID -> ID ; 
ID * ID = ID -> ID ; 
ID * ID = ( ID * ) ID ( ID ) ;  
ID * ID = ID -> ID ; 
ID * ID ; 

ID ( STRING , ID , ID ) ; 
ID ( STRING , ID - ID , INTEGER ) ; 

 
if ( ++ ID == ID ) 
ID = ID ; 

 
while ( ID > INTEGER ) 
{ 
ID * ID ; 

ID -- ; 

ID = ( ID * ) ID ( ID ) ; 
if ( ID ( ID ) != ID )  
{ 
ID -> ID ++ ; 
ID -> ID ++ ; 
} 
ID = ( ID * ) ID ( ID ) ; 
ID ( STRING , ID , ID -> ID ) ; 

 
if ( ID != ID ) 
for ( ID = ( ID * ) ID ( ID ) ; ID != ID ; ID = ( ID * ) ID ( ID ) ) 
ID ( ID , ID , ID , ID , ID ) ; 
} 

ID ( STRING , ID -> ID , INTEGER ) ; 

 
ID = - * ( ID ( ID , ID -> ID , ID ) ) ; 
ID ( STRING , ID , INTEGER ) ; 
ID = ID [ ID ] ; 
if ( ID == ID ) 
{ 
ID ( STRING , ID , INTEGER ) ; 
ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
ID -> ID = ID ; 
ID -> ID = ID ; 
ID -> ID = ID ; 
ID [ ID ] = ID ; 

 
ID = INTEGER ; 
} 
else 
{  
void * ID ; 

for ( ID = ID ( ID ) ; ID != ID ; ID = ID ( ID ) ) 
if ( ID ( ID ) == ID ) 
goto ID ; 

 
ID = INTEGER ; 
} 

 
ID = ( ID * ) ID ( sizeof ( ID ) , ID , ID ) ; 
ID -> ID = ID ; 

 
ID = ID ( ID , ID , ID ) ; 

while ( * ID < INTEGER ) 
ID ++ ; 

while ( * ID > INTEGER ) 
if ( ID ( & ID -> ID , ID ( ID -> ID [ * ID ] . ID ) ) ) 
{ 
ID ( STRING , ID ( ID -> ID [ * ID ] . ID ) , INTEGER ) ; 
ID ++ ; 
} 
else 
{ 
ID * ID = & ( ID -> ID [ * ID ] ) ; 
unsigned ID = ID -> ID ; 
unsigned ID = ID -> ID -> ID ; 

 
ID ( STRING , ID ( ID -> ID [ * ID ] . ID ) , INTEGER ) ; 
if ( ! ( ID && 
ID -> ID == ID -> ID  && 
ID != INTEGER ) )  
if ( ID || ID != INTEGER ) 
{ 
ID ( ID , ID ) ; 
ID ( ID , ID , ID , ID , ID ) ;  
} 

ID ++ ;  
} 
ID : ; 

} 

 

 
ID ( ID , INTEGER , sizeof ( ID * ) * ID ) ;  

 
for ( ID = INTEGER , ID = INTEGER ; ID < ID ; ID ++ ) 
{ 
if ( ID [ ID ] != ID ) 
{ 
int * ID = ID ( ID , ID [ ID ] -> ID , ID ) ; 

while ( * ID < INTEGER ) 
{ 
ID * * ID = & ID [ - * ID ] ; 

if ( * ID == ID ) 
{ 
ID ( STRING , - * ID , ID ) ; 

ID = INTEGER ; 

* ID = ( ID * ) ID ( sizeof ( ID ) , ID -> ID ) ; 
( * ID ) -> ID = - * ID ; 
( * ID ) -> ID = ID ; 
( * ID ) -> ID = ID + INTEGER ; 
} 

( ( ID * ) ID ( sizeof ( ID ) , ID [ ID ] , * ID ) ) -> ID = ID ; 

ID ++ ; 
} 
} 
} 

if ( ID ) 
{ 
 
for ( ID = INTEGER ; ID < ID ; ID ++ ) 
ID [ ID ] = ID [ ID ] ; 

 
ID ( STRING , ID , INTEGER ) ; 
ID ( ID ) ; 
ID += INTEGER ; 
} 
} 
while ( ID ) ; 

 
ID ( STRING , ID , INTEGER ) ; 

if ( ID != ID ) 
{ 
ID ( STRING , INTEGER , INTEGER ) ; 
} 
else 
{ 
for ( ID = INTEGER ; ID < ID ; ID ++ ) 
{ 
int * ID ; 

ID = ID ( ID , ID , ID ) ; 

while ( * ID > INTEGER ) 
{ 
if ( ID ( & ID -> ID , ID ( ID -> ID [ * ID ] . ID ) ) ) 
{ 
ID = INTEGER ; 
ID ( STRING , ID ( ID -> ID [ * ID ] . ID ) , ID ) ; 
} 
ID ++ ; 
} 
} 
} 

if ( ID ) ID ( STRING ) ; else ID ( STRING ) ; 

 
ID ( ID , ID -> ID ) ; 

 
ID ( ID ) ; 
ID ( ID ) ; 

return ID ; 
}$

ansi_c_rdp_full
$
(****************************************************************************
*
* ART release 0.10 by Adrian Johnstone (a.johnstone@rhul.ac.uk) 1 August 2010
*
* ansi_c.gtb - an ANSI standard C grammar
*
* This file may be freely distributed. Please mail improvements to the author.
*
* Provenance: this grammar is a transcription of the rules in section A13 of
* 'The C Programming Language' by Brian W Kernighan and Dennis M Ritchie,
* second edition 1988 (Prentice Hall, ISBN 0-13-110362-8). 
*
* Optional productions have been expanded and a set of lexical rules created.
*
*****************************************************************************)
translation_unit ::= external_declaration |
                     translation_unit external_declaration;

external_declaration ::= function_definition |
                         declaration ;

function_definition ::= declaration_specifiers declarator declaration_list compound_statement |
                                               declarator declaration_list compound_statement |
                        declaration_specifiers declarator                  compound_statement |
                                               declarator                  compound_statement ;

declaration ::= declaration_specifiers init_declarator_list ';' |
                declaration_specifiers                      ';' ;

declaration_list ::= declaration |
                     declaration_list declaration; 

declaration_specifiers ::= storage_class_specifier declaration_specifiers |
                           storage_class_specifier                        |

                           type_specifier declaration_specifiers |
                           type_specifier                        |

                           type_qualifier declaration_specifiers |
                           type_qualifier                        ;

storage_class_specifier ::= 'auto' |
                            'register' |
                            'static' |
                            'extern' |
                            'typedef';

type_specifier ::= 'void' |
                   'char' |
                   'short' |
                   'int' |
                   'long' |
                   'float' |
                   'double' |
                   'signed' |
                   'unsigned' |
                   struct_or_union_specifier |
                   enum_specifier |
                   typedef_name;

type_qualifier ::= 'const' |
                   'volatile';

struct_or_union_specifier ::= struct_or_union identifier '{' struct_declaration_list '}' |
                              struct_or_union            '{' struct_declaration_list '}' |
                              struct_or_union identifier;
                             
struct_or_union ::= 'struct' |
                    'union';

struct_declaration_list ::= struct_declaration |
                            struct_declaration_list struct_declaration ;

init_declarator_list ::= init_declarator |
                         init_declarator_list ',' init_declarator ; 

init_declarator ::= declarator  |
                    declarator '=' initializer ; 

struct_declaration ::= specifier_qualifier_list struct_declarator_list ';';

specifier_qualifier_list ::= type_specifier specifier_qualifier_list |
                             type_specifier                          |
                             type_qualifier specifier_qualifier_list |
                             type_qualifier                          ;

struct_declarator_list ::= struct_declarator |
                           struct_declarator_list ',' struct_declarator; 

struct_declarator ::= declarator |
                      declarator ':' constant_expression |
                                 ':' constant_expression ; 

enum_specifier ::= 'enum' identifier '{' enumerator_list '}' |
                   'enum'            '{' enumerator_list '}' |
                   'enum' identifier ;

enumerator_list ::= enumerator |
                    enumerator_list ',' enumerator; 

enumerator ::= identifier |
               identifier '=' constant_expression ; 

declarator ::= pointer direct_declarator |
                       direct_declarator ;

direct_declarator ::= identifier |
                      '(' declarator ')' |
                      direct_declarator  '[' constant_expression ']' |
                      direct_declarator  '['                     ']' |
                      direct_declarator  '(' parameter_type_list ')'  |
                      direct_declarator  '(' identifier_list ')' |
                      direct_declarator  '('                 ')' ;

pointer ::= '*' type_qualifier_list |
            '*'                     |
            '*' type_qualifier_list pointer |
            '*'                     pointer ; 

type_qualifier_list ::= type_qualifier |
                        type_qualifier_list type_qualifier; 

parameter_type_list ::= parameter_list |
                        parameter_list ',' '...'; 

parameter_list ::= parameter_declaration |
                   parameter_list ',' parameter_declaration ; 

parameter_declaration ::= declaration_specifiers declarator |
                          declaration_specifiers abstract_declarator |
                          declaration_specifiers                     ; 

identifier_list ::= identifier |
                    identifier_list ',' identifier; 

initializer ::= assignment_expression |
                '{' initializer_list '}' |
                '{' initializer_list ','  '}'; 

initializer_list ::= initializer  |
                     initializer_list ',' initializer; 

type_name ::= specifier_qualifier_list abstract_declarator |
              specifier_qualifier_list                     ;

abstract_declarator ::= pointer |
                        pointer direct_abstract_declarator |
                                direct_abstract_declarator ; 

 
direct_abstract_declarator ::= '(' abstract_declarator ')' |
                                direct_abstract_declarator '[' constant_expression ']' |
                                                           '[' constant_expression ']' |
                                direct_abstract_declarator '['                     ']' |
                                                           '['                     ']' |

                                direct_abstract_declarator '(' parameter_type_list ')' |
                                                           '(' parameter_type_list ')' |
                                direct_abstract_declarator '('                     ')' |
                                                           '('                     ')' ;

statement ::= labeled_statement |
              expression_statement |
              compound_statement |
              selection_statement |
              iteration_statement |
              jump_statement ;

labeled_statement ::= identifier ':' statement |
                      'case' constant_expression ':' statement |
                      'default' ':' statement;

expression_statement ::= expression ';' |
                                    ';' ;

compound_statement ::= '{' declaration_list statement_list '}' |
                       '{'                  statement_list '}' |
                       '{' declaration_list                '}' |
                       '{'                                 '}' ;


statement_list ::= statement |
                   statement_list statement; 

selection_statement ::= 'if' '(' expression ')' statement |
                        'if' '(' expression ')' statement 'else' statement  |
                        'switch' '(' expression ')' statement;

iteration_statement ::= 'while' '(' expression ')' statement |
                        'do' statement 'while' '(' expression ')' |
                        'for' '(' expression ';' expression ';' expression ')' statement |
                        'for' '(' expression ';' expression ';'            ')' statement |
                        'for' '(' expression ';'            ';' expression ')' statement |
                        'for' '(' expression ';'            ';'            ')' statement |
                        'for' '('            ';' expression ';' expression ')' statement |
                        'for' '('            ';' expression ';'            ')' statement |
                        'for' '('            ';'            ';' expression ')' statement |
                        'for' '('            ';'            ';'            ')' statement ;

jump_statement ::= 'goto' identifier ';' |
                   'continue' ';' |
                   'break' ';' |
                   'return' expression ';' |
                   'return'            ';';

expression ::= assignment_expression |
               expression  ',' assignment_expression ; 

assignment_expression ::= conditional_expression  |
                          unary_expression  assignment_operator assignment_expression ;

assignment_operator ::= '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=';

conditional_expression ::= logical_or_expression |
                           logical_or_expression '?' expression ':' conditional_expression ; 

constant_expression ::= conditional_expression ;

logical_or_expression ::= logical_and_expression |
                          logical_or_expression '||' logical_and_expression; 

logical_and_expression ::= inclusive_or_expression |
                           logical_and_expression '&&' inclusive_or_expression; 

inclusive_or_expression ::= exclusive_or_expression |
                            inclusive_or_expression '|' exclusive_or_expression; 

exclusive_or_expression ::= and_expression |
                            exclusive_or_expression '^' and_expression; 

and_expression ::= equality_expression |
                   and_expression '&' equality_expression ; 

equality_expression ::= relational_expression |
                        equality_expression  '==' relational_expression  |
                        equality_expression '!=' relational_expression; 

relational_expression ::= shift_expression |
                          relational_expression '<' shift_expression |
                          relational_expression '>'  shift_expression |
                          relational_expression '<='  shift_expression |
                          relational_expression '>=' shift_expression  ;

shift_expression ::= additive_expression |
                     shift_expression '<<' additive_expression  |
                     shift_expression '>>' additive_expression; 

additive_expression ::= multiplicative_expression |
                        additive_expression '+' multiplicative_expression |
                        additive_expression '-' multiplicative_expression;

multiplicative_expression ::= cast_expression |
                              multiplicative_expression '*' cast_expression |
                              multiplicative_expression '/' cast_expression |
                              multiplicative_expression '%' cast_expression ; 

cast_expression ::= unary_expression |
                    '(' type_name ')' cast_expression ;

unary_expression ::= postfix_expression |
                     '++' unary_expression |
                     '--' unary_expression |
                     unary_operator cast_expression |
                     'sizeof' unary_expression |
                     'sizeof' '(' type_name')' ;

unary_operator ::= '&' | '*' | '+' | '-' | '~' | '!';

postfix_expression ::= primary_expression |
                       postfix_expression '[' expression ']' |
                       postfix_expression '(' argument_expression_list ')' |
                       postfix_expression '('                          ')' |
                       postfix_expression '.' identifier |
                       postfix_expression '->' identifier |
                       postfix_expression '++' |
                       postfix_expression '--';  

primary_expression ::= identifier |
                       constant |
                       string |
                       '(' expression ')';

argument_expression_list ::= assignment_expression |
                             argument_expression_list ',' assignment_expression ;

constant ::= integer_constant |
             (*character_constant |*) 
             floating_constant |
             enumeration_constant ;

(* Lexical producions *)
identifier ::= 'ID' ;
string ::= 'STRING' | string 'STRING' ;
integer_constant ::= 'INTEGER' ;
character_constant ::= 'STRING' ;
floating_constant ::= 'REAL' ;

(* Hack 1: the original grammar has a constant alternative for enumeration
   constants: this looks redundant because primary_expresion has an identifier
   alternative. We use a different keyword to avoid conflicts.
*)
enumeration_constant ::= 'ENUM_ID'; 

(* Hack 2: a declaration starting with a typedef-defined type identifier
   cannot be disambiguated unless the lexer returns a different token
   for such identifiers. Here we use a different keyword *)
typedef_name ::= 'ID' 
                 | 'TYPE_ID';
$
accept
$char 
* ID ,  
* * ID ,  
* ID = STRING ;  

int 
ID = INTEGER ,  
ID = INTEGER ,  
ID ,  
ID ;  

int ID = INTEGER ;  

char * ID = STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING 
STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING STRING 
STRING STRING STRING STRING STRING STRING STRING ; 

ID * ID = ID ; 
void * ID = ID ; 
ID * ID = ID ; 
void * ID = ID ; 
ID * ID = ID ; 
void * ID = ID ; 
ID * ID = ID ; 
void * ID = ID ; 

 
static int ID = INTEGER ; 

ID * ID ; 

ID * ID ( char * ID , ID * ID ) 
{ 
if ( ID ) 
{ 
ID * ID = ( ID * ) ID ( sizeof ( ID ) , ID ) ; 
if ( ID != ID ) 
ID -> ID = ID ; 
else 
ID ( ID , ID , sizeof ( ID ) ) ; 
return ID ; 
} 
else 
return ID ; 
} 

ID * ID ( char * ID , ID * ID ) 
{ 
if ( ID ) 
{ 
ID = ( ID * ) ID ( sizeof ( ID ) , ID ) ; 
if ( ID != ID ) 
ID -> ID = ID ; 
else 
ID ( ID , ID , sizeof ( ID ) ) ; 

( ( ID * ) ID ( sizeof ( ID ) , ID , ID ) ) -> ID = INTEGER ; 
return ID ; 
} 
else 
return ID ; 
} 

ID * ID ( char * ID , ID * ID ) 
{ 
if ( ID ) 
{ 
ID * ID = ( ID * ) ID ( sizeof ( ID ) , sizeof ( ID ) , ID ) ; 
if ( ID != ID ) 
ID -> ID = ID ; 
else 
ID ( ID , ID , sizeof ( ID ) ) ; 

( ( ID * ) ID ( ID ) ) -> ID = INTEGER ; 

return ID ; 
} 
else 
return ID ; 
} 


 
static void ID ( void ) 
{ 
ID ( STRING , STRING , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , STRING , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , STRING , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , STRING , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
ID ( STRING , ID , ID  , ID ) ; 
} 

 

ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 
ID ID = ID ; 

 

static void ID ( void ) 
{ 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID  , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , 
ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID , 
ID , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID ) ; 
ID ( & ID , ID  , ID  , ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID ) ; 
ID ( & ID , ID , ID , ID , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID ) ; 
ID ( & ID , ID , ID  , ID  , ID  , ID  , 
ID  , ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID  , ID  , 
ID  , ID  , ID  , ID  , ID  , 
ID  , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID  , ID  , ID  , 
ID  , ID ) ; 
ID ( & ID , ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , ID , 
ID , ID , ID , ID , 
ID , ID , ID , ID , ID ) ; 
ID ( & ID , ID , ID ) ; 
} 

 
static char * ID ( ID * ID ) ; 
static char * ID ( ID * ID ) ; 
static void ID ( ID * ID ) ; 
static ID * ID ( ID * ID ) ; 
static ID * ID ( ID * ID ) ; 
static ID * ID ( ID * ID ) ; 
static ID * ID ( ID * ID ) ; 
static ID * ID ( ID * ID ) ; 
static ID * ID ( ID * ID ) ; 
static char * ID ( ID * ID ) ; 
void ID ( ID * ID ) ; 

 
static char * ID ( ID * ID ) 
{ 
char * ID ; 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
ID ( ID , & ID , & ID ) ; 
} 
return ID ; 
} 

static char * ID ( ID * ID ) 
{ 
char * ID ; 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
ID ( ID , & ID , & ID ) ; 
} 
return ID ; 
} 

static void ID ( ID * ID ) 
{ 
char * ID ; 
char * ID ; 
char * ID ; 
char * ID ; 
char * ID ; 
long int ID ; 
long int ID ; 
char * ID ; 
char * ID ; 
char * ID ; 
char * ID ; 
char * ID ; 
long int ID ; 
char * ID ; 
{ 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
if ( ID ( ID ) == ID )  
ID ( ID , STRING , ID ) ;  
else  
{  
ID ( ) ;  
ID ( ) ;  
}  
 
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID ( ID , ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID ( ID , ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID ( ID , ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID ( ID , ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
ID * ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID . ID ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID . ID ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID == INTEGER ) {  
ID = ( ID * ) ID ( sizeof ( ID ) ) ;  
ID -> ID = ID ;  
ID -> ID = ( unsigned ) ID ;  
ID -> ID = ( unsigned ) ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID = ID ;  
 
} 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
ID * ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID == INTEGER ) {  
ID = ( ID * ) ID ( sizeof ( ID ) ) ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID = ID ;  
 
} 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ; ID -> ID ++ ;  
} 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID . ID ; 
ID ( ) ; 
ID = ( unsigned ) ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID . ID ; 
ID ( ) ; 
ID = ( unsigned ) ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID . ID ; 
ID ( ) ; 
ID = ( unsigned ) ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID = INTEGER ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID . ID ; 
ID ( ) ; 
ID = ( unsigned ) ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID . ID ; 
ID ( ) ; 
ID = ( unsigned ) ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , & ID , ID ) ) 
{ 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID = INTEGER ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID = INTEGER ; ID = INTEGER ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID = INTEGER ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID = ID ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
if ( ID == INTEGER ) {  
ID = INTEGER ;  
} 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID = INTEGER ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID = INTEGER ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID = INTEGER ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID ( ID , STRING ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
ID ( ID ( STRING , ID ) ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID ( ID , STRING ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID ( ID , STRING ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID ( ID , STRING ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID ( ID , STRING ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID ( ID , STRING ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID ( ID , STRING ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
ID ( ID , & ID , & ID ) ; 
} 
} 

static ID * ID ( ID * ID ) 
{ 
ID * ID ; 
char * ID ; 
char * ID ; 
{ 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ;  
} 
} 
else 
ID ( ID , & ID , & ID ) ; 
ID ( ID , & ID , & ID ) ; 
} 
return ID ; 
} 

static ID * ID ( ID * ID ) 
{ 
ID * ID ; 
char * ID ; 
long int ID ; 
ID * ID ; 
long int ID ; 
char * ID ; 
{ 
int ID = ID ; 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ;  
ID -> ID = INTEGER ;  
ID -> ID ++ ;   
 
} 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID . ID ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ( unsigned ) ID ;  
} 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID ( STRING , ID , ID ++ ) , ID , ID ) ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID ++ ;  
ID -> ID = INTEGER ;  
ID -> ID = INTEGER ;  
 
} 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
if ( ID == INTEGER ) {  
ID ( ID , STRING ) ;  
} 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID . ID ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ;  
} 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = INTEGER ;   
} 
if ( ID ( ID , ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID . ID ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ;  
} 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
if ( ID == INTEGER ) {  
if ( ID -> ID == INTEGER ) ID -> ID = INTEGER ;  
if ( ID -> ID != INTEGER && ( ID -> ID < ID -> ID ) )  
ID ( ID , STRING ) ;  
 
} if ( ID == INTEGER ) {  
ID -> ID = ID ;  
} 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ( ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ;  
} 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID ( STRING , ID , ID ++ ) , ID , ID ) ;  
ID -> ID = ID ;  
ID -> ID = ID ; ID -> ID = INTEGER ;  
ID -> ID ++ ;  
ID -> ID = INTEGER ;  
ID -> ID = INTEGER ;  
 
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID ( STRING , ID , ID ++ ) , ID , ID ) ;  
ID -> ID = ID ;  
ID -> ID = ID ; ID -> ID = INTEGER ;  
ID -> ID ++ ;  
ID -> ID = INTEGER ;  
ID -> ID = INTEGER ;  
 
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID ( STRING , ID , ID ++ ) , ID , ID ) ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID ++ ;  
ID -> ID = INTEGER ;  
ID -> ID = INTEGER ;  
 
} 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
ID ( ID , & ID , & ID ) ; 
} 
return ID ; 
} 

static ID * ID ( ID * ID ) 
{ 
ID * ID ; 
char * ID ; 
long int ID ; 
double ID ; 
char * ID ; 
char * ID ; 
char * ID ; 
{ 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ;  
ID ( ID ) ;  
ID -> ID ++ ;   
ID -> ID = ID ;  
 
} if ( ID == INTEGER && ID -> ID ) { 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
ID * ID ; 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID . ID ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ( ID * ) ID ( sizeof ( ID ) , INTEGER ) ;  
ID -> ID = ID ;  
ID -> ID = ID -> ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
 
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID . ID ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ( ID * ) ID ( sizeof ( ID ) , INTEGER ) ;  
ID -> ID = ID ;  
ID -> ID = ID -> ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
 
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID == INTEGER ) {  
ID = ( ID * ) ID ( sizeof ( ID ) , INTEGER ) ;  
ID -> ID = ID ;  
ID -> ID = ID -> ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
 
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ( ID * ) ID ( sizeof ( ID ) , INTEGER ) ;  
ID -> ID = ID ;  
ID -> ID = ID -> ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
 
} 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
} 
if ( ! ID ( ID , & ID , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID == INTEGER ) {  
ID = ( ID * ) ID ( ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ( ID , ID , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID ( ID , STRING ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID ( ID , STRING ) ; 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
ID ( ID , STRING ) ; 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID == INTEGER ) {  
ID ( ID , STRING , ID ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID ( ID , STRING ) ;  
} 
} 
else 
if ( ID ( ID , ID , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID ( ID , STRING ) ;  
} 
} 
else 
ID ( ID , & ID , & ID ) ; 
ID ( ID , & ID , & ID ) ; 
} 
return ID ; 
} 

static ID * ID ( ID * ID ) 
{ 
ID * ID ; 
ID * ID ; 
{ 
ID * ID ; if ( ID == INTEGER ) {  
ID = ID = ( ID * ) ID ( sizeof ( ID ) , INTEGER ) ;  
} 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ( ID * ) ID ( sizeof ( ID ) , INTEGER ) ;  
ID = ID -> ID ;  
ID -> ID = ID ( ID ( STRING , ID , ID ++ ) , ID , ID ) ;  
ID -> ID -> ID ++ ;  
ID -> ID -> ID = ID ;  
 
} 
} 
if ( ID -> ID != ID  ) break ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ) ; 
} 
}  
if ( ID == INTEGER ) {  
ID = ID -> ID ;  
} 
ID ( ID , & ID , & ID ) ; 
} 
return ID ; 
} 

static ID * ID ( ID * ID ) 
{ 
ID * ID ; 
char * ID ; 
char * ID ; 
ID * ID ; 
{ 
unsigned ID ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
ID = ID ; ID = INTEGER ;  
ID ++ ;  
ID = ID ( ID , ID , ID == INTEGER ? ID : ID ) ;  
if ( ID == ID )  
{  
ID = ID ;  
ID -> ID ++ ;  
}  

if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID -> ID = INTEGER ; 
if ( ID ( ID , ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
ID * ID ; ID = STRING ; ID = INTEGER ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ++ ; 
} 
if ( ! ID ( ID , ID  , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
if ( ID == INTEGER ) {  
ID = ( ID * ) ID ( sizeof ( ID ) , INTEGER ) ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID = ID -> ID ;  
ID -> ID = ID ;  
 
} 
} 
if ( ! ID ( ID , ID , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID = STRING ; ID = INTEGER ; 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ++ ; 
} 
if ( ! ID ( ID , ID  , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
if ( ID == INTEGER ) {  
ID -> ID = ID ;  
} 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID -> ID = ID ;  
} 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
ID = INTEGER ;  
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID == INTEGER ) {  
ID ++ ;  
ID -> ID = ID ;  
ID -> ID = INTEGER ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
 
} 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
ID ( ID , & ID , & ID ) ; 
} 
return ID ; 
} 

static ID * ID ( ID * ID ) 
{ 
ID * ID ; 
ID * ID ; 
char * ID ; 
char * ID ; 
{ 
ID * ID ; int ID ; int ID ; if ( ID == INTEGER ) {  
ID = ID = ( ID * ) ID ( sizeof ( ID ) , INTEGER ) ;  
} 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID == INTEGER ) {  
ID = ID ; ID = ID ; ID = ID ;  
} 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID ( ID , & ID , ID ) ) 
{ 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID ( ID , & ID , ID ) ) 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = INTEGER ; 
} 
else 
if ( ID ( ID , & ID , ID ) ) 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ;  
} 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
} 
else 
if ( ID ( ID , & ID , ID ) ) 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
ID = INTEGER ; 
if ( ID == INTEGER ) {  
ID = ID -> ID ; ID = ID ;  
} 
if ( ID ( ID , ID  , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID ( ID , ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID ( ID , STRING ) ;  
} 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
ID = ID ( ID ( STRING , ID ) ) ; 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ;  
} 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
} 
else 
if ( ID ( ID , & ID , ID ) ) 
{ 
{  
while ( INTEGER ) 
{ 
ID ( ID , & ID , & ID ) ; 
{ 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ;  
} 
} 
else 
if ( ID ( ID , ID  , ID ) ) 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID ( ) ; 
if ( ID == INTEGER ) {  
ID = ID ;  
} 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
} 
break ;  
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
break ;  
} 
}  
if ( ID == INTEGER ) {  
ID -> ID = ( ID * ) ID ( sizeof ( ID ) , INTEGER ) ;  
ID = ID -> ID ;  
ID -> ID = ID ;  
ID -> ID = ID -> ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
ID -> ID = ID ;  
 
} 
} 
if ( ! ID ( ID , & ID , ID ) ) break ; 
} 
}  
if ( ID == INTEGER ) {  
ID = ID -> ID ;  
} 
ID ( ID , & ID , & ID ) ; 
} 
return ID ; 
} 

static char * ID ( ID * ID ) 
{ 
char * ID ; 
{ 
if ( ID ) ID ( ID , ID ) ; 
ID ( ID , ID  , & ID ) ; 
ID = ID -> ID ; 
ID ( ) ; 
ID ( ID , & ID , & ID ) ; 
} 
return ID ; 
} 

void ID ( ID * ID ) 
{ 
{ 
if ( ID ( ID , & ID , ID ) ) 
{  
while ( INTEGER ) 
{ 
{ 
if ( ID ( ID , ID , ID ) ) 
{ 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
if ( ID ( ID , & ID , ID ) ) 
{ 
ID ( ID ( STRING , ID ) ) ; 
} 
else 
ID ( ID , & ID , & ID ) ; 
} 
if ( ! ID ( ID , & ID , ID ) ) break ; 
} 
}  
else 
{ 
 
if ( ID ) { ID * ID = ID ( ID , ID ) ; ID -> ID = ID ; ID -> ID = ID ; } 
} 
if ( ID == INTEGER ) ID ( ID , STRING ) ; 
ID ( ID , & ID , & ID ) ; 
} 
} 

int ID ( int ID , char * ID [ ] ) 
{ 
ID ID , ID = ID ( ) ; 
int 
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  

ID = INTEGER ;  

unsigned long ID = INTEGER ;  

unsigned long ID = INTEGER ;  

char * ID = ID ;  

ID * ID = ( ID * ) ID ( STRING ) ;  
ID * ID ; 

ID ( STRING STRING STRING STRING ) ; 

ID ( STRING ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING , STRING , & ID ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 

ID = ID ( ID , ID ) ; 

 
for ( ID = INTEGER ; ID [ ID ] != ID ; ID ++ ) 
ID [ ID ] = ID ( ID [ ID ] , STRING ) ; 

if ( ID ) 
{ 
ID [ INTEGER ] = STRING ; 
ID = STRING ; 
ID [ INTEGER ] = ID ;  

} 
if ( ( ID = ID [ INTEGER ] ) == ID ) 
ID ( STRING ) ; 

if ( ID [ INTEGER ] != ID ) 
ID ( ID , STRING ) ; 
ID ( ID , INTEGER , INTEGER , ( int ) ID ) ; 
ID ( INTEGER , INTEGER , INTEGER , ID , ID ) ; 
if ( ID ) 
ID ( ) ; 
ID = ID ( STRING , INTEGER , INTEGER , ID , ID , ID ) ; 
ID = ID ( STRING , INTEGER , INTEGER , ID , ID , ID ) ; 
ID = ID ( STRING , INTEGER , INTEGER , ID , ID , ID ) ; 
ID = ID ( STRING , INTEGER , INTEGER , ID , ID , ID ) ; 
ID ( ) ; 
ID ( ) ; 
ID ( ) ; 
if ( ID ) 
ID ( STRING STRING STRING ) ; 
for ( ID = INTEGER ; ID <= ID ; ID ++ ) 
{ 
ID = ID == ID ; 
ID ( ID || ( ID && ID == ID ) ) ; 

for ( ID = INTEGER ; ( ID = ID [ ID ] ) != ID ; ID ++ ) 
{ 
if ( ID ( ID ) == ID ) 
ID ( STRING ) ; 

ID ( ) ; 
ID ( ) ; 

ID ( ID = ID ( STRING , ID ) ) ;  
if ( ID ( ) != INTEGER ) 
ID ( ID , STRING , ID ( ) == INTEGER ? STRING : STRING , ID ) ;  
ID ( ID , sizeof ( ID ) ) ; 
} 
} 

ID = ID [ INTEGER ] ;  

ID ( ID , ID ) ; 
if ( ID != ID ) 
{ 
ID * ID ; 

if ( * ID == STRING )  
ID = STRING ; 
ID = ID ( ( ID = ID ( ID , STRING ) ) , STRING ) ; 

if ( ID == ID ) 
ID ( ID , STRING , ID ) ; 

if ( ID ) 
ID ( ID , STRING , ID ) ; 

ID ( ID ) ; 
ID ( ID , ID , ID , ID ) ; 
ID ( ID ) ; 
ID ( ID ) ; 
} 

ID ( ID , ID ) ; 
if ( ID ) 
{ 
ID ( INTEGER ) ; 
ID ( ) ; 

} 
ID ( ) ; 
if ( ID ) 
{ 
ID = ID ( ) ; 
ID ( ID , STRING , ( ( double ) ( ID - ID ) ) / ID ) ; 
} 
return ID ; 
} 

 

 

extern void * ID , * ID , * ID ; 

void * ID ;  
extern char * ID ;  


int 
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID ,  
ID = INTEGER ,  
ID = INTEGER ;  

char 
* ID ;  

unsigned ID ;  
unsigned ID = ID ;  

ID * ID ; 

char 
* ID = STRING ,  
* ID = STRING ,  
* ID = ID ,  
* ID = ID ,  
* ID = ID ,  
* ID = ID ,  
* ID = STRING ,  
* ID = STRING ;  

unsigned 
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID = INTEGER ,  
ID ,  
ID = INTEGER ,  
ID = INTEGER ;  

unsigned long ID = INTEGER ;  
unsigned long ID = INTEGER ;  

ID 
* ID = ID ;  

ID 
* ID = ID ;  

ID 
* ID = ID ;  

ID 
* ID = ID ;  

ID 
ID ; 

void ID ( enum ID ID , char * ID , char * ID , char * ID ) 
{ 
ID * ID = ( ID * ) ID ( sizeof ( ID ) ) ; 

ID -> ID = ID ; 
ID -> ID = ID ; 
ID -> ID = ID ; 
ID -> ID = ID ; 
ID -> ID = ID ; 
ID = ID ; 
} 

ID * ID ( char * ID , ID ID , ID ID ) 
{ 
ID * ID ; 
void * ID ; 

 
if ( ID == ID ) 
ID = ID ; 
else if ( ID == ID || ID == ID ) 
ID = ID ; 
else ID = ID ; 

if ( ( ID = ( ID * ) ID ( ID , & ID , ID ) ) == ID ) 
{ 
if ( ID == ID && ID ) 
{ 
ID ( ID , STRING , ID ) ; 
ID ( ID ) ; 
} 
else 
{ 
if ( ID == ID ) 
ID ( ID , STRING , ID ) ; 
ID = ( ID * ) ID ( sizeof ( ID ) ) ; 
ID -> ID = ID ; 
ID ( ID , ID ) ; 
ID -> ID = ID ; 
ID -> ID = ID ; 
ID -> ID = ID -> ID = INTEGER ;  
ID -> ID = INTEGER ; 
ID ( & ID -> ID , ID ) ; 
ID -> ID = INTEGER ; 
ID -> ID = INTEGER ; 
switch ( ID ) 
{ 
case ID : 
ID -> ID = STRING ; 
break ; 
case ID : 
ID -> ID = STRING ; 
break ; 
case ID : 
case ID : 
ID -> ID = STRING ; 
ID -> ID = INTEGER ; 
break ; 
default : 
ID -> ID = STRING ; 
break ; 
} 
} 
} 
else 
if ( ID == ID ) 
ID ( ID , STRING , ID ) ; 

return ID ; 
} 

ID * ID ( char * ID , char * ID , int ID ) 
{ 
ID * ID ; 

ID ( ID ) ; 
ID ( ID ) ; 
ID = ID ( ID , ID , ID ) ; 
ID -> ID = ID ; 
ID -> ID = ID ; 
ID -> ID = STRING ; 
ID -> ID = INTEGER ; 
return ID ; 
} 


void ID ( void ) 
{ 
ID = ID ( ID , STRING ) ; 
ID = ID ( ID , STRING ) ; 
ID ( & ID , ID , ID , ID , ID ) ; 

ID ( ID , ID , ID , STRING ) ; 
ID ( ID , STRING , STRING , STRING ) ; 
ID ( ID , STRING , STRING , STRING ) ; 
ID ( ID , STRING , STRING , STRING ) ; 
ID ( ID , STRING , STRING , STRING ) ; 
ID ( ID , STRING , STRING , STRING ) ; 
ID ( ID , STRING , STRING , STRING ) ; 
ID ( ID , STRING , STRING , STRING ) ; 
ID ( ID , STRING , STRING , STRING ) ; 
ID ( ID , STRING , STRING , STRING ) ; 
ID ( ID , STRING , STRING , STRING ) ; 

ID ( STRING , ID , ID ) -> ID = ID ;  
ID ( STRING , ID , ID ) -> ID = ID ; 
ID ( STRING , ID , ID ) -> ID = ID ; 
ID ( ID , ID , ID ) -> ID = ID ; 
} 

static void ID ( void * ID ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 

while ( ID != ID ) 
{ 
if ( ID -> ID == ID || ID -> ID == ID ) 
{ 
ID -> ID = ID -> ID ; 
ID -> ID = ID ++ ; 
} 
ID = ( ID * ) ID ( ID ) ; 
} 

 
ID = ( ID * ) ID ( ID ) ; 
while ( ID != ID ) 
{ 
if ( ID -> ID == ID || ID -> ID == ID || 
ID -> ID == ID || ID -> ID == ID || 
ID -> ID == ID ) 
{ 
ID ( & ID -> ID , ID -> ID ) ; 
ID -> ID = ID ( & ID -> ID ) ; 
ID ( & ID -> ID , ID ) ; 
ID -> ID = ID ( & ID -> ID ) ; 

ID -> ID = INTEGER ; 
} 
else if ( ID -> ID == ID && ID -> ID != ID ) 
{ 
ID ( & ID -> ID , ID -> ID -> ID ) ; 
ID -> ID = ID ( & ID -> ID ) ; 
} 
ID = ( ID * ) ID ( ID ) ; 
} 
} 

static void ID ( void * ID ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 
char * ID = STRING ;  
int ID = INTEGER ; 

if ( ID ) 
ID ( ID , STRING ) ; 

while ( ID != ID )  
{ 
if ( ID -> ID == ID || ID -> ID == ID ) 
{ 
char * ID = ID , 
* ID = ID -> ID ; 

if ( ! ID ( ID ) )  
{ 
 
while ( * ID == * ID && * ID != INTEGER )  
{ 
ID ++ ; 
ID ++ ; 
} 

ID ++ ;  

 
 
while ( * ( ID ) != INTEGER )  
{ 
 
char * ID = ID -> ID , 
* ID = ID ;  

while ( ID != ID ) 
ID ( * ID ++ ) ;  
ID ( INTEGER ) ;  

if ( ID ) 
ID ( ID , STRING , ID ) ; 

ID = INTEGER ; 

ID ( ID , ID , ID ) ; 

ID ++ ; 
} 
} 

ID = ID -> ID ; 
} 
ID = ( ID * ) ID ( ID ) ; 
} 
if ( ID && ! ID ) 
ID ( ID , STRING ) ; 

} 

void ID ( char * ID , int ID ) 
{ 
void 
* ID = ID ( ID ) , 
* ID = ID ( ID ) ; 

ID * ID = ( ID * ) ID ( sizeof ( ID ) ) ; 

ID -> ID = STRING ; 
ID ( ID , ID ) ; 

ID ( ID , ID ) ;  
ID ( ID ) ;  
ID ( ID , ID ) ;  
ID ( ID ) ;  
ID ( ID ) ;  
ID ( ID ) ;  

ID ( ID , ID ) ;  
ID ( ID ) ;  

if ( ID )  
ID ( ID ) ; 

if ( ID ( ) > INTEGER ) 
{ 
if ( ID ) 
ID ( ID , STRING ) ; 
else 
ID ( ID , STRING ) ; 
} 

ID ( ID ( ID , STRING ) ) ;  

ID ( ID ( ID , STRING ) , ID ) ;  

if ( ID )  
ID ( ) ; 
} 

void * ID ( char * ID ) 
{ 
ID * ID ; 

ID ( ID ) ; 
ID = ID ( ID , ID , ID ) ; 
ID -> ID ++ ;  

return ID ; 
} 

 
 
 
 
 
 
 
 
 
 
 
 
 

static int ID ;  

void ID ( char * ID ) 
{ 
if ( ID ( ID , ID ) == INTEGER ) 
ID = INTEGER ;  
} 

void ID ( char * ID ) 
{ 
if ( ID == ID ) 
return ; 

if ( * ID == INTEGER ) 
ID ( ID , STRING ) ; 
 
{ 
int ID = INTEGER ; 

while ( * ID != INTEGER ) 
{ 
ID |= ! ID ( * ID ) ; 
ID ++ ; 
} 

if ( ID ) 
ID ( ID , STRING ) ; 
} 
} 

void ID ( char * ID ) 
{ 
ID ( ID ) ;  
if ( * ( ID + INTEGER ) != INTEGER ) 
ID ( ID , STRING ) ; 
} 

void ID ( char * ID ) 
{ 
ID ( ID ) ;  
if ( ! ( * ( ID + INTEGER ) == INTEGER || * ( ID + INTEGER ) == INTEGER ) ) 
ID ( ID , STRING ) ; 
} 

void ID ( char * ID ) 
{ 
if ( ( ID ( STRING , ID , INTEGER ) == INTEGER ) || 
( ID ( STRING , ID , INTEGER ) == INTEGER ) || 
( ID ( STRING , ID , INTEGER ) == INTEGER ) || 
( ID ( STRING , ID , INTEGER ) == INTEGER ) || 
( ID ( STRING , ID , INTEGER ) == INTEGER ) || 
( ID ( STRING , ID , INTEGER ) == INTEGER ) || 
( ID ( STRING , ID , INTEGER ) == INTEGER ) || 
( ID ( STRING , ID , INTEGER ) == INTEGER ) || 
( ID ( STRING , ID , INTEGER ) == INTEGER ) ) 
ID ( ID , STRING , ID ) ; 
} 

static void ID ( void * ID ) 
{ 
unsigned ID = INTEGER , 
ID = INTEGER , 
ID = INTEGER ; 

ID * ID = ( ID * ) ID ( ID ) ; 

while ( ID != ID ) 
{ 
if ( ID -> ID == ID ) 
ID ++ ; 
else if ( ID -> ID == ID ) 
ID ++ ; 
else 
ID ++ ; 

ID = ( ID * ) ID ( ID ) ; 
} 

if ( ID ) 
ID ( ID , STRING , 
ID , ID - ID + INTEGER , ID , ID ) ; 
} 

static void ID ( ID * ID ) 
{ 
if ( ID -> ID )  
{ 
ID ( ID , STRING , ID -> ID ) ;  
ID -> ID = INTEGER ; 
return ; 
} 

if ( ! ID -> ID )  
{ 
ID * ID = ID -> ID ;  

ID -> ID = INTEGER ;  

if ( ID -> ID == ID )  
{ 
ID -> ID = INTEGER ;  
while ( ID != ID && ID -> ID )  
{ 
if ( ! ID -> ID -> ID )  
ID ( ID -> ID ) ; 

ID ( & ID -> ID , & ID -> ID -> ID ) ;  
ID -> ID = ID -> ID -> ID ;  

ID = ID -> ID ; 
} 
} 
else 
while ( ID != ID )  
{ 
if ( ! ID -> ID -> ID )  
ID ( ID -> ID ) ; 

ID ( & ID -> ID , & ID -> ID -> ID ) ;  
ID -> ID |= ID -> ID -> ID ;  
ID = ID -> ID ; 
} 
ID -> ID = INTEGER ;  
ID -> ID = INTEGER ;  
 
ID -> ID = ID ( & ID -> ID ) ; 
} 
} 

 
static void ID ( ID * ID ) 
{ 
ID * ID = ID -> ID ;  

while ( ID != ID )  
{ 
ID * ID = ID ;  
unsigned ID = ID -> ID -> ID ; 

do  
{ 
ID = ID -> ID ; 
if ( ID == ID )  
ID ( & ID -> ID -> ID , & ID -> ID ) ; 
else 
ID ( & ID -> ID -> ID , & ID -> ID -> ID ) ; 
} 
while ( ID != ID && ID -> ID -> ID ) ; 

 
ID |= ( ( ID -> ID -> ID = 
ID ( & ID -> ID -> ID ) 
) != ID ) ; 

ID = ID -> ID ;  
} 
} 

 
static void ID ( ID * ID ) 
{ 
ID * ID = ID -> ID ;  

while ( ID != ID ) 
{ 
unsigned ID = ID -> ID -> ID ; 

ID ( & ID -> ID -> ID , & ID -> ID ) ; 

ID |= ( ( ID -> ID -> ID = 
ID ( & ID -> ID -> ID ) 
) != ID ) ; 
ID = ID -> ID ; 
} 
} 

static void ID ( void * ID ) 
{ 
ID * ID ; 
unsigned ID = INTEGER ; 

do 
{ 
ID ++ ; 
ID = INTEGER ; 
ID = ( ID * ) ID ( ID ) ; 
while ( ID != ID ) 
{ 
if ( ID -> ID == ID )  
ID ( ID ) ; 
else 
ID ( ID ) ; 
ID = ( ID * ) ID ( ID ) ; 
} 
} 
while ( ID ) ; 

if ( ID ) 
ID ( ID , STRING , ID , ID == INTEGER ? STRING : STRING ) ; 

} 

static int ID ( char * ID ) 
{ 
ID * ID = ( ID * ) ID ( ID , & ID , ID ) ; 

if ( ID != ID ) 
{ 
if ( ID -> ID == ID ) 
{ 
ID ( ID , STRING , ID ) ; 
return INTEGER ; 
} 
} 
return INTEGER ; 
} 

static int ID ( void ) 
{ 
int ID = INTEGER , 
ID = INTEGER ; 
char * ID [ ] = { ID , ID } ; 

while ( ID [ ID ] != ID ) 
ID |= ID ( ID [ ID ++ ] ) ; 

return ID ; 
} 

 
static int ID ( void * ID ) 
{ 
int ID = INTEGER ; 
ID * ID = ( ID * ) ID ( ID ) ; 

while ( ID != ID ) 
{ 
ID * ID = ID -> ID ; 
int ID = ID -> ID , 
ID = INTEGER ; 

if ( ID == ID && ID -> ID == INTEGER && ! ID -> ID ) 
ID ( ID , STRING , ID -> ID ) ; 

if ( ID == ID && ID == ID ) 
{ 
ID ( ID , STRING , ID -> ID ) ; 
ID = INTEGER ; 
} 

if ( ID == ID )  
{ 
while ( ID != ID ) 
{ 
if ( ID -> ID -> ID == ID )  
if ( ID -> ID == ID )  
ID -> ID -> ID = INTEGER ; 
else if ( ID -> ID -> ID -> ID == ID )  
ID -> ID -> ID -> ID = INTEGER ;  
else 
ID -> ID -> ID = INTEGER ;  

if ( ID -> ID -> ID != ID ) 
ID = INTEGER ; 
ID = ID -> ID ; 
} 
} 
else 
ID = INTEGER ; 

if ( ID ) 
{ 
if ( ID -> ID == ID ) 
{ 
ID ( ID , STRING , ID -> ID ) ; 
ID -> ID = INTEGER ; 
} 
else 
{ 
ID -> ID = INTEGER ; 
} 
ID = INTEGER ; 
} 
ID = ( ID * ) ID ( ID ) ; 
} 

 
ID = ( ID * ) ID ( ID ) ; 

while ( ID != ID ) 
{ 
if ( ID -> ID == ID && ID -> ID != ID ) 
if ( ID -> ID -> ID == ID && ID -> ID -> ID -> ID ) 
ID -> ID = INTEGER ; 
ID = ( ID * ) ID ( ID ) ; 
} 
return ID ; 
} 

static void ID ( void * ID ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 

while ( ID != ID ) 
{ 
ID ( ID ) ; 
ID = ( ID * ) ID ( ID ) ; 
} 
} 

 
static int ID ( void * ID ) 
{ 
int ID = INTEGER ; 
ID * ID = ( ID * ) ID ( ID ) ; 

while ( ID != ID ) 
{ 
if ( ID ( & ID , ID -> ID ) && ID -> ID != ID ) 
{ 
ID * ID = ID -> ID ; 

while ( ID != ID ) 
{ 

if ( ID -> ID == INTEGER && ID -> ID -> ID ) 
{ 
ID ( ID , STRING , ID -> ID ) ; 
ID ( STRING , ID -> ID -> ID ) ; 
ID ( ID -> ID , INTEGER ) ; 
ID ( STRING ) ; 
ID = INTEGER ; 
ID -> ID = INTEGER ; 
ID -> ID -> ID = INTEGER ; 
} 
ID = ID -> ID ; 
} 
} 
ID = ( ID * ) ID ( ID ) ; 
} 
return ID ; 
} 
static int ID ( void * ID ) 
{ 
int ID = INTEGER ; 
ID ID = ID ; 

ID * ID = ( ID * ) ID ( ID ) ; 

while ( ID != ID ) 
{ 
if ( ID ( & ID , ID -> ID ) && ID -> ID != ID ) 
{ 
ID * ID = ID -> ID ; 

while ( ID != ID ) 
{ 
ID * ID = ID -> ID ; 

while ( ID != ID ) 
{ 
 
if ( ID -> ID -> ID && ID -> ID -> ID ) 
{ 
ID ( ID , STRING , ID -> ID ) ; 
ID ( STRING , ID -> ID -> ID ) ; 
ID ( ID -> ID , INTEGER ) ; 
ID ( STRING , ID -> ID -> ID ) ; 
ID ( ID -> ID , INTEGER ) ; 
ID ( STRING ) ; 
ID -> ID -> ID = INTEGER ; 
ID -> ID -> ID = INTEGER ; 
ID = INTEGER ; 
} 

ID ( & ID , & ID -> ID -> ID ) ; 
ID ( & ID , & ID -> ID -> ID ) ; 

if ( ID ( & ID ) != INTEGER ) 
{ 
ID ( ID , STRING , ID -> ID ) ; 
ID ( STRING , ID -> ID -> ID ) ; 
ID ( ID -> ID , INTEGER ) ; 
ID ( STRING , ID -> ID -> ID ) ; 
ID ( ID -> ID , INTEGER ) ; 
ID ( STRING ) ; 
ID ( & ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
ID -> ID -> ID = INTEGER ; 
ID -> ID -> ID = INTEGER ; 
ID = INTEGER ; 
} 
ID = ID -> ID ; 
} 
ID = ID -> ID ; 
} 
} 
ID = ( ID * ) ID ( ID ) ; 
} 
return ID ; 
} 

static int ID ( void * ID ) 
{ 
int ID = INTEGER ; 
ID * ID = ( ID * ) ID ( ID ) ; 
ID ID = ID ; 

while ( ID != ID ) 
{ 
if ( ID -> ID && ( ID -> ID != ID ) ) 
{ 
ID ( & ID , & ID -> ID ) ; 
ID ( & ID , & ID -> ID ) ; 

if ( ID ( & ID ) != INTEGER ) 
{ 
ID ( ID , STRING , ID -> ID ) ; 
ID ( ID , INTEGER ) ; 
ID ( STRING ) ; 

ID ( & ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
ID -> ID = INTEGER ; 
ID = INTEGER ; 
} 
} 
ID = ( ID * ) ID ( ID ) ; 
} 
return ID ; 
} 

static void ID ( void * ID ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 

while ( ID != ID ) 
{ 
if ( ID -> ID == ID && ID -> ID != INTEGER && ID -> ID == ID ) 
{ 
ID ( & ID -> ID , & ID -> ID ) ; 
ID -> ID = ID ( & ID -> ID ) ; 
} 
ID = ( ID * ) ID ( ID ) ; 
} 
} 

int ID ( void * ID ) 
{ 
int ID = INTEGER ; 

 
if ( ID ) 
ID ( ID , STRING ) ; 
ID |= ID ( ID ) ; 

 
ID ( ID ) ; 

 
if ( ID -> ID != ID ) 
ID ( ID , STRING , 
ID -> ID == ID ? STRING : 
ID -> ID == ID ? STRING : STRING , 
ID -> ID ) ; 

 
if ( ID ) 
ID ( ID , STRING ) ; 
ID ( ID ) ; 

 
if ( ID ) 
ID ( ID , STRING ) ; 
ID ( ID ) ; 

 
if ( ID ) 
ID ( ID , STRING ) ; 
ID |= ID ( ) ; 

 
if ( ID ) 
ID ( ID , STRING ) ; 
ID |= ID ( ID ) ; 

 
if ( ID ) 
ID ( ID , STRING ) ; 
ID |= ID ( ID ) ; 

 
if ( ID ) 
ID ( ID , STRING ) ; 
ID |= ID ( ID ) ; 

 
if ( ID ) 
ID ( ID , STRING ) ; 
ID ( ID ) ; 
 
ID ( ID ) ; 

return ID ; 
} 


extern void * ID ; 
extern char * ID ;  

char * ID = ID ; 
char * ID = ID ; 

static unsigned ID = INTEGER ;  

static void ID ( ID * ID ) 
{ 
if ( ID -> ID != ID ) 
ID ( ID -> ID ) ; 
ID ( STRING , ID -> ID ) ; 
} 

static void ID ( void ) 
{ 
unsigned ID ; 

for ( ID = INTEGER ; ID < ID ; ID ++ ) 
ID ( STRING ) ; 
} 

 

static void ID ( char * ID , ID * ID , char * ID ) 
{ 
ID ( STRING ) ; 

if ( ID ( ID ) > INTEGER ) 
ID ( STRING , 
ID == INTEGER ? STRING : STRING , 
ID == INTEGER ? STRING : ID , 
ID == INTEGER ? STRING : STRING , 
ID 
) ; 
else 
{ 
ID ( STRING , 
ID == INTEGER ? STRING : STRING , 
ID == INTEGER ? STRING : ID , 
ID == INTEGER ? STRING : STRING ) ; 
ID ( ID , ID , INTEGER ) ; 
} 

if ( ID == ID ) 
ID ( STRING ) ; 
else 
ID ( STRING , ID ) ; 
} 

static void ID ( char * ID ) 
{ 
while ( * ID != INTEGER ) 
{ 
if ( * ID == STRING || * ID == STRING || * ID == STRING ) 
ID ( STRING ) ; 
ID ( STRING , * ID ++ ) ; 
} 
} 

static void ID ( ID * ID ) 
{ 
if ( ID -> ID != ID ) 
ID ( ID -> ID ) ; 
switch ( ID -> ID ) 
{ 
case ID : 
ID ( STRING , ID -> ID , ID -> ID , ID -> ID ) ; 
break ; 
case ID : 
ID ( STRING , ID -> ID , ID -> ID , ID -> ID ) ; 
break ; 
case ID : 
ID ( STRING , ID -> ID , ID -> ID , ID -> ID ) ; 
break ; 
case ID : 
ID ( STRING , ID -> ID ) ; 
break ; 
} 
} 

void ID ( void * ID ) 
{ 
char * ID , 
* ID , 
* ID , 
* ID , 
* ID , 
* ID , 
* ID , 
* ID , 
* ID , 
* ID , 
* ID ; 

ID * ID = ( ID * ) ID ( ID ) ; 

ID = ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( 
) ; 
ID ( 
) ; 

while ( ID != ID ) 
{ 
if ( ID -> ID == ID || ID -> ID == ID ) 
{ 
char * ID = ID -> ID ; 

ID -> ID = ID ( STRING ) ;  
while ( * ID != INTEGER )  
{ 
if ( * ID == STRING || * ID == STRING || * ID == STRING ) 
ID ( STRING ) ; 
ID ( * ID ++ ) ; 
} 
ID ( STRING ) ;  
} 
ID = ( ID * ) ID ( ID ) ; 
} 

ID = ( ID * ) ID ( ID ) ; 

ID = ID = ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID = ID ( STRING ) ; 
ID = ID ( STRING ) ; 
ID = ID ( STRING ) ; 
ID = ID ( STRING ) ; 
ID = ID ( STRING ) ; 
ID = ID ( STRING ) ; 
ID = ID ( STRING ) ; 
ID = ID ( STRING ) ; 
ID = ID ( STRING ) ; 
ID = ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 

while ( ID != ID ) 
{ 
if ( ID -> ID == ID || ID -> ID == ID ) 
{ 
ID -> ID = ID ( STRING ) ; 

if ( ID ( ID -> ID ) ) 
ID ( ID -> ID ) ; 
else 
{ 
char * ID = ID -> ID ; 

while ( * ID != INTEGER ) 
ID ( * ID ++ ) ; 

ID = ID -> ID ; 

ID ( STRING ) ; 
if ( ID ( ID , STRING ) == INTEGER )  
{ 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
} 
else if ( ID ( ID , STRING ) == INTEGER )  
{ 
ID ( STRING ) ; 
ID ( STRING ) ; 
ID ( STRING ) ; 
} 
else while ( * ID != INTEGER ) 
ID ( * ID ++ ) ; 

ID ( STRING ) ; 
} 
if ( ID -> ID == ID ) 
{ 
switch ( ID -> ID ) 
{ 
case ID : 
ID -> ID = ID ; 
break ; 
case ID : 
ID -> ID = ID ; 
break ; 
case ID : 
ID -> ID = ID ; 
break ; 
case ID : 
ID -> ID = ID ; 
break ; 
case ID : 
ID -> ID = ID ; 
break ; 
case ID : 
ID -> ID = ID ; 
break ; 
case ID : 
ID -> ID = ID ; 
break ; 
case ID : 
ID -> ID = ID ; 
break ; 
case ID : 
ID -> ID = ID ; 
break ; 
case ID : 
ID -> ID = ID ; 
break ; 
} 
} 
else 
ID -> ID = ID ; 
} 
ID = ( ID * ) ID ( ID ) ; 
} 
} 

static void ID ( ID * ID , int ID , int ID ) 
{ 
if ( ID != ID ) 
{ 
unsigned ID ; 

ID ( ID -> ID , INTEGER , ID ) ; 
ID ( STRING , ID ? ID -> ID : STRING ) ; 

if ( ID ) 
for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
ID ( STRING ) ; 

ID ( STRING , ID ? STRING : STRING ) ; 
switch ( ID -> ID ) 
{ 
case ID : 
ID ( STRING , ID -> ID ) ; 
break ; 
case ID : 
ID ( STRING , ID -> ID ) ; 
break ; 
case ID : 
ID ( STRING , ID -> ID ) ; 
break ; 
case ID : 
ID ( STRING , ID -> ID ) ; 
break ; 
} 
ID ( STRING , ID ? STRING : STRING ) ; 
} 
} 

static void ID ( char * ID , ID * ID , int ID , int ID ) 
{ 
ID ( STRING ) ; 

 
if ( ID ) 
{ 
if ( ID ) 
ID ( STRING ) ; 
else 
{ 
if ( ID == ID ) 
ID ( STRING ) ; 
else 
ID ( STRING , ID ? STRING : STRING , ID ? STRING : STRING , ID ) ; 
} 

if ( ID != ID ) 
ID ( STRING ) ;  
} 

if ( ID == ID && ID && ! ID ) 
ID ( STRING ) ; 
else 
ID ( ID , INTEGER , ID ) ; 

ID ( STRING ) ; 
} 

static void ID ( ID * ID ) 
{ 
switch ( ID -> ID ) 
{ 
case ID : 
ID ( STRING , ID -> ID ) ; 
break ; 
case ID : 
case ID : 
ID ( STRING , ID -> ID ) ; 
break ; 
case ID : 
case ID : 
case ID : 
ID ( STRING , ID -> ID ) ; 
break ; 
default : 
ID ( STRING , ID -> ID ) ; 
break ; 
} 
} 

 
static void ID ( ID * ID , int ID ) ; 
static void ID ( ID * ID , int ID ) ; 

void ID ( ID * ID , int ID ) 
{ 
switch ( ID -> ID ) 
{ 
case ID : 
case ID : 
case ID : 
case ID : 
ID ( STRING , ID -> ID ) ; 
break ; 
case ID : 
ID ( STRING , ID -> ID ) ; 
break ; 
case ID : 
 
break ; 
case ID : 
ID ( STRING , ID -> ID ) ; 
break ; 
case ID : 
ID ( ID , ID ) ; 
break ; 
case ID : 
if ( ID ) 
{ 
 
if ( ID -> ID == ID )  
{ 
if ( ID -> ID == INTEGER && ID -> ID == INTEGER ) 
{ 
ID ( STRING ) ; 
ID ( ID , ID ) ; 
ID ( STRING ) ; 
} 
else if ( ID -> ID == INTEGER && ID -> ID == INTEGER ) 
{ 
ID ( STRING ) ; 
ID ( ID , ID ) ; 
ID ( STRING ) ; 
} 
else if ( ID -> ID == INTEGER && ID -> ID == INTEGER ) 
{ 
ID ( STRING ) ; 
ID ( ID , ID ) ; 
ID ( STRING ) ; 
} 
else if ( ID -> ID == INTEGER && ID -> ID == INTEGER ) 
{ 
ID ( STRING ) ; 
ID ( ID , ID ) ; 
ID ( STRING ) ; 
} 
} 
else 
{  
ID ( STRING ) ; 
ID ( ID , ID ) ; 
ID ( STRING , ID -> ID , ID -> ID ) ; 
if ( ID -> ID != ID ) 
ID ( STRING , ID -> ID -> ID ) ; 
else 
ID ( STRING ) ; 
} 
} 
else 
ID ( STRING , ID -> ID ) ; 
break ; 
default : 
ID ( ID , STRING ) ; 
} 
} 

static void ID ( ID * ID , int ID ) 
{ 
ID * ID = ID -> ID ; 

while ( ID != ID ) 
{ 
ID ( ID -> ID , ID ) ; 
ID = ID -> ID ; 
} 
} 

static void ID ( ID * ID , int ID ) 
{ 
ID * ID = ID -> ID ; 

while ( ID != ID ) 
{ 
ID ( ID -> ID , ID ) ; 

if ( ( ID = ID -> ID ) != ID ) 
ID ( STRING ) ; 
} 
} 

void ID ( char * ID ) 
{ 
ID * ID ; 

ID * ID = ID ; 
ID * ID = ( ID * ) ID ( ID ( ID ) ) ; 
unsigned ID = INTEGER ; 
int ID = INTEGER ; 
char * ID = ID ( ID ( ID ) ) ; 

if ( ID ) 
ID ( ID , STRING , ID ) ; 

if ( * ID == STRING ) 
ID = ID ; 
else if ( ( ID = ID ( ID , STRING ) ) == ID ) 
ID ( ID , STRING , ID ) ; 

ID ( ID ) ; 

ID ( 
STRING 
STRING 
STRING ) ; 

ID ( ) ; 

ID ( 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING , 
ID ( ID , STRING ) , 
ID , ID 
) ; 

ID ( STRING , ID ) ; 

ID ( STRING ) ; 
ID ( ) ; 
ID ( STRING ) ; 

 
ID ( STRING ) ; 
while ( ID != ID ) 
{ 
if ( ID -> ID == ID || ID -> ID == ID ) 
{ 
ID ( STRING ) ; 
if ( ID ++ % INTEGER == INTEGER ) 
ID ( STRING ) ; 
ID ( ID ) ; 
if ( ID ) 
{ 
ID ( STRING ) ; 
ID = INTEGER ; 
} 
} 
ID = ( ID * ) ID ( ID ) ; 
} 
ID ( STRING ) ; 

 
ID ( STRING 
STRING 
STRING , 
ID , 
ID 
) ; 

 
ID ( STRING ) ; 
while ( ID != ID ) 
{ 
ID ( STRING , 
ID -> ID , ID -> ID , ID -> ID ) ; 
ID ( STRING , ID -> ID ) ; 
ID ( STRING , ID -> ID , ID -> ID ) ; 
ID ( STRING , ID -> ID , ID -> ID ) ; 
ID = ID -> ID ; 
} 

 
ID ( STRING ) ; 
ID ( STRING , ID -> ID ) ; 
for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
ID ( STRING ) ; 
ID ( STRING , ID -> ID ) ; 

ID ( ID , ID -> ID , INTEGER , INTEGER ) ; 

ID ( STRING ) ; 

ID ( STRING , 
ID ( ID , STRING ) ) ; 

ID ( ID ) ; 
} 

static void ID ( ID * ID , ID * ID ) ; 
static void ID ( ID * ID , ID * ID ) ; 

static void ID ( ID * ID , ID * ID , int ID , char * ID ) 
{ 
if ( ID -> ID == INTEGER )  
{ 
ID ( STRING ) ; 
ID ( ID -> ID , & ID -> ID , ID ) ; 
ID ( STRING ) ; 
ID ( ) ; 
} 

ID ( STRING , ID -> ID ) ; 

if ( ID -> ID ) 
{ 
ID ( ) ; 
ID ( STRING ) ; 
} 

ID ++ ; 

 
if ( ! ( ( ID -> ID == INTEGER || ID -> ID == INTEGER ) && ( ID -> ID == INTEGER || ID -> ID == INTEGER ) ) ) 
{ 
ID ( ) ; 
ID ( STRING ) ; 
} 

ID ( ) ; 
ID ( STRING ) ; 

ID ( ) ; 
ID ( STRING ) ; 
ID ++ ; 

 
if ( ID -> ID != INTEGER && ! ID -> ID ) 
{ 
ID ( ) ; 
ID ( ID -> ID , & ID -> ID , ID -> ID ) ; 
ID ( STRING ) ; 
} 

ID ( ) ; 
ID ( STRING ) ; 
ID ++ ; 

ID ( ID , ID ) ; 

ID ( ) ; 
ID ( STRING ) ; 
ID -- ; 

if ( ! ( ( ID -> ID == INTEGER || ID -> ID == INTEGER ) && ( ID -> ID == INTEGER || ID -> ID == INTEGER ) ) ) 
{ 
ID ( ) ; 
ID ( STRING ) ; 
} 

if ( ID -> ID > INTEGER )  
{ 
ID ( ) ; 
ID ( STRING , ID -> ID ) ; 
} 

if ( ID -> ID != ID ) 
{ 
ID ( ) ; 
ID ( STRING , ID -> ID -> ID ) ; 

if ( ID ) 
{ 
if ( ID -> ID == ID ) 
{ 
 
ID ( STRING ) ; 
ID ( ) ; 
} 
else if ( ID -> ID == ID ) 
{ 
 
ID ( STRING ) ; 
ID ( ) ; 
} 
} 

ID ( ) ; 
ID ( STRING ) ;  
} 
else if ( ID -> ID != INTEGER ) 
{ 
ID ( ) ; 
ID ( STRING ) ; 
ID ( ID -> ID , & ID -> ID , ID ) ; 
ID ( STRING ) ; 
} 

if ( ID -> ID == INTEGER ) 
{ 
ID ( ) ; 
ID ( STRING ) ; 
} 

ID -- ; 
ID ( ) ; 
ID ( STRING ) ; 

if ( ID -> ID > INTEGER )  
{ 
ID ( ) ; 
ID ( STRING , ID -> ID ) ; 
ID ( STRING ) ; 
} 

ID -- ; 
ID ( ) ; 
ID ( STRING , ID -> ID ) ; 

if ( ID -> ID == INTEGER && ( ID || ID != ID ) ) 
{ 
ID ( ) ; 
ID ( STRING ) ; 
ID ( ) ; 
ID ( STRING ) ; 
ID ++ ; 
ID ( ) ; 
ID ( STRING , ID -> ID ) ; 
if ( ID ) 
{ 
 
if ( ID == ID ) 
{ 
 
ID ( ) ; 
if ( ID ) 
ID ( STRING , ID -> ID + INTEGER ) ; 
else 
ID ( STRING ) ; 
} 
else if ( ID == ID ) 
{ 
 
ID ( ) ; 
if ( ID ) 
ID ( STRING , ID -> ID + INTEGER ) ; 
else 
ID ( STRING ) ; 
} 
} 

 
if ( ! ID && ID != ID )  
{ 
while ( * ID != STRING ) 
{ 
if ( * ID == STRING ) 
ID ( STRING ) ; 
else 
ID ( STRING , * ID ) ; 
ID ++ ; 
} 

ID ( STRING ) ;  
} 

ID -- ; 
ID ( ) ; 
ID ( STRING ) ; 
} 
} 

static void ID ( ID * ID , ID * ID , char * ID , ID * ID , int ID , int ID , char * ID ) 
{ 
if ( ID == ID ) 
ID = ID -> ID ; 

if ( ! ( ID -> ID == ID && ID -> ID ) ) 
ID ( ) ;  

switch ( ID -> ID ) 
{ 
case ID : 
case ID : 
case ID : 
case ID : 
case ID : 
if ( ID ) 
{ 
if ( ID == ID ) 
{ 
 
ID ( STRING ) ; 
ID ( ) ; 
} 
else if ( ID == ID ) 
{ 
 
ID ( STRING ) ; 
ID ( ) ; 
} 
else if ( ID == ID ) 
{ 
 
ID ( STRING ) ; 
ID ( ) ; 
} 
} 
ID ( STRING , 
ID == INTEGER ? STRING : STRING , 
ID == INTEGER ? STRING : ID -> ID , 
ID == INTEGER ? STRING : STRING ) ; 

ID ( ID ) ; 
ID ( STRING , ID -> ID ) ; 
ID ( ) ; 
if ( ID != ID && ! ID )  
{ 
ID ( STRING , ID , 
ID -> ID == ID ? STRING : 
ID -> ID == ID ? STRING : STRING ) ; 
ID ( ) ; 
} 
ID ( STRING ) ; 
break ; 
case ID : 
if ( ! ID )  
{ 
char * ID = ID -> ID ; 

if ( ID -> ID != INTEGER ) 
ID ( STRING , ID -> ID ) ; 

while ( * ID != STRING ) 
{ 
if ( * ID == STRING ) 
ID ( STRING ) ; 
else 
if ( ID ( * ID ) ) 
ID ( STRING , * ID ) ; 
ID ++ ; 
} 

if ( ID -> ID != INTEGER ) 
ID ( STRING ) ; 

if ( ID -> ID == ID && ID -> ID ) 
ID ( STRING ) ;  
} 
break ; 
case ID : 
if ( ID && ID == ID ) 
ID ( STRING , ID -> ID ) ; 
if ( ID != ID && ! ID )  
ID ( STRING , ID ) ; 
ID ( STRING , ID -> ID ) ; 
if ( ! ( ID -> ID && ID == ID ) ) 
ID ( ID == ID ? ID -> ID : ( char * ) ID , ID , INTEGER , INTEGER ) ; 
ID ( STRING ) ; 
break ; 
case ID : 
ID ( ID , STRING ) ; 
break ; 
case ID : 
ID ( ID , ID , ID , ID ) ; 
break ; 
default : 
ID ( ID , STRING ) ; 
} 
} 

static void ID ( ID * ID , ID * ID ) 
{ 
ID * ID = ID -> ID ; 

while ( ID != ID ) 
{ 
ID ( ID -> ID , ID , ID -> ID , ID -> ID , ID -> ID , ID -> ID , ID -> ID ) ; 
ID = ID -> ID ; 
} 
} 

static void ID ( ID * ID , ID * ID ) 
{ 
ID * ID = ID -> ID ; 

if ( ID -> ID == ID )  
ID ( ID -> ID , ID ) ; 
else 
{ 
while ( ID != ID ) 
{ 
if ( ID -> ID -> ID != ID ) 
ID ( ID , STRING ) ; 

ID ( ) ; 

ID ( STRING ) ; 
ID ( ID -> ID -> ID , & ID -> ID -> ID , ID ) ; 
ID ( STRING ) ; 
ID ( ) ; 
ID ( STRING ) ; 
ID ++ ; 

ID ( ID -> ID , ID ) ; 

ID -- ; 
ID ( ) ; 

ID ( STRING ) ; 

if ( ( ID = ID -> ID ) != ID ) 
{ 
ID ( ) ; 
ID ( STRING ) ; 
} 
else 
 
if ( ! ( ID -> ID && ID -> ID != INTEGER ) ) 
{ 
ID ( ) ; 
ID ( STRING ) ; 
ID ++ ; 
ID ( ) ; 
ID ( ID -> ID , & ID -> ID , ID -> ID ) ; 
ID -- ; 
ID ( ) ; 
ID ( STRING ) ; 
} 
} 
} 
} 

static void ID ( void * ID ) 
{ 
ID * ID ; 
unsigned ID ; 

if ( ! ID ( & ID , ID ( ID ) -> ID ) ) 
return ; 

ID = ID ( ID ) -> ID ; 

while ( ID != ID ) 
{ 
if ( ID -> ID -> ID != ID ) 
ID ( ID -> ID ) ; 

if ( ID -> ID != ID ) 
if ( ID ( ID , & ( ID -> ID ) , ID ) == ID ) 
{ 
ID * ID = ( ID * ) ID ( sizeof ( ID ) ) ; 

ID -> ID = ID -> ID ; 
ID ( ID , ID ) ; 

ID ( STRING , ID -> ID -> ID ) ; 
for ( ID = INTEGER ; ID < ID -> ID -> ID ; ID ++ ) 
ID ( STRING ) ; 
ID ( STRING , ID -> ID ) ; 
} 

ID = ID -> ID ; 
} 
} 

static void ID ( void * ID ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 
unsigned ID ; 

ID ( STRING ) ; 
while ( ID != ID ) 
{ 
if ( ID -> ID == ID && ( ID -> ID > INTEGER ) && ! ID -> ID ) 
{ 
unsigned ID , 
ID = ( ( ID ( ID -> ID , STRING ) == INTEGER ) && ID -> ID == INTEGER ) ; 

void * ID = ID ( ID , ID -> ID ) ; 

if ( ID != ID ) 
ID ( STRING ) ; 

ID ( STRING , ID -> ID ) ; 

for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
ID ( STRING ) ; 
ID ( STRING , ID -> ID ) ; 

ID ( ID , ID -> ID , INTEGER , INTEGER ) ; 

ID ( STRING ) ; 

if ( ID -> ID ) 
ID ( STRING ) ; 

 
if ( ! ID ) 
{ 
ID ( STRING , ID -> ID ) ; 
for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
ID ( STRING ) ; 
ID ( STRING ) ; 
} 

if ( ! ID )  
ID ( ID ) ; 

ID ( ID ) ; 

 
if ( ID ) 
ID ( STRING , ID -> ID ) ; 
 
ID ( STRING ) ; 
ID ( ID -> ID , & ID -> ID , ID -> ID ? ( char * ) ID : ID -> ID ) ; 
ID ( STRING ) ; 
 
ID ( STRING ) ; 
ID = INTEGER ; 

ID ( ID , ID ) ; 

 
 
ID ( STRING , 
ID == INTEGER ? STRING : STRING , 
ID == INTEGER ? STRING : ID -> ID , 
ID == INTEGER ? STRING : STRING , 
ID -> ID , ID -> ID ) ; 
 
ID ( STRING ) ; 
 
if ( ID ) 
ID ( STRING , ID -> ID ) ; 

ID ( STRING , ID ? STRING : STRING ) ; 
} 
ID = ( ID * ) ID ( ID ) ; 
} 
} 

void ID ( char * ID , void * ID ) 
{ 
ID * ID ; 
ID * ID ; 
ID * ID ; 
unsigned ID ; 
char * ID ; 

if ( ID ) 
ID ( ID , STRING , ID ) ; 

if ( * ID == STRING ) 
ID = ID ; 
else if ( ( ID = ID ( ID , STRING ) ) == ID ) 
ID ( ID , STRING , ID ) ; 

ID ( ID ) ; 

 
ID ( STRING 
STRING 
STRING ) ; 

ID ( ) ; 
ID ( STRING 
STRING 
STRING 
STRING , 

ID ( ID , STRING ) ) ; 

if ( ID != ID ) 
ID ( ID ) ; 

if ( * ID != STRING )  
ID ( STRING , ID ( ID , STRING ) ) ; 

ID ( STRING 
STRING 
STRING 
STRING 

STRING 
STRING 
STRING 
STRING 
STRING 
STRING , ID ) ; 

ID = ID ; 
for ( ID = INTEGER ; ID < ID ; ID ++ ) 
{ 
ID ( STRING , ID ) ; 
if ( ID % INTEGER == INTEGER ) 
ID ( STRING ) ; 
while ( * ID ++ != INTEGER ) 
; 
} 

ID ( STRING ) ; 

ID = ID ; 
while ( ID != ID ) 
{ 
ID ( STRING , ID -> ID , ID -> ID ) ; 
ID ( STRING , ID -> ID ) ; 
ID = ID -> ID ; 
} 

 
if ( ID ) 
ID ( STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 

STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
) ; 

 
ID ( STRING ) ; 
ID = ( ID * ) ID ( ID ( ID ) ) ; 
while ( ID != ID ) 
{ 
if ( ID -> ID == ID || ID -> ID == ID ) 
{ 
ID ( STRING ) ; 
ID ( ID -> ID ) ; 
ID ( STRING ) ; 

if ( ID -> ID != ID ) 
{ 
ID ( STRING ) ; 
ID ( ID -> ID ) ; 
ID ( STRING ) ; 
} 
else 
ID ( STRING ) ; 

ID ( STRING , ID -> ID ) ; 
ID ( STRING , ID -> ID ) ; 
ID ( STRING ) ; 
} 
ID = ( ID * ) ID ( ID ) ; 
} 
ID ( STRING ) ; 

 
ID ( STRING ) ; 
ID = ( ID * ) ID ( ID ) ; 
while ( ID != ID ) 
{ 
if ( ID ( & ID , ID -> ID ) && ! ID -> ID ) 
{ 
if ( ID -> ID > INTEGER ) 
ID ( STRING , ID -> ID ) ; 

if ( ID -> ID == ID ) 
ID ( STRING , ID -> ID ) ; 
} 
ID = ( ID * ) ID ( ID ) ; 
} 

ID ( STRING ) ; 
ID = ( ID * ) ID ( ID ) ; 
while ( ID != ID ) 
{ 
if ( ID ( & ID , ID -> ID ) && ! ID -> ID ) 
{ 
if ( ID -> ID > INTEGER ) 
{ 
ID ( STRING , ID -> ID ) ; 
ID ( & ID -> ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
} 

if ( ID -> ID == ID ) 
{ 
ID ( STRING , ID -> ID ) ; 
ID ( & ID -> ID , ID , INTEGER ) ; 
ID ( STRING ) ; 
} 
} 
ID = ( ID * ) ID ( ID ) ; 
} 
ID ( STRING ) ; 

 
ID ( STRING ) ; 
ID = ( ID * ) ID ( ID ) ; 
while ( ID != ID ) 
{ 
if ( ID -> ID == ID && ( ID -> ID > INTEGER ) ) 
{ 
unsigned ID ; 

if ( ID -> ID ) 
{ 
ID ( STRING , ID -> ID ) ; 
if ( ID -> ID != ID ) 
ID ( ID , ID -> ID , INTEGER , INTEGER ) ; 
ID ( STRING ) ; 
ID ( ID , ID ) ; 
} 
else 
{ 
if ( ID != ID ) 
ID ( STRING ) ; 

ID ( STRING , ID -> ID ) ; 

for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
ID ( STRING ) ; 
ID ( STRING , ID -> ID ) ; 

ID ( ID , ID -> ID , INTEGER , INTEGER ) ; 

ID ( STRING ) ; 
} 
} 
ID = ( ID * ) ID ( ID ) ; 
} 

 
if ( ID != ID ) 
ID ( STRING , ID ) ; 

 
ID ( ID ) ; 

 
ID ( STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING , 
ID , ID ) ; 

ID ( STRING ) ; 

if ( ID ) 
ID ( STRING 
STRING 
) ; 

 
ID ( STRING , ID ) ; 
ID ( STRING , 
( int ) ID ( ID , STRING ) , ID ) ; 

if ( * ID != INTEGER )  
ID ( STRING , ID ) ; 
ID ( STRING ) ; 

if ( ID != ID ) 
ID ( ID ) ; 

ID ( STRING ) ; 

ID ( STRING 
STRING 
STRING , 
ID ) ; 

ID ( STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
) ; 

ID ( STRING 
STRING ) ; 

if ( ! ID ) 
ID ( STRING 
STRING 
) ; 

ID ( STRING 
STRING , 
ID , ID , 
ID , ID , ID ) ; 

if ( ID ) 
ID ( STRING ) ; 

 
ID = ID ; 
while ( ID != ID ) 
{ 
ID ( STRING , 
ID -> ID , 
ID -> ID , 
ID -> ID , 
ID -> ID , 
ID -> ID , 
ID -> ID , 
ID -> ID ) ; 

ID = ID -> ID ; 
} 

ID ( STRING 
STRING ) ; 

if ( ID != ID ) 
ID ( STRING , ID ) ; 

ID ( STRING 
STRING , ID ) ; 

ID ( STRING , ID == INTEGER ? STRING : STRING ) ; 

if ( ID ) 
ID ( STRING ) ; 

ID ( 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING ) ; 

ID ( STRING , ID -> ID ) ; 

ID ( ID -> ID , ID -> ID , INTEGER , INTEGER ) ; 

ID ( 
STRING 
STRING 
STRING ) ; 

if ( ID && ! ID ) 
ID ( STRING ) ; 

ID ( 
STRING 
STRING 
STRING 
) ; 


if ( ID ) 
{ 
ID ( STRING ) ; 

ID ( STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
) ; 
} 

if ( ID != ID ) 
ID ( STRING , ID ) ; 

ID ( 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING 
STRING , 
( int ) ID ( ID , STRING ) , ID ) ; 

ID ( STRING ) ; 

ID ( STRING , 
ID ( ID , STRING ) ) ; 

ID ( ID ) ; 
} 

void ID ( void * ID ) 
{ 
ID * ID = ( ID * ) ID ( ID ) ; 

if ( ID ) 
ID ( STRING ) ; 
while ( ID != ID ) 
{ 
ID * ID = ID -> ID ; 
int ID = ID -> ID ; 
unsigned ID ; 

if ( ID != ID && ID != ID && ID != ID && ID != ID ) 
{ 
ID ( STRING ) ; 
ID ( ID ) ; 

ID ( ID , ID -> ID , INTEGER , INTEGER ) ; 

ID ( STRING , ID -> ID ) ; 
for ( ID = INTEGER ; ID < ID -> ID ; ID ++ ) 
ID ( STRING ) ; 
ID ( STRING ) ; 

if ( ID == ID ) 
ID ( STRING , ID -> ID ) ; 
else 
{ 
if ( ID == ID ) 
{ 
if ( ID -> ID == INTEGER && ID -> ID == INTEGER && ID -> ID == ID ) 
ID ( STRING ) ; 
else if ( ID -> ID == INTEGER && ID -> ID == INTEGER && ID -> ID == ID ) 
ID ( STRING ) ; 
else if ( ID -> ID == INTEGER && ID -> ID == INTEGER && ID -> ID == ID ) 
ID ( STRING ) ; 
else 
ID ( STRING ) ; 
} 
while ( ID != ID ) 
{ 
ID ( ID -> ID ) ; 
ID ( ID , ID -> ID , INTEGER , INTEGER ) ; 

if ( ID -> ID != ID ) 
ID ( STRING , ID -> ID ) ; 

ID ( STRING ) ; 
ID = ID -> ID ; 
if ( ID != ID && ID != ID ) 
ID ( STRING ) ; 
} 

if ( ID == ID ) 
{ 
if ( ID -> ID == INTEGER && ID -> ID == INTEGER && ID -> ID == ID ) 
ID ( STRING ) ; 
else if ( ID -> ID == INTEGER && ID -> ID == INTEGER && ID -> ID == ID ) 
ID ( STRING ) ; 
else if ( ID -> ID == INTEGER && ID -> ID == INTEGER && ID -> ID == ID ) 
ID ( STRING ) ; 
else if ( ID -> ID == INTEGER && ID -> ID == INTEGER && ID -> ID == ID ) 
ID ( STRING ) ; 
else 
{ 
ID ( STRING , ID -> ID , ID -> ID ) ; 
if ( ID -> ID != ID ) 
ID ( STRING , ID -> ID -> ID ) ; 
else 
ID ( STRING ) ; 
} 
} 
} 

ID ( STRING ) ; 

ID ( STRING , ID -> ID ? STRING : STRING ) ; 
ID ( & ID -> ID , ID , INTEGER ) ; 
ID ( STRING ) ; 

ID ( STRING ) ; 
ID ( & ID -> ID , ID , INTEGER ) ; 
ID ( STRING ) ; 

if ( ID -> ID == INTEGER ) 
ID ( STRING ) ; 
else 
ID ( STRING , ID -> ID ) ; 
} 

ID = ( ID * ) ID ( ID ) ; 
} 
}$
