package uk.ac.rhul.cs.csle.art.manager.parser;

import uk.ac.rhul.cs.csle.art.alg.gll.support.*;
import uk.ac.rhul.cs.csle.art.lex.*;
import uk.ac.rhul.cs.csle.art.manager.*;
import uk.ac.rhul.cs.csle.art.manager.grammar.*;
import uk.ac.rhul.cs.csle.art.manager.mode.*;
import uk.ac.rhul.cs.csle.art.util.*;
import uk.ac.rhul.cs.csle.art.util.text.*;
import uk.ac.rhul.cs.csle.art.value.*;
/*******************************************************************************
*
* ARTParser.java
*
*******************************************************************************/

  import uk.ac.rhul.cs.csle.art.manager.module.*;
  import java.nio.file.Files;
  import java.nio.file.Paths;

public class ARTParser extends ARTGLLParserHashPool {
  private static boolean[] ARTSet1;
  private static boolean[] ARTSet2;
  private static boolean[] ARTSet3;
  private static boolean[] ARTSet4;
  private static boolean[] ARTSet5;
  private static boolean[] ARTSet6;
  private static boolean[] ARTSet7;
  private static boolean[] ARTSet8;
  private static boolean[] ARTSet9;
  private static boolean[] ARTSet10;
  private static boolean[] ARTSet11;
  private static boolean[] ARTSet12;
  private static boolean[] ARTSet13;
  private static boolean[] ARTSet14;
  private static boolean[] ARTSet15;
  private static boolean[] ARTSet16;
  private static boolean[] ARTSet17;
  private static boolean[] ARTSet18;
  private static boolean[] ARTSet19;
  private static boolean[] ARTSet20;
  private static boolean[] ARTSet21;
  private static boolean[] ARTSet22;
  private static boolean[] ARTSet23;
  private static boolean[] ARTSet24;
  private static boolean[] ARTSet25;
  private static boolean[] ARTSet26;
  private static boolean[] ARTSet27;
  private static boolean[] ARTSet28;
  private static boolean[] ARTSet29;
  private static boolean[] ARTSet30;
  private static boolean[] ARTSet31;
  private static boolean[] ARTSet32;
  private static boolean[] ARTSet33;
  private static boolean[] ARTSet34;
  private static boolean[] ARTSet35;
  private static boolean[] ARTSet36;
  private static boolean[] ARTSet37;
  private static boolean[] ARTSet38;
  private static boolean[] ARTSet39;
  private static boolean[] ARTSet40;
  private static boolean[] ARTSet41;
  private static boolean[] ARTSet42;
  private static boolean[] ARTSet43;
  private static boolean[] ARTSet44;
  private static boolean[] ARTSet45;
  private static boolean[] ARTSet46;
  private static boolean[] ARTSet47;
  private static boolean[] ARTSet48;
  private static boolean[] ARTSet49;
  private static boolean[] ARTSet50;
  private static boolean[] ARTSet51;
  private static boolean[] ARTSet52;
  private static boolean[] ARTSet53;
  private static boolean[] ARTSet54;
  private static boolean[] ARTSet55;
  private static boolean[] ARTSet56;
  private static boolean[] ARTSet57;
  private static boolean[] ARTSet58;
  private static boolean[] ARTSet59;
  private static boolean[] ARTSet60;
  private static boolean[] ARTSet61;
  private static boolean[] ARTSet62;
  private static boolean[] ARTSet63;
  private static boolean[] ARTSet64;
  private static boolean[] ARTSet65;
  private static boolean[] ARTSet66;
  private static boolean[] ARTSet67;
  private static boolean[] ARTSet68;
  private static boolean[] ARTSet69;
  private static boolean[] ARTSet70;
  private static boolean[] ARTSet71;
  private static boolean[] ARTSet72;
  private static boolean[] ARTSet73;
  private static boolean[] ARTSet74;
  private static boolean[] ARTSet75;
  private static boolean[] ARTSet76;
  private static boolean[] ARTSet77;
  private static boolean[] ARTSet78;
  private static boolean[] ARTSet79;
  private static boolean[] ARTSet80;
  private static boolean[] ARTSet81;
  private static boolean[] ARTSet82;
  private static boolean[] ARTSet83;
  private static boolean[] ARTSet84;
  private static boolean[] ARTSet85;
  private static boolean[] ARTSet86;
  private static boolean[] ARTSet87;
  private static boolean[] ARTSet88;
  private static boolean[] ARTSet89;
  private static boolean[] ARTSet90;
  private static boolean[] ARTSet91;
  private static boolean[] ARTSet92;
  private static boolean[] ARTSet93;
  private static boolean[] ARTSet94;
  private static boolean[] ARTSet95;
  private static boolean[] ARTSet96;
  private static boolean[] ARTSet97;
  private static boolean[] ARTSet98;
  private static boolean[] ARTSet99;
  private static boolean[] ARTSet100;
  private static boolean[] ARTSet101;
  private static boolean[] ARTSet102;
  private static boolean[] ARTSet103;
  private static boolean[] ARTSet104;
  private static boolean[] ARTSet105;
  private static boolean[] ARTSet106;
  private static boolean[] ARTSet107;
  private static boolean[] ARTSet108;
  private static boolean[] ARTSet109;
  private static boolean[] ARTSet110;
  private static boolean[] ARTSet111;
  private static boolean[] ARTSet112;
  private static boolean[] ARTSet113;
  private static boolean[] ARTSet114;
  private static boolean[] ARTSet115;
  private static boolean[] ARTSet116;
  private static boolean[] ARTSet117;
  private static boolean[] ARTSet118;
  private static boolean[] ARTSet119;
  private static boolean[] ARTSet120;
  private static boolean[] ARTSet121;
  private static boolean[] ARTSet122;
  private static boolean[] ARTSet123;
  private static boolean[] ARTSet124;
  private static boolean[] ARTSet125;
  private static boolean[] ARTSet126;
  private static boolean[] ARTSet127;
  private static boolean[] ARTSet128;
  private static boolean[] ARTSet129;
  private static boolean[] ARTSet130;
  private static boolean[] ARTSet131;
  private static boolean[] ARTSet132;
  private static boolean[] ARTSet133;
  private static boolean[] ARTSet134;
  private static boolean[] ARTSet135;
  private static boolean[] ARTSet136;
  private static boolean[] ARTSet137;
  private static boolean[] ARTSet138;
  private static boolean[] ARTSet139;
  private static boolean[] ARTSet140;
  private static boolean[] ARTSet141;
  private static boolean[] ARTSet142;
  private static boolean[] ARTSet143;
  private static boolean[] ARTSet144;
  private static boolean[] ARTSet145;
  private static boolean[] ARTSet146;
  private static boolean[] ARTSet147;
  private static boolean[] ARTSet148;
  private static boolean[] ARTSet149;
  private static boolean[] ARTSet150;
  private static boolean[] ARTSet151;
  private static boolean[] ARTSet152;
  private static boolean[] ARTSet153;
  private static boolean[] ARTSet154;
  private static boolean[] ARTSet155;
  private static boolean[] ARTSet156;
  private static boolean[] ARTSet157;
  private static boolean[] ARTSet158;
  private static boolean[] ARTSet159;
  private static boolean[] ARTSet160;
  private static boolean[] ARTSet161;
  private static boolean[] ARTSet162;
  private static boolean[] ARTSet163;
  private static boolean[] ARTSet164;
  private static boolean[] ARTSet165;
  private static boolean[] ARTSet166;
  private static boolean[] ARTSet167;
  private static boolean[] ARTSet168;
  private static boolean[] ARTSet169;
  private static boolean[] ARTSet170;
  private static boolean[] ARTSet171;
  private static boolean[] ARTSet172;
  private static boolean[] ARTSet173;
  private static boolean[] ARTSet174;
  private static boolean[] ARTSet175;
  private static boolean[] ARTSet176;
  private static boolean[] ARTSet177;
  private static boolean[] ARTSet178;
  private static boolean[] ARTSet179;
  private static boolean[] ARTSet180;
  private static boolean[] ARTSet181;
  private static boolean[] ARTSet182;
  private static boolean[] ARTSet183;
  private static boolean[] ARTSet184;
  private static boolean[] ARTSet185;
  private static boolean[] ARTSet186;
  private static boolean[] ARTSet187;
  private static boolean[] ARTSet188;
  private static boolean[] ARTSet189;
  private static boolean[] ARTSet190;
  private static boolean[] ARTSet191;
  private static boolean[] ARTSet192;
  private static boolean[] ARTSet193;
  private static boolean[] ARTSet194;
  private static boolean[] ARTSet195;
  private static boolean[] ARTSet196;
  private static boolean[] ARTSet197;
  private static boolean[] ARTSet198;
  private static boolean[] ARTSet199;
  private static boolean[] ARTSet200;
  private static boolean[] ARTSet201;
  private static boolean[] ARTSet202;
  private static boolean[] ARTSet203;
  private static boolean[] ARTSet204;

  /* Start of artLabel enumeration */
  public static final int ARTX_EOS = 0;
  public static final int ARTTB_CHAR_BQ = 1;
  public static final int ARTTB_ID = 2;
  public static final int ARTTB_INTEGER = 3;
  public static final int ARTTB_REAL = 4;
  public static final int ARTTB_STRING_BRACE_NEST = 5;
  public static final int ARTTB_STRING_DOLLAR = 6;
  public static final int ARTTB_STRING_DQ = 7;
  public static final int ARTTB_STRING_PLAIN_SQ = 8;
  public static final int ARTTS__SHREIK = 9;
  public static final int ARTTS__HASH = 10;
  public static final int ARTTS__PERCENT_PERCENT = 11;
  public static final int ARTTS__AMPERSAND = 12;
  public static final int ARTTS__LPAR = 13;
  public static final int ARTTS__RPAR = 14;
  public static final int ARTTS__STAR = 15;
  public static final int ARTTS__PLUS = 16;
  public static final int ARTTS__COMMA = 17;
  public static final int ARTTS__PERIOD = 18;
  public static final int ARTTS__PERIOD_PERIOD = 19;
  public static final int ARTTS__COLON = 20;
  public static final int ARTTS__COLON_COLON_EQUAL = 21;
  public static final int ARTTS__COLON_TILDE_EQUAL = 22;
  public static final int ARTTS__LT = 23;
  public static final int ARTTS__LT_LT = 24;
  public static final int ARTTS__GT = 25;
  public static final int ARTTS__GT_GT = 26;
  public static final int ARTTS__QUERY = 27;
  public static final int ARTTS__AT = 28;
  public static final int ARTTS_FIFODescriptors = 29;
  public static final int ARTTS__LBRACK = 30;
  public static final int ARTTS__BACKSLASH_BACKSLASH = 31;
  public static final int ARTTS__RBRACK = 32;
  public static final int ARTTS__UPARROW = 33;
  public static final int ARTTS__UPARROW_UPARROW = 34;
  public static final int ARTTS__UPARROW_UPARROW_UPARROW = 35;
  public static final int ARTTS__UPARROW_ = 36;
  public static final int ARTTS_choose = 37;
  public static final int ARTTS_cnp = 38;
  public static final int ARTTS_cnpGeneratorPool = 39;
  public static final int ARTTS_cnpIndexedAPI = 40;
  public static final int ARTTS_cnpIndexedPool = 41;
  public static final int ARTTS_cnpLinkedAPI = 42;
  public static final int ARTTS_earley = 43;
  public static final int ARTTS_earley2007LinkedAPI = 44;
  public static final int ARTTS_earleyIndexedAPI = 45;
  public static final int ARTTS_earleyIndexedData = 46;
  public static final int ARTTS_earleyIndexedPool = 47;
  public static final int ARTTS_earleyLinkedAPI = 48;
  public static final int ARTTS_earleyTable = 49;
  public static final int ARTTS_earleyTableIndexedAPI = 50;
  public static final int ARTTS_earleyTableIndexedData = 51;
  public static final int ARTTS_earleyTableIndexedPool = 52;
  public static final int ARTTS_earleyTableLinkedAPI = 53;
  public static final int ARTTS_ebnfClosureLeft = 54;
  public static final int ARTTS_ebnfClosureRight = 55;
  public static final int ARTTS_ebnfLeftFactor = 56;
  public static final int ARTTS_ebnfMultiplyOut = 57;
  public static final int ARTTS_ebnfracketToNonterminal = 58;
  public static final int ARTTS_false = 59;
  public static final int ARTTS_generateC_PLUS_PLUS = 60;
  public static final int ARTTS_generateDynamic = 61;
  public static final int ARTTS_generateFragment = 62;
  public static final int ARTTS_generateJava = 63;
  public static final int ARTTS_generatePool = 64;
  public static final int ARTTS_generateState = 65;
  public static final int ARTTS_generateStatic = 66;
  public static final int ARTTS_gll = 67;
  public static final int ARTTS_gllClusteredGeneratorPool = 68;
  public static final int ARTTS_gllGeneratorPool = 69;
  public static final int ARTTS_gllTWEGeneratorPool = 70;
  public static final int ARTTS_import = 71;
  public static final int ARTTS_inputFile = 72;
  public static final int ARTTS_inputFileIfExists = 73;
  public static final int ARTTS_inputString = 74;
  public static final int ARTTS_lcnp = 75;
  public static final int ARTTS_lcnpGeneratorPool = 76;
  public static final int ARTTS_lcnpIndexedAPI = 77;
  public static final int ARTTS_lcnpIndexedPool = 78;
  public static final int ARTTS_lcnpLinkedAPI = 79;
  public static final int ARTTS_lexCFParse = 80;
  public static final int ARTTS_lexCFRecognise = 81;
  public static final int ARTTS_lexDFA = 82;
  public static final int ARTTS_lexDead = 83;
  public static final int ARTTS_lexExtents = 84;
  public static final int ARTTS_lexLongestAcross = 85;
  public static final int ARTTS_lexLongestWithin = 86;
  public static final int ARTTS_lexPrintTWESet = 87;
  public static final int ARTTS_lexPriority = 88;
  public static final int ARTTS_lexRecursive = 89;
  public static final int ARTTS_lexSegments = 90;
  public static final int ARTTS_lexWSSuffix = 91;
  public static final int ARTTS_lexerData = 92;
  public static final int ARTTS_lexerName = 93;
  public static final int ARTTS_longest = 94;
  public static final int ARTTS_mgll = 95;
  public static final int ARTTS_mgllGeneratorPool = 96;
  public static final int ARTTS_module = 97;
  public static final int ARTTS_namespace = 98;
  public static final int ARTTS_option = 99;
  public static final int ARTTS_osbrd = 100;
  public static final int ARTTS_osbrdGenerator = 101;
  public static final int ARTTS_outputDirectory = 102;
  public static final int ARTTS_parserName = 103;
  public static final int ARTTS_phaseAG = 104;
  public static final int ARTTS_phaseDerivationSelect = 105;
  public static final int ARTTS_phaseGIFT = 106;
  public static final int ARTTS_phaseLex = 107;
  public static final int ARTTS_phaseModule = 108;
  public static final int ARTTS_phaseParse = 109;
  public static final int ARTTS_phasePostChoose = 110;
  public static final int ARTTS_phasePreChoose = 111;
  public static final int ARTTS_phaseSOS = 112;
  public static final int ARTTS_phaseTR = 113;
  public static final int ARTTS_postLongestAcross = 114;
  public static final int ARTTS_postLongestWithin = 115;
  public static final int ARTTS_postPriority = 116;
  public static final int ARTTS_postUseTerminals = 117;
  public static final int ARTTS_predictivePops = 118;
  public static final int ARTTS_prelude = 119;
  public static final int ARTTS_showAG = 120;
  public static final int ARTTS_showAll = 121;
  public static final int ARTTS_showBSR = 122;
  public static final int ARTTS_showDT = 123;
  public static final int ARTTS_showGIFT = 124;
  public static final int ARTTS_showSOS = 125;
  public static final int ARTTS_showSPPFCore = 126;
  public static final int ARTTS_showSPPFFull = 127;
  public static final int ARTTS_showTR = 128;
  public static final int ARTTS_showTWE = 129;
  public static final int ARTTS_start = 130;
  public static final int ARTTS_statistics = 131;
  public static final int ARTTS_support = 132;
  public static final int ARTTS_suppressPopGuard = 133;
  public static final int ARTTS_suppressProductionGuard = 134;
  public static final int ARTTS_suppressSemantics = 135;
  public static final int ARTTS_suppressTestRepeat = 136;
  public static final int ARTTS_terminal = 137;
  public static final int ARTTS_trace = 138;
  public static final int ARTTS_true = 139;
  public static final int ARTTS_verbosity = 140;
  public static final int ARTTS_whitespace = 141;
  public static final int ARTTS__BAR = 142;
  public static final int ARTTS__BAR_BAR = 143;
  public static final int ARTTI__QUOTE_QUOTE = 144;
  public static final int ARTX_EPSILON = 145;
  public static final int ARTTB_COMMENT_LINE_C = 146;
  public static final int ARTTB_COMMENT_NEST_ART = 147;
  public static final int ARTTB_WHITESPACE = 148;
  public static final int ARTL_ARTV3_CHAR_BQ = 149;
  public static final int ARTL_ARTV3_ID = 150;
  public static final int ARTL_ARTV3_IDList = 151;
  public static final int ARTL_ARTV3_IDopt = 152;
  public static final int ARTL_ARTV3_INTEGER = 153;
  public static final int ARTL_ARTV3_REAL = 154;
  public static final int ARTL_ARTV3_STRING_BRACE_NEST = 155;
  public static final int ARTL_ARTV3_STRING_DOLLAR = 156;
  public static final int ARTL_ARTV3_STRING_DQ = 157;
  public static final int ARTL_ARTV3_STRING_PLAIN_SQ = 158;
  public static final int ARTL_ARTV3_TYPE = 159;
  public static final int ARTL_ARTV3_TypeList = 160;
  public static final int ARTL_ARTV3_TypeNest = 161;
  public static final int ARTL_ARTV3_abbrev = 162;
  public static final int ARTL_ARTV3_action = 163;
  public static final int ARTL_ARTV3_alt = 164;
  public static final int ARTL_ARTV3_alt1 = 165;
  public static final int ARTL_ARTV3_annotation = 166;
  public static final int ARTL_ARTV3_annotations = 167;
  public static final int ARTL_ARTV3_attribute = 168;
  public static final int ARTL_ARTV3_attributes = 169;
  public static final int ARTL_ARTV3_attributesOpt = 170;
  public static final int ARTL_ARTV3_builtinTerminal = 171;
  public static final int ARTL_ARTV3_caseInsensitiveTerminal = 172;
  public static final int ARTL_ARTV3_caseSensitiveTerminal = 173;
  public static final int ARTL_ARTV3_cat = 174;
  public static final int ARTL_ARTV3_catTail = 175;
  public static final int ARTL_ARTV3_characterSetTerminal = 176;
  public static final int ARTL_ARTV3_characterTerminal = 177;
  public static final int ARTL_ARTV3_choiceElement = 178;
  public static final int ARTL_ARTV3_chooser = 179;
  public static final int ARTL_ARTV3_choosers = 180;
  public static final int ARTL_ARTV3_delay = 181;
  public static final int ARTL_ARTV3_deleter = 182;
  public static final int ARTL_ARTV3_diff = 183;
  public static final int ARTL_ARTV3_directive = 184;
  public static final int ARTL_ARTV3_element = 185;
  public static final int ARTL_ARTV3_epsilon = 186;
  public static final int ARTL_ARTV3_fold = 187;
  public static final int ARTL_ARTV3_gather = 188;
  public static final int ARTL_ARTV3_grammarRule = 189;
  public static final int ARTL_ARTV3_insertion = 190;
  public static final int ARTL_ARTV3_insertionName = 191;
  public static final int ARTL_ARTV3_iter = 192;
  public static final int ARTL_ARTV3_moduleHeader = 193;
  public static final int ARTL_ARTV3_modules = 194;
  public static final int ARTL_ARTV3_name = 195;
  public static final int ARTL_ARTV3_nonterminal = 196;
  public static final int ARTL_ARTV3_not = 197;
  public static final int ARTL_ARTV3_optionSingle = 198;
  public static final int ARTL_ARTV3_optionalColon = 199;
  public static final int ARTL_ARTV3_options = 200;
  public static final int ARTL_ARTV3_rhs = 201;
  public static final int ARTL_ARTV3_slot = 202;
  public static final int ARTL_ARTV3_term = 203;
  public static final int ARTL_ARTV3_terminaliser = 204;
  public static final int ARTL_ARTV3_terminalisers = 205;
  public static final int ARTL_ARTV3_terms = 206;
  public static final int ARTL_ARTV3_termsOpt = 207;
  public static final int ARTL_ARTV3_text = 208;
  public static final int ARTL_ARTV3_textElement = 209;
  public static final int ARTL_ARTV3_textElements = 210;
  public static final int ARTL_ARTV3_trueFalse = 211;
  public static final int ARTL_ARTV3_union = 212;
  public static final int ARTL_ARTV3_CHAR_BQ_1650 = 213;
  public static final int ARTL_ARTV3_CHAR_BQ_1652 = 214;
  public static final int ARTL_ARTV3_CHAR_BQ_1651 = 215;
  public static final int ARTL_ARTV3_ID_1582 = 216;
  public static final int ARTL_ARTV3_ID_1584 = 217;
  public static final int ARTL_ARTV3_ID_1583 = 218;
  public static final int ARTL_ARTV3_IDList_1514 = 219;
  public static final int ARTL_ARTV3_IDList_1516 = 220;
  public static final int ARTL_ARTV3_IDList_1518 = 221;
  public static final int ARTL_ARTV3_IDList_1520 = 222;
  public static final int ARTL_ARTV3_IDList_1522 = 223;
  public static final int ARTL_ARTV3_IDopt_1524 = 224;
  public static final int ARTL_ARTV3_IDopt_1526 = 225;
  public static final int ARTL_ARTV3_IDopt_1530 = 226;
  public static final int ARTL_ARTV3_IDopt_1534 = 227;
  public static final int ARTL_ARTV3_INTEGER_1620 = 228;
  public static final int ARTL_ARTV3_INTEGER_1622 = 229;
  public static final int ARTL_ARTV3_INTEGER_1621 = 230;
  public static final int ARTL_ARTV3_REAL_1626 = 231;
  public static final int ARTL_ARTV3_REAL_1628 = 232;
  public static final int ARTL_ARTV3_REAL_1627 = 233;
  public static final int ARTL_ARTV3_STRING_BRACE_NEST_1656 = 234;
  public static final int ARTL_ARTV3_STRING_BRACE_NEST_1658 = 235;
  public static final int ARTL_ARTV3_STRING_BRACE_NEST_1657 = 236;
  public static final int ARTL_ARTV3_STRING_DOLLAR_1638 = 237;
  public static final int ARTL_ARTV3_STRING_DOLLAR_1640 = 238;
  public static final int ARTL_ARTV3_STRING_DOLLAR_1639 = 239;
  public static final int ARTL_ARTV3_STRING_DQ_1632 = 240;
  public static final int ARTL_ARTV3_STRING_DQ_1634 = 241;
  public static final int ARTL_ARTV3_STRING_DQ_1633 = 242;
  public static final int ARTL_ARTV3_STRING_PLAIN_SQ_1644 = 243;
  public static final int ARTL_ARTV3_STRING_PLAIN_SQ_1646 = 244;
  public static final int ARTL_ARTV3_STRING_PLAIN_SQ_1645 = 245;
  public static final int ARTL_ARTV3_TYPE_1588 = 246;
  public static final int ARTL_ARTV3_TYPE_1590 = 247;
  public static final int ARTL_ARTV3_TypeList_1608 = 248;
  public static final int ARTL_ARTV3_TypeList_1610 = 249;
  public static final int ARTL_ARTV3_TypeList_1612 = 250;
  public static final int ARTL_ARTV3_TypeList_1614 = 251;
  public static final int ARTL_ARTV3_TypeList_1616 = 252;
  public static final int ARTL_ARTV3_TypeList_1618 = 253;
  public static final int ARTL_ARTV3_TypeList_1615 = 254;
  public static final int ARTL_ARTV3_TypeNest_1594 = 255;
  public static final int ARTL_ARTV3_TypeNest_1596 = 256;
  public static final int ARTL_ARTV3_TypeNest_1595 = 257;
  public static final int ARTL_ARTV3_TypeNest_1598 = 258;
  public static final int ARTL_ARTV3_TypeNest_1602 = 259;
  public static final int ARTL_ARTV3_TypeNest_1604 = 260;
  public static final int ARTL_ARTV3_TypeNest_1606 = 261;
  public static final int ARTL_ARTV3_TypeNest_1599 = 262;
  public static final int ARTL_ARTV3_TypeNest_1600 = 263;
  public static final int ARTL_ARTV3_TypeNest_1601 = 264;
  public static final int ARTL_ARTV3_TypeNest_1605 = 265;
  public static final int ARTL_ARTV3_abbrev_1228 = 266;
  public static final int ARTL_ARTV3_abbrev_1230 = 267;
  public static final int ARTL_ARTV3_abbrev_1232 = 268;
  public static final int ARTL_ARTV3_abbrev_1234 = 269;
  public static final int ARTL_ARTV3_abbrev_1236 = 270;
  public static final int ARTL_ARTV3_abbrev_1235 = 271;
  public static final int ARTL_ARTV3_abbrev_1238 = 272;
  public static final int ARTL_ARTV3_abbrev_1240 = 273;
  public static final int ARTL_ARTV3_abbrev_1242 = 274;
  public static final int ARTL_ARTV3_abbrev_1241 = 275;
  public static final int ARTL_ARTV3_abbrev_1244 = 276;
  public static final int ARTL_ARTV3_abbrev_1246 = 277;
  public static final int ARTL_ARTV3_abbrev_1248 = 278;
  public static final int ARTL_ARTV3_abbrev_1247 = 279;
  public static final int ARTL_ARTV3_action_1494 = 280;
  public static final int ARTL_ARTV3_action_1496 = 281;
  public static final int ARTL_ARTV3_action_1500 = 282;
  public static final int ARTL_ARTV3_action_1504 = 283;
  public static final int ARTL_ARTV3_action_1501 = 284;
  public static final int ARTL_ARTV3_action_1502 = 285;
  public static final int ARTL_ARTV3_alt_1176 = 286;
  public static final int ARTL_ARTV3_alt_1178 = 287;
  public static final int ARTL_ARTV3_alt_1180 = 288;
  public static final int ARTL_ARTV3_alt_1182 = 289;
  public static final int ARTL_ARTV3_alt_1184 = 290;
  public static final int ARTL_ARTV3_alt_1186 = 291;
  public static final int ARTL_ARTV3_alt_1183 = 292;
  public static final int ARTL_ARTV3_alt1_1188 = 293;
  public static final int ARTL_ARTV3_alt1_1190 = 294;
  public static final int ARTL_ARTV3_alt1_1192 = 295;
  public static final int ARTL_ARTV3_alt1_1194 = 296;
  public static final int ARTL_ARTV3_alt1_1196 = 297;
  public static final int ARTL_ARTV3_alt1_1198 = 298;
  public static final int ARTL_ARTV3_alt1_1195 = 299;
  public static final int ARTL_ARTV3_annotation_1384 = 300;
  public static final int ARTL_ARTV3_annotation_1386 = 301;
  public static final int ARTL_ARTV3_annotation_1388 = 302;
  public static final int ARTL_ARTV3_annotation_1390 = 303;
  public static final int ARTL_ARTV3_annotation_1392 = 304;
  public static final int ARTL_ARTV3_annotation_1394 = 305;
  public static final int ARTL_ARTV3_annotation_1396 = 306;
  public static final int ARTL_ARTV3_annotation_1398 = 307;
  public static final int ARTL_ARTV3_annotations_1374 = 308;
  public static final int ARTL_ARTV3_annotations_1376 = 309;
  public static final int ARTL_ARTV3_annotations_1378 = 310;
  public static final int ARTL_ARTV3_annotations_1380 = 311;
  public static final int ARTL_ARTV3_annotations_1382 = 312;
  public static final int ARTL_ARTV3_attribute_1148 = 313;
  public static final int ARTL_ARTV3_attribute_1150 = 314;
  public static final int ARTL_ARTV3_attribute_1152 = 315;
  public static final int ARTL_ARTV3_attribute_1154 = 316;
  public static final int ARTL_ARTV3_attribute_1151 = 317;
  public static final int ARTL_ARTV3_attributes_1136 = 318;
  public static final int ARTL_ARTV3_attributes_1140 = 319;
  public static final int ARTL_ARTV3_attributes_1142 = 320;
  public static final int ARTL_ARTV3_attributes_1144 = 321;
  public static final int ARTL_ARTV3_attributes_1146 = 322;
  public static final int ARTL_ARTV3_attributesOpt_1122 = 323;
  public static final int ARTL_ARTV3_attributesOpt_1128 = 324;
  public static final int ARTL_ARTV3_attributesOpt_1130 = 325;
  public static final int ARTL_ARTV3_attributesOpt_1125 = 326;
  public static final int ARTL_ARTV3_attributesOpt_1126 = 327;
  public static final int ARTL_ARTV3_attributesOpt_1129 = 328;
  public static final int ARTL_ARTV3_attributesOpt_1132 = 329;
  public static final int ARTL_ARTV3_attributesOpt_1134 = 330;
  public static final int ARTL_ARTV3_builtinTerminal_1474 = 331;
  public static final int ARTL_ARTV3_builtinTerminal_1478 = 332;
  public static final int ARTL_ARTV3_builtinTerminal_1475 = 333;
  public static final int ARTL_ARTV3_builtinTerminal_1476 = 334;
  public static final int ARTL_ARTV3_caseInsensitiveTerminal_1450 = 335;
  public static final int ARTL_ARTV3_caseInsensitiveTerminal_1452 = 336;
  public static final int ARTL_ARTV3_caseSensitiveTerminal_1444 = 337;
  public static final int ARTL_ARTV3_caseSensitiveTerminal_1446 = 338;
  public static final int ARTL_ARTV3_cat_1200 = 339;
  public static final int ARTL_ARTV3_cat_1202 = 340;
  public static final int ARTL_ARTV3_cat_1204 = 341;
  public static final int ARTL_ARTV3_catTail_1206 = 342;
  public static final int ARTL_ARTV3_catTail_1208 = 343;
  public static final int ARTL_ARTV3_catTail_1210 = 344;
  public static final int ARTL_ARTV3_catTail_1212 = 345;
  public static final int ARTL_ARTV3_catTail_1214 = 346;
  public static final int ARTL_ARTV3_catTail_1216 = 347;
  public static final int ARTL_ARTV3_catTail_1218 = 348;
  public static final int ARTL_ARTV3_characterSetTerminal_1462 = 349;
  public static final int ARTL_ARTV3_characterSetTerminal_1464 = 350;
  public static final int ARTL_ARTV3_characterSetTerminal_1468 = 351;
  public static final int ARTL_ARTV3_characterSetTerminal_1470 = 352;
  public static final int ARTL_ARTV3_characterSetTerminal_1467 = 353;
  public static final int ARTL_ARTV3_characterTerminal_1456 = 354;
  public static final int ARTL_ARTV3_characterTerminal_1458 = 355;
  public static final int ARTL_ARTV3_choiceElement_200 = 356;
  public static final int ARTL_ARTV3_choiceElement_202 = 357;
  public static final int ARTL_ARTV3_choiceElement_206 = 358;
  public static final int ARTL_ARTV3_choiceElement_208 = 359;
  public static final int ARTL_ARTV3_choiceElement_212 = 360;
  public static final int ARTL_ARTV3_choiceElement_214 = 361;
  public static final int ARTL_ARTV3_choiceElement_218 = 362;
  public static final int ARTL_ARTV3_choiceElement_220 = 363;
  public static final int ARTL_ARTV3_choiceElement_224 = 364;
  public static final int ARTL_ARTV3_choiceElement_226 = 365;
  public static final int ARTL_ARTV3_choiceElement_230 = 366;
  public static final int ARTL_ARTV3_choiceElement_232 = 367;
  public static final int ARTL_ARTV3_choiceElement_236 = 368;
  public static final int ARTL_ARTV3_choiceElement_238 = 369;
  public static final int ARTL_ARTV3_choiceElement_237 = 370;
  public static final int ARTL_ARTV3_choiceElement_242 = 371;
  public static final int ARTL_ARTV3_choiceElement_246 = 372;
  public static final int ARTL_ARTV3_choiceElement_243 = 373;
  public static final int ARTL_ARTV3_choiceElement_244 = 374;
  public static final int ARTL_ARTV3_chooser_152 = 375;
  public static final int ARTL_ARTV3_chooser_154 = 376;
  public static final int ARTL_ARTV3_chooser_156 = 377;
  public static final int ARTL_ARTV3_chooser_158 = 378;
  public static final int ARTL_ARTV3_chooser_155 = 379;
  public static final int ARTL_ARTV3_chooser_162 = 380;
  public static final int ARTL_ARTV3_chooser_164 = 381;
  public static final int ARTL_ARTV3_chooser_166 = 382;
  public static final int ARTL_ARTV3_chooser_168 = 383;
  public static final int ARTL_ARTV3_chooser_165 = 384;
  public static final int ARTL_ARTV3_chooser_172 = 385;
  public static final int ARTL_ARTV3_chooser_174 = 386;
  public static final int ARTL_ARTV3_chooser_176 = 387;
  public static final int ARTL_ARTV3_chooser_178 = 388;
  public static final int ARTL_ARTV3_chooser_175 = 389;
  public static final int ARTL_ARTV3_chooser_182 = 390;
  public static final int ARTL_ARTV3_chooser_184 = 391;
  public static final int ARTL_ARTV3_chooser_186 = 392;
  public static final int ARTL_ARTV3_chooser_188 = 393;
  public static final int ARTL_ARTV3_chooser_185 = 394;
  public static final int ARTL_ARTV3_chooser_192 = 395;
  public static final int ARTL_ARTV3_chooser_196 = 396;
  public static final int ARTL_ARTV3_chooser_193 = 397;
  public static final int ARTL_ARTV3_chooser_194 = 398;
  public static final int ARTL_ARTV3_choosers_142 = 399;
  public static final int ARTL_ARTV3_choosers_144 = 400;
  public static final int ARTL_ARTV3_choosers_146 = 401;
  public static final int ARTL_ARTV3_choosers_148 = 402;
  public static final int ARTL_ARTV3_choosers_150 = 403;
  public static final int ARTL_ARTV3_delay_1406 = 404;
  public static final int ARTL_ARTV3_delay_1408 = 405;
  public static final int ARTL_ARTV3_delay_1407 = 406;
  public static final int ARTL_ARTV3_deleter_1112 = 407;
  public static final int ARTL_ARTV3_deleter_1114 = 408;
  public static final int ARTL_ARTV3_deleter_1116 = 409;
  public static final int ARTL_ARTV3_deleter_1120 = 410;
  public static final int ARTL_ARTV3_deleter_1115 = 411;
  public static final int ARTL_ARTV3_diff_1262 = 412;
  public static final int ARTL_ARTV3_diff_1264 = 413;
  public static final int ARTL_ARTV3_diff_1266 = 414;
  public static final int ARTL_ARTV3_diff_1268 = 415;
  public static final int ARTL_ARTV3_diff_1270 = 416;
  public static final int ARTL_ARTV3_diff_1272 = 417;
  public static final int ARTL_ARTV3_diff_1269 = 418;
  public static final int ARTL_ARTV3_directive_56 = 419;
  public static final int ARTL_ARTV3_directive_60 = 420;
  public static final int ARTL_ARTV3_directive_57 = 421;
  public static final int ARTL_ARTV3_directive_58 = 422;
  public static final int ARTL_ARTV3_directive_62 = 423;
  public static final int ARTL_ARTV3_directive_66 = 424;
  public static final int ARTL_ARTV3_directive_63 = 425;
  public static final int ARTL_ARTV3_directive_64 = 426;
  public static final int ARTL_ARTV3_directive_70 = 427;
  public static final int ARTL_ARTV3_directive_76 = 428;
  public static final int ARTL_ARTV3_directive_71 = 429;
  public static final int ARTL_ARTV3_directive_72 = 430;
  public static final int ARTL_ARTV3_directive_78 = 431;
  public static final int ARTL_ARTV3_directive_84 = 432;
  public static final int ARTL_ARTV3_directive_79 = 433;
  public static final int ARTL_ARTV3_directive_80 = 434;
  public static final int ARTL_ARTV3_directive_86 = 435;
  public static final int ARTL_ARTV3_directive_90 = 436;
  public static final int ARTL_ARTV3_directive_87 = 437;
  public static final int ARTL_ARTV3_directive_88 = 438;
  public static final int ARTL_ARTV3_directive_92 = 439;
  public static final int ARTL_ARTV3_directive_96 = 440;
  public static final int ARTL_ARTV3_directive_93 = 441;
  public static final int ARTL_ARTV3_directive_94 = 442;
  public static final int ARTL_ARTV3_directive_98 = 443;
  public static final int ARTL_ARTV3_directive_102 = 444;
  public static final int ARTL_ARTV3_directive_99 = 445;
  public static final int ARTL_ARTV3_directive_100 = 446;
  public static final int ARTL_ARTV3_directive_106 = 447;
  public static final int ARTL_ARTV3_directive_110 = 448;
  public static final int ARTL_ARTV3_directive_107 = 449;
  public static final int ARTL_ARTV3_directive_108 = 450;
  public static final int ARTL_ARTV3_element_1296 = 451;
  public static final int ARTL_ARTV3_element_1298 = 452;
  public static final int ARTL_ARTV3_element_1300 = 453;
  public static final int ARTL_ARTV3_element_1302 = 454;
  public static final int ARTL_ARTV3_element_1304 = 455;
  public static final int ARTL_ARTV3_element_1306 = 456;
  public static final int ARTL_ARTV3_element_1308 = 457;
  public static final int ARTL_ARTV3_element_1310 = 458;
  public static final int ARTL_ARTV3_element_1312 = 459;
  public static final int ARTL_ARTV3_element_1314 = 460;
  public static final int ARTL_ARTV3_element_1316 = 461;
  public static final int ARTL_ARTV3_element_1318 = 462;
  public static final int ARTL_ARTV3_element_1320 = 463;
  public static final int ARTL_ARTV3_element_1322 = 464;
  public static final int ARTL_ARTV3_element_1324 = 465;
  public static final int ARTL_ARTV3_element_1326 = 466;
  public static final int ARTL_ARTV3_element_1328 = 467;
  public static final int ARTL_ARTV3_element_1330 = 468;
  public static final int ARTL_ARTV3_element_1332 = 469;
  public static final int ARTL_ARTV3_element_1334 = 470;
  public static final int ARTL_ARTV3_element_1336 = 471;
  public static final int ARTL_ARTV3_element_1338 = 472;
  public static final int ARTL_ARTV3_element_1340 = 473;
  public static final int ARTL_ARTV3_element_1342 = 474;
  public static final int ARTL_ARTV3_element_1344 = 475;
  public static final int ARTL_ARTV3_element_1346 = 476;
  public static final int ARTL_ARTV3_element_1348 = 477;
  public static final int ARTL_ARTV3_element_1350 = 478;
  public static final int ARTL_ARTV3_element_1352 = 479;
  public static final int ARTL_ARTV3_element_1354 = 480;
  public static final int ARTL_ARTV3_element_1356 = 481;
  public static final int ARTL_ARTV3_element_1358 = 482;
  public static final int ARTL_ARTV3_element_1360 = 483;
  public static final int ARTL_ARTV3_element_1362 = 484;
  public static final int ARTL_ARTV3_element_1364 = 485;
  public static final int ARTL_ARTV3_element_1366 = 486;
  public static final int ARTL_ARTV3_element_1370 = 487;
  public static final int ARTL_ARTV3_element_1372 = 488;
  public static final int ARTL_ARTV3_element_1367 = 489;
  public static final int ARTL_ARTV3_element_1368 = 490;
  public static final int ARTL_ARTV3_element_1371 = 491;
  public static final int ARTL_ARTV3_epsilon_1490 = 492;
  public static final int ARTL_ARTV3_epsilon_1492 = 493;
  public static final int ARTL_ARTV3_epsilon_1491 = 494;
  public static final int ARTL_ARTV3_fold_1416 = 495;
  public static final int ARTL_ARTV3_fold_1418 = 496;
  public static final int ARTL_ARTV3_fold_1417 = 497;
  public static final int ARTL_ARTV3_fold_1420 = 498;
  public static final int ARTL_ARTV3_fold_1422 = 499;
  public static final int ARTL_ARTV3_fold_1421 = 500;
  public static final int ARTL_ARTV3_fold_1424 = 501;
  public static final int ARTL_ARTV3_fold_1426 = 502;
  public static final int ARTL_ARTV3_fold_1425 = 503;
  public static final int ARTL_ARTV3_fold_1428 = 504;
  public static final int ARTL_ARTV3_fold_1430 = 505;
  public static final int ARTL_ARTV3_fold_1429 = 506;
  public static final int ARTL_ARTV3_gather_1410 = 507;
  public static final int ARTL_ARTV3_gather_1414 = 508;
  public static final int ARTL_ARTV3_gather_1411 = 509;
  public static final int ARTL_ARTV3_gather_1412 = 510;
  public static final int ARTL_ARTV3_grammarRule_1098 = 511;
  public static final int ARTL_ARTV3_grammarRule_1100 = 512;
  public static final int ARTL_ARTV3_grammarRule_1104 = 513;
  public static final int ARTL_ARTV3_grammarRule_1106 = 514;
  public static final int ARTL_ARTV3_grammarRule_1110 = 515;
  public static final int ARTL_ARTV3_grammarRule_1105 = 516;
  public static final int ARTL_ARTV3_insertion_1506 = 517;
  public static final int ARTL_ARTV3_insertion_1510 = 518;
  public static final int ARTL_ARTV3_insertion_1512 = 519;
  public static final int ARTL_ARTV3_insertion_1507 = 520;
  public static final int ARTL_ARTV3_insertion_1508 = 521;
  public static final int ARTL_ARTV3_insertion_1511 = 522;
  public static final int ARTL_ARTV3_insertionName_1482 = 523;
  public static final int ARTL_ARTV3_insertionName_1486 = 524;
  public static final int ARTL_ARTV3_insertionName_1483 = 525;
  public static final int ARTL_ARTV3_insertionName_1484 = 526;
  public static final int ARTL_ARTV3_iter_1250 = 527;
  public static final int ARTL_ARTV3_iter_1252 = 528;
  public static final int ARTL_ARTV3_iter_1254 = 529;
  public static final int ARTL_ARTV3_iter_1256 = 530;
  public static final int ARTL_ARTV3_iter_1258 = 531;
  public static final int ARTL_ARTV3_iter_1260 = 532;
  public static final int ARTL_ARTV3_iter_1257 = 533;
  public static final int ARTL_ARTV3_moduleHeader_26 = 534;
  public static final int ARTL_ARTV3_moduleHeader_30 = 535;
  public static final int ARTL_ARTV3_moduleHeader_27 = 536;
  public static final int ARTL_ARTV3_moduleHeader_28 = 537;
  public static final int ARTL_ARTV3_modules_14 = 538;
  public static final int ARTL_ARTV3_modules_16 = 539;
  public static final int ARTL_ARTV3_modules_18 = 540;
  public static final int ARTL_ARTV3_modules_20 = 541;
  public static final int ARTL_ARTV3_modules_22 = 542;
  public static final int ARTL_ARTV3_modules_24 = 543;
  public static final int ARTL_ARTV3_name_1400 = 544;
  public static final int ARTL_ARTV3_name_1404 = 545;
  public static final int ARTL_ARTV3_name_1401 = 546;
  public static final int ARTL_ARTV3_name_1402 = 547;
  public static final int ARTL_ARTV3_nonterminal_1432 = 548;
  public static final int ARTL_ARTV3_nonterminal_1434 = 549;
  public static final int ARTL_ARTV3_nonterminal_1438 = 550;
  public static final int ARTL_ARTV3_nonterminal_1440 = 551;
  public static final int ARTL_ARTV3_not_1286 = 552;
  public static final int ARTL_ARTV3_not_1288 = 553;
  public static final int ARTL_ARTV3_not_1290 = 554;
  public static final int ARTL_ARTV3_not_1294 = 555;
  public static final int ARTL_ARTV3_not_1291 = 556;
  public static final int ARTL_ARTV3_not_1292 = 557;
  public static final int ARTL_ARTV3_optionSingle_260 = 558;
  public static final int ARTL_ARTV3_optionSingle_264 = 559;
  public static final int ARTL_ARTV3_optionSingle_266 = 560;
  public static final int ARTL_ARTV3_optionSingle_261 = 561;
  public static final int ARTL_ARTV3_optionSingle_262 = 562;
  public static final int ARTL_ARTV3_optionSingle_270 = 563;
  public static final int ARTL_ARTV3_optionSingle_274 = 564;
  public static final int ARTL_ARTV3_optionSingle_276 = 565;
  public static final int ARTL_ARTV3_optionSingle_271 = 566;
  public static final int ARTL_ARTV3_optionSingle_272 = 567;
  public static final int ARTL_ARTV3_optionSingle_280 = 568;
  public static final int ARTL_ARTV3_optionSingle_284 = 569;
  public static final int ARTL_ARTV3_optionSingle_286 = 570;
  public static final int ARTL_ARTV3_optionSingle_281 = 571;
  public static final int ARTL_ARTV3_optionSingle_282 = 572;
  public static final int ARTL_ARTV3_optionSingle_290 = 573;
  public static final int ARTL_ARTV3_optionSingle_294 = 574;
  public static final int ARTL_ARTV3_optionSingle_296 = 575;
  public static final int ARTL_ARTV3_optionSingle_291 = 576;
  public static final int ARTL_ARTV3_optionSingle_292 = 577;
  public static final int ARTL_ARTV3_optionSingle_300 = 578;
  public static final int ARTL_ARTV3_optionSingle_304 = 579;
  public static final int ARTL_ARTV3_optionSingle_306 = 580;
  public static final int ARTL_ARTV3_optionSingle_301 = 581;
  public static final int ARTL_ARTV3_optionSingle_302 = 582;
  public static final int ARTL_ARTV3_optionSingle_310 = 583;
  public static final int ARTL_ARTV3_optionSingle_314 = 584;
  public static final int ARTL_ARTV3_optionSingle_316 = 585;
  public static final int ARTL_ARTV3_optionSingle_311 = 586;
  public static final int ARTL_ARTV3_optionSingle_312 = 587;
  public static final int ARTL_ARTV3_optionSingle_320 = 588;
  public static final int ARTL_ARTV3_optionSingle_324 = 589;
  public static final int ARTL_ARTV3_optionSingle_326 = 590;
  public static final int ARTL_ARTV3_optionSingle_321 = 591;
  public static final int ARTL_ARTV3_optionSingle_322 = 592;
  public static final int ARTL_ARTV3_optionSingle_330 = 593;
  public static final int ARTL_ARTV3_optionSingle_334 = 594;
  public static final int ARTL_ARTV3_optionSingle_336 = 595;
  public static final int ARTL_ARTV3_optionSingle_331 = 596;
  public static final int ARTL_ARTV3_optionSingle_332 = 597;
  public static final int ARTL_ARTV3_optionSingle_340 = 598;
  public static final int ARTL_ARTV3_optionSingle_344 = 599;
  public static final int ARTL_ARTV3_optionSingle_346 = 600;
  public static final int ARTL_ARTV3_optionSingle_341 = 601;
  public static final int ARTL_ARTV3_optionSingle_342 = 602;
  public static final int ARTL_ARTV3_optionSingle_350 = 603;
  public static final int ARTL_ARTV3_optionSingle_354 = 604;
  public static final int ARTL_ARTV3_optionSingle_356 = 605;
  public static final int ARTL_ARTV3_optionSingle_351 = 606;
  public static final int ARTL_ARTV3_optionSingle_352 = 607;
  public static final int ARTL_ARTV3_optionSingle_360 = 608;
  public static final int ARTL_ARTV3_optionSingle_364 = 609;
  public static final int ARTL_ARTV3_optionSingle_366 = 610;
  public static final int ARTL_ARTV3_optionSingle_361 = 611;
  public static final int ARTL_ARTV3_optionSingle_362 = 612;
  public static final int ARTL_ARTV3_optionSingle_370 = 613;
  public static final int ARTL_ARTV3_optionSingle_374 = 614;
  public static final int ARTL_ARTV3_optionSingle_376 = 615;
  public static final int ARTL_ARTV3_optionSingle_371 = 616;
  public static final int ARTL_ARTV3_optionSingle_372 = 617;
  public static final int ARTL_ARTV3_optionSingle_380 = 618;
  public static final int ARTL_ARTV3_optionSingle_384 = 619;
  public static final int ARTL_ARTV3_optionSingle_386 = 620;
  public static final int ARTL_ARTV3_optionSingle_381 = 621;
  public static final int ARTL_ARTV3_optionSingle_382 = 622;
  public static final int ARTL_ARTV3_optionSingle_390 = 623;
  public static final int ARTL_ARTV3_optionSingle_394 = 624;
  public static final int ARTL_ARTV3_optionSingle_396 = 625;
  public static final int ARTL_ARTV3_optionSingle_391 = 626;
  public static final int ARTL_ARTV3_optionSingle_392 = 627;
  public static final int ARTL_ARTV3_optionSingle_400 = 628;
  public static final int ARTL_ARTV3_optionSingle_404 = 629;
  public static final int ARTL_ARTV3_optionSingle_406 = 630;
  public static final int ARTL_ARTV3_optionSingle_401 = 631;
  public static final int ARTL_ARTV3_optionSingle_402 = 632;
  public static final int ARTL_ARTV3_optionSingle_410 = 633;
  public static final int ARTL_ARTV3_optionSingle_414 = 634;
  public static final int ARTL_ARTV3_optionSingle_416 = 635;
  public static final int ARTL_ARTV3_optionSingle_411 = 636;
  public static final int ARTL_ARTV3_optionSingle_412 = 637;
  public static final int ARTL_ARTV3_optionSingle_420 = 638;
  public static final int ARTL_ARTV3_optionSingle_424 = 639;
  public static final int ARTL_ARTV3_optionSingle_426 = 640;
  public static final int ARTL_ARTV3_optionSingle_421 = 641;
  public static final int ARTL_ARTV3_optionSingle_422 = 642;
  public static final int ARTL_ARTV3_optionSingle_430 = 643;
  public static final int ARTL_ARTV3_optionSingle_434 = 644;
  public static final int ARTL_ARTV3_optionSingle_436 = 645;
  public static final int ARTL_ARTV3_optionSingle_431 = 646;
  public static final int ARTL_ARTV3_optionSingle_432 = 647;
  public static final int ARTL_ARTV3_optionSingle_440 = 648;
  public static final int ARTL_ARTV3_optionSingle_444 = 649;
  public static final int ARTL_ARTV3_optionSingle_446 = 650;
  public static final int ARTL_ARTV3_optionSingle_441 = 651;
  public static final int ARTL_ARTV3_optionSingle_442 = 652;
  public static final int ARTL_ARTV3_optionSingle_450 = 653;
  public static final int ARTL_ARTV3_optionSingle_454 = 654;
  public static final int ARTL_ARTV3_optionSingle_456 = 655;
  public static final int ARTL_ARTV3_optionSingle_451 = 656;
  public static final int ARTL_ARTV3_optionSingle_452 = 657;
  public static final int ARTL_ARTV3_optionSingle_460 = 658;
  public static final int ARTL_ARTV3_optionSingle_464 = 659;
  public static final int ARTL_ARTV3_optionSingle_466 = 660;
  public static final int ARTL_ARTV3_optionSingle_461 = 661;
  public static final int ARTL_ARTV3_optionSingle_462 = 662;
  public static final int ARTL_ARTV3_optionSingle_470 = 663;
  public static final int ARTL_ARTV3_optionSingle_474 = 664;
  public static final int ARTL_ARTV3_optionSingle_476 = 665;
  public static final int ARTL_ARTV3_optionSingle_471 = 666;
  public static final int ARTL_ARTV3_optionSingle_472 = 667;
  public static final int ARTL_ARTV3_optionSingle_480 = 668;
  public static final int ARTL_ARTV3_optionSingle_484 = 669;
  public static final int ARTL_ARTV3_optionSingle_486 = 670;
  public static final int ARTL_ARTV3_optionSingle_481 = 671;
  public static final int ARTL_ARTV3_optionSingle_482 = 672;
  public static final int ARTL_ARTV3_optionSingle_490 = 673;
  public static final int ARTL_ARTV3_optionSingle_494 = 674;
  public static final int ARTL_ARTV3_optionSingle_496 = 675;
  public static final int ARTL_ARTV3_optionSingle_491 = 676;
  public static final int ARTL_ARTV3_optionSingle_492 = 677;
  public static final int ARTL_ARTV3_optionSingle_500 = 678;
  public static final int ARTL_ARTV3_optionSingle_504 = 679;
  public static final int ARTL_ARTV3_optionSingle_506 = 680;
  public static final int ARTL_ARTV3_optionSingle_501 = 681;
  public static final int ARTL_ARTV3_optionSingle_502 = 682;
  public static final int ARTL_ARTV3_optionSingle_510 = 683;
  public static final int ARTL_ARTV3_optionSingle_514 = 684;
  public static final int ARTL_ARTV3_optionSingle_516 = 685;
  public static final int ARTL_ARTV3_optionSingle_511 = 686;
  public static final int ARTL_ARTV3_optionSingle_512 = 687;
  public static final int ARTL_ARTV3_optionSingle_520 = 688;
  public static final int ARTL_ARTV3_optionSingle_524 = 689;
  public static final int ARTL_ARTV3_optionSingle_526 = 690;
  public static final int ARTL_ARTV3_optionSingle_521 = 691;
  public static final int ARTL_ARTV3_optionSingle_522 = 692;
  public static final int ARTL_ARTV3_optionSingle_530 = 693;
  public static final int ARTL_ARTV3_optionSingle_534 = 694;
  public static final int ARTL_ARTV3_optionSingle_536 = 695;
  public static final int ARTL_ARTV3_optionSingle_531 = 696;
  public static final int ARTL_ARTV3_optionSingle_532 = 697;
  public static final int ARTL_ARTV3_optionSingle_540 = 698;
  public static final int ARTL_ARTV3_optionSingle_544 = 699;
  public static final int ARTL_ARTV3_optionSingle_546 = 700;
  public static final int ARTL_ARTV3_optionSingle_541 = 701;
  public static final int ARTL_ARTV3_optionSingle_542 = 702;
  public static final int ARTL_ARTV3_optionSingle_550 = 703;
  public static final int ARTL_ARTV3_optionSingle_554 = 704;
  public static final int ARTL_ARTV3_optionSingle_556 = 705;
  public static final int ARTL_ARTV3_optionSingle_551 = 706;
  public static final int ARTL_ARTV3_optionSingle_552 = 707;
  public static final int ARTL_ARTV3_optionSingle_560 = 708;
  public static final int ARTL_ARTV3_optionSingle_564 = 709;
  public static final int ARTL_ARTV3_optionSingle_566 = 710;
  public static final int ARTL_ARTV3_optionSingle_561 = 711;
  public static final int ARTL_ARTV3_optionSingle_562 = 712;
  public static final int ARTL_ARTV3_optionSingle_570 = 713;
  public static final int ARTL_ARTV3_optionSingle_574 = 714;
  public static final int ARTL_ARTV3_optionSingle_576 = 715;
  public static final int ARTL_ARTV3_optionSingle_571 = 716;
  public static final int ARTL_ARTV3_optionSingle_572 = 717;
  public static final int ARTL_ARTV3_optionSingle_580 = 718;
  public static final int ARTL_ARTV3_optionSingle_584 = 719;
  public static final int ARTL_ARTV3_optionSingle_586 = 720;
  public static final int ARTL_ARTV3_optionSingle_581 = 721;
  public static final int ARTL_ARTV3_optionSingle_582 = 722;
  public static final int ARTL_ARTV3_optionSingle_590 = 723;
  public static final int ARTL_ARTV3_optionSingle_594 = 724;
  public static final int ARTL_ARTV3_optionSingle_596 = 725;
  public static final int ARTL_ARTV3_optionSingle_591 = 726;
  public static final int ARTL_ARTV3_optionSingle_592 = 727;
  public static final int ARTL_ARTV3_optionSingle_600 = 728;
  public static final int ARTL_ARTV3_optionSingle_604 = 729;
  public static final int ARTL_ARTV3_optionSingle_606 = 730;
  public static final int ARTL_ARTV3_optionSingle_601 = 731;
  public static final int ARTL_ARTV3_optionSingle_602 = 732;
  public static final int ARTL_ARTV3_optionSingle_610 = 733;
  public static final int ARTL_ARTV3_optionSingle_614 = 734;
  public static final int ARTL_ARTV3_optionSingle_616 = 735;
  public static final int ARTL_ARTV3_optionSingle_611 = 736;
  public static final int ARTL_ARTV3_optionSingle_612 = 737;
  public static final int ARTL_ARTV3_optionSingle_620 = 738;
  public static final int ARTL_ARTV3_optionSingle_624 = 739;
  public static final int ARTL_ARTV3_optionSingle_626 = 740;
  public static final int ARTL_ARTV3_optionSingle_621 = 741;
  public static final int ARTL_ARTV3_optionSingle_622 = 742;
  public static final int ARTL_ARTV3_optionSingle_630 = 743;
  public static final int ARTL_ARTV3_optionSingle_634 = 744;
  public static final int ARTL_ARTV3_optionSingle_636 = 745;
  public static final int ARTL_ARTV3_optionSingle_631 = 746;
  public static final int ARTL_ARTV3_optionSingle_632 = 747;
  public static final int ARTL_ARTV3_optionSingle_640 = 748;
  public static final int ARTL_ARTV3_optionSingle_644 = 749;
  public static final int ARTL_ARTV3_optionSingle_646 = 750;
  public static final int ARTL_ARTV3_optionSingle_641 = 751;
  public static final int ARTL_ARTV3_optionSingle_642 = 752;
  public static final int ARTL_ARTV3_optionSingle_650 = 753;
  public static final int ARTL_ARTV3_optionSingle_654 = 754;
  public static final int ARTL_ARTV3_optionSingle_656 = 755;
  public static final int ARTL_ARTV3_optionSingle_651 = 756;
  public static final int ARTL_ARTV3_optionSingle_652 = 757;
  public static final int ARTL_ARTV3_optionSingle_660 = 758;
  public static final int ARTL_ARTV3_optionSingle_664 = 759;
  public static final int ARTL_ARTV3_optionSingle_666 = 760;
  public static final int ARTL_ARTV3_optionSingle_661 = 761;
  public static final int ARTL_ARTV3_optionSingle_662 = 762;
  public static final int ARTL_ARTV3_optionSingle_670 = 763;
  public static final int ARTL_ARTV3_optionSingle_674 = 764;
  public static final int ARTL_ARTV3_optionSingle_676 = 765;
  public static final int ARTL_ARTV3_optionSingle_671 = 766;
  public static final int ARTL_ARTV3_optionSingle_672 = 767;
  public static final int ARTL_ARTV3_optionSingle_680 = 768;
  public static final int ARTL_ARTV3_optionSingle_684 = 769;
  public static final int ARTL_ARTV3_optionSingle_686 = 770;
  public static final int ARTL_ARTV3_optionSingle_681 = 771;
  public static final int ARTL_ARTV3_optionSingle_682 = 772;
  public static final int ARTL_ARTV3_optionSingle_690 = 773;
  public static final int ARTL_ARTV3_optionSingle_694 = 774;
  public static final int ARTL_ARTV3_optionSingle_696 = 775;
  public static final int ARTL_ARTV3_optionSingle_691 = 776;
  public static final int ARTL_ARTV3_optionSingle_692 = 777;
  public static final int ARTL_ARTV3_optionSingle_700 = 778;
  public static final int ARTL_ARTV3_optionSingle_704 = 779;
  public static final int ARTL_ARTV3_optionSingle_706 = 780;
  public static final int ARTL_ARTV3_optionSingle_701 = 781;
  public static final int ARTL_ARTV3_optionSingle_702 = 782;
  public static final int ARTL_ARTV3_optionSingle_710 = 783;
  public static final int ARTL_ARTV3_optionSingle_714 = 784;
  public static final int ARTL_ARTV3_optionSingle_716 = 785;
  public static final int ARTL_ARTV3_optionSingle_711 = 786;
  public static final int ARTL_ARTV3_optionSingle_712 = 787;
  public static final int ARTL_ARTV3_optionSingle_720 = 788;
  public static final int ARTL_ARTV3_optionSingle_724 = 789;
  public static final int ARTL_ARTV3_optionSingle_726 = 790;
  public static final int ARTL_ARTV3_optionSingle_721 = 791;
  public static final int ARTL_ARTV3_optionSingle_722 = 792;
  public static final int ARTL_ARTV3_optionSingle_730 = 793;
  public static final int ARTL_ARTV3_optionSingle_734 = 794;
  public static final int ARTL_ARTV3_optionSingle_736 = 795;
  public static final int ARTL_ARTV3_optionSingle_731 = 796;
  public static final int ARTL_ARTV3_optionSingle_732 = 797;
  public static final int ARTL_ARTV3_optionSingle_740 = 798;
  public static final int ARTL_ARTV3_optionSingle_744 = 799;
  public static final int ARTL_ARTV3_optionSingle_746 = 800;
  public static final int ARTL_ARTV3_optionSingle_741 = 801;
  public static final int ARTL_ARTV3_optionSingle_742 = 802;
  public static final int ARTL_ARTV3_optionSingle_750 = 803;
  public static final int ARTL_ARTV3_optionSingle_754 = 804;
  public static final int ARTL_ARTV3_optionSingle_756 = 805;
  public static final int ARTL_ARTV3_optionSingle_751 = 806;
  public static final int ARTL_ARTV3_optionSingle_752 = 807;
  public static final int ARTL_ARTV3_optionSingle_760 = 808;
  public static final int ARTL_ARTV3_optionSingle_764 = 809;
  public static final int ARTL_ARTV3_optionSingle_766 = 810;
  public static final int ARTL_ARTV3_optionSingle_761 = 811;
  public static final int ARTL_ARTV3_optionSingle_762 = 812;
  public static final int ARTL_ARTV3_optionSingle_770 = 813;
  public static final int ARTL_ARTV3_optionSingle_774 = 814;
  public static final int ARTL_ARTV3_optionSingle_776 = 815;
  public static final int ARTL_ARTV3_optionSingle_771 = 816;
  public static final int ARTL_ARTV3_optionSingle_772 = 817;
  public static final int ARTL_ARTV3_optionSingle_780 = 818;
  public static final int ARTL_ARTV3_optionSingle_784 = 819;
  public static final int ARTL_ARTV3_optionSingle_786 = 820;
  public static final int ARTL_ARTV3_optionSingle_781 = 821;
  public static final int ARTL_ARTV3_optionSingle_782 = 822;
  public static final int ARTL_ARTV3_optionSingle_790 = 823;
  public static final int ARTL_ARTV3_optionSingle_792 = 824;
  public static final int ARTL_ARTV3_optionSingle_791 = 825;
  public static final int ARTL_ARTV3_optionSingle_796 = 826;
  public static final int ARTL_ARTV3_optionSingle_798 = 827;
  public static final int ARTL_ARTV3_optionSingle_797 = 828;
  public static final int ARTL_ARTV3_optionSingle_802 = 829;
  public static final int ARTL_ARTV3_optionSingle_804 = 830;
  public static final int ARTL_ARTV3_optionSingle_803 = 831;
  public static final int ARTL_ARTV3_optionSingle_808 = 832;
  public static final int ARTL_ARTV3_optionSingle_810 = 833;
  public static final int ARTL_ARTV3_optionSingle_809 = 834;
  public static final int ARTL_ARTV3_optionSingle_814 = 835;
  public static final int ARTL_ARTV3_optionSingle_816 = 836;
  public static final int ARTL_ARTV3_optionSingle_815 = 837;
  public static final int ARTL_ARTV3_optionSingle_820 = 838;
  public static final int ARTL_ARTV3_optionSingle_822 = 839;
  public static final int ARTL_ARTV3_optionSingle_821 = 840;
  public static final int ARTL_ARTV3_optionSingle_826 = 841;
  public static final int ARTL_ARTV3_optionSingle_828 = 842;
  public static final int ARTL_ARTV3_optionSingle_827 = 843;
  public static final int ARTL_ARTV3_optionSingle_832 = 844;
  public static final int ARTL_ARTV3_optionSingle_836 = 845;
  public static final int ARTL_ARTV3_optionSingle_838 = 846;
  public static final int ARTL_ARTV3_optionSingle_833 = 847;
  public static final int ARTL_ARTV3_optionSingle_834 = 848;
  public static final int ARTL_ARTV3_optionSingle_842 = 849;
  public static final int ARTL_ARTV3_optionSingle_846 = 850;
  public static final int ARTL_ARTV3_optionSingle_848 = 851;
  public static final int ARTL_ARTV3_optionSingle_843 = 852;
  public static final int ARTL_ARTV3_optionSingle_844 = 853;
  public static final int ARTL_ARTV3_optionSingle_852 = 854;
  public static final int ARTL_ARTV3_optionSingle_856 = 855;
  public static final int ARTL_ARTV3_optionSingle_858 = 856;
  public static final int ARTL_ARTV3_optionSingle_853 = 857;
  public static final int ARTL_ARTV3_optionSingle_854 = 858;
  public static final int ARTL_ARTV3_optionSingle_862 = 859;
  public static final int ARTL_ARTV3_optionSingle_866 = 860;
  public static final int ARTL_ARTV3_optionSingle_868 = 861;
  public static final int ARTL_ARTV3_optionSingle_863 = 862;
  public static final int ARTL_ARTV3_optionSingle_864 = 863;
  public static final int ARTL_ARTV3_optionSingle_872 = 864;
  public static final int ARTL_ARTV3_optionSingle_876 = 865;
  public static final int ARTL_ARTV3_optionSingle_878 = 866;
  public static final int ARTL_ARTV3_optionSingle_873 = 867;
  public static final int ARTL_ARTV3_optionSingle_874 = 868;
  public static final int ARTL_ARTV3_optionSingle_882 = 869;
  public static final int ARTL_ARTV3_optionSingle_886 = 870;
  public static final int ARTL_ARTV3_optionSingle_888 = 871;
  public static final int ARTL_ARTV3_optionSingle_883 = 872;
  public static final int ARTL_ARTV3_optionSingle_884 = 873;
  public static final int ARTL_ARTV3_optionSingle_892 = 874;
  public static final int ARTL_ARTV3_optionSingle_894 = 875;
  public static final int ARTL_ARTV3_optionSingle_893 = 876;
  public static final int ARTL_ARTV3_optionSingle_898 = 877;
  public static final int ARTL_ARTV3_optionSingle_900 = 878;
  public static final int ARTL_ARTV3_optionSingle_899 = 879;
  public static final int ARTL_ARTV3_optionSingle_904 = 880;
  public static final int ARTL_ARTV3_optionSingle_906 = 881;
  public static final int ARTL_ARTV3_optionSingle_905 = 882;
  public static final int ARTL_ARTV3_optionSingle_910 = 883;
  public static final int ARTL_ARTV3_optionSingle_912 = 884;
  public static final int ARTL_ARTV3_optionSingle_911 = 885;
  public static final int ARTL_ARTV3_optionSingle_916 = 886;
  public static final int ARTL_ARTV3_optionSingle_918 = 887;
  public static final int ARTL_ARTV3_optionSingle_917 = 888;
  public static final int ARTL_ARTV3_optionSingle_922 = 889;
  public static final int ARTL_ARTV3_optionSingle_924 = 890;
  public static final int ARTL_ARTV3_optionSingle_923 = 891;
  public static final int ARTL_ARTV3_optionSingle_928 = 892;
  public static final int ARTL_ARTV3_optionSingle_930 = 893;
  public static final int ARTL_ARTV3_optionSingle_929 = 894;
  public static final int ARTL_ARTV3_optionSingle_934 = 895;
  public static final int ARTL_ARTV3_optionSingle_936 = 896;
  public static final int ARTL_ARTV3_optionSingle_935 = 897;
  public static final int ARTL_ARTV3_optionSingle_940 = 898;
  public static final int ARTL_ARTV3_optionSingle_942 = 899;
  public static final int ARTL_ARTV3_optionSingle_941 = 900;
  public static final int ARTL_ARTV3_optionSingle_946 = 901;
  public static final int ARTL_ARTV3_optionSingle_948 = 902;
  public static final int ARTL_ARTV3_optionSingle_947 = 903;
  public static final int ARTL_ARTV3_optionSingle_952 = 904;
  public static final int ARTL_ARTV3_optionSingle_954 = 905;
  public static final int ARTL_ARTV3_optionSingle_953 = 906;
  public static final int ARTL_ARTV3_optionSingle_958 = 907;
  public static final int ARTL_ARTV3_optionSingle_960 = 908;
  public static final int ARTL_ARTV3_optionSingle_959 = 909;
  public static final int ARTL_ARTV3_optionSingle_964 = 910;
  public static final int ARTL_ARTV3_optionSingle_966 = 911;
  public static final int ARTL_ARTV3_optionSingle_965 = 912;
  public static final int ARTL_ARTV3_optionSingle_970 = 913;
  public static final int ARTL_ARTV3_optionSingle_972 = 914;
  public static final int ARTL_ARTV3_optionSingle_971 = 915;
  public static final int ARTL_ARTV3_optionSingle_976 = 916;
  public static final int ARTL_ARTV3_optionSingle_978 = 917;
  public static final int ARTL_ARTV3_optionSingle_977 = 918;
  public static final int ARTL_ARTV3_optionSingle_982 = 919;
  public static final int ARTL_ARTV3_optionSingle_984 = 920;
  public static final int ARTL_ARTV3_optionSingle_983 = 921;
  public static final int ARTL_ARTV3_optionSingle_988 = 922;
  public static final int ARTL_ARTV3_optionSingle_990 = 923;
  public static final int ARTL_ARTV3_optionSingle_989 = 924;
  public static final int ARTL_ARTV3_optionSingle_994 = 925;
  public static final int ARTL_ARTV3_optionSingle_996 = 926;
  public static final int ARTL_ARTV3_optionSingle_995 = 927;
  public static final int ARTL_ARTV3_optionSingle_1000 = 928;
  public static final int ARTL_ARTV3_optionSingle_1002 = 929;
  public static final int ARTL_ARTV3_optionSingle_1001 = 930;
  public static final int ARTL_ARTV3_optionSingle_1006 = 931;
  public static final int ARTL_ARTV3_optionSingle_1008 = 932;
  public static final int ARTL_ARTV3_optionSingle_1007 = 933;
  public static final int ARTL_ARTV3_optionSingle_1012 = 934;
  public static final int ARTL_ARTV3_optionSingle_1014 = 935;
  public static final int ARTL_ARTV3_optionSingle_1013 = 936;
  public static final int ARTL_ARTV3_optionSingle_1018 = 937;
  public static final int ARTL_ARTV3_optionSingle_1020 = 938;
  public static final int ARTL_ARTV3_optionSingle_1019 = 939;
  public static final int ARTL_ARTV3_optionSingle_1024 = 940;
  public static final int ARTL_ARTV3_optionSingle_1026 = 941;
  public static final int ARTL_ARTV3_optionSingle_1025 = 942;
  public static final int ARTL_ARTV3_optionSingle_1030 = 943;
  public static final int ARTL_ARTV3_optionSingle_1032 = 944;
  public static final int ARTL_ARTV3_optionSingle_1031 = 945;
  public static final int ARTL_ARTV3_optionSingle_1036 = 946;
  public static final int ARTL_ARTV3_optionSingle_1038 = 947;
  public static final int ARTL_ARTV3_optionSingle_1037 = 948;
  public static final int ARTL_ARTV3_optionSingle_1042 = 949;
  public static final int ARTL_ARTV3_optionSingle_1044 = 950;
  public static final int ARTL_ARTV3_optionSingle_1043 = 951;
  public static final int ARTL_ARTV3_optionSingle_1048 = 952;
  public static final int ARTL_ARTV3_optionSingle_1050 = 953;
  public static final int ARTL_ARTV3_optionSingle_1049 = 954;
  public static final int ARTL_ARTV3_optionSingle_1054 = 955;
  public static final int ARTL_ARTV3_optionSingle_1056 = 956;
  public static final int ARTL_ARTV3_optionSingle_1055 = 957;
  public static final int ARTL_ARTV3_optionSingle_1060 = 958;
  public static final int ARTL_ARTV3_optionSingle_1062 = 959;
  public static final int ARTL_ARTV3_optionSingle_1061 = 960;
  public static final int ARTL_ARTV3_optionSingle_1066 = 961;
  public static final int ARTL_ARTV3_optionSingle_1068 = 962;
  public static final int ARTL_ARTV3_optionSingle_1067 = 963;
  public static final int ARTL_ARTV3_optionalColon_1072 = 964;
  public static final int ARTL_ARTV3_optionalColon_1074 = 965;
  public static final int ARTL_ARTV3_optionalColon_1076 = 966;
  public static final int ARTL_ARTV3_optionalColon_1078 = 967;
  public static final int ARTL_ARTV3_optionalColon_1077 = 968;
  public static final int ARTL_ARTV3_options_250 = 969;
  public static final int ARTL_ARTV3_options_252 = 970;
  public static final int ARTL_ARTV3_options_254 = 971;
  public static final int ARTL_ARTV3_options_256 = 972;
  public static final int ARTL_ARTV3_options_258 = 973;
  public static final int ARTL_ARTV3_rhs_1158 = 974;
  public static final int ARTL_ARTV3_rhs_1160 = 975;
  public static final int ARTL_ARTV3_rhs_1164 = 976;
  public static final int ARTL_ARTV3_rhs_1166 = 977;
  public static final int ARTL_ARTV3_rhs_1170 = 978;
  public static final int ARTL_ARTV3_rhs_1174 = 979;
  public static final int ARTL_ARTV3_rhs_1169 = 980;
  public static final int ARTL_ARTV3_slot_1220 = 981;
  public static final int ARTL_ARTV3_slot_1222 = 982;
  public static final int ARTL_ARTV3_slot_1224 = 983;
  public static final int ARTL_ARTV3_slot_1226 = 984;
  public static final int ARTL_ARTV3_term_1536 = 985;
  public static final int ARTL_ARTV3_term_1538 = 986;
  public static final int ARTL_ARTV3_term_1540 = 987;
  public static final int ARTL_ARTV3_term_1542 = 988;
  public static final int ARTL_ARTV3_term_1544 = 989;
  public static final int ARTL_ARTV3_term_1546 = 990;
  public static final int ARTL_ARTV3_term_1548 = 991;
  public static final int ARTL_ARTV3_term_1550 = 992;
  public static final int ARTL_ARTV3_term_1552 = 993;
  public static final int ARTL_ARTV3_term_1554 = 994;
  public static final int ARTL_ARTV3_term_1556 = 995;
  public static final int ARTL_ARTV3_term_1558 = 996;
  public static final int ARTL_ARTV3_term_1560 = 997;
  public static final int ARTL_ARTV3_term_1555 = 998;
  public static final int ARTL_ARTV3_term_1559 = 999;
  public static final int ARTL_ARTV3_terminaliser_130 = 1000;
  public static final int ARTL_ARTV3_terminaliser_132 = 1001;
  public static final int ARTL_ARTV3_terminaliser_136 = 1002;
  public static final int ARTL_ARTV3_terminaliser_138 = 1003;
  public static final int ARTL_ARTV3_terminalisers_114 = 1004;
  public static final int ARTL_ARTV3_terminalisers_118 = 1005;
  public static final int ARTL_ARTV3_terminalisers_120 = 1006;
  public static final int ARTL_ARTV3_terminalisers_124 = 1007;
  public static final int ARTL_ARTV3_terminalisers_128 = 1008;
  public static final int ARTL_ARTV3_terms_1570 = 1009;
  public static final int ARTL_ARTV3_terms_1572 = 1010;
  public static final int ARTL_ARTV3_terms_1574 = 1011;
  public static final int ARTL_ARTV3_terms_1576 = 1012;
  public static final int ARTL_ARTV3_terms_1578 = 1013;
  public static final int ARTL_ARTV3_terms_1580 = 1014;
  public static final int ARTL_ARTV3_terms_1577 = 1015;
  public static final int ARTL_ARTV3_termsOpt_1562 = 1016;
  public static final int ARTL_ARTV3_termsOpt_1564 = 1017;
  public static final int ARTL_ARTV3_termsOpt_1566 = 1018;
  public static final int ARTL_ARTV3_termsOpt_1568 = 1019;
  public static final int ARTL_ARTV3_text_2 = 1020;
  public static final int ARTL_ARTV3_text_6 = 1021;
  public static final int ARTL_ARTV3_text_8 = 1022;
  public static final int ARTL_ARTV3_text_12 = 1023;
  public static final int ARTL_ARTV3_textElement_44 = 1024;
  public static final int ARTL_ARTV3_textElement_46 = 1025;
  public static final int ARTL_ARTV3_textElement_48 = 1026;
  public static final int ARTL_ARTV3_textElement_50 = 1027;
  public static final int ARTL_ARTV3_textElement_52 = 1028;
  public static final int ARTL_ARTV3_textElement_54 = 1029;
  public static final int ARTL_ARTV3_textElements_34 = 1030;
  public static final int ARTL_ARTV3_textElements_36 = 1031;
  public static final int ARTL_ARTV3_textElements_38 = 1032;
  public static final int ARTL_ARTV3_textElements_40 = 1033;
  public static final int ARTL_ARTV3_textElements_42 = 1034;
  public static final int ARTL_ARTV3_trueFalse_1080 = 1035;
  public static final int ARTL_ARTV3_trueFalse_1082 = 1036;
  public static final int ARTL_ARTV3_trueFalse_1086 = 1037;
  public static final int ARTL_ARTV3_trueFalse_1088 = 1038;
  public static final int ARTL_ARTV3_trueFalse_1087 = 1039;
  public static final int ARTL_ARTV3_trueFalse_1092 = 1040;
  public static final int ARTL_ARTV3_trueFalse_1094 = 1041;
  public static final int ARTL_ARTV3_trueFalse_1093 = 1042;
  public static final int ARTL_ARTV3_union_1274 = 1043;
  public static final int ARTL_ARTV3_union_1276 = 1044;
  public static final int ARTL_ARTV3_union_1278 = 1045;
  public static final int ARTL_ARTV3_union_1280 = 1046;
  public static final int ARTL_ARTV3_union_1282 = 1047;
  public static final int ARTL_ARTV3_union_1284 = 1048;
  public static final int ARTL_ARTV3_union_1281 = 1049;
  public static final int ARTX_DESPATCH = 1050;
  public static final int ARTX_DUMMY = 1051;
  public static final int ARTX_LABEL_EXTENT = 1052;
  /* End of artLabel enumeration */

  /* Start of artName enumeration */
  public static final int ARTNAME_NONE = 0;
  public static final int ARTNAME_EXTENT = 1;
  /* End of artName enumeration */
  public void ARTPF_ARTV3_CHAR_BQ() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.CHAR_BQ production descriptor loads*/
      case ARTL_ARTV3_CHAR_BQ: 
        if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_CHAR_BQ_1650, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.CHAR_BQ: match production*/
      case ARTL_ARTV3_CHAR_BQ_1650: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_CHAR_BQ, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_CHAR_BQ_1652, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet3[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_ID() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.ID production descriptor loads*/
      case ARTL_ARTV3_ID: 
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_ID_1582, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.ID: match production*/
      case ARTL_ARTV3_ID_1582: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_ID_1584, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_IDList() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.IDList production descriptor loads*/
      case ARTL_ARTV3_IDList: 
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_IDList_1514, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_IDList_1518, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.IDList: match production*/
      case ARTL_ARTV3_IDList_1514: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_IDList_1516, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_IDList_1516: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.IDList: match production*/
      case ARTL_ARTV3_IDList_1518: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_IDList_1520, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_IDList_1520: 
        /* Nonterminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_IDList_1522, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_IDList; return; }
      case ARTL_ARTV3_IDList_1522: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_IDopt() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.IDopt production descriptor loads*/
      case ARTL_ARTV3_IDopt: 
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_IDopt_1524, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_IDopt_1530, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.IDopt: match production*/
      case ARTL_ARTV3_IDopt_1524: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_IDopt_1526, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_IDopt_1526: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.IDopt: match production*/
      case ARTL_ARTV3_IDopt_1530: 
        /* Cat/unary template start */
        /* Epsilon template start */
        artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_IDopt_1534, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Epsilon template end */
        /* Cat/unary template end */
        if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_INTEGER() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.INTEGER production descriptor loads*/
      case ARTL_ARTV3_INTEGER: 
        if (ARTSet8[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_INTEGER_1620, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.INTEGER: match production*/
      case ARTL_ARTV3_INTEGER_1620: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_INTEGER, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_INTEGER_1622, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet9[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_REAL() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.REAL production descriptor loads*/
      case ARTL_ARTV3_REAL: 
        if (ARTSet10[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_REAL_1626, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.REAL: match production*/
      case ARTL_ARTV3_REAL_1626: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_REAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_REAL_1628, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_STRING_BRACE_NEST() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.STRING_BRACE_NEST production descriptor loads*/
      case ARTL_ARTV3_STRING_BRACE_NEST: 
        if (ARTSet12[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_STRING_BRACE_NEST_1656, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.STRING_BRACE_NEST: match production*/
      case ARTL_ARTV3_STRING_BRACE_NEST_1656: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_BRACE_NEST, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_STRING_BRACE_NEST_1658, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_STRING_DOLLAR() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.STRING_DOLLAR production descriptor loads*/
      case ARTL_ARTV3_STRING_DOLLAR: 
        if (ARTSet14[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_STRING_DOLLAR_1638, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.STRING_DOLLAR: match production*/
      case ARTL_ARTV3_STRING_DOLLAR_1638: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_DOLLAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_STRING_DOLLAR_1640, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet15[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_STRING_DQ() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.STRING_DQ production descriptor loads*/
      case ARTL_ARTV3_STRING_DQ: 
        if (ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_STRING_DQ_1632, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.STRING_DQ: match production*/
      case ARTL_ARTV3_STRING_DQ_1632: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_DQ, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_STRING_DQ_1634, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_STRING_PLAIN_SQ() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.STRING_PLAIN_SQ production descriptor loads*/
      case ARTL_ARTV3_STRING_PLAIN_SQ: 
        if (ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_STRING_PLAIN_SQ_1644, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.STRING_PLAIN_SQ: match production*/
      case ARTL_ARTV3_STRING_PLAIN_SQ_1644: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_PLAIN_SQ, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_STRING_PLAIN_SQ_1646, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet19[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_TYPE() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.TYPE production descriptor loads*/
      case ARTL_ARTV3_TYPE: 
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_TYPE_1588, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.TYPE: match production*/
      case ARTL_ARTV3_TYPE_1588: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_TYPE_1590, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_TypeNest; return; }
      case ARTL_ARTV3_TYPE_1590: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_TypeList() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.TypeList production descriptor loads*/
      case ARTL_ARTV3_TypeList: 
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_TypeList_1608, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_TypeList_1612, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.TypeList: match production*/
      case ARTL_ARTV3_TypeList_1608: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_TypeList_1610, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_TypeNest; return; }
      case ARTL_ARTV3_TypeList_1610: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.TypeList: match production*/
      case ARTL_ARTV3_TypeList_1612: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_TypeList_1614, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_TypeNest; return; }
      case ARTL_ARTV3_TypeList_1614: 
        /* Nonterminal template end */
        if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_TypeList_1616, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_TypeList_1618, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_TypeList; return; }
      case ARTL_ARTV3_TypeList_1618: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_TypeNest() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.TypeNest production descriptor loads*/
      case ARTL_ARTV3_TypeNest: 
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_TypeNest_1594, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_TypeNest_1598, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.TypeNest: match production*/
      case ARTL_ARTV3_TypeNest_1594: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_TypeNest_1596, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet23[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.TypeNest: match production*/
      case ARTL_ARTV3_TypeNest_1598: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_TypeNest_1600, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet24[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_TypeNest_1602, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_TypeNest_1604, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_TypeList; return; }
      case ARTL_ARTV3_TypeNest_1604: 
        /* Nonterminal template end */
        if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_TypeNest_1606, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet23[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_abbrev() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.abbrev production descriptor loads*/
      case ARTL_ARTV3_abbrev: 
        if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_abbrev_1228, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_abbrev_1232, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_abbrev_1238, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_abbrev_1244, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.abbrev: match production*/
      case ARTL_ARTV3_abbrev_1228: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_abbrev_1230, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_iter; return; }
      case ARTL_ARTV3_abbrev_1230: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet26[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.abbrev: match production*/
      case ARTL_ARTV3_abbrev_1232: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_abbrev_1234, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_iter; return; }
      case ARTL_ARTV3_abbrev_1234: 
        /* Nonterminal template end */
        if (!ARTSet27[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__STAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_abbrev_1236, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet26[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.abbrev: match production*/
      case ARTL_ARTV3_abbrev_1238: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_abbrev_1240, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_iter; return; }
      case ARTL_ARTV3_abbrev_1240: 
        /* Nonterminal template end */
        if (!ARTSet28[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PLUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_abbrev_1242, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet26[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.abbrev: match production*/
      case ARTL_ARTV3_abbrev_1244: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_abbrev_1246, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_iter; return; }
      case ARTL_ARTV3_abbrev_1246: 
        /* Nonterminal template end */
        if (!ARTSet29[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__QUERY, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_abbrev_1248, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet26[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_action() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.action production descriptor loads*/
      case ARTL_ARTV3_action: 
        if (ARTSet12[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_action_1494, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_action_1500, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.action: match production*/
      case ARTL_ARTV3_action_1494: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_action_1496, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_BRACE_NEST; return; }
      case ARTL_ARTV3_action_1496: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.action: match production*/
      case ARTL_ARTV3_action_1500: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BACKSLASH_BACKSLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_action_1502, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_action_1504, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_term; return; }
      case ARTL_ARTV3_action_1504: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_alt() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.alt production descriptor loads*/
      case ARTL_ARTV3_alt: 
        if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_alt_1176, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_alt_1180, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.alt: match production*/
      case ARTL_ARTV3_alt_1176: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_alt_1178, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_cat; return; }
      case ARTL_ARTV3_alt_1178: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.alt: match production*/
      case ARTL_ARTV3_alt_1180: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_alt_1182, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_cat; return; }
      case ARTL_ARTV3_alt_1182: 
        /* Nonterminal template end */
        if (!ARTSet35[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_alt_1184, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_alt_1186, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_alt1; return; }
      case ARTL_ARTV3_alt_1186: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_alt1() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.alt1 production descriptor loads*/
      case ARTL_ARTV3_alt1: 
        if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_alt1_1188, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_alt1_1192, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.alt1: match production*/
      case ARTL_ARTV3_alt1_1188: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_alt1_1190, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_cat; return; }
      case ARTL_ARTV3_alt1_1190: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.alt1: match production*/
      case ARTL_ARTV3_alt1_1192: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_alt1_1194, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_cat; return; }
      case ARTL_ARTV3_alt1_1194: 
        /* Nonterminal template end */
        if (!ARTSet35[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_alt1_1196, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_alt1_1198, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_alt1; return; }
      case ARTL_ARTV3_alt1_1198: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_annotation() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.annotation production descriptor loads*/
      case ARTL_ARTV3_annotation: 
        if (ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_annotation_1384, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet24[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_annotation_1388, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_annotation_1392, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet40[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_annotation_1396, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.annotation: match production*/
      case ARTL_ARTV3_annotation_1384: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_annotation_1386, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_name; return; }
      case ARTL_ARTV3_annotation_1386: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.annotation: match production*/
      case ARTL_ARTV3_annotation_1388: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_annotation_1390, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_delay; return; }
      case ARTL_ARTV3_annotation_1390: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.annotation: match production*/
      case ARTL_ARTV3_annotation_1392: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_annotation_1394, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_gather; return; }
      case ARTL_ARTV3_annotation_1394: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.annotation: match production*/
      case ARTL_ARTV3_annotation_1396: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_annotation_1398, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_fold; return; }
      case ARTL_ARTV3_annotation_1398: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_annotations() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.annotations production descriptor loads*/
      case ARTL_ARTV3_annotations: 
        if (ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_annotations_1374, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_annotations_1378, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.annotations: match production*/
      case ARTL_ARTV3_annotations_1374: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_annotations_1376, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_annotation; return; }
      case ARTL_ARTV3_annotations_1376: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.annotations: match production*/
      case ARTL_ARTV3_annotations_1378: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_annotations_1380, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_annotation; return; }
      case ARTL_ARTV3_annotations_1380: 
        /* Nonterminal template end */
        if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_annotations_1382, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_annotations; return; }
      case ARTL_ARTV3_annotations_1382: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_attribute() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.attribute production descriptor loads*/
      case ARTL_ARTV3_attribute: 
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_attribute_1148, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.attribute: match production*/
      case ARTL_ARTV3_attribute_1148: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_attribute_1150, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_attribute_1150: 
        /* Nonterminal template end */
        if (!ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_attribute_1152, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_attribute_1154, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_TYPE; return; }
      case ARTL_ARTV3_attribute_1154: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_attributes() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.attributes production descriptor loads*/
      case ARTL_ARTV3_attributes: 
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_attributes_1136, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_attributes_1144, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.attributes: match production*/
      case ARTL_ARTV3_attributes_1136: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_attributes_1140, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_attribute; return; }
      case ARTL_ARTV3_attributes_1140: 
        /* Nonterminal template end */
        if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_attributes_1142, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_attributes; return; }
      case ARTL_ARTV3_attributes_1142: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.attributes: match production*/
      case ARTL_ARTV3_attributes_1144: 
        /* Cat/unary template start */
        /* Epsilon template start */
        artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_attributes_1146, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Epsilon template end */
        /* Cat/unary template end */
        if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_attributesOpt() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.attributesOpt production descriptor loads*/
      case ARTL_ARTV3_attributesOpt: 
        if (ARTSet24[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_attributesOpt_1122, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_attributesOpt_1132, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.attributesOpt: match production*/
      case ARTL_ARTV3_attributesOpt_1122: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_attributesOpt_1126, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_attributesOpt_1128, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_attributes; return; }
      case ARTL_ARTV3_attributesOpt_1128: 
        /* Nonterminal template end */
        if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_attributesOpt_1130, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.attributesOpt: match production*/
      case ARTL_ARTV3_attributesOpt_1132: 
        /* Cat/unary template start */
        /* Epsilon template start */
        artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_attributesOpt_1134, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Epsilon template end */
        /* Cat/unary template end */
        if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_builtinTerminal() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.builtinTerminal production descriptor loads*/
      case ARTL_ARTV3_builtinTerminal: 
        if (ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_builtinTerminal_1474, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.builtinTerminal: match production*/
      case ARTL_ARTV3_builtinTerminal_1474: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__AMPERSAND, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_builtinTerminal_1476, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_builtinTerminal_1478, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_builtinTerminal_1478: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_caseInsensitiveTerminal() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.caseInsensitiveTerminal production descriptor loads*/
      case ARTL_ARTV3_caseInsensitiveTerminal: 
        if (ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_caseInsensitiveTerminal_1450, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.caseInsensitiveTerminal: match production*/
      case ARTL_ARTV3_caseInsensitiveTerminal_1450: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_caseInsensitiveTerminal_1452, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_DQ; return; }
      case ARTL_ARTV3_caseInsensitiveTerminal_1452: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_caseSensitiveTerminal() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.caseSensitiveTerminal production descriptor loads*/
      case ARTL_ARTV3_caseSensitiveTerminal: 
        if (ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_caseSensitiveTerminal_1444, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.caseSensitiveTerminal: match production*/
      case ARTL_ARTV3_caseSensitiveTerminal_1444: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_caseSensitiveTerminal_1446, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_PLAIN_SQ; return; }
      case ARTL_ARTV3_caseSensitiveTerminal_1446: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_cat() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.cat production descriptor loads*/
      case ARTL_ARTV3_cat: 
        if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_cat_1200, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.cat: match production*/
      case ARTL_ARTV3_cat_1200: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_cat_1202, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_slot; return; }
      case ARTL_ARTV3_cat_1202: 
        /* Nonterminal template end */
        if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_cat_1204, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_catTail; return; }
      case ARTL_ARTV3_cat_1204: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_catTail() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.catTail production descriptor loads*/
      case ARTL_ARTV3_catTail: 
        if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_catTail_1206, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_catTail_1212, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.catTail: match production*/
      case ARTL_ARTV3_catTail_1206: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_catTail_1208, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_abbrev; return; }
      case ARTL_ARTV3_catTail_1208: 
        /* Nonterminal template end */
        if (!ARTSet48[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_catTail_1210, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_slot; return; }
      case ARTL_ARTV3_catTail_1210: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.catTail: match production*/
      case ARTL_ARTV3_catTail_1212: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_catTail_1214, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_abbrev; return; }
      case ARTL_ARTV3_catTail_1214: 
        /* Nonterminal template end */
        if (!ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_catTail_1216, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_slot; return; }
      case ARTL_ARTV3_catTail_1216: 
        /* Nonterminal template end */
        if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_catTail_1218, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_catTail; return; }
      case ARTL_ARTV3_catTail_1218: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_characterSetTerminal() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.characterSetTerminal production descriptor loads*/
      case ARTL_ARTV3_characterSetTerminal: 
        if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_characterSetTerminal_1462, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.characterSetTerminal: match production*/
      case ARTL_ARTV3_characterSetTerminal_1462: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_characterSetTerminal_1464, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_CHAR_BQ; return; }
      case ARTL_ARTV3_characterSetTerminal_1464: 
        /* Nonterminal template end */
        if (!ARTSet49[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIOD_PERIOD, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_characterSetTerminal_1468, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_characterSetTerminal_1470, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_CHAR_BQ; return; }
      case ARTL_ARTV3_characterSetTerminal_1470: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_characterTerminal() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.characterTerminal production descriptor loads*/
      case ARTL_ARTV3_characterTerminal: 
        if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_characterTerminal_1456, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.characterTerminal: match production*/
      case ARTL_ARTV3_characterTerminal_1456: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_characterTerminal_1458, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_CHAR_BQ; return; }
      case ARTL_ARTV3_characterTerminal_1458: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_choiceElement() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.choiceElement production descriptor loads*/
      case ARTL_ARTV3_choiceElement: 
        if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_choiceElement_200, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_choiceElement_206, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_choiceElement_212, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_choiceElement_218, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_choiceElement_224, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_choiceElement_230, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_choiceElement_236, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet54[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_choiceElement_242, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.choiceElement: match production*/
      case ARTL_ARTV3_choiceElement_200: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_choiceElement_202, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_nonterminal; return; }
      case ARTL_ARTV3_choiceElement_202: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.choiceElement: match production*/
      case ARTL_ARTV3_choiceElement_206: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_choiceElement_208, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_caseSensitiveTerminal; return; }
      case ARTL_ARTV3_choiceElement_208: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.choiceElement: match production*/
      case ARTL_ARTV3_choiceElement_212: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_choiceElement_214, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_caseInsensitiveTerminal; return; }
      case ARTL_ARTV3_choiceElement_214: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.choiceElement: match production*/
      case ARTL_ARTV3_choiceElement_218: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_choiceElement_220, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_characterTerminal; return; }
      case ARTL_ARTV3_choiceElement_220: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.choiceElement: match production*/
      case ARTL_ARTV3_choiceElement_224: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_choiceElement_226, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_characterSetTerminal; return; }
      case ARTL_ARTV3_choiceElement_226: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.choiceElement: match production*/
      case ARTL_ARTV3_choiceElement_230: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_choiceElement_232, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_builtinTerminal; return; }
      case ARTL_ARTV3_choiceElement_232: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.choiceElement: match production*/
      case ARTL_ARTV3_choiceElement_236: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTI__QUOTE_QUOTE, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_choiceElement_238, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.choiceElement: match production*/
      case ARTL_ARTV3_choiceElement_242: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIOD, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_choiceElement_244, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_choiceElement_246, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_choiceElement_246: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_chooser() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.chooser production descriptor loads*/
      case ARTL_ARTV3_chooser: 
        if (ARTSet50[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_chooser_152, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet50[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_chooser_162, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet50[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_chooser_172, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet50[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_chooser_182, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet59[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_chooser_192, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.chooser: match production*/
      case ARTL_ARTV3_chooser_152: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_chooser_154, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_choiceElement; return; }
      case ARTL_ARTV3_chooser_154: 
        /* Nonterminal template end */
        if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_chooser_156, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet50[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_chooser_158, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_choiceElement; return; }
      case ARTL_ARTV3_chooser_158: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet56[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.chooser: match production*/
      case ARTL_ARTV3_chooser_162: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_chooser_164, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_choiceElement; return; }
      case ARTL_ARTV3_chooser_164: 
        /* Nonterminal template end */
        if (!ARTSet24[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_chooser_166, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet50[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_chooser_168, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_choiceElement; return; }
      case ARTL_ARTV3_chooser_168: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet56[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.chooser: match production*/
      case ARTL_ARTV3_chooser_172: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_chooser_174, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_choiceElement; return; }
      case ARTL_ARTV3_chooser_174: 
        /* Nonterminal template end */
        if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_chooser_176, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet50[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_chooser_178, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_choiceElement; return; }
      case ARTL_ARTV3_chooser_178: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet56[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.chooser: match production*/
      case ARTL_ARTV3_chooser_182: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_chooser_184, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_choiceElement; return; }
      case ARTL_ARTV3_chooser_184: 
        /* Nonterminal template end */
        if (!ARTSet58[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT_LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_chooser_186, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet50[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_chooser_188, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_choiceElement; return; }
      case ARTL_ARTV3_chooser_188: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet56[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.chooser: match production*/
      case ARTL_ARTV3_chooser_192: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_longest, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_chooser_194, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet50[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_chooser_196, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_choiceElement; return; }
      case ARTL_ARTV3_chooser_196: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet56[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_choosers() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.choosers production descriptor loads*/
      case ARTL_ARTV3_choosers: 
        if (ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_choosers_142, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_choosers_146, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.choosers: match production*/
      case ARTL_ARTV3_choosers_142: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_choosers_144, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_chooser; return; }
      case ARTL_ARTV3_choosers_144: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.choosers: match production*/
      case ARTL_ARTV3_choosers_146: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_choosers_148, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_chooser; return; }
      case ARTL_ARTV3_choosers_148: 
        /* Nonterminal template end */
        if (!ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_choosers_150, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_choosers; return; }
      case ARTL_ARTV3_choosers_150: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_delay() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.delay production descriptor loads*/
      case ARTL_ARTV3_delay: 
        if (ARTSet24[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_delay_1406, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.delay: match production*/
      case ARTL_ARTV3_delay_1406: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_delay_1408, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_deleter() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.deleter production descriptor loads*/
      case ARTL_ARTV3_deleter: 
        if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_deleter_1112, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.deleter: match production*/
      case ARTL_ARTV3_deleter_1112: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_deleter_1114, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_nonterminal; return; }
      case ARTL_ARTV3_deleter_1114: 
        /* Nonterminal template end */
        if (!ARTSet61[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON_TILDE_EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_deleter_1116, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_deleter_1120, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_rhs; return; }
      case ARTL_ARTV3_deleter_1120: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_diff() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.diff production descriptor loads*/
      case ARTL_ARTV3_diff: 
        if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_diff_1262, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_diff_1266, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.diff: match production*/
      case ARTL_ARTV3_diff_1262: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_diff_1264, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_union; return; }
      case ARTL_ARTV3_diff_1264: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet62[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.diff: match production*/
      case ARTL_ARTV3_diff_1266: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_diff_1268, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_diff; return; }
      case ARTL_ARTV3_diff_1268: 
        /* Nonterminal template end */
        if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BACKSLASH_BACKSLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_diff_1270, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_diff_1272, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_union; return; }
      case ARTL_ARTV3_diff_1272: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet62[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_directive() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.directive production descriptor loads*/
      case ARTL_ARTV3_directive: 
        if (ARTSet64[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_directive_56, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_directive_62, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_directive_70, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_directive_78, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet69[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_directive_86, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_directive_92, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_directive_98, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_directive_106, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.directive: match production*/
      case ARTL_ARTV3_directive_56: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_import, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_directive_58, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_directive_60, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_directive_60: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.directive: match production*/
      case ARTL_ARTV3_directive_62: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_start, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_directive_64, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_directive_66, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_nonterminal; return; }
      case ARTL_ARTV3_directive_66: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.directive: match production*/
      case ARTL_ARTV3_directive_70: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_whitespace, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_directive_72, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet67[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_directive_76, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_terminalisers; return; }
      case ARTL_ARTV3_directive_76: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.directive: match production*/
      case ARTL_ARTV3_directive_78: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_terminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_directive_80, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet67[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_directive_84, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_terminalisers; return; }
      case ARTL_ARTV3_directive_84: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.directive: match production*/
      case ARTL_ARTV3_directive_86: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_choose, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_directive_88, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_directive_90, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_choosers; return; }
      case ARTL_ARTV3_directive_90: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.directive: match production*/
      case ARTL_ARTV3_directive_92: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_option, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_directive_94, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_directive_96, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_options; return; }
      case ARTL_ARTV3_directive_96: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.directive: match production*/
      case ARTL_ARTV3_directive_98: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_prelude, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_directive_100, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet12[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_directive_102, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_BRACE_NEST; return; }
      case ARTL_ARTV3_directive_102: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.directive: match production*/
      case ARTL_ARTV3_directive_106: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_support, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_directive_108, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet12[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_directive_110, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_BRACE_NEST; return; }
      case ARTL_ARTV3_directive_110: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_element() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.element production descriptor loads*/
      case ARTL_ARTV3_element: 
        if (ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1296, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1300, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1304, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1308, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1312, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1316, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1320, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1324, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1330, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1336, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1342, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1348, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1354, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1360, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet76[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_element_1366, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1296: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1298, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_epsilon; return; }
      case ARTL_ARTV3_element_1298: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1300: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1302, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_nonterminal; return; }
      case ARTL_ARTV3_element_1302: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1304: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1306, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_caseSensitiveTerminal; return; }
      case ARTL_ARTV3_element_1306: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1308: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1310, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_caseInsensitiveTerminal; return; }
      case ARTL_ARTV3_element_1310: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1312: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1314, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_characterTerminal; return; }
      case ARTL_ARTV3_element_1314: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1316: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1318, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_characterSetTerminal; return; }
      case ARTL_ARTV3_element_1318: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1320: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1322, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_builtinTerminal; return; }
      case ARTL_ARTV3_element_1322: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1324: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1326, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_epsilon; return; }
      case ARTL_ARTV3_element_1326: 
        /* Nonterminal template end */
        if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1328, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_annotations; return; }
      case ARTL_ARTV3_element_1328: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1330: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1332, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_nonterminal; return; }
      case ARTL_ARTV3_element_1332: 
        /* Nonterminal template end */
        if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1334, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_annotations; return; }
      case ARTL_ARTV3_element_1334: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1336: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1338, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_caseSensitiveTerminal; return; }
      case ARTL_ARTV3_element_1338: 
        /* Nonterminal template end */
        if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1340, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_annotations; return; }
      case ARTL_ARTV3_element_1340: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1342: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1344, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_caseInsensitiveTerminal; return; }
      case ARTL_ARTV3_element_1344: 
        /* Nonterminal template end */
        if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1346, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_annotations; return; }
      case ARTL_ARTV3_element_1346: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1348: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1350, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_characterTerminal; return; }
      case ARTL_ARTV3_element_1350: 
        /* Nonterminal template end */
        if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1352, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_annotations; return; }
      case ARTL_ARTV3_element_1352: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1354: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1356, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_characterSetTerminal; return; }
      case ARTL_ARTV3_element_1356: 
        /* Nonterminal template end */
        if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1358, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_annotations; return; }
      case ARTL_ARTV3_element_1358: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1360: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1362, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_builtinTerminal; return; }
      case ARTL_ARTV3_element_1362: 
        /* Nonterminal template end */
        if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1364, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_annotations; return; }
      case ARTL_ARTV3_element_1364: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.element: match production*/
      case ARTL_ARTV3_element_1366: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_element_1368, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_element_1370, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_alt; return; }
      case ARTL_ARTV3_element_1370: 
        /* Nonterminal template end */
        if (!ARTSet77[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_element_1372, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_epsilon() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.epsilon production descriptor loads*/
      case ARTL_ARTV3_epsilon: 
        if (ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_epsilon_1490, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.epsilon: match production*/
      case ARTL_ARTV3_epsilon_1490: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__HASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_epsilon_1492, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_fold() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.fold production descriptor loads*/
      case ARTL_ARTV3_fold: 
        if (ARTSet78[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_fold_1416, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_fold_1420, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet80[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_fold_1424, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet81[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_fold_1428, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.fold: match production*/
      case ARTL_ARTV3_fold_1416: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW_, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_fold_1418, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.fold: match production*/
      case ARTL_ARTV3_fold_1420: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_fold_1422, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.fold: match production*/
      case ARTL_ARTV3_fold_1424: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW_UPARROW, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_fold_1426, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.fold: match production*/
      case ARTL_ARTV3_fold_1428: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW_UPARROW_UPARROW, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_fold_1430, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_gather() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.gather production descriptor loads*/
      case ARTL_ARTV3_gather: 
        if (ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_gather_1410, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.gather: match production*/
      case ARTL_ARTV3_gather_1410: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_gather_1412, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_gather_1414, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_gather_1414: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_grammarRule() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.grammarRule production descriptor loads*/
      case ARTL_ARTV3_grammarRule: 
        if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_grammarRule_1098, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.grammarRule: match production*/
      case ARTL_ARTV3_grammarRule_1098: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_grammarRule_1100, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_nonterminal; return; }
      case ARTL_ARTV3_grammarRule_1100: 
        /* Nonterminal template end */
        if (!ARTSet82[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_grammarRule_1104, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_attributesOpt; return; }
      case ARTL_ARTV3_grammarRule_1104: 
        /* Nonterminal template end */
        if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON_COLON_EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_grammarRule_1106, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_grammarRule_1110, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_rhs; return; }
      case ARTL_ARTV3_grammarRule_1110: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_insertion() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.insertion production descriptor loads*/
      case ARTL_ARTV3_insertion: 
        if (ARTSet83[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_insertion_1506, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.insertion: match production*/
      case ARTL_ARTV3_insertion_1506: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LBRACK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_insertion_1508, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_insertion_1510, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_alt; return; }
      case ARTL_ARTV3_insertion_1510: 
        /* Nonterminal template end */
        if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RBRACK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_insertion_1512, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_insertionName() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.insertionName production descriptor loads*/
      case ARTL_ARTV3_insertionName: 
        if (ARTSet85[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_insertionName_1482, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.insertionName: match production*/
      case ARTL_ARTV3_insertionName_1482: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERCENT_PERCENT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_insertionName_1484, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_insertionName_1486, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_insertionName_1486: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_iter() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.iter production descriptor loads*/
      case ARTL_ARTV3_iter: 
        if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_iter_1250, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_iter_1254, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.iter: match production*/
      case ARTL_ARTV3_iter_1250: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_iter_1252, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_diff; return; }
      case ARTL_ARTV3_iter_1252: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet86[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.iter: match production*/
      case ARTL_ARTV3_iter_1254: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_iter_1256, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_diff; return; }
      case ARTL_ARTV3_iter_1256: 
        /* Nonterminal template end */
        if (!ARTSet87[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__AT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_iter_1258, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_iter_1260, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_iter; return; }
      case ARTL_ARTV3_iter_1260: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet86[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_moduleHeader() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.moduleHeader production descriptor loads*/
      case ARTL_ARTV3_moduleHeader: 
        if (ARTSet88[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_moduleHeader_26, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.moduleHeader: match production*/
      case ARTL_ARTV3_moduleHeader_26: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_module, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_moduleHeader_28, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_moduleHeader_30, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_moduleHeader_30: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_modules() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.modules production descriptor loads*/
      case ARTL_ARTV3_modules: 
        if (ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_modules_14, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet88[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_modules_18, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.modules: match production*/
      case ARTL_ARTV3_modules_14: 
        /* Cat/unary template start */
        /* Epsilon template start */
        artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_modules_16, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Epsilon template end */
        /* Cat/unary template end */
        if (!ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.modules: match production*/
      case ARTL_ARTV3_modules_18: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_modules_20, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_moduleHeader; return; }
      case ARTL_ARTV3_modules_20: 
        /* Nonterminal template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_modules_22, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_textElements; return; }
      case ARTL_ARTV3_modules_22: 
        /* Nonterminal template end */
        if (!ARTSet93[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_modules_24, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_modules; return; }
      case ARTL_ARTV3_modules_24: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_name() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.name production descriptor loads*/
      case ARTL_ARTV3_name: 
        if (ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_name_1400, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.name: match production*/
      case ARTL_ARTV3_name_1400: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_name_1402, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_name_1404, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_name_1404: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_nonterminal() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.nonterminal production descriptor loads*/
      case ARTL_ARTV3_nonterminal: 
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_nonterminal_1432, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet14[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_nonterminal_1438, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.nonterminal: match production*/
      case ARTL_ARTV3_nonterminal_1432: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_nonterminal_1434, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_nonterminal_1434: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet15[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.nonterminal: match production*/
      case ARTL_ARTV3_nonterminal_1438: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_nonterminal_1440, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_DOLLAR; return; }
      case ARTL_ARTV3_nonterminal_1440: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet15[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_not() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.not production descriptor loads*/
      case ARTL_ARTV3_not: 
        if (ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_not_1286, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_not_1290, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.not: match production*/
      case ARTL_ARTV3_not_1286: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_not_1288, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_element; return; }
      case ARTL_ARTV3_not_1288: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.not: match production*/
      case ARTL_ARTV3_not_1290: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BACKSLASH_BACKSLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_not_1292, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_not_1294, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_element; return; }
      case ARTL_ARTV3_not_1294: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_optionSingle() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.optionSingle production descriptor loads*/
      case ARTL_ARTV3_optionSingle: 
        if (ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_260, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet98[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_270, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet103[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_280, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet104[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_290, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet106[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_300, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet104[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_310, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet106[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_320, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet108[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_330, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet109[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_340, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet110[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_350, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet111[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_360, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet112[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_370, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet113[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_380, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet114[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_390, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet115[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_400, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet116[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_410, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet117[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_420, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet118[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_430, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet119[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_440, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet120[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_450, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet121[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_460, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_470, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet123[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_480, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_490, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet125[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_500, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet126[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_510, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet127[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_520, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet128[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_530, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_540, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_550, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet131[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_560, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet132[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_570, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet133[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_580, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_590, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet135[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_600, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet136[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_610, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet137[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_620, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet138[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_630, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet139[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_640, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet140[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_650, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet141[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_660, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet142[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_670, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet143[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_680, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet144[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_690, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet145[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_700, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet146[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_710, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet147[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_720, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_730, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet149[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_740, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet150[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_750, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet151[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_760, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet152[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_770, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet153[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_780, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet154[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_790, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet155[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_796, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet156[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_802, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet157[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_808, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet158[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_814, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet159[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_820, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet160[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_826, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet161[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_832, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet162[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_842, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet163[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_852, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet164[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_862, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet165[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_872, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet166[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_882, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet167[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_892, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet168[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_898, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet169[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_904, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_910, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet171[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_916, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet172[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_922, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet173[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_928, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet174[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_934, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet175[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_940, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet176[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_946, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet177[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_952, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet178[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_958, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet179[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_964, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet180[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_970, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet181[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_976, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet182[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_982, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet183[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_988, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet184[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_994, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet185[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_1000, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet186[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_1006, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet187[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_1012, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet188[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_1018, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet189[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_1024, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet190[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_1030, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet191[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_1036, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet192[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_1042, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet193[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_1048, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet194[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_1054, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet195[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_1060, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet196[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionSingle_1066, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_260: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_verbosity, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_262, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet96[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_264, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_264: 
        /* Nonterminal template end */
        if (!ARTSet8[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_266, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_INTEGER; return; }
      case ARTL_ARTV3_optionSingle_266: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_270: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_statistics, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_272, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_274, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_274: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_276, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_276: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_280: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_trace, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_282, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_284, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_284: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_286, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_286: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_290: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_inputFile, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_292, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_294, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_294: 
        /* Nonterminal template end */
        if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_296, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_PLAIN_SQ; return; }
      case ARTL_ARTV3_optionSingle_296: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_300: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_inputFileIfExists, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_302, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_304, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_304: 
        /* Nonterminal template end */
        if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_306, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_PLAIN_SQ; return; }
      case ARTL_ARTV3_optionSingle_306: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_310: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_inputFile, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_312, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet107[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_314, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_314: 
        /* Nonterminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_316, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_optionSingle_316: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_320: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_inputFileIfExists, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_322, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet107[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_324, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_324: 
        /* Nonterminal template end */
        if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_326, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_optionSingle_326: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_330: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_inputString, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_332, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_334, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_334: 
        /* Nonterminal template end */
        if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_336, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_PLAIN_SQ; return; }
      case ARTL_ARTV3_optionSingle_336: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_340: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_phaseModule, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_342, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_344, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_344: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_346, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_346: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_350: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_phaseLex, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_352, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_354, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_354: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_356, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_356: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_360: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_phasePreChoose, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_362, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_364, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_364: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_366, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_366: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_370: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_phaseParse, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_372, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_374, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_374: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_376, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_376: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_380: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_phasePostChoose, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_382, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_384, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_384: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_386, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_386: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_390: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_phaseDerivationSelect, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_392, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_394, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_394: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_396, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_396: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_400: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_phaseGIFT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_402, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_404, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_404: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_406, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_406: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_410: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_phaseAG, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_412, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_414, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_414: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_416, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_416: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_420: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_phaseTR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_422, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_424, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_424: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_426, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_426: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_430: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_phaseSOS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_432, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_434, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_434: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_436, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_436: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_440: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_showTWE, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_442, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_444, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_444: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_446, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_446: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_450: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_showBSR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_452, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_454, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_454: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_456, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_456: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_460: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_showSPPFFull, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_462, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_464, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_464: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_466, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_466: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_470: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_showSPPFCore, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_472, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_474, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_474: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_476, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_476: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_480: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_showDT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_482, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_484, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_484: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_486, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_486: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_490: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_showGIFT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_492, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_494, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_494: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_496, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_496: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_500: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_showAG, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_502, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_504, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_504: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_506, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_506: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_510: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_showTR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_512, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_514, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_514: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_516, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_516: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_520: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_showSOS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_522, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_524, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_524: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_526, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_526: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_530: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_showAll, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_532, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_534, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_534: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_536, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_536: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_540: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_ebnfMultiplyOut, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_542, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_544, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_544: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_546, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_546: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_550: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_ebnfracketToNonterminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_552, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_554, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_554: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_556, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_556: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_560: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_ebnfClosureRight, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_562, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_564, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_564: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_566, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_566: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_570: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_ebnfClosureLeft, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_572, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_574, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_574: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_576, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_576: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_580: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_ebnfLeftFactor, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_582, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_584, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_584: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_586, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_586: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_590: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexDFA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_592, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_594, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_594: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_596, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_596: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_600: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexCFRecognise, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_602, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_604, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_604: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_606, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_606: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_610: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexCFParse, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_612, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_614, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_614: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_616, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_616: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_620: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexWSSuffix, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_622, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_624, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_624: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_626, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_626: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_630: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexExtents, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_632, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_634, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_634: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_636, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_636: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_640: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexSegments, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_642, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_644, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_644: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_646, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_646: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_650: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexRecursive, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_652, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_654, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_654: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_656, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_656: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_660: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexPrintTWESet, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_662, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_664, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_664: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_666, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_666: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_670: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexDead, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_672, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_674, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_674: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_676, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_676: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_680: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexLongestWithin, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_682, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_684, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_684: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_686, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_686: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_690: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexLongestAcross, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_692, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_694, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_694: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_696, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_696: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_700: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexPriority, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_702, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_704, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_704: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_706, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_706: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_710: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_postUseTerminals, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_712, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_714, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_714: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_716, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_716: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_720: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_postLongestWithin, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_722, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_724, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_724: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_726, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_726: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_730: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_postLongestAcross, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_732, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_734, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_734: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_736, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_736: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_740: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_postPriority, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_742, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_744, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_744: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_746, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_746: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_750: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_outputDirectory, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_752, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_754, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_754: 
        /* Nonterminal template end */
        if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_756, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_PLAIN_SQ; return; }
      case ARTL_ARTV3_optionSingle_756: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_760: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_namespace, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_762, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_764, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_764: 
        /* Nonterminal template end */
        if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_766, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_PLAIN_SQ; return; }
      case ARTL_ARTV3_optionSingle_766: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_770: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexerName, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_772, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_774, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_774: 
        /* Nonterminal template end */
        if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_776, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_PLAIN_SQ; return; }
      case ARTL_ARTV3_optionSingle_776: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_780: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_parserName, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_782, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_784, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_784: 
        /* Nonterminal template end */
        if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_786, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_PLAIN_SQ; return; }
      case ARTL_ARTV3_optionSingle_786: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_790: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_generateDynamic, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_792, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_796: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_generateStatic, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_798, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_802: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_generateState, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_804, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_808: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_generateFragment, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_810, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_814: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_generatePool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_816, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_820: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_generateJava, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_822, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_826: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_generateC_PLUS_PLUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_828, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_832: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_predictivePops, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_834, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_836, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_836: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_838, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_838: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_842: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_FIFODescriptors, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_844, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_846, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_846: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_848, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_848: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_852: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_suppressPopGuard, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_854, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_856, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_856: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_858, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_858: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_862: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_suppressProductionGuard, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_864, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_866, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_866: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_868, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_868: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_872: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_suppressTestRepeat, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_874, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_876, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_876: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_878, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_878: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_882: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_suppressSemantics, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_884, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_886, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionalColon; return; }
      case ARTL_ARTV3_optionSingle_886: 
        /* Nonterminal template end */
        if (!ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_optionSingle_888, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_trueFalse; return; }
      case ARTL_ARTV3_optionSingle_888: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_892: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexerData, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_894, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_898: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earley, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_900, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_904: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earley2007LinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_906, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_910: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyLinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_912, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_916: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyIndexedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_918, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_922: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyIndexedPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_924, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_928: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyIndexedData, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_930, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_934: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyTable, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_936, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_940: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyTableLinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_942, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_946: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyTableIndexedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_948, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_952: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyTableIndexedPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_954, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_958: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyTableIndexedData, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_960, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_964: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_cnp, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_966, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_970: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_cnpLinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_972, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_976: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_cnpIndexedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_978, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_982: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_cnpIndexedPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_984, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_988: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_cnpGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_990, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_994: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lcnp, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_996, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_1000: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lcnpLinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_1002, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_1006: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lcnpIndexedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_1008, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_1012: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lcnpIndexedPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_1014, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_1018: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lcnpGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_1020, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_1024: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_gll, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_1026, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_1030: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_gllGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_1032, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_1036: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_gllTWEGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_1038, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_1042: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_gllClusteredGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_1044, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_1048: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_mgll, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_1050, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_1054: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_mgllGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_1056, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_1060: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_osbrd, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_1062, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionSingle: match production*/
      case ARTL_ARTV3_optionSingle_1066: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_osbrdGenerator, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionSingle_1068, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_optionalColon() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.optionalColon production descriptor loads*/
      case ARTL_ARTV3_optionalColon: 
        if (ARTSet197[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionalColon_1072, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_optionalColon_1076, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.optionalColon: match production*/
      case ARTL_ARTV3_optionalColon_1072: 
        /* Cat/unary template start */
        /* Epsilon template start */
        artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionalColon_1074, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Epsilon template end */
        /* Cat/unary template end */
        if (!ARTSet197[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.optionalColon: match production*/
      case ARTL_ARTV3_optionalColon_1076: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_optionalColon_1078, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet197[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_options() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.options production descriptor loads*/
      case ARTL_ARTV3_options: 
        if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_options_250, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_options_254, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.options: match production*/
      case ARTL_ARTV3_options_250: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_options_252, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionSingle; return; }
      case ARTL_ARTV3_options_252: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.options: match production*/
      case ARTL_ARTV3_options_254: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_options_256, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_optionSingle; return; }
      case ARTL_ARTV3_options_256: 
        /* Nonterminal template end */
        if (!ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_options_258, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_options; return; }
      case ARTL_ARTV3_options_258: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_rhs() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.rhs production descriptor loads*/
      case ARTL_ARTV3_rhs: 
        if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_rhs_1158, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_rhs_1164, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.rhs: match production*/
      case ARTL_ARTV3_rhs_1158: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_rhs_1160, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_cat; return; }
      case ARTL_ARTV3_rhs_1160: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.rhs: match production*/
      case ARTL_ARTV3_rhs_1164: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_rhs_1166, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_cat; return; }
      case ARTL_ARTV3_rhs_1166: 
        /* Nonterminal template end */
        if (!ARTSet35[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_rhs_1170, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_rhs_1174, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_rhs; return; }
      case ARTL_ARTV3_rhs_1174: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_slot() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.slot production descriptor loads*/
      case ARTL_ARTV3_slot: 
        if (ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_slot_1220, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet30[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_slot_1224, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.slot: match production*/
      case ARTL_ARTV3_slot_1220: 
        /* Cat/unary template start */
        /* Epsilon template start */
        artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_slot_1222, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Epsilon template end */
        /* Cat/unary template end */
        if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.slot: match production*/
      case ARTL_ARTV3_slot_1224: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_slot_1226, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_action; return; }
      case ARTL_ARTV3_slot_1226: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_term() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.term production descriptor loads*/
      case ARTL_ARTV3_term: 
        if (ARTSet8[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_term_1536, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet10[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_term_1540, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_term_1544, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_term_1548, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_term_1552, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.term: match production*/
      case ARTL_ARTV3_term_1536: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_term_1538, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_INTEGER; return; }
      case ARTL_ARTV3_term_1538: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.term: match production*/
      case ARTL_ARTV3_term_1540: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_term_1542, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_REAL; return; }
      case ARTL_ARTV3_term_1542: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.term: match production*/
      case ARTL_ARTV3_term_1544: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_term_1546, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_STRING_DQ; return; }
      case ARTL_ARTV3_term_1546: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.term: match production*/
      case ARTL_ARTV3_term_1548: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_term_1550, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_term_1550: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.term: match production*/
      case ARTL_ARTV3_term_1552: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_term_1554, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_ID; return; }
      case ARTL_ARTV3_term_1554: 
        /* Nonterminal template end */
        if (!ARTSet76[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_term_1556, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_term_1558, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_terms; return; }
      case ARTL_ARTV3_term_1558: 
        /* Nonterminal template end */
        if (!ARTSet77[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_term_1560, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_terminaliser() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.terminaliser production descriptor loads*/
      case ARTL_ARTV3_terminaliser: 
        if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_terminaliser_130, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_terminaliser_136, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.terminaliser: match production*/
      case ARTL_ARTV3_terminaliser_130: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_terminaliser_132, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_nonterminal; return; }
      case ARTL_ARTV3_terminaliser_132: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet198[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.terminaliser: match production*/
      case ARTL_ARTV3_terminaliser_136: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_terminaliser_138, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_builtinTerminal; return; }
      case ARTL_ARTV3_terminaliser_138: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet198[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_terminalisers() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.terminalisers production descriptor loads*/
      case ARTL_ARTV3_terminalisers: 
        if (ARTSet67[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_terminalisers_114, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet67[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_terminalisers_120, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.terminalisers: match production*/
      case ARTL_ARTV3_terminalisers_114: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_terminalisers_118, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_terminaliser; return; }
      case ARTL_ARTV3_terminalisers_118: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.terminalisers: match production*/
      case ARTL_ARTV3_terminalisers_120: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_terminalisers_124, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_terminaliser; return; }
      case ARTL_ARTV3_terminalisers_124: 
        /* Nonterminal template end */
        if (!ARTSet67[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_terminalisers_128, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_terminalisers; return; }
      case ARTL_ARTV3_terminalisers_128: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_terms() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.terms production descriptor loads*/
      case ARTL_ARTV3_terms: 
        if (ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_terms_1570, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_terms_1574, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.terms: match production*/
      case ARTL_ARTV3_terms_1570: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_terms_1572, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_term; return; }
      case ARTL_ARTV3_terms_1572: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet77[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.terms: match production*/
      case ARTL_ARTV3_terms_1574: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_terms_1576, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_term; return; }
      case ARTL_ARTV3_terms_1576: 
        /* Nonterminal template end */
        if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_terms_1578, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_terms_1580, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_term; return; }
      case ARTL_ARTV3_terms_1580: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet77[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_termsOpt() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.termsOpt production descriptor loads*/
      case ARTL_ARTV3_termsOpt: 
        if (ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_termsOpt_1562, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_termsOpt_1566, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.termsOpt: match production*/
      case ARTL_ARTV3_termsOpt_1562: 
        /* Cat/unary template start */
        /* Epsilon template start */
        artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_termsOpt_1564, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Epsilon template end */
        /* Cat/unary template end */
        if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.termsOpt: match production*/
      case ARTL_ARTV3_termsOpt_1566: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_termsOpt_1568, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_terms; return; }
      case ARTL_ARTV3_termsOpt_1568: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_text() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.text production descriptor loads*/
      case ARTL_ARTV3_text: 
        if (ARTSet200[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_text_2, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet93[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_text_8, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.text: match production*/
      case ARTL_ARTV3_text_2: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_text_6, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_textElements; return; }
      case ARTL_ARTV3_text_6: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.text: match production*/
      case ARTL_ARTV3_text_8: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_text_12, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_modules; return; }
      case ARTL_ARTV3_text_12: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_textElement() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.textElement production descriptor loads*/
      case ARTL_ARTV3_textElement: 
        if (ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_textElement_44, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_textElement_48, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_textElement_52, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.textElement: match production*/
      case ARTL_ARTV3_textElement_44: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_textElement_46, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_directive; return; }
      case ARTL_ARTV3_textElement_46: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.textElement: match production*/
      case ARTL_ARTV3_textElement_48: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_textElement_50, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_grammarRule; return; }
      case ARTL_ARTV3_textElement_50: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.textElement: match production*/
      case ARTL_ARTV3_textElement_52: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_textElement_54, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_deleter; return; }
      case ARTL_ARTV3_textElement_54: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_textElements() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.textElements production descriptor loads*/
      case ARTL_ARTV3_textElements: 
        if (ARTSet201[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_textElements_34, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet93[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_textElements_40, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.textElements: match production*/
      case ARTL_ARTV3_textElements_34: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_textElements_36, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_textElement; return; }
      case ARTL_ARTV3_textElements_36: 
        /* Nonterminal template end */
        if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_textElements_38, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_textElements; return; }
      case ARTL_ARTV3_textElements_38: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet93[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.textElements: match production*/
      case ARTL_ARTV3_textElements_40: 
        /* Cat/unary template start */
        /* Epsilon template start */
        artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_textElements_42, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Epsilon template end */
        /* Cat/unary template end */
        if (!ARTSet93[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_trueFalse() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.trueFalse production descriptor loads*/
      case ARTL_ARTV3_trueFalse: 
        if (ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_trueFalse_1080, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet202[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_trueFalse_1086, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet203[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_trueFalse_1092, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.trueFalse: match production*/
      case ARTL_ARTV3_trueFalse_1080: 
        /* Cat/unary template start */
        /* Epsilon template start */
        artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_trueFalse_1082, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Epsilon template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.trueFalse: match production*/
      case ARTL_ARTV3_trueFalse_1086: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_true, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_trueFalse_1088, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.trueFalse: match production*/
      case ARTL_ARTV3_trueFalse_1092: 
        /* Cat/unary template start */
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_false, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_trueFalse_1094, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        /* Cat/unary template end */
        if (!ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void ARTPF_ARTV3_union() {
    switch (artCurrentRestartLabel) {
        /* Nonterminal ARTV3.union production descriptor loads*/
      case ARTL_ARTV3_union: 
        if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_union_1274, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
          artFindDescriptor(ARTL_ARTV3_union_1278, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal ARTV3.union: match production*/
      case ARTL_ARTV3_union_1274: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_union_1276, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_not; return; }
      case ARTL_ARTV3_union_1276: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
        /* Nonterminal ARTV3.union: match production*/
      case ARTL_ARTV3_union_1278: 
        /* Cat/unary template start */
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_union_1280, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_union; return; }
      case ARTL_ARTV3_union_1280: 
        /* Nonterminal template end */
        if (!ARTSet204[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Terminal template start */
        artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
        artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR_BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
        artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
        artCurrentSPPFNode = artFindSPPF(ARTL_ARTV3_union_1282, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
        /* Terminal template end */
        if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        /* Nonterminal template start */
        artCurrentGSSNode = artFindGSS(ARTL_ARTV3_union_1284, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTL_ARTV3_not; return; }
      case ARTL_ARTV3_union_1284: 
        /* Nonterminal template end */
        /* Cat/unary template end */
        if (!ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
        artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
        { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
    }
  }

  public void artParseBody(String artInputString, int artStartLabel) throws ARTException {
    artSetupCompleteTime = artReadClock();
    artStartSymbolLabel = artStartLabel;
    artIsInLanguage = false;
    artLexicaliseUsingLongestMatch(artInputString);
    artLexCompleteTime = artReadClock();
    artDummySPPFNode = artFindSPPFInitial(ARTL_DUMMY, 0, 0);
    artCurrentSPPFNode = artDummySPPFNode;
    artRootGSSNode = artFindGSS(ARTL_EOS, 0, 0, 0);
    artCurrentGSSNode = artRootGSSNode;
    artCurrentRestartLabel = artStartSymbolLabel;
    artCurrentInputPairIndex = 0;
    artCurrentInputPairReference = 0;
    while (true)
      switch (artlhsL[artCurrentRestartLabel]) {
        case ARTL_ARTV3_CHAR_BQ: 
          ARTPF_ARTV3_CHAR_BQ();
          break;
        case ARTL_ARTV3_ID: 
          ARTPF_ARTV3_ID();
          break;
        case ARTL_ARTV3_IDList: 
          ARTPF_ARTV3_IDList();
          break;
        case ARTL_ARTV3_IDopt: 
          ARTPF_ARTV3_IDopt();
          break;
        case ARTL_ARTV3_INTEGER: 
          ARTPF_ARTV3_INTEGER();
          break;
        case ARTL_ARTV3_REAL: 
          ARTPF_ARTV3_REAL();
          break;
        case ARTL_ARTV3_STRING_BRACE_NEST: 
          ARTPF_ARTV3_STRING_BRACE_NEST();
          break;
        case ARTL_ARTV3_STRING_DOLLAR: 
          ARTPF_ARTV3_STRING_DOLLAR();
          break;
        case ARTL_ARTV3_STRING_DQ: 
          ARTPF_ARTV3_STRING_DQ();
          break;
        case ARTL_ARTV3_STRING_PLAIN_SQ: 
          ARTPF_ARTV3_STRING_PLAIN_SQ();
          break;
        case ARTL_ARTV3_TYPE: 
          ARTPF_ARTV3_TYPE();
          break;
        case ARTL_ARTV3_TypeList: 
          ARTPF_ARTV3_TypeList();
          break;
        case ARTL_ARTV3_TypeNest: 
          ARTPF_ARTV3_TypeNest();
          break;
        case ARTL_ARTV3_abbrev: 
          ARTPF_ARTV3_abbrev();
          break;
        case ARTL_ARTV3_action: 
          ARTPF_ARTV3_action();
          break;
        case ARTL_ARTV3_alt: 
          ARTPF_ARTV3_alt();
          break;
        case ARTL_ARTV3_alt1: 
          ARTPF_ARTV3_alt1();
          break;
        case ARTL_ARTV3_annotation: 
          ARTPF_ARTV3_annotation();
          break;
        case ARTL_ARTV3_annotations: 
          ARTPF_ARTV3_annotations();
          break;
        case ARTL_ARTV3_attribute: 
          ARTPF_ARTV3_attribute();
          break;
        case ARTL_ARTV3_attributes: 
          ARTPF_ARTV3_attributes();
          break;
        case ARTL_ARTV3_attributesOpt: 
          ARTPF_ARTV3_attributesOpt();
          break;
        case ARTL_ARTV3_builtinTerminal: 
          ARTPF_ARTV3_builtinTerminal();
          break;
        case ARTL_ARTV3_caseInsensitiveTerminal: 
          ARTPF_ARTV3_caseInsensitiveTerminal();
          break;
        case ARTL_ARTV3_caseSensitiveTerminal: 
          ARTPF_ARTV3_caseSensitiveTerminal();
          break;
        case ARTL_ARTV3_cat: 
          ARTPF_ARTV3_cat();
          break;
        case ARTL_ARTV3_catTail: 
          ARTPF_ARTV3_catTail();
          break;
        case ARTL_ARTV3_characterSetTerminal: 
          ARTPF_ARTV3_characterSetTerminal();
          break;
        case ARTL_ARTV3_characterTerminal: 
          ARTPF_ARTV3_characterTerminal();
          break;
        case ARTL_ARTV3_choiceElement: 
          ARTPF_ARTV3_choiceElement();
          break;
        case ARTL_ARTV3_chooser: 
          ARTPF_ARTV3_chooser();
          break;
        case ARTL_ARTV3_choosers: 
          ARTPF_ARTV3_choosers();
          break;
        case ARTL_ARTV3_delay: 
          ARTPF_ARTV3_delay();
          break;
        case ARTL_ARTV3_deleter: 
          ARTPF_ARTV3_deleter();
          break;
        case ARTL_ARTV3_diff: 
          ARTPF_ARTV3_diff();
          break;
        case ARTL_ARTV3_directive: 
          ARTPF_ARTV3_directive();
          break;
        case ARTL_ARTV3_element: 
          ARTPF_ARTV3_element();
          break;
        case ARTL_ARTV3_epsilon: 
          ARTPF_ARTV3_epsilon();
          break;
        case ARTL_ARTV3_fold: 
          ARTPF_ARTV3_fold();
          break;
        case ARTL_ARTV3_gather: 
          ARTPF_ARTV3_gather();
          break;
        case ARTL_ARTV3_grammarRule: 
          ARTPF_ARTV3_grammarRule();
          break;
        case ARTL_ARTV3_insertion: 
          ARTPF_ARTV3_insertion();
          break;
        case ARTL_ARTV3_insertionName: 
          ARTPF_ARTV3_insertionName();
          break;
        case ARTL_ARTV3_iter: 
          ARTPF_ARTV3_iter();
          break;
        case ARTL_ARTV3_moduleHeader: 
          ARTPF_ARTV3_moduleHeader();
          break;
        case ARTL_ARTV3_modules: 
          ARTPF_ARTV3_modules();
          break;
        case ARTL_ARTV3_name: 
          ARTPF_ARTV3_name();
          break;
        case ARTL_ARTV3_nonterminal: 
          ARTPF_ARTV3_nonterminal();
          break;
        case ARTL_ARTV3_not: 
          ARTPF_ARTV3_not();
          break;
        case ARTL_ARTV3_optionSingle: 
          ARTPF_ARTV3_optionSingle();
          break;
        case ARTL_ARTV3_optionalColon: 
          ARTPF_ARTV3_optionalColon();
          break;
        case ARTL_ARTV3_options: 
          ARTPF_ARTV3_options();
          break;
        case ARTL_ARTV3_rhs: 
          ARTPF_ARTV3_rhs();
          break;
        case ARTL_ARTV3_slot: 
          ARTPF_ARTV3_slot();
          break;
        case ARTL_ARTV3_term: 
          ARTPF_ARTV3_term();
          break;
        case ARTL_ARTV3_terminaliser: 
          ARTPF_ARTV3_terminaliser();
          break;
        case ARTL_ARTV3_terminalisers: 
          ARTPF_ARTV3_terminalisers();
          break;
        case ARTL_ARTV3_terms: 
          ARTPF_ARTV3_terms();
          break;
        case ARTL_ARTV3_termsOpt: 
          ARTPF_ARTV3_termsOpt();
          break;
        case ARTL_ARTV3_text: 
          ARTPF_ARTV3_text();
          break;
        case ARTL_ARTV3_textElement: 
          ARTPF_ARTV3_textElement();
          break;
        case ARTL_ARTV3_textElements: 
          ARTPF_ARTV3_textElements();
          break;
        case ARTL_ARTV3_trueFalse: 
          ARTPF_ARTV3_trueFalse();
          break;
        case ARTL_ARTV3_union: 
          ARTPF_ARTV3_union();
          break;
        case ARTX_DESPATCH: 
          if (artNoDescriptors()) { 
            artCheckAcceptance();
            artParseCompleteTime = artReadClock();
            return;
           }
          artUnloadDescriptor();
      }
  }

  public void ARTSet1initialise() {
    ARTSet1 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet1, 0, artSetExtent, false);
  }

  public void ARTSet122initialise() {
    ARTSet122 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet122, 0, artSetExtent, false);
    ARTSet122[ARTTS_showSPPFCore] = true;
  }

  public void ARTSet185initialise() {
    ARTSet185 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet185, 0, artSetExtent, false);
    ARTSet185[ARTTS_lcnpLinkedAPI] = true;
  }

  public void ARTSet117initialise() {
    ARTSet117 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet117, 0, artSetExtent, false);
    ARTSet117[ARTTS_phaseTR] = true;
  }

  public void ARTSet154initialise() {
    ARTSet154 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet154, 0, artSetExtent, false);
    ARTSet154[ARTTS_generateDynamic] = true;
  }

  public void ARTSet47initialise() {
    ARTSet47 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet47, 0, artSetExtent, false);
    ARTSet47[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet47[ARTTS__BACKSLASH_BACKSLASH] = true;
  }

  public void ARTSet107initialise() {
    ARTSet107 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet107, 0, artSetExtent, false);
    ARTSet107[ARTTB_ID] = true;
    ARTSet107[ARTTS__COLON] = true;
  }

  public void ARTSet7initialise() {
    ARTSet7 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet7, 0, artSetExtent, false);
    ARTSet7[ARTTB_ID] = true;
  }

  public void ARTSet20initialise() {
    ARTSet20 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet20, 0, artSetExtent, false);
    ARTSet20[ARTTB_ID] = true;
    ARTSet20[ARTTS__GT] = true;
  }

  public void ARTSet170initialise() {
    ARTSet170 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet170, 0, artSetExtent, false);
    ARTSet170[ARTTS_earleyLinkedAPI] = true;
  }

  public void ARTSet175initialise() {
    ARTSet175 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet175, 0, artSetExtent, false);
    ARTSet175[ARTTS_earleyTableLinkedAPI] = true;
  }

  public void ARTSet45initialise() {
    ARTSet45 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet45, 0, artSetExtent, false);
    ARTSet45[ARTX_EOS] = true;
    ARTSet45[ARTTB_CHAR_BQ] = true;
    ARTSet45[ARTTB_ID] = true;
    ARTSet45[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet45[ARTTB_STRING_DOLLAR] = true;
    ARTSet45[ARTTB_STRING_DQ] = true;
    ARTSet45[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet45[ARTTS__SHREIK] = true;
    ARTSet45[ARTTS__HASH] = true;
    ARTSet45[ARTTS__AMPERSAND] = true;
    ARTSet45[ARTTS__LPAR] = true;
    ARTSet45[ARTTS__RPAR] = true;
    ARTSet45[ARTTS__STAR] = true;
    ARTSet45[ARTTS__PLUS] = true;
    ARTSet45[ARTTS__PERIOD] = true;
    ARTSet45[ARTTS__COLON] = true;
    ARTSet45[ARTTS__LT] = true;
    ARTSet45[ARTTS__LT_LT] = true;
    ARTSet45[ARTTS__GT] = true;
    ARTSet45[ARTTS__GT_GT] = true;
    ARTSet45[ARTTS__QUERY] = true;
    ARTSet45[ARTTS__AT] = true;
    ARTSet45[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet45[ARTTS__RBRACK] = true;
    ARTSet45[ARTTS__UPARROW] = true;
    ARTSet45[ARTTS__UPARROW_UPARROW] = true;
    ARTSet45[ARTTS__UPARROW_UPARROW_UPARROW] = true;
    ARTSet45[ARTTS__UPARROW_] = true;
    ARTSet45[ARTTS_choose] = true;
    ARTSet45[ARTTS_import] = true;
    ARTSet45[ARTTS_longest] = true;
    ARTSet45[ARTTS_module] = true;
    ARTSet45[ARTTS_option] = true;
    ARTSet45[ARTTS_prelude] = true;
    ARTSet45[ARTTS_start] = true;
    ARTSet45[ARTTS_support] = true;
    ARTSet45[ARTTS_terminal] = true;
    ARTSet45[ARTTS_whitespace] = true;
    ARTSet45[ARTTS__BAR] = true;
    ARTSet45[ARTTS__BAR_BAR] = true;
    ARTSet45[ARTTI__QUOTE_QUOTE] = true;
  }

  public void ARTSet82initialise() {
    ARTSet82 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet82, 0, artSetExtent, false);
    ARTSet82[ARTTS__COLON_COLON_EQUAL] = true;
    ARTSet82[ARTTS__LT] = true;
  }

  public void ARTSet167initialise() {
    ARTSet167 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet167, 0, artSetExtent, false);
    ARTSet167[ARTTS_lexerData] = true;
  }

  public void ARTSet129initialise() {
    ARTSet129 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet129, 0, artSetExtent, false);
    ARTSet129[ARTTS_ebnfMultiplyOut] = true;
  }

  public void ARTSet178initialise() {
    ARTSet178 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet178, 0, artSetExtent, false);
    ARTSet178[ARTTS_earleyTableIndexedData] = true;
  }

  public void ARTSet201initialise() {
    ARTSet201 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet201, 0, artSetExtent, false);
    ARTSet201[ARTTB_ID] = true;
    ARTSet201[ARTTB_STRING_DOLLAR] = true;
    ARTSet201[ARTTS_choose] = true;
    ARTSet201[ARTTS_import] = true;
    ARTSet201[ARTTS_option] = true;
    ARTSet201[ARTTS_prelude] = true;
    ARTSet201[ARTTS_start] = true;
    ARTSet201[ARTTS_support] = true;
    ARTSet201[ARTTS_terminal] = true;
    ARTSet201[ARTTS_whitespace] = true;
  }

  public void ARTSet50initialise() {
    ARTSet50 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet50, 0, artSetExtent, false);
    ARTSet50[ARTTB_CHAR_BQ] = true;
    ARTSet50[ARTTB_ID] = true;
    ARTSet50[ARTTB_STRING_DOLLAR] = true;
    ARTSet50[ARTTB_STRING_DQ] = true;
    ARTSet50[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet50[ARTTS__AMPERSAND] = true;
    ARTSet50[ARTTS__PERIOD] = true;
    ARTSet50[ARTTI__QUOTE_QUOTE] = true;
  }

  public void ARTSet11initialise() {
    ARTSet11 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet11, 0, artSetExtent, false);
    ARTSet11[ARTX_EOS] = true;
    ARTSet11[ARTTB_CHAR_BQ] = true;
    ARTSet11[ARTTB_ID] = true;
    ARTSet11[ARTTB_STRING_DOLLAR] = true;
    ARTSet11[ARTTB_STRING_DQ] = true;
    ARTSet11[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet11[ARTTS__HASH] = true;
    ARTSet11[ARTTS__AMPERSAND] = true;
    ARTSet11[ARTTS__LPAR] = true;
    ARTSet11[ARTTS__RPAR] = true;
    ARTSet11[ARTTS__COMMA] = true;
    ARTSet11[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet11[ARTTS__RBRACK] = true;
    ARTSet11[ARTTS_choose] = true;
    ARTSet11[ARTTS_import] = true;
    ARTSet11[ARTTS_module] = true;
    ARTSet11[ARTTS_option] = true;
    ARTSet11[ARTTS_prelude] = true;
    ARTSet11[ARTTS_start] = true;
    ARTSet11[ARTTS_support] = true;
    ARTSet11[ARTTS_terminal] = true;
    ARTSet11[ARTTS_whitespace] = true;
    ARTSet11[ARTTS__BAR] = true;
  }

  public void ARTSet49initialise() {
    ARTSet49 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet49, 0, artSetExtent, false);
    ARTSet49[ARTTS__PERIOD_PERIOD] = true;
  }

  public void ARTSet57initialise() {
    ARTSet57 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet57, 0, artSetExtent, false);
    ARTSet57[ARTTS__GT_GT] = true;
  }

  public void ARTSet80initialise() {
    ARTSet80 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet80, 0, artSetExtent, false);
    ARTSet80[ARTTS__UPARROW_UPARROW] = true;
  }

  public void ARTSet109initialise() {
    ARTSet109 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet109, 0, artSetExtent, false);
    ARTSet109[ARTTS_phaseModule] = true;
  }

  public void ARTSet202initialise() {
    ARTSet202 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet202, 0, artSetExtent, false);
    ARTSet202[ARTTS_true] = true;
  }

  public void ARTSet32initialise() {
    ARTSet32 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet32, 0, artSetExtent, false);
    ARTSet32[ARTTB_ID] = true;
    ARTSet32[ARTTB_INTEGER] = true;
    ARTSet32[ARTTB_REAL] = true;
    ARTSet32[ARTTB_STRING_DQ] = true;
  }

  public void ARTSet78initialise() {
    ARTSet78 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet78, 0, artSetExtent, false);
    ARTSet78[ARTTS__UPARROW_] = true;
  }

  public void ARTSet90initialise() {
    ARTSet90 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet90, 0, artSetExtent, false);
    ARTSet90[ARTX_EOS] = true;
  }

  public void ARTSet94initialise() {
    ARTSet94 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet94, 0, artSetExtent, false);
    ARTSet94[ARTX_EOS] = true;
    ARTSet94[ARTTB_ID] = true;
    ARTSet94[ARTTB_STRING_DOLLAR] = true;
    ARTSet94[ARTTS_FIFODescriptors] = true;
    ARTSet94[ARTTS_choose] = true;
    ARTSet94[ARTTS_cnp] = true;
    ARTSet94[ARTTS_cnpGeneratorPool] = true;
    ARTSet94[ARTTS_cnpIndexedAPI] = true;
    ARTSet94[ARTTS_cnpIndexedPool] = true;
    ARTSet94[ARTTS_cnpLinkedAPI] = true;
    ARTSet94[ARTTS_earley] = true;
    ARTSet94[ARTTS_earley2007LinkedAPI] = true;
    ARTSet94[ARTTS_earleyIndexedAPI] = true;
    ARTSet94[ARTTS_earleyIndexedData] = true;
    ARTSet94[ARTTS_earleyIndexedPool] = true;
    ARTSet94[ARTTS_earleyLinkedAPI] = true;
    ARTSet94[ARTTS_earleyTable] = true;
    ARTSet94[ARTTS_earleyTableIndexedAPI] = true;
    ARTSet94[ARTTS_earleyTableIndexedData] = true;
    ARTSet94[ARTTS_earleyTableIndexedPool] = true;
    ARTSet94[ARTTS_earleyTableLinkedAPI] = true;
    ARTSet94[ARTTS_ebnfClosureLeft] = true;
    ARTSet94[ARTTS_ebnfClosureRight] = true;
    ARTSet94[ARTTS_ebnfLeftFactor] = true;
    ARTSet94[ARTTS_ebnfMultiplyOut] = true;
    ARTSet94[ARTTS_ebnfracketToNonterminal] = true;
    ARTSet94[ARTTS_generateC_PLUS_PLUS] = true;
    ARTSet94[ARTTS_generateDynamic] = true;
    ARTSet94[ARTTS_generateFragment] = true;
    ARTSet94[ARTTS_generateJava] = true;
    ARTSet94[ARTTS_generatePool] = true;
    ARTSet94[ARTTS_generateState] = true;
    ARTSet94[ARTTS_generateStatic] = true;
    ARTSet94[ARTTS_gll] = true;
    ARTSet94[ARTTS_gllClusteredGeneratorPool] = true;
    ARTSet94[ARTTS_gllGeneratorPool] = true;
    ARTSet94[ARTTS_gllTWEGeneratorPool] = true;
    ARTSet94[ARTTS_import] = true;
    ARTSet94[ARTTS_inputFile] = true;
    ARTSet94[ARTTS_inputFileIfExists] = true;
    ARTSet94[ARTTS_inputString] = true;
    ARTSet94[ARTTS_lcnp] = true;
    ARTSet94[ARTTS_lcnpGeneratorPool] = true;
    ARTSet94[ARTTS_lcnpIndexedAPI] = true;
    ARTSet94[ARTTS_lcnpIndexedPool] = true;
    ARTSet94[ARTTS_lcnpLinkedAPI] = true;
    ARTSet94[ARTTS_lexCFParse] = true;
    ARTSet94[ARTTS_lexCFRecognise] = true;
    ARTSet94[ARTTS_lexDFA] = true;
    ARTSet94[ARTTS_lexDead] = true;
    ARTSet94[ARTTS_lexExtents] = true;
    ARTSet94[ARTTS_lexLongestAcross] = true;
    ARTSet94[ARTTS_lexLongestWithin] = true;
    ARTSet94[ARTTS_lexPrintTWESet] = true;
    ARTSet94[ARTTS_lexPriority] = true;
    ARTSet94[ARTTS_lexRecursive] = true;
    ARTSet94[ARTTS_lexSegments] = true;
    ARTSet94[ARTTS_lexWSSuffix] = true;
    ARTSet94[ARTTS_lexerData] = true;
    ARTSet94[ARTTS_lexerName] = true;
    ARTSet94[ARTTS_mgll] = true;
    ARTSet94[ARTTS_mgllGeneratorPool] = true;
    ARTSet94[ARTTS_module] = true;
    ARTSet94[ARTTS_namespace] = true;
    ARTSet94[ARTTS_option] = true;
    ARTSet94[ARTTS_osbrd] = true;
    ARTSet94[ARTTS_osbrdGenerator] = true;
    ARTSet94[ARTTS_outputDirectory] = true;
    ARTSet94[ARTTS_parserName] = true;
    ARTSet94[ARTTS_phaseAG] = true;
    ARTSet94[ARTTS_phaseDerivationSelect] = true;
    ARTSet94[ARTTS_phaseGIFT] = true;
    ARTSet94[ARTTS_phaseLex] = true;
    ARTSet94[ARTTS_phaseModule] = true;
    ARTSet94[ARTTS_phaseParse] = true;
    ARTSet94[ARTTS_phasePostChoose] = true;
    ARTSet94[ARTTS_phasePreChoose] = true;
    ARTSet94[ARTTS_phaseSOS] = true;
    ARTSet94[ARTTS_phaseTR] = true;
    ARTSet94[ARTTS_postLongestAcross] = true;
    ARTSet94[ARTTS_postLongestWithin] = true;
    ARTSet94[ARTTS_postPriority] = true;
    ARTSet94[ARTTS_postUseTerminals] = true;
    ARTSet94[ARTTS_predictivePops] = true;
    ARTSet94[ARTTS_prelude] = true;
    ARTSet94[ARTTS_showAG] = true;
    ARTSet94[ARTTS_showAll] = true;
    ARTSet94[ARTTS_showBSR] = true;
    ARTSet94[ARTTS_showDT] = true;
    ARTSet94[ARTTS_showGIFT] = true;
    ARTSet94[ARTTS_showSOS] = true;
    ARTSet94[ARTTS_showSPPFCore] = true;
    ARTSet94[ARTTS_showSPPFFull] = true;
    ARTSet94[ARTTS_showTR] = true;
    ARTSet94[ARTTS_showTWE] = true;
    ARTSet94[ARTTS_start] = true;
    ARTSet94[ARTTS_statistics] = true;
    ARTSet94[ARTTS_support] = true;
    ARTSet94[ARTTS_suppressPopGuard] = true;
    ARTSet94[ARTTS_suppressProductionGuard] = true;
    ARTSet94[ARTTS_suppressSemantics] = true;
    ARTSet94[ARTTS_suppressTestRepeat] = true;
    ARTSet94[ARTTS_terminal] = true;
    ARTSet94[ARTTS_trace] = true;
    ARTSet94[ARTTS_verbosity] = true;
    ARTSet94[ARTTS_whitespace] = true;
  }

  public void ARTSet133initialise() {
    ARTSet133 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet133, 0, artSetExtent, false);
    ARTSet133[ARTTS_ebnfLeftFactor] = true;
  }

  public void ARTSet69initialise() {
    ARTSet69 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet69, 0, artSetExtent, false);
    ARTSet69[ARTTS_choose] = true;
  }

  public void ARTSet65initialise() {
    ARTSet65 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet65, 0, artSetExtent, false);
    ARTSet65[ARTTS_start] = true;
  }

  public void ARTSet194initialise() {
    ARTSet194 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet194, 0, artSetExtent, false);
    ARTSet194[ARTTS_mgllGeneratorPool] = true;
  }

  public void ARTSet203initialise() {
    ARTSet203 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet203, 0, artSetExtent, false);
    ARTSet203[ARTTS_false] = true;
  }

  public void ARTSet190initialise() {
    ARTSet190 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet190, 0, artSetExtent, false);
    ARTSet190[ARTTS_gllGeneratorPool] = true;
  }

  public void ARTSet136initialise() {
    ARTSet136 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet136, 0, artSetExtent, false);
    ARTSet136[ARTTS_lexCFParse] = true;
  }

  public void ARTSet102initialise() {
    ARTSet102 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet102, 0, artSetExtent, false);
    ARTSet102[ARTTS_false] = true;
    ARTSet102[ARTTS_true] = true;
  }

  public void ARTSet168initialise() {
    ARTSet168 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet168, 0, artSetExtent, false);
    ARTSet168[ARTTS_earley] = true;
  }

  public void ARTSet196initialise() {
    ARTSet196 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet196, 0, artSetExtent, false);
    ARTSet196[ARTTS_osbrdGenerator] = true;
  }

  public void ARTSet40initialise() {
    ARTSet40 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet40, 0, artSetExtent, false);
    ARTSet40[ARTTS__UPARROW] = true;
    ARTSet40[ARTTS__UPARROW_UPARROW] = true;
    ARTSet40[ARTTS__UPARROW_UPARROW_UPARROW] = true;
    ARTSet40[ARTTS__UPARROW_] = true;
  }

  public void ARTSet72initialise() {
    ARTSet72 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet72, 0, artSetExtent, false);
    ARTSet72[ARTTS_prelude] = true;
  }

  public void ARTSet95initialise() {
    ARTSet95 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet95, 0, artSetExtent, false);
    ARTSet95[ARTTS_verbosity] = true;
  }

  public void ARTSet125initialise() {
    ARTSet125 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet125, 0, artSetExtent, false);
    ARTSet125[ARTTS_showAG] = true;
  }

  public void ARTSet162initialise() {
    ARTSet162 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet162, 0, artSetExtent, false);
    ARTSet162[ARTTS_FIFODescriptors] = true;
  }

  public void ARTSet18initialise() {
    ARTSet18 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet18, 0, artSetExtent, false);
    ARTSet18[ARTTB_STRING_PLAIN_SQ] = true;
  }

  public void ARTSet33initialise() {
    ARTSet33 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet33, 0, artSetExtent, false);
    ARTSet33[ARTTB_CHAR_BQ] = true;
    ARTSet33[ARTTB_ID] = true;
    ARTSet33[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet33[ARTTB_STRING_DOLLAR] = true;
    ARTSet33[ARTTB_STRING_DQ] = true;
    ARTSet33[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet33[ARTTS__HASH] = true;
    ARTSet33[ARTTS__AMPERSAND] = true;
    ARTSet33[ARTTS__LPAR] = true;
    ARTSet33[ARTTS__BACKSLASH_BACKSLASH] = true;
  }

  public void ARTSet66initialise() {
    ARTSet66 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet66, 0, artSetExtent, false);
    ARTSet66[ARTTS_whitespace] = true;
  }

  public void ARTSet186initialise() {
    ARTSet186 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet186, 0, artSetExtent, false);
    ARTSet186[ARTTS_lcnpIndexedAPI] = true;
  }

  public void ARTSet36initialise() {
    ARTSet36 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet36, 0, artSetExtent, false);
    ARTSet36[ARTTS__SHREIK] = true;
    ARTSet36[ARTTS__COLON] = true;
    ARTSet36[ARTTS__LT] = true;
    ARTSet36[ARTTS__UPARROW] = true;
    ARTSet36[ARTTS__UPARROW_UPARROW] = true;
    ARTSet36[ARTTS__UPARROW_UPARROW_UPARROW] = true;
    ARTSet36[ARTTS__UPARROW_] = true;
  }

  public void ARTSet195initialise() {
    ARTSet195 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet195, 0, artSetExtent, false);
    ARTSet195[ARTTS_osbrd] = true;
  }

  public void ARTSet182initialise() {
    ARTSet182 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet182, 0, artSetExtent, false);
    ARTSet182[ARTTS_cnpIndexedPool] = true;
  }

  public void ARTSet118initialise() {
    ARTSet118 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet118, 0, artSetExtent, false);
    ARTSet118[ARTTS_phaseSOS] = true;
  }

  public void ARTSet130initialise() {
    ARTSet130 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet130, 0, artSetExtent, false);
    ARTSet130[ARTTS_ebnfracketToNonterminal] = true;
  }

  public void ARTSet143initialise() {
    ARTSet143 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet143, 0, artSetExtent, false);
    ARTSet143[ARTTS_lexLongestWithin] = true;
  }

  public void ARTSet155initialise() {
    ARTSet155 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet155, 0, artSetExtent, false);
    ARTSet155[ARTTS_generateStatic] = true;
  }

  public void ARTSet144initialise() {
    ARTSet144 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet144, 0, artSetExtent, false);
    ARTSet144[ARTTS_lexLongestAcross] = true;
  }

  public void ARTSet126initialise() {
    ARTSet126 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet126, 0, artSetExtent, false);
    ARTSet126[ARTTS_showTR] = true;
  }

  public void ARTSet39initialise() {
    ARTSet39 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet39, 0, artSetExtent, false);
    ARTSet39[ARTTS__SHREIK] = true;
  }

  public void ARTSet198initialise() {
    ARTSet198 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet198, 0, artSetExtent, false);
    ARTSet198[ARTX_EOS] = true;
    ARTSet198[ARTTB_ID] = true;
    ARTSet198[ARTTB_STRING_DOLLAR] = true;
    ARTSet198[ARTTS__AMPERSAND] = true;
    ARTSet198[ARTTS_choose] = true;
    ARTSet198[ARTTS_import] = true;
    ARTSet198[ARTTS_module] = true;
    ARTSet198[ARTTS_option] = true;
    ARTSet198[ARTTS_prelude] = true;
    ARTSet198[ARTTS_start] = true;
    ARTSet198[ARTTS_support] = true;
    ARTSet198[ARTTS_terminal] = true;
    ARTSet198[ARTTS_whitespace] = true;
  }

  public void ARTSet75initialise() {
    ARTSet75 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet75, 0, artSetExtent, false);
    ARTSet75[ARTTS__HASH] = true;
  }

  public void ARTSet146initialise() {
    ARTSet146 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet146, 0, artSetExtent, false);
    ARTSet146[ARTTS_postUseTerminals] = true;
  }

  public void ARTSet91initialise() {
    ARTSet91 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet91, 0, artSetExtent, false);
    ARTSet91[ARTTB_ID] = true;
    ARTSet91[ARTTB_STRING_DOLLAR] = true;
    ARTSet91[ARTTS_choose] = true;
    ARTSet91[ARTTS_import] = true;
    ARTSet91[ARTTS_module] = true;
    ARTSet91[ARTTS_option] = true;
    ARTSet91[ARTTS_prelude] = true;
    ARTSet91[ARTTS_start] = true;
    ARTSet91[ARTTS_support] = true;
    ARTSet91[ARTTS_terminal] = true;
    ARTSet91[ARTTS_whitespace] = true;
  }

  public void ARTSet26initialise() {
    ARTSet26 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet26, 0, artSetExtent, false);
    ARTSet26[ARTX_EOS] = true;
    ARTSet26[ARTTB_CHAR_BQ] = true;
    ARTSet26[ARTTB_ID] = true;
    ARTSet26[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet26[ARTTB_STRING_DOLLAR] = true;
    ARTSet26[ARTTB_STRING_DQ] = true;
    ARTSet26[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet26[ARTTS__HASH] = true;
    ARTSet26[ARTTS__AMPERSAND] = true;
    ARTSet26[ARTTS__LPAR] = true;
    ARTSet26[ARTTS__RPAR] = true;
    ARTSet26[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet26[ARTTS__RBRACK] = true;
    ARTSet26[ARTTS_choose] = true;
    ARTSet26[ARTTS_import] = true;
    ARTSet26[ARTTS_module] = true;
    ARTSet26[ARTTS_option] = true;
    ARTSet26[ARTTS_prelude] = true;
    ARTSet26[ARTTS_start] = true;
    ARTSet26[ARTTS_support] = true;
    ARTSet26[ARTTS_terminal] = true;
    ARTSet26[ARTTS_whitespace] = true;
    ARTSet26[ARTTS__BAR] = true;
  }

  public void ARTSet46initialise() {
    ARTSet46 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet46, 0, artSetExtent, false);
    ARTSet46[ARTX_EOS] = true;
    ARTSet46[ARTTB_ID] = true;
    ARTSet46[ARTTB_STRING_DOLLAR] = true;
    ARTSet46[ARTTS__RPAR] = true;
    ARTSet46[ARTTS__RBRACK] = true;
    ARTSet46[ARTTS_choose] = true;
    ARTSet46[ARTTS_import] = true;
    ARTSet46[ARTTS_module] = true;
    ARTSet46[ARTTS_option] = true;
    ARTSet46[ARTTS_prelude] = true;
    ARTSet46[ARTTS_start] = true;
    ARTSet46[ARTTS_support] = true;
    ARTSet46[ARTTS_terminal] = true;
    ARTSet46[ARTTS_whitespace] = true;
    ARTSet46[ARTTS__BAR] = true;
  }

  public void ARTSet44initialise() {
    ARTSet44 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet44, 0, artSetExtent, false);
    ARTSet44[ARTTS__AMPERSAND] = true;
  }

  public void ARTSet101initialise() {
    ARTSet101 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet101, 0, artSetExtent, false);
    ARTSet101[ARTX_EOS] = true;
    ARTSet101[ARTTB_ID] = true;
    ARTSet101[ARTTB_STRING_DOLLAR] = true;
    ARTSet101[ARTTS_FIFODescriptors] = true;
    ARTSet101[ARTTS_choose] = true;
    ARTSet101[ARTTS_cnp] = true;
    ARTSet101[ARTTS_cnpGeneratorPool] = true;
    ARTSet101[ARTTS_cnpIndexedAPI] = true;
    ARTSet101[ARTTS_cnpIndexedPool] = true;
    ARTSet101[ARTTS_cnpLinkedAPI] = true;
    ARTSet101[ARTTS_earley] = true;
    ARTSet101[ARTTS_earley2007LinkedAPI] = true;
    ARTSet101[ARTTS_earleyIndexedAPI] = true;
    ARTSet101[ARTTS_earleyIndexedData] = true;
    ARTSet101[ARTTS_earleyIndexedPool] = true;
    ARTSet101[ARTTS_earleyLinkedAPI] = true;
    ARTSet101[ARTTS_earleyTable] = true;
    ARTSet101[ARTTS_earleyTableIndexedAPI] = true;
    ARTSet101[ARTTS_earleyTableIndexedData] = true;
    ARTSet101[ARTTS_earleyTableIndexedPool] = true;
    ARTSet101[ARTTS_earleyTableLinkedAPI] = true;
    ARTSet101[ARTTS_ebnfClosureLeft] = true;
    ARTSet101[ARTTS_ebnfClosureRight] = true;
    ARTSet101[ARTTS_ebnfLeftFactor] = true;
    ARTSet101[ARTTS_ebnfMultiplyOut] = true;
    ARTSet101[ARTTS_ebnfracketToNonterminal] = true;
    ARTSet101[ARTTS_false] = true;
    ARTSet101[ARTTS_generateC_PLUS_PLUS] = true;
    ARTSet101[ARTTS_generateDynamic] = true;
    ARTSet101[ARTTS_generateFragment] = true;
    ARTSet101[ARTTS_generateJava] = true;
    ARTSet101[ARTTS_generatePool] = true;
    ARTSet101[ARTTS_generateState] = true;
    ARTSet101[ARTTS_generateStatic] = true;
    ARTSet101[ARTTS_gll] = true;
    ARTSet101[ARTTS_gllClusteredGeneratorPool] = true;
    ARTSet101[ARTTS_gllGeneratorPool] = true;
    ARTSet101[ARTTS_gllTWEGeneratorPool] = true;
    ARTSet101[ARTTS_import] = true;
    ARTSet101[ARTTS_inputFile] = true;
    ARTSet101[ARTTS_inputFileIfExists] = true;
    ARTSet101[ARTTS_inputString] = true;
    ARTSet101[ARTTS_lcnp] = true;
    ARTSet101[ARTTS_lcnpGeneratorPool] = true;
    ARTSet101[ARTTS_lcnpIndexedAPI] = true;
    ARTSet101[ARTTS_lcnpIndexedPool] = true;
    ARTSet101[ARTTS_lcnpLinkedAPI] = true;
    ARTSet101[ARTTS_lexCFParse] = true;
    ARTSet101[ARTTS_lexCFRecognise] = true;
    ARTSet101[ARTTS_lexDFA] = true;
    ARTSet101[ARTTS_lexDead] = true;
    ARTSet101[ARTTS_lexExtents] = true;
    ARTSet101[ARTTS_lexLongestAcross] = true;
    ARTSet101[ARTTS_lexLongestWithin] = true;
    ARTSet101[ARTTS_lexPrintTWESet] = true;
    ARTSet101[ARTTS_lexPriority] = true;
    ARTSet101[ARTTS_lexRecursive] = true;
    ARTSet101[ARTTS_lexSegments] = true;
    ARTSet101[ARTTS_lexWSSuffix] = true;
    ARTSet101[ARTTS_lexerData] = true;
    ARTSet101[ARTTS_lexerName] = true;
    ARTSet101[ARTTS_mgll] = true;
    ARTSet101[ARTTS_mgllGeneratorPool] = true;
    ARTSet101[ARTTS_module] = true;
    ARTSet101[ARTTS_namespace] = true;
    ARTSet101[ARTTS_option] = true;
    ARTSet101[ARTTS_osbrd] = true;
    ARTSet101[ARTTS_osbrdGenerator] = true;
    ARTSet101[ARTTS_outputDirectory] = true;
    ARTSet101[ARTTS_parserName] = true;
    ARTSet101[ARTTS_phaseAG] = true;
    ARTSet101[ARTTS_phaseDerivationSelect] = true;
    ARTSet101[ARTTS_phaseGIFT] = true;
    ARTSet101[ARTTS_phaseLex] = true;
    ARTSet101[ARTTS_phaseModule] = true;
    ARTSet101[ARTTS_phaseParse] = true;
    ARTSet101[ARTTS_phasePostChoose] = true;
    ARTSet101[ARTTS_phasePreChoose] = true;
    ARTSet101[ARTTS_phaseSOS] = true;
    ARTSet101[ARTTS_phaseTR] = true;
    ARTSet101[ARTTS_postLongestAcross] = true;
    ARTSet101[ARTTS_postLongestWithin] = true;
    ARTSet101[ARTTS_postPriority] = true;
    ARTSet101[ARTTS_postUseTerminals] = true;
    ARTSet101[ARTTS_predictivePops] = true;
    ARTSet101[ARTTS_prelude] = true;
    ARTSet101[ARTTS_showAG] = true;
    ARTSet101[ARTTS_showAll] = true;
    ARTSet101[ARTTS_showBSR] = true;
    ARTSet101[ARTTS_showDT] = true;
    ARTSet101[ARTTS_showGIFT] = true;
    ARTSet101[ARTTS_showSOS] = true;
    ARTSet101[ARTTS_showSPPFCore] = true;
    ARTSet101[ARTTS_showSPPFFull] = true;
    ARTSet101[ARTTS_showTR] = true;
    ARTSet101[ARTTS_showTWE] = true;
    ARTSet101[ARTTS_start] = true;
    ARTSet101[ARTTS_statistics] = true;
    ARTSet101[ARTTS_support] = true;
    ARTSet101[ARTTS_suppressPopGuard] = true;
    ARTSet101[ARTTS_suppressProductionGuard] = true;
    ARTSet101[ARTTS_suppressSemantics] = true;
    ARTSet101[ARTTS_suppressTestRepeat] = true;
    ARTSet101[ARTTS_terminal] = true;
    ARTSet101[ARTTS_trace] = true;
    ARTSet101[ARTTS_true] = true;
    ARTSet101[ARTTS_verbosity] = true;
    ARTSet101[ARTTS_whitespace] = true;
  }

  public void ARTSet132initialise() {
    ARTSet132 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet132, 0, artSetExtent, false);
    ARTSet132[ARTTS_ebnfClosureLeft] = true;
  }

  public void ARTSet189initialise() {
    ARTSet189 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet189, 0, artSetExtent, false);
    ARTSet189[ARTTS_gll] = true;
  }

  public void ARTSet88initialise() {
    ARTSet88 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet88, 0, artSetExtent, false);
    ARTSet88[ARTTS_module] = true;
  }

  public void ARTSet76initialise() {
    ARTSet76 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet76, 0, artSetExtent, false);
    ARTSet76[ARTTS__LPAR] = true;
  }

  public void ARTSet77initialise() {
    ARTSet77 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet77, 0, artSetExtent, false);
    ARTSet77[ARTTS__RPAR] = true;
  }

  public void ARTSet27initialise() {
    ARTSet27 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet27, 0, artSetExtent, false);
    ARTSet27[ARTTS__STAR] = true;
  }

  public void ARTSet157initialise() {
    ARTSet157 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet157, 0, artSetExtent, false);
    ARTSet157[ARTTS_generateFragment] = true;
  }

  public void ARTSet28initialise() {
    ARTSet28 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet28, 0, artSetExtent, false);
    ARTSet28[ARTTS__PLUS] = true;
  }

  public void ARTSet22initialise() {
    ARTSet22 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet22, 0, artSetExtent, false);
    ARTSet22[ARTTS__COMMA] = true;
  }

  public void ARTSet54initialise() {
    ARTSet54 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet54, 0, artSetExtent, false);
    ARTSet54[ARTTS__PERIOD] = true;
  }

  public void ARTSet177initialise() {
    ARTSet177 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet177, 0, artSetExtent, false);
    ARTSet177[ARTTS_earleyTableIndexedPool] = true;
  }

  public void ARTSet141initialise() {
    ARTSet141 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet141, 0, artSetExtent, false);
    ARTSet141[ARTTS_lexPrintTWESet] = true;
  }

  public void ARTSet145initialise() {
    ARTSet145 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet145, 0, artSetExtent, false);
    ARTSet145[ARTTS_lexPriority] = true;
  }

  public void ARTSet166initialise() {
    ARTSet166 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet166, 0, artSetExtent, false);
    ARTSet166[ARTTS_suppressSemantics] = true;
  }

  public void ARTSet38initialise() {
    ARTSet38 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet38, 0, artSetExtent, false);
    ARTSet38[ARTTS__COLON] = true;
  }

  public void ARTSet24initialise() {
    ARTSet24 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet24, 0, artSetExtent, false);
    ARTSet24[ARTTS__LT] = true;
  }

  public void ARTSet86initialise() {
    ARTSet86 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet86, 0, artSetExtent, false);
    ARTSet86[ARTX_EOS] = true;
    ARTSet86[ARTTB_CHAR_BQ] = true;
    ARTSet86[ARTTB_ID] = true;
    ARTSet86[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet86[ARTTB_STRING_DOLLAR] = true;
    ARTSet86[ARTTB_STRING_DQ] = true;
    ARTSet86[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet86[ARTTS__HASH] = true;
    ARTSet86[ARTTS__AMPERSAND] = true;
    ARTSet86[ARTTS__LPAR] = true;
    ARTSet86[ARTTS__RPAR] = true;
    ARTSet86[ARTTS__STAR] = true;
    ARTSet86[ARTTS__PLUS] = true;
    ARTSet86[ARTTS__QUERY] = true;
    ARTSet86[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet86[ARTTS__RBRACK] = true;
    ARTSet86[ARTTS_choose] = true;
    ARTSet86[ARTTS_import] = true;
    ARTSet86[ARTTS_module] = true;
    ARTSet86[ARTTS_option] = true;
    ARTSet86[ARTTS_prelude] = true;
    ARTSet86[ARTTS_start] = true;
    ARTSet86[ARTTS_support] = true;
    ARTSet86[ARTTS_terminal] = true;
    ARTSet86[ARTTS_whitespace] = true;
    ARTSet86[ARTTS__BAR] = true;
  }

  public void ARTSet4initialise() {
    ARTSet4 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet4, 0, artSetExtent, false);
  }

  public void ARTSet21initialise() {
    ARTSet21 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet21, 0, artSetExtent, false);
    ARTSet21[ARTTS__GT] = true;
  }

  public void ARTSet23initialise() {
    ARTSet23 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet23, 0, artSetExtent, false);
    ARTSet23[ARTTB_ID] = true;
    ARTSet23[ARTTS__COMMA] = true;
    ARTSet23[ARTTS__GT] = true;
  }

  public void ARTSet29initialise() {
    ARTSet29 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet29, 0, artSetExtent, false);
    ARTSet29[ARTTS__QUERY] = true;
  }

  public void ARTSet87initialise() {
    ARTSet87 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet87, 0, artSetExtent, false);
    ARTSet87[ARTTS__AT] = true;
  }

  public void ARTSet174initialise() {
    ARTSet174 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet174, 0, artSetExtent, false);
    ARTSet174[ARTTS_earleyTable] = true;
  }

  public void ARTSet114initialise() {
    ARTSet114 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet114, 0, artSetExtent, false);
    ARTSet114[ARTTS_phaseDerivationSelect] = true;
  }

  public void ARTSet30initialise() {
    ARTSet30 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet30, 0, artSetExtent, false);
    ARTSet30[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet30[ARTTS__BACKSLASH_BACKSLASH] = true;
  }

  public void ARTSet131initialise() {
    ARTSet131 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet131, 0, artSetExtent, false);
    ARTSet131[ARTTS_ebnfClosureRight] = true;
  }

  public void ARTSet2initialise() {
    ARTSet2 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet2, 0, artSetExtent, false);
    ARTSet2[ARTTB_CHAR_BQ] = true;
  }

  public void ARTSet59initialise() {
    ARTSet59 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet59, 0, artSetExtent, false);
    ARTSet59[ARTTS_longest] = true;
  }

  public void ARTSet6initialise() {
    ARTSet6 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet6, 0, artSetExtent, false);
    ARTSet6[ARTX_EOS] = true;
    ARTSet6[ARTTB_CHAR_BQ] = true;
    ARTSet6[ARTTB_ID] = true;
    ARTSet6[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet6[ARTTB_STRING_DOLLAR] = true;
    ARTSet6[ARTTB_STRING_DQ] = true;
    ARTSet6[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet6[ARTTS__SHREIK] = true;
    ARTSet6[ARTTS__HASH] = true;
    ARTSet6[ARTTS__AMPERSAND] = true;
    ARTSet6[ARTTS__LPAR] = true;
    ARTSet6[ARTTS__RPAR] = true;
    ARTSet6[ARTTS__STAR] = true;
    ARTSet6[ARTTS__PLUS] = true;
    ARTSet6[ARTTS__COMMA] = true;
    ARTSet6[ARTTS__PERIOD] = true;
    ARTSet6[ARTTS__COLON] = true;
    ARTSet6[ARTTS__COLON_COLON_EQUAL] = true;
    ARTSet6[ARTTS__COLON_TILDE_EQUAL] = true;
    ARTSet6[ARTTS__LT] = true;
    ARTSet6[ARTTS__LT_LT] = true;
    ARTSet6[ARTTS__GT] = true;
    ARTSet6[ARTTS__GT_GT] = true;
    ARTSet6[ARTTS__QUERY] = true;
    ARTSet6[ARTTS__AT] = true;
    ARTSet6[ARTTS_FIFODescriptors] = true;
    ARTSet6[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet6[ARTTS__RBRACK] = true;
    ARTSet6[ARTTS__UPARROW] = true;
    ARTSet6[ARTTS__UPARROW_UPARROW] = true;
    ARTSet6[ARTTS__UPARROW_UPARROW_UPARROW] = true;
    ARTSet6[ARTTS__UPARROW_] = true;
    ARTSet6[ARTTS_choose] = true;
    ARTSet6[ARTTS_cnp] = true;
    ARTSet6[ARTTS_cnpGeneratorPool] = true;
    ARTSet6[ARTTS_cnpIndexedAPI] = true;
    ARTSet6[ARTTS_cnpIndexedPool] = true;
    ARTSet6[ARTTS_cnpLinkedAPI] = true;
    ARTSet6[ARTTS_earley] = true;
    ARTSet6[ARTTS_earley2007LinkedAPI] = true;
    ARTSet6[ARTTS_earleyIndexedAPI] = true;
    ARTSet6[ARTTS_earleyIndexedData] = true;
    ARTSet6[ARTTS_earleyIndexedPool] = true;
    ARTSet6[ARTTS_earleyLinkedAPI] = true;
    ARTSet6[ARTTS_earleyTable] = true;
    ARTSet6[ARTTS_earleyTableIndexedAPI] = true;
    ARTSet6[ARTTS_earleyTableIndexedData] = true;
    ARTSet6[ARTTS_earleyTableIndexedPool] = true;
    ARTSet6[ARTTS_earleyTableLinkedAPI] = true;
    ARTSet6[ARTTS_ebnfClosureLeft] = true;
    ARTSet6[ARTTS_ebnfClosureRight] = true;
    ARTSet6[ARTTS_ebnfLeftFactor] = true;
    ARTSet6[ARTTS_ebnfMultiplyOut] = true;
    ARTSet6[ARTTS_ebnfracketToNonterminal] = true;
    ARTSet6[ARTTS_generateC_PLUS_PLUS] = true;
    ARTSet6[ARTTS_generateDynamic] = true;
    ARTSet6[ARTTS_generateFragment] = true;
    ARTSet6[ARTTS_generateJava] = true;
    ARTSet6[ARTTS_generatePool] = true;
    ARTSet6[ARTTS_generateState] = true;
    ARTSet6[ARTTS_generateStatic] = true;
    ARTSet6[ARTTS_gll] = true;
    ARTSet6[ARTTS_gllClusteredGeneratorPool] = true;
    ARTSet6[ARTTS_gllGeneratorPool] = true;
    ARTSet6[ARTTS_gllTWEGeneratorPool] = true;
    ARTSet6[ARTTS_import] = true;
    ARTSet6[ARTTS_inputFile] = true;
    ARTSet6[ARTTS_inputFileIfExists] = true;
    ARTSet6[ARTTS_inputString] = true;
    ARTSet6[ARTTS_lcnp] = true;
    ARTSet6[ARTTS_lcnpGeneratorPool] = true;
    ARTSet6[ARTTS_lcnpIndexedAPI] = true;
    ARTSet6[ARTTS_lcnpIndexedPool] = true;
    ARTSet6[ARTTS_lcnpLinkedAPI] = true;
    ARTSet6[ARTTS_lexCFParse] = true;
    ARTSet6[ARTTS_lexCFRecognise] = true;
    ARTSet6[ARTTS_lexDFA] = true;
    ARTSet6[ARTTS_lexDead] = true;
    ARTSet6[ARTTS_lexExtents] = true;
    ARTSet6[ARTTS_lexLongestAcross] = true;
    ARTSet6[ARTTS_lexLongestWithin] = true;
    ARTSet6[ARTTS_lexPrintTWESet] = true;
    ARTSet6[ARTTS_lexPriority] = true;
    ARTSet6[ARTTS_lexRecursive] = true;
    ARTSet6[ARTTS_lexSegments] = true;
    ARTSet6[ARTTS_lexWSSuffix] = true;
    ARTSet6[ARTTS_lexerData] = true;
    ARTSet6[ARTTS_lexerName] = true;
    ARTSet6[ARTTS_longest] = true;
    ARTSet6[ARTTS_mgll] = true;
    ARTSet6[ARTTS_mgllGeneratorPool] = true;
    ARTSet6[ARTTS_module] = true;
    ARTSet6[ARTTS_namespace] = true;
    ARTSet6[ARTTS_option] = true;
    ARTSet6[ARTTS_osbrd] = true;
    ARTSet6[ARTTS_osbrdGenerator] = true;
    ARTSet6[ARTTS_outputDirectory] = true;
    ARTSet6[ARTTS_parserName] = true;
    ARTSet6[ARTTS_phaseAG] = true;
    ARTSet6[ARTTS_phaseDerivationSelect] = true;
    ARTSet6[ARTTS_phaseGIFT] = true;
    ARTSet6[ARTTS_phaseLex] = true;
    ARTSet6[ARTTS_phaseModule] = true;
    ARTSet6[ARTTS_phaseParse] = true;
    ARTSet6[ARTTS_phasePostChoose] = true;
    ARTSet6[ARTTS_phasePreChoose] = true;
    ARTSet6[ARTTS_phaseSOS] = true;
    ARTSet6[ARTTS_phaseTR] = true;
    ARTSet6[ARTTS_postLongestAcross] = true;
    ARTSet6[ARTTS_postLongestWithin] = true;
    ARTSet6[ARTTS_postPriority] = true;
    ARTSet6[ARTTS_postUseTerminals] = true;
    ARTSet6[ARTTS_predictivePops] = true;
    ARTSet6[ARTTS_prelude] = true;
    ARTSet6[ARTTS_showAG] = true;
    ARTSet6[ARTTS_showAll] = true;
    ARTSet6[ARTTS_showBSR] = true;
    ARTSet6[ARTTS_showDT] = true;
    ARTSet6[ARTTS_showGIFT] = true;
    ARTSet6[ARTTS_showSOS] = true;
    ARTSet6[ARTTS_showSPPFCore] = true;
    ARTSet6[ARTTS_showSPPFFull] = true;
    ARTSet6[ARTTS_showTR] = true;
    ARTSet6[ARTTS_showTWE] = true;
    ARTSet6[ARTTS_start] = true;
    ARTSet6[ARTTS_statistics] = true;
    ARTSet6[ARTTS_support] = true;
    ARTSet6[ARTTS_suppressPopGuard] = true;
    ARTSet6[ARTTS_suppressProductionGuard] = true;
    ARTSet6[ARTTS_suppressSemantics] = true;
    ARTSet6[ARTTS_suppressTestRepeat] = true;
    ARTSet6[ARTTS_terminal] = true;
    ARTSet6[ARTTS_trace] = true;
    ARTSet6[ARTTS_verbosity] = true;
    ARTSet6[ARTTS_whitespace] = true;
    ARTSet6[ARTTS__BAR] = true;
    ARTSet6[ARTTS__BAR_BAR] = true;
    ARTSet6[ARTTI__QUOTE_QUOTE] = true;
  }

  public void ARTSet111initialise() {
    ARTSet111 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet111, 0, artSetExtent, false);
    ARTSet111[ARTTS_phasePreChoose] = true;
  }

  public void ARTSet83initialise() {
    ARTSet83 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet83, 0, artSetExtent, false);
    ARTSet83[ARTTS__LBRACK] = true;
  }

  public void ARTSet128initialise() {
    ARTSet128 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet128, 0, artSetExtent, false);
    ARTSet128[ARTTS_showAll] = true;
  }

  public void ARTSet84initialise() {
    ARTSet84 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet84, 0, artSetExtent, false);
    ARTSet84[ARTTS__RBRACK] = true;
  }

  public void ARTSet79initialise() {
    ARTSet79 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet79, 0, artSetExtent, false);
    ARTSet79[ARTTS__UPARROW] = true;
  }

  public void ARTSet12initialise() {
    ARTSet12 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet12, 0, artSetExtent, false);
    ARTSet12[ARTTB_STRING_BRACE_NEST] = true;
  }

  public void ARTSet8initialise() {
    ARTSet8 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet8, 0, artSetExtent, false);
    ARTSet8[ARTTB_INTEGER] = true;
  }

  public void ARTSet180initialise() {
    ARTSet180 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet180, 0, artSetExtent, false);
    ARTSet180[ARTTS_cnpLinkedAPI] = true;
  }

  public void ARTSet123initialise() {
    ARTSet123 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet123, 0, artSetExtent, false);
    ARTSet123[ARTTS_showDT] = true;
  }

  public void ARTSet116initialise() {
    ARTSet116 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet116, 0, artSetExtent, false);
    ARTSet116[ARTTS_phaseAG] = true;
  }

  public void ARTSet127initialise() {
    ARTSet127 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet127, 0, artSetExtent, false);
    ARTSet127[ARTTS_showSOS] = true;
  }

  public void ARTSet112initialise() {
    ARTSet112 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet112, 0, artSetExtent, false);
    ARTSet112[ARTTS_phaseParse] = true;
  }

  public void ARTSet200initialise() {
    ARTSet200 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet200, 0, artSetExtent, false);
    ARTSet200[ARTX_EOS] = true;
    ARTSet200[ARTTB_ID] = true;
    ARTSet200[ARTTB_STRING_DOLLAR] = true;
    ARTSet200[ARTTS_choose] = true;
    ARTSet200[ARTTS_import] = true;
    ARTSet200[ARTTS_option] = true;
    ARTSet200[ARTTS_prelude] = true;
    ARTSet200[ARTTS_start] = true;
    ARTSet200[ARTTS_support] = true;
    ARTSet200[ARTTS_terminal] = true;
    ARTSet200[ARTTS_whitespace] = true;
  }

  public void ARTSet35initialise() {
    ARTSet35 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet35, 0, artSetExtent, false);
    ARTSet35[ARTTS__BAR] = true;
  }

  public void ARTSet15initialise() {
    ARTSet15 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet15, 0, artSetExtent, false);
    ARTSet15[ARTX_EOS] = true;
    ARTSet15[ARTTB_CHAR_BQ] = true;
    ARTSet15[ARTTB_ID] = true;
    ARTSet15[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet15[ARTTB_STRING_DOLLAR] = true;
    ARTSet15[ARTTB_STRING_DQ] = true;
    ARTSet15[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet15[ARTTS__SHREIK] = true;
    ARTSet15[ARTTS__HASH] = true;
    ARTSet15[ARTTS__AMPERSAND] = true;
    ARTSet15[ARTTS__LPAR] = true;
    ARTSet15[ARTTS__RPAR] = true;
    ARTSet15[ARTTS__STAR] = true;
    ARTSet15[ARTTS__PLUS] = true;
    ARTSet15[ARTTS__PERIOD] = true;
    ARTSet15[ARTTS__COLON] = true;
    ARTSet15[ARTTS__COLON_COLON_EQUAL] = true;
    ARTSet15[ARTTS__COLON_TILDE_EQUAL] = true;
    ARTSet15[ARTTS__LT] = true;
    ARTSet15[ARTTS__LT_LT] = true;
    ARTSet15[ARTTS__GT] = true;
    ARTSet15[ARTTS__GT_GT] = true;
    ARTSet15[ARTTS__QUERY] = true;
    ARTSet15[ARTTS__AT] = true;
    ARTSet15[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet15[ARTTS__RBRACK] = true;
    ARTSet15[ARTTS__UPARROW] = true;
    ARTSet15[ARTTS__UPARROW_UPARROW] = true;
    ARTSet15[ARTTS__UPARROW_UPARROW_UPARROW] = true;
    ARTSet15[ARTTS__UPARROW_] = true;
    ARTSet15[ARTTS_choose] = true;
    ARTSet15[ARTTS_import] = true;
    ARTSet15[ARTTS_longest] = true;
    ARTSet15[ARTTS_module] = true;
    ARTSet15[ARTTS_option] = true;
    ARTSet15[ARTTS_prelude] = true;
    ARTSet15[ARTTS_start] = true;
    ARTSet15[ARTTS_support] = true;
    ARTSet15[ARTTS_terminal] = true;
    ARTSet15[ARTTS_whitespace] = true;
    ARTSet15[ARTTS__BAR] = true;
    ARTSet15[ARTTS__BAR_BAR] = true;
    ARTSet15[ARTTI__QUOTE_QUOTE] = true;
  }

  public void ARTSet176initialise() {
    ARTSet176 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet176, 0, artSetExtent, false);
    ARTSet176[ARTTS_earleyTableIndexedAPI] = true;
  }

  public void ARTSet183initialise() {
    ARTSet183 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet183, 0, artSetExtent, false);
    ARTSet183[ARTTS_cnpGeneratorPool] = true;
  }

  public void ARTSet135initialise() {
    ARTSet135 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet135, 0, artSetExtent, false);
    ARTSet135[ARTTS_lexCFRecognise] = true;
  }

  public void ARTSet138initialise() {
    ARTSet138 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet138, 0, artSetExtent, false);
    ARTSet138[ARTTS_lexExtents] = true;
  }

  public void ARTSet56initialise() {
    ARTSet56 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet56, 0, artSetExtent, false);
    ARTSet56[ARTX_EOS] = true;
    ARTSet56[ARTTB_CHAR_BQ] = true;
    ARTSet56[ARTTB_ID] = true;
    ARTSet56[ARTTB_STRING_DOLLAR] = true;
    ARTSet56[ARTTB_STRING_DQ] = true;
    ARTSet56[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet56[ARTTS__AMPERSAND] = true;
    ARTSet56[ARTTS__PERIOD] = true;
    ARTSet56[ARTTS_choose] = true;
    ARTSet56[ARTTS_import] = true;
    ARTSet56[ARTTS_longest] = true;
    ARTSet56[ARTTS_module] = true;
    ARTSet56[ARTTS_option] = true;
    ARTSet56[ARTTS_prelude] = true;
    ARTSet56[ARTTS_start] = true;
    ARTSet56[ARTTS_support] = true;
    ARTSet56[ARTTS_terminal] = true;
    ARTSet56[ARTTS_whitespace] = true;
    ARTSet56[ARTTI__QUOTE_QUOTE] = true;
  }

  public void ARTSet139initialise() {
    ARTSet139 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet139, 0, artSetExtent, false);
    ARTSet139[ARTTS_lexSegments] = true;
  }

  public void ARTSet63initialise() {
    ARTSet63 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet63, 0, artSetExtent, false);
    ARTSet63[ARTTS_choose] = true;
    ARTSet63[ARTTS_import] = true;
    ARTSet63[ARTTS_option] = true;
    ARTSet63[ARTTS_prelude] = true;
    ARTSet63[ARTTS_start] = true;
    ARTSet63[ARTTS_support] = true;
    ARTSet63[ARTTS_terminal] = true;
    ARTSet63[ARTTS_whitespace] = true;
  }

  public void ARTSet148initialise() {
    ARTSet148 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet148, 0, artSetExtent, false);
    ARTSet148[ARTTS_postLongestAcross] = true;
  }

  public void ARTSet113initialise() {
    ARTSet113 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet113, 0, artSetExtent, false);
    ARTSet113[ARTTS_phasePostChoose] = true;
  }

  public void ARTSet188initialise() {
    ARTSet188 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet188, 0, artSetExtent, false);
    ARTSet188[ARTTS_lcnpGeneratorPool] = true;
  }

  public void ARTSet160initialise() {
    ARTSet160 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet160, 0, artSetExtent, false);
    ARTSet160[ARTTS_generateC_PLUS_PLUS] = true;
  }

  public void ARTSet99initialise() {
    ARTSet99 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet99, 0, artSetExtent, false);
    ARTSet99[ARTTS__COLON] = true;
    ARTSet99[ARTTS_false] = true;
    ARTSet99[ARTTS_true] = true;
  }

  public void ARTSet74initialise() {
    ARTSet74 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet74, 0, artSetExtent, false);
    ARTSet74[ARTTB_CHAR_BQ] = true;
    ARTSet74[ARTTB_ID] = true;
    ARTSet74[ARTTB_STRING_DOLLAR] = true;
    ARTSet74[ARTTB_STRING_DQ] = true;
    ARTSet74[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet74[ARTTS__HASH] = true;
    ARTSet74[ARTTS__AMPERSAND] = true;
    ARTSet74[ARTTS__LPAR] = true;
  }

  public void ARTSet147initialise() {
    ARTSet147 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet147, 0, artSetExtent, false);
    ARTSet147[ARTTS_postLongestWithin] = true;
  }

  public void ARTSet81initialise() {
    ARTSet81 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet81, 0, artSetExtent, false);
    ARTSet81[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  }

  public void ARTSet85initialise() {
    ARTSet85 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet85, 0, artSetExtent, false);
    ARTSet85[ARTTS__PERCENT_PERCENT] = true;
  }

  public void ARTSet25initialise() {
    ARTSet25 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet25, 0, artSetExtent, false);
    ARTSet25[ARTTB_CHAR_BQ] = true;
    ARTSet25[ARTTB_ID] = true;
    ARTSet25[ARTTB_STRING_DOLLAR] = true;
    ARTSet25[ARTTB_STRING_DQ] = true;
    ARTSet25[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet25[ARTTS__HASH] = true;
    ARTSet25[ARTTS__AMPERSAND] = true;
    ARTSet25[ARTTS__LPAR] = true;
    ARTSet25[ARTTS__BACKSLASH_BACKSLASH] = true;
  }

  public void ARTSet137initialise() {
    ARTSet137 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet137, 0, artSetExtent, false);
    ARTSet137[ARTTS_lexWSSuffix] = true;
  }

  public void ARTSet171initialise() {
    ARTSet171 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet171, 0, artSetExtent, false);
    ARTSet171[ARTTS_earleyIndexedAPI] = true;
  }

  public void ARTSet193initialise() {
    ARTSet193 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet193, 0, artSetExtent, false);
    ARTSet193[ARTTS_mgll] = true;
  }

  public void ARTSet9initialise() {
    ARTSet9 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet9, 0, artSetExtent, false);
    ARTSet9[ARTX_EOS] = true;
    ARTSet9[ARTTB_CHAR_BQ] = true;
    ARTSet9[ARTTB_ID] = true;
    ARTSet9[ARTTB_STRING_DOLLAR] = true;
    ARTSet9[ARTTB_STRING_DQ] = true;
    ARTSet9[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet9[ARTTS__HASH] = true;
    ARTSet9[ARTTS__AMPERSAND] = true;
    ARTSet9[ARTTS__LPAR] = true;
    ARTSet9[ARTTS__RPAR] = true;
    ARTSet9[ARTTS__COMMA] = true;
    ARTSet9[ARTTS_FIFODescriptors] = true;
    ARTSet9[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet9[ARTTS__RBRACK] = true;
    ARTSet9[ARTTS_choose] = true;
    ARTSet9[ARTTS_cnp] = true;
    ARTSet9[ARTTS_cnpGeneratorPool] = true;
    ARTSet9[ARTTS_cnpIndexedAPI] = true;
    ARTSet9[ARTTS_cnpIndexedPool] = true;
    ARTSet9[ARTTS_cnpLinkedAPI] = true;
    ARTSet9[ARTTS_earley] = true;
    ARTSet9[ARTTS_earley2007LinkedAPI] = true;
    ARTSet9[ARTTS_earleyIndexedAPI] = true;
    ARTSet9[ARTTS_earleyIndexedData] = true;
    ARTSet9[ARTTS_earleyIndexedPool] = true;
    ARTSet9[ARTTS_earleyLinkedAPI] = true;
    ARTSet9[ARTTS_earleyTable] = true;
    ARTSet9[ARTTS_earleyTableIndexedAPI] = true;
    ARTSet9[ARTTS_earleyTableIndexedData] = true;
    ARTSet9[ARTTS_earleyTableIndexedPool] = true;
    ARTSet9[ARTTS_earleyTableLinkedAPI] = true;
    ARTSet9[ARTTS_ebnfClosureLeft] = true;
    ARTSet9[ARTTS_ebnfClosureRight] = true;
    ARTSet9[ARTTS_ebnfLeftFactor] = true;
    ARTSet9[ARTTS_ebnfMultiplyOut] = true;
    ARTSet9[ARTTS_ebnfracketToNonterminal] = true;
    ARTSet9[ARTTS_generateC_PLUS_PLUS] = true;
    ARTSet9[ARTTS_generateDynamic] = true;
    ARTSet9[ARTTS_generateFragment] = true;
    ARTSet9[ARTTS_generateJava] = true;
    ARTSet9[ARTTS_generatePool] = true;
    ARTSet9[ARTTS_generateState] = true;
    ARTSet9[ARTTS_generateStatic] = true;
    ARTSet9[ARTTS_gll] = true;
    ARTSet9[ARTTS_gllClusteredGeneratorPool] = true;
    ARTSet9[ARTTS_gllGeneratorPool] = true;
    ARTSet9[ARTTS_gllTWEGeneratorPool] = true;
    ARTSet9[ARTTS_import] = true;
    ARTSet9[ARTTS_inputFile] = true;
    ARTSet9[ARTTS_inputFileIfExists] = true;
    ARTSet9[ARTTS_inputString] = true;
    ARTSet9[ARTTS_lcnp] = true;
    ARTSet9[ARTTS_lcnpGeneratorPool] = true;
    ARTSet9[ARTTS_lcnpIndexedAPI] = true;
    ARTSet9[ARTTS_lcnpIndexedPool] = true;
    ARTSet9[ARTTS_lcnpLinkedAPI] = true;
    ARTSet9[ARTTS_lexCFParse] = true;
    ARTSet9[ARTTS_lexCFRecognise] = true;
    ARTSet9[ARTTS_lexDFA] = true;
    ARTSet9[ARTTS_lexDead] = true;
    ARTSet9[ARTTS_lexExtents] = true;
    ARTSet9[ARTTS_lexLongestAcross] = true;
    ARTSet9[ARTTS_lexLongestWithin] = true;
    ARTSet9[ARTTS_lexPrintTWESet] = true;
    ARTSet9[ARTTS_lexPriority] = true;
    ARTSet9[ARTTS_lexRecursive] = true;
    ARTSet9[ARTTS_lexSegments] = true;
    ARTSet9[ARTTS_lexWSSuffix] = true;
    ARTSet9[ARTTS_lexerData] = true;
    ARTSet9[ARTTS_lexerName] = true;
    ARTSet9[ARTTS_mgll] = true;
    ARTSet9[ARTTS_mgllGeneratorPool] = true;
    ARTSet9[ARTTS_module] = true;
    ARTSet9[ARTTS_namespace] = true;
    ARTSet9[ARTTS_option] = true;
    ARTSet9[ARTTS_osbrd] = true;
    ARTSet9[ARTTS_osbrdGenerator] = true;
    ARTSet9[ARTTS_outputDirectory] = true;
    ARTSet9[ARTTS_parserName] = true;
    ARTSet9[ARTTS_phaseAG] = true;
    ARTSet9[ARTTS_phaseDerivationSelect] = true;
    ARTSet9[ARTTS_phaseGIFT] = true;
    ARTSet9[ARTTS_phaseLex] = true;
    ARTSet9[ARTTS_phaseModule] = true;
    ARTSet9[ARTTS_phaseParse] = true;
    ARTSet9[ARTTS_phasePostChoose] = true;
    ARTSet9[ARTTS_phasePreChoose] = true;
    ARTSet9[ARTTS_phaseSOS] = true;
    ARTSet9[ARTTS_phaseTR] = true;
    ARTSet9[ARTTS_postLongestAcross] = true;
    ARTSet9[ARTTS_postLongestWithin] = true;
    ARTSet9[ARTTS_postPriority] = true;
    ARTSet9[ARTTS_postUseTerminals] = true;
    ARTSet9[ARTTS_predictivePops] = true;
    ARTSet9[ARTTS_prelude] = true;
    ARTSet9[ARTTS_showAG] = true;
    ARTSet9[ARTTS_showAll] = true;
    ARTSet9[ARTTS_showBSR] = true;
    ARTSet9[ARTTS_showDT] = true;
    ARTSet9[ARTTS_showGIFT] = true;
    ARTSet9[ARTTS_showSOS] = true;
    ARTSet9[ARTTS_showSPPFCore] = true;
    ARTSet9[ARTTS_showSPPFFull] = true;
    ARTSet9[ARTTS_showTR] = true;
    ARTSet9[ARTTS_showTWE] = true;
    ARTSet9[ARTTS_start] = true;
    ARTSet9[ARTTS_statistics] = true;
    ARTSet9[ARTTS_support] = true;
    ARTSet9[ARTTS_suppressPopGuard] = true;
    ARTSet9[ARTTS_suppressProductionGuard] = true;
    ARTSet9[ARTTS_suppressSemantics] = true;
    ARTSet9[ARTTS_suppressTestRepeat] = true;
    ARTSet9[ARTTS_terminal] = true;
    ARTSet9[ARTTS_trace] = true;
    ARTSet9[ARTTS_verbosity] = true;
    ARTSet9[ARTTS_whitespace] = true;
    ARTSet9[ARTTS__BAR] = true;
  }

  public void ARTSet197initialise() {
    ARTSet197 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet197, 0, artSetExtent, false);
    ARTSet197[ARTX_EOS] = true;
    ARTSet197[ARTTB_ID] = true;
    ARTSet197[ARTTB_INTEGER] = true;
    ARTSet197[ARTTB_STRING_DOLLAR] = true;
    ARTSet197[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet197[ARTTS_FIFODescriptors] = true;
    ARTSet197[ARTTS_choose] = true;
    ARTSet197[ARTTS_cnp] = true;
    ARTSet197[ARTTS_cnpGeneratorPool] = true;
    ARTSet197[ARTTS_cnpIndexedAPI] = true;
    ARTSet197[ARTTS_cnpIndexedPool] = true;
    ARTSet197[ARTTS_cnpLinkedAPI] = true;
    ARTSet197[ARTTS_earley] = true;
    ARTSet197[ARTTS_earley2007LinkedAPI] = true;
    ARTSet197[ARTTS_earleyIndexedAPI] = true;
    ARTSet197[ARTTS_earleyIndexedData] = true;
    ARTSet197[ARTTS_earleyIndexedPool] = true;
    ARTSet197[ARTTS_earleyLinkedAPI] = true;
    ARTSet197[ARTTS_earleyTable] = true;
    ARTSet197[ARTTS_earleyTableIndexedAPI] = true;
    ARTSet197[ARTTS_earleyTableIndexedData] = true;
    ARTSet197[ARTTS_earleyTableIndexedPool] = true;
    ARTSet197[ARTTS_earleyTableLinkedAPI] = true;
    ARTSet197[ARTTS_ebnfClosureLeft] = true;
    ARTSet197[ARTTS_ebnfClosureRight] = true;
    ARTSet197[ARTTS_ebnfLeftFactor] = true;
    ARTSet197[ARTTS_ebnfMultiplyOut] = true;
    ARTSet197[ARTTS_ebnfracketToNonterminal] = true;
    ARTSet197[ARTTS_false] = true;
    ARTSet197[ARTTS_generateC_PLUS_PLUS] = true;
    ARTSet197[ARTTS_generateDynamic] = true;
    ARTSet197[ARTTS_generateFragment] = true;
    ARTSet197[ARTTS_generateJava] = true;
    ARTSet197[ARTTS_generatePool] = true;
    ARTSet197[ARTTS_generateState] = true;
    ARTSet197[ARTTS_generateStatic] = true;
    ARTSet197[ARTTS_gll] = true;
    ARTSet197[ARTTS_gllClusteredGeneratorPool] = true;
    ARTSet197[ARTTS_gllGeneratorPool] = true;
    ARTSet197[ARTTS_gllTWEGeneratorPool] = true;
    ARTSet197[ARTTS_import] = true;
    ARTSet197[ARTTS_inputFile] = true;
    ARTSet197[ARTTS_inputFileIfExists] = true;
    ARTSet197[ARTTS_inputString] = true;
    ARTSet197[ARTTS_lcnp] = true;
    ARTSet197[ARTTS_lcnpGeneratorPool] = true;
    ARTSet197[ARTTS_lcnpIndexedAPI] = true;
    ARTSet197[ARTTS_lcnpIndexedPool] = true;
    ARTSet197[ARTTS_lcnpLinkedAPI] = true;
    ARTSet197[ARTTS_lexCFParse] = true;
    ARTSet197[ARTTS_lexCFRecognise] = true;
    ARTSet197[ARTTS_lexDFA] = true;
    ARTSet197[ARTTS_lexDead] = true;
    ARTSet197[ARTTS_lexExtents] = true;
    ARTSet197[ARTTS_lexLongestAcross] = true;
    ARTSet197[ARTTS_lexLongestWithin] = true;
    ARTSet197[ARTTS_lexPrintTWESet] = true;
    ARTSet197[ARTTS_lexPriority] = true;
    ARTSet197[ARTTS_lexRecursive] = true;
    ARTSet197[ARTTS_lexSegments] = true;
    ARTSet197[ARTTS_lexWSSuffix] = true;
    ARTSet197[ARTTS_lexerData] = true;
    ARTSet197[ARTTS_lexerName] = true;
    ARTSet197[ARTTS_mgll] = true;
    ARTSet197[ARTTS_mgllGeneratorPool] = true;
    ARTSet197[ARTTS_module] = true;
    ARTSet197[ARTTS_namespace] = true;
    ARTSet197[ARTTS_option] = true;
    ARTSet197[ARTTS_osbrd] = true;
    ARTSet197[ARTTS_osbrdGenerator] = true;
    ARTSet197[ARTTS_outputDirectory] = true;
    ARTSet197[ARTTS_parserName] = true;
    ARTSet197[ARTTS_phaseAG] = true;
    ARTSet197[ARTTS_phaseDerivationSelect] = true;
    ARTSet197[ARTTS_phaseGIFT] = true;
    ARTSet197[ARTTS_phaseLex] = true;
    ARTSet197[ARTTS_phaseModule] = true;
    ARTSet197[ARTTS_phaseParse] = true;
    ARTSet197[ARTTS_phasePostChoose] = true;
    ARTSet197[ARTTS_phasePreChoose] = true;
    ARTSet197[ARTTS_phaseSOS] = true;
    ARTSet197[ARTTS_phaseTR] = true;
    ARTSet197[ARTTS_postLongestAcross] = true;
    ARTSet197[ARTTS_postLongestWithin] = true;
    ARTSet197[ARTTS_postPriority] = true;
    ARTSet197[ARTTS_postUseTerminals] = true;
    ARTSet197[ARTTS_predictivePops] = true;
    ARTSet197[ARTTS_prelude] = true;
    ARTSet197[ARTTS_showAG] = true;
    ARTSet197[ARTTS_showAll] = true;
    ARTSet197[ARTTS_showBSR] = true;
    ARTSet197[ARTTS_showDT] = true;
    ARTSet197[ARTTS_showGIFT] = true;
    ARTSet197[ARTTS_showSOS] = true;
    ARTSet197[ARTTS_showSPPFCore] = true;
    ARTSet197[ARTTS_showSPPFFull] = true;
    ARTSet197[ARTTS_showTR] = true;
    ARTSet197[ARTTS_showTWE] = true;
    ARTSet197[ARTTS_start] = true;
    ARTSet197[ARTTS_statistics] = true;
    ARTSet197[ARTTS_support] = true;
    ARTSet197[ARTTS_suppressPopGuard] = true;
    ARTSet197[ARTTS_suppressProductionGuard] = true;
    ARTSet197[ARTTS_suppressSemantics] = true;
    ARTSet197[ARTTS_suppressTestRepeat] = true;
    ARTSet197[ARTTS_terminal] = true;
    ARTSet197[ARTTS_trace] = true;
    ARTSet197[ARTTS_true] = true;
    ARTSet197[ARTTS_verbosity] = true;
    ARTSet197[ARTTS_whitespace] = true;
  }

  public void ARTSet115initialise() {
    ARTSet115 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet115, 0, artSetExtent, false);
    ARTSet115[ARTTS_phaseGIFT] = true;
  }

  public void ARTSet108initialise() {
    ARTSet108 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet108, 0, artSetExtent, false);
    ARTSet108[ARTTS_inputString] = true;
  }

  public void ARTSet110initialise() {
    ARTSet110 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet110, 0, artSetExtent, false);
    ARTSet110[ARTTS_phaseLex] = true;
  }

  public void ARTSet106initialise() {
    ARTSet106 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet106, 0, artSetExtent, false);
    ARTSet106[ARTTS_inputFileIfExists] = true;
  }

  public void ARTSet73initialise() {
    ARTSet73 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet73, 0, artSetExtent, false);
    ARTSet73[ARTTS_support] = true;
  }

  public void ARTSet173initialise() {
    ARTSet173 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet173, 0, artSetExtent, false);
    ARTSet173[ARTTS_earleyIndexedData] = true;
  }

  public void ARTSet19initialise() {
    ARTSet19 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet19, 0, artSetExtent, false);
    ARTSet19[ARTX_EOS] = true;
    ARTSet19[ARTTB_CHAR_BQ] = true;
    ARTSet19[ARTTB_ID] = true;
    ARTSet19[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet19[ARTTB_STRING_DOLLAR] = true;
    ARTSet19[ARTTB_STRING_DQ] = true;
    ARTSet19[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet19[ARTTS__SHREIK] = true;
    ARTSet19[ARTTS__HASH] = true;
    ARTSet19[ARTTS__AMPERSAND] = true;
    ARTSet19[ARTTS__LPAR] = true;
    ARTSet19[ARTTS__RPAR] = true;
    ARTSet19[ARTTS__STAR] = true;
    ARTSet19[ARTTS__PLUS] = true;
    ARTSet19[ARTTS__PERIOD] = true;
    ARTSet19[ARTTS__COLON] = true;
    ARTSet19[ARTTS__LT] = true;
    ARTSet19[ARTTS__LT_LT] = true;
    ARTSet19[ARTTS__GT] = true;
    ARTSet19[ARTTS__GT_GT] = true;
    ARTSet19[ARTTS__QUERY] = true;
    ARTSet19[ARTTS__AT] = true;
    ARTSet19[ARTTS_FIFODescriptors] = true;
    ARTSet19[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet19[ARTTS__RBRACK] = true;
    ARTSet19[ARTTS__UPARROW] = true;
    ARTSet19[ARTTS__UPARROW_UPARROW] = true;
    ARTSet19[ARTTS__UPARROW_UPARROW_UPARROW] = true;
    ARTSet19[ARTTS__UPARROW_] = true;
    ARTSet19[ARTTS_choose] = true;
    ARTSet19[ARTTS_cnp] = true;
    ARTSet19[ARTTS_cnpGeneratorPool] = true;
    ARTSet19[ARTTS_cnpIndexedAPI] = true;
    ARTSet19[ARTTS_cnpIndexedPool] = true;
    ARTSet19[ARTTS_cnpLinkedAPI] = true;
    ARTSet19[ARTTS_earley] = true;
    ARTSet19[ARTTS_earley2007LinkedAPI] = true;
    ARTSet19[ARTTS_earleyIndexedAPI] = true;
    ARTSet19[ARTTS_earleyIndexedData] = true;
    ARTSet19[ARTTS_earleyIndexedPool] = true;
    ARTSet19[ARTTS_earleyLinkedAPI] = true;
    ARTSet19[ARTTS_earleyTable] = true;
    ARTSet19[ARTTS_earleyTableIndexedAPI] = true;
    ARTSet19[ARTTS_earleyTableIndexedData] = true;
    ARTSet19[ARTTS_earleyTableIndexedPool] = true;
    ARTSet19[ARTTS_earleyTableLinkedAPI] = true;
    ARTSet19[ARTTS_ebnfClosureLeft] = true;
    ARTSet19[ARTTS_ebnfClosureRight] = true;
    ARTSet19[ARTTS_ebnfLeftFactor] = true;
    ARTSet19[ARTTS_ebnfMultiplyOut] = true;
    ARTSet19[ARTTS_ebnfracketToNonterminal] = true;
    ARTSet19[ARTTS_generateC_PLUS_PLUS] = true;
    ARTSet19[ARTTS_generateDynamic] = true;
    ARTSet19[ARTTS_generateFragment] = true;
    ARTSet19[ARTTS_generateJava] = true;
    ARTSet19[ARTTS_generatePool] = true;
    ARTSet19[ARTTS_generateState] = true;
    ARTSet19[ARTTS_generateStatic] = true;
    ARTSet19[ARTTS_gll] = true;
    ARTSet19[ARTTS_gllClusteredGeneratorPool] = true;
    ARTSet19[ARTTS_gllGeneratorPool] = true;
    ARTSet19[ARTTS_gllTWEGeneratorPool] = true;
    ARTSet19[ARTTS_import] = true;
    ARTSet19[ARTTS_inputFile] = true;
    ARTSet19[ARTTS_inputFileIfExists] = true;
    ARTSet19[ARTTS_inputString] = true;
    ARTSet19[ARTTS_lcnp] = true;
    ARTSet19[ARTTS_lcnpGeneratorPool] = true;
    ARTSet19[ARTTS_lcnpIndexedAPI] = true;
    ARTSet19[ARTTS_lcnpIndexedPool] = true;
    ARTSet19[ARTTS_lcnpLinkedAPI] = true;
    ARTSet19[ARTTS_lexCFParse] = true;
    ARTSet19[ARTTS_lexCFRecognise] = true;
    ARTSet19[ARTTS_lexDFA] = true;
    ARTSet19[ARTTS_lexDead] = true;
    ARTSet19[ARTTS_lexExtents] = true;
    ARTSet19[ARTTS_lexLongestAcross] = true;
    ARTSet19[ARTTS_lexLongestWithin] = true;
    ARTSet19[ARTTS_lexPrintTWESet] = true;
    ARTSet19[ARTTS_lexPriority] = true;
    ARTSet19[ARTTS_lexRecursive] = true;
    ARTSet19[ARTTS_lexSegments] = true;
    ARTSet19[ARTTS_lexWSSuffix] = true;
    ARTSet19[ARTTS_lexerData] = true;
    ARTSet19[ARTTS_lexerName] = true;
    ARTSet19[ARTTS_longest] = true;
    ARTSet19[ARTTS_mgll] = true;
    ARTSet19[ARTTS_mgllGeneratorPool] = true;
    ARTSet19[ARTTS_module] = true;
    ARTSet19[ARTTS_namespace] = true;
    ARTSet19[ARTTS_option] = true;
    ARTSet19[ARTTS_osbrd] = true;
    ARTSet19[ARTTS_osbrdGenerator] = true;
    ARTSet19[ARTTS_outputDirectory] = true;
    ARTSet19[ARTTS_parserName] = true;
    ARTSet19[ARTTS_phaseAG] = true;
    ARTSet19[ARTTS_phaseDerivationSelect] = true;
    ARTSet19[ARTTS_phaseGIFT] = true;
    ARTSet19[ARTTS_phaseLex] = true;
    ARTSet19[ARTTS_phaseModule] = true;
    ARTSet19[ARTTS_phaseParse] = true;
    ARTSet19[ARTTS_phasePostChoose] = true;
    ARTSet19[ARTTS_phasePreChoose] = true;
    ARTSet19[ARTTS_phaseSOS] = true;
    ARTSet19[ARTTS_phaseTR] = true;
    ARTSet19[ARTTS_postLongestAcross] = true;
    ARTSet19[ARTTS_postLongestWithin] = true;
    ARTSet19[ARTTS_postPriority] = true;
    ARTSet19[ARTTS_postUseTerminals] = true;
    ARTSet19[ARTTS_predictivePops] = true;
    ARTSet19[ARTTS_prelude] = true;
    ARTSet19[ARTTS_showAG] = true;
    ARTSet19[ARTTS_showAll] = true;
    ARTSet19[ARTTS_showBSR] = true;
    ARTSet19[ARTTS_showDT] = true;
    ARTSet19[ARTTS_showGIFT] = true;
    ARTSet19[ARTTS_showSOS] = true;
    ARTSet19[ARTTS_showSPPFCore] = true;
    ARTSet19[ARTTS_showSPPFFull] = true;
    ARTSet19[ARTTS_showTR] = true;
    ARTSet19[ARTTS_showTWE] = true;
    ARTSet19[ARTTS_start] = true;
    ARTSet19[ARTTS_statistics] = true;
    ARTSet19[ARTTS_support] = true;
    ARTSet19[ARTTS_suppressPopGuard] = true;
    ARTSet19[ARTTS_suppressProductionGuard] = true;
    ARTSet19[ARTTS_suppressSemantics] = true;
    ARTSet19[ARTTS_suppressTestRepeat] = true;
    ARTSet19[ARTTS_terminal] = true;
    ARTSet19[ARTTS_trace] = true;
    ARTSet19[ARTTS_verbosity] = true;
    ARTSet19[ARTTS_whitespace] = true;
    ARTSet19[ARTTS__BAR] = true;
    ARTSet19[ARTTS__BAR_BAR] = true;
    ARTSet19[ARTTI__QUOTE_QUOTE] = true;
  }

  public void ARTSet70initialise() {
    ARTSet70 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet70, 0, artSetExtent, false);
    ARTSet70[ARTTS_option] = true;
  }

  public void ARTSet169initialise() {
    ARTSet169 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet169, 0, artSetExtent, false);
    ARTSet169[ARTTS_earley2007LinkedAPI] = true;
  }

  public void ARTSet60initialise() {
    ARTSet60 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet60, 0, artSetExtent, false);
    ARTSet60[ARTX_EOS] = true;
    ARTSet60[ARTTB_ID] = true;
    ARTSet60[ARTTB_STRING_DOLLAR] = true;
    ARTSet60[ARTTS_choose] = true;
    ARTSet60[ARTTS_import] = true;
    ARTSet60[ARTTS_module] = true;
    ARTSet60[ARTTS_option] = true;
    ARTSet60[ARTTS_prelude] = true;
    ARTSet60[ARTTS_start] = true;
    ARTSet60[ARTTS_support] = true;
    ARTSet60[ARTTS_terminal] = true;
    ARTSet60[ARTTS_whitespace] = true;
  }

  public void ARTSet64initialise() {
    ARTSet64 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet64, 0, artSetExtent, false);
    ARTSet64[ARTTS_import] = true;
  }

  public void ARTSet153initialise() {
    ARTSet153 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet153, 0, artSetExtent, false);
    ARTSet153[ARTTS_parserName] = true;
  }

  public void ARTSet104initialise() {
    ARTSet104 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet104, 0, artSetExtent, false);
    ARTSet104[ARTTS_inputFile] = true;
  }

  public void ARTSet152initialise() {
    ARTSet152 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet152, 0, artSetExtent, false);
    ARTSet152[ARTTS_lexerName] = true;
  }

  public void ARTSet103initialise() {
    ARTSet103 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet103, 0, artSetExtent, false);
    ARTSet103[ARTTS_trace] = true;
  }

  public void ARTSet161initialise() {
    ARTSet161 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet161, 0, artSetExtent, false);
    ARTSet161[ARTTS_predictivePops] = true;
  }

  public void ARTSet5initialise() {
    ARTSet5 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet5, 0, artSetExtent, false);
    ARTSet5[ARTTB_ID] = true;
  }

  public void ARTSet93initialise() {
    ARTSet93 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet93, 0, artSetExtent, false);
    ARTSet93[ARTX_EOS] = true;
    ARTSet93[ARTTS_module] = true;
  }

  public void ARTSet41initialise() {
    ARTSet41 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet41, 0, artSetExtent, false);
    ARTSet41[ARTX_EOS] = true;
    ARTSet41[ARTTB_CHAR_BQ] = true;
    ARTSet41[ARTTB_ID] = true;
    ARTSet41[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet41[ARTTB_STRING_DOLLAR] = true;
    ARTSet41[ARTTB_STRING_DQ] = true;
    ARTSet41[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet41[ARTTS__HASH] = true;
    ARTSet41[ARTTS__AMPERSAND] = true;
    ARTSet41[ARTTS__LPAR] = true;
    ARTSet41[ARTTS__RPAR] = true;
    ARTSet41[ARTTS__STAR] = true;
    ARTSet41[ARTTS__PLUS] = true;
    ARTSet41[ARTTS__QUERY] = true;
    ARTSet41[ARTTS__AT] = true;
    ARTSet41[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet41[ARTTS__RBRACK] = true;
    ARTSet41[ARTTS_choose] = true;
    ARTSet41[ARTTS_import] = true;
    ARTSet41[ARTTS_module] = true;
    ARTSet41[ARTTS_option] = true;
    ARTSet41[ARTTS_prelude] = true;
    ARTSet41[ARTTS_start] = true;
    ARTSet41[ARTTS_support] = true;
    ARTSet41[ARTTS_terminal] = true;
    ARTSet41[ARTTS_whitespace] = true;
    ARTSet41[ARTTS__BAR] = true;
    ARTSet41[ARTTS__BAR_BAR] = true;
  }

  public void ARTSet13initialise() {
    ARTSet13 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet13, 0, artSetExtent, false);
    ARTSet13[ARTX_EOS] = true;
    ARTSet13[ARTTB_CHAR_BQ] = true;
    ARTSet13[ARTTB_ID] = true;
    ARTSet13[ARTTB_STRING_DOLLAR] = true;
    ARTSet13[ARTTB_STRING_DQ] = true;
    ARTSet13[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet13[ARTTS__HASH] = true;
    ARTSet13[ARTTS__AMPERSAND] = true;
    ARTSet13[ARTTS__LPAR] = true;
    ARTSet13[ARTTS__RPAR] = true;
    ARTSet13[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet13[ARTTS__RBRACK] = true;
    ARTSet13[ARTTS_choose] = true;
    ARTSet13[ARTTS_import] = true;
    ARTSet13[ARTTS_module] = true;
    ARTSet13[ARTTS_option] = true;
    ARTSet13[ARTTS_prelude] = true;
    ARTSet13[ARTTS_start] = true;
    ARTSet13[ARTTS_support] = true;
    ARTSet13[ARTTS_terminal] = true;
    ARTSet13[ARTTS_whitespace] = true;
    ARTSet13[ARTTS__BAR] = true;
  }

  public void ARTSet62initialise() {
    ARTSet62 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet62, 0, artSetExtent, false);
    ARTSet62[ARTX_EOS] = true;
    ARTSet62[ARTTB_CHAR_BQ] = true;
    ARTSet62[ARTTB_ID] = true;
    ARTSet62[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet62[ARTTB_STRING_DOLLAR] = true;
    ARTSet62[ARTTB_STRING_DQ] = true;
    ARTSet62[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet62[ARTTS__HASH] = true;
    ARTSet62[ARTTS__AMPERSAND] = true;
    ARTSet62[ARTTS__LPAR] = true;
    ARTSet62[ARTTS__RPAR] = true;
    ARTSet62[ARTTS__STAR] = true;
    ARTSet62[ARTTS__PLUS] = true;
    ARTSet62[ARTTS__QUERY] = true;
    ARTSet62[ARTTS__AT] = true;
    ARTSet62[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet62[ARTTS__RBRACK] = true;
    ARTSet62[ARTTS_choose] = true;
    ARTSet62[ARTTS_import] = true;
    ARTSet62[ARTTS_module] = true;
    ARTSet62[ARTTS_option] = true;
    ARTSet62[ARTTS_prelude] = true;
    ARTSet62[ARTTS_start] = true;
    ARTSet62[ARTTS_support] = true;
    ARTSet62[ARTTS_terminal] = true;
    ARTSet62[ARTTS_whitespace] = true;
    ARTSet62[ARTTS__BAR] = true;
  }

  public void ARTSet16initialise() {
    ARTSet16 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet16, 0, artSetExtent, false);
    ARTSet16[ARTTB_STRING_DQ] = true;
  }

  public void ARTSet121initialise() {
    ARTSet121 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet121, 0, artSetExtent, false);
    ARTSet121[ARTTS_showSPPFFull] = true;
  }

  public void ARTSet68initialise() {
    ARTSet68 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet68, 0, artSetExtent, false);
    ARTSet68[ARTTS_terminal] = true;
  }

  public void ARTSet187initialise() {
    ARTSet187 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet187, 0, artSetExtent, false);
    ARTSet187[ARTTS_lcnpIndexedPool] = true;
  }

  public void ARTSet97initialise() {
    ARTSet97 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet97, 0, artSetExtent, false);
    ARTSet97[ARTTS__COLON] = true;
  }

  public void ARTSet42initialise() {
    ARTSet42 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet42, 0, artSetExtent, false);
    ARTSet42[ARTTS__LT] = true;
  }

  public void ARTSet71initialise() {
    ARTSet71 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet71, 0, artSetExtent, false);
    ARTSet71[ARTTS_FIFODescriptors] = true;
    ARTSet71[ARTTS_cnp] = true;
    ARTSet71[ARTTS_cnpGeneratorPool] = true;
    ARTSet71[ARTTS_cnpIndexedAPI] = true;
    ARTSet71[ARTTS_cnpIndexedPool] = true;
    ARTSet71[ARTTS_cnpLinkedAPI] = true;
    ARTSet71[ARTTS_earley] = true;
    ARTSet71[ARTTS_earley2007LinkedAPI] = true;
    ARTSet71[ARTTS_earleyIndexedAPI] = true;
    ARTSet71[ARTTS_earleyIndexedData] = true;
    ARTSet71[ARTTS_earleyIndexedPool] = true;
    ARTSet71[ARTTS_earleyLinkedAPI] = true;
    ARTSet71[ARTTS_earleyTable] = true;
    ARTSet71[ARTTS_earleyTableIndexedAPI] = true;
    ARTSet71[ARTTS_earleyTableIndexedData] = true;
    ARTSet71[ARTTS_earleyTableIndexedPool] = true;
    ARTSet71[ARTTS_earleyTableLinkedAPI] = true;
    ARTSet71[ARTTS_ebnfClosureLeft] = true;
    ARTSet71[ARTTS_ebnfClosureRight] = true;
    ARTSet71[ARTTS_ebnfLeftFactor] = true;
    ARTSet71[ARTTS_ebnfMultiplyOut] = true;
    ARTSet71[ARTTS_ebnfracketToNonterminal] = true;
    ARTSet71[ARTTS_generateC_PLUS_PLUS] = true;
    ARTSet71[ARTTS_generateDynamic] = true;
    ARTSet71[ARTTS_generateFragment] = true;
    ARTSet71[ARTTS_generateJava] = true;
    ARTSet71[ARTTS_generatePool] = true;
    ARTSet71[ARTTS_generateState] = true;
    ARTSet71[ARTTS_generateStatic] = true;
    ARTSet71[ARTTS_gll] = true;
    ARTSet71[ARTTS_gllClusteredGeneratorPool] = true;
    ARTSet71[ARTTS_gllGeneratorPool] = true;
    ARTSet71[ARTTS_gllTWEGeneratorPool] = true;
    ARTSet71[ARTTS_inputFile] = true;
    ARTSet71[ARTTS_inputFileIfExists] = true;
    ARTSet71[ARTTS_inputString] = true;
    ARTSet71[ARTTS_lcnp] = true;
    ARTSet71[ARTTS_lcnpGeneratorPool] = true;
    ARTSet71[ARTTS_lcnpIndexedAPI] = true;
    ARTSet71[ARTTS_lcnpIndexedPool] = true;
    ARTSet71[ARTTS_lcnpLinkedAPI] = true;
    ARTSet71[ARTTS_lexCFParse] = true;
    ARTSet71[ARTTS_lexCFRecognise] = true;
    ARTSet71[ARTTS_lexDFA] = true;
    ARTSet71[ARTTS_lexDead] = true;
    ARTSet71[ARTTS_lexExtents] = true;
    ARTSet71[ARTTS_lexLongestAcross] = true;
    ARTSet71[ARTTS_lexLongestWithin] = true;
    ARTSet71[ARTTS_lexPrintTWESet] = true;
    ARTSet71[ARTTS_lexPriority] = true;
    ARTSet71[ARTTS_lexRecursive] = true;
    ARTSet71[ARTTS_lexSegments] = true;
    ARTSet71[ARTTS_lexWSSuffix] = true;
    ARTSet71[ARTTS_lexerData] = true;
    ARTSet71[ARTTS_lexerName] = true;
    ARTSet71[ARTTS_mgll] = true;
    ARTSet71[ARTTS_mgllGeneratorPool] = true;
    ARTSet71[ARTTS_namespace] = true;
    ARTSet71[ARTTS_osbrd] = true;
    ARTSet71[ARTTS_osbrdGenerator] = true;
    ARTSet71[ARTTS_outputDirectory] = true;
    ARTSet71[ARTTS_parserName] = true;
    ARTSet71[ARTTS_phaseAG] = true;
    ARTSet71[ARTTS_phaseDerivationSelect] = true;
    ARTSet71[ARTTS_phaseGIFT] = true;
    ARTSet71[ARTTS_phaseLex] = true;
    ARTSet71[ARTTS_phaseModule] = true;
    ARTSet71[ARTTS_phaseParse] = true;
    ARTSet71[ARTTS_phasePostChoose] = true;
    ARTSet71[ARTTS_phasePreChoose] = true;
    ARTSet71[ARTTS_phaseSOS] = true;
    ARTSet71[ARTTS_phaseTR] = true;
    ARTSet71[ARTTS_postLongestAcross] = true;
    ARTSet71[ARTTS_postLongestWithin] = true;
    ARTSet71[ARTTS_postPriority] = true;
    ARTSet71[ARTTS_postUseTerminals] = true;
    ARTSet71[ARTTS_predictivePops] = true;
    ARTSet71[ARTTS_showAG] = true;
    ARTSet71[ARTTS_showAll] = true;
    ARTSet71[ARTTS_showBSR] = true;
    ARTSet71[ARTTS_showDT] = true;
    ARTSet71[ARTTS_showGIFT] = true;
    ARTSet71[ARTTS_showSOS] = true;
    ARTSet71[ARTTS_showSPPFCore] = true;
    ARTSet71[ARTTS_showSPPFFull] = true;
    ARTSet71[ARTTS_showTR] = true;
    ARTSet71[ARTTS_showTWE] = true;
    ARTSet71[ARTTS_statistics] = true;
    ARTSet71[ARTTS_suppressPopGuard] = true;
    ARTSet71[ARTTS_suppressProductionGuard] = true;
    ARTSet71[ARTTS_suppressSemantics] = true;
    ARTSet71[ARTTS_suppressTestRepeat] = true;
    ARTSet71[ARTTS_trace] = true;
    ARTSet71[ARTTS_verbosity] = true;
  }

  public void ARTSet199initialise() {
    ARTSet199 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet199, 0, artSetExtent, false);
    ARTSet199[ARTTB_ID] = true;
    ARTSet199[ARTTB_INTEGER] = true;
    ARTSet199[ARTTB_REAL] = true;
    ARTSet199[ARTTB_STRING_DQ] = true;
  }

  public void ARTSet151initialise() {
    ARTSet151 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet151, 0, artSetExtent, false);
    ARTSet151[ARTTS_namespace] = true;
  }

  public void ARTSet17initialise() {
    ARTSet17 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet17, 0, artSetExtent, false);
    ARTSet17[ARTX_EOS] = true;
    ARTSet17[ARTTB_CHAR_BQ] = true;
    ARTSet17[ARTTB_ID] = true;
    ARTSet17[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet17[ARTTB_STRING_DOLLAR] = true;
    ARTSet17[ARTTB_STRING_DQ] = true;
    ARTSet17[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet17[ARTTS__SHREIK] = true;
    ARTSet17[ARTTS__HASH] = true;
    ARTSet17[ARTTS__AMPERSAND] = true;
    ARTSet17[ARTTS__LPAR] = true;
    ARTSet17[ARTTS__RPAR] = true;
    ARTSet17[ARTTS__STAR] = true;
    ARTSet17[ARTTS__PLUS] = true;
    ARTSet17[ARTTS__COMMA] = true;
    ARTSet17[ARTTS__PERIOD] = true;
    ARTSet17[ARTTS__COLON] = true;
    ARTSet17[ARTTS__LT] = true;
    ARTSet17[ARTTS__LT_LT] = true;
    ARTSet17[ARTTS__GT] = true;
    ARTSet17[ARTTS__GT_GT] = true;
    ARTSet17[ARTTS__QUERY] = true;
    ARTSet17[ARTTS__AT] = true;
    ARTSet17[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet17[ARTTS__RBRACK] = true;
    ARTSet17[ARTTS__UPARROW] = true;
    ARTSet17[ARTTS__UPARROW_UPARROW] = true;
    ARTSet17[ARTTS__UPARROW_UPARROW_UPARROW] = true;
    ARTSet17[ARTTS__UPARROW_] = true;
    ARTSet17[ARTTS_choose] = true;
    ARTSet17[ARTTS_import] = true;
    ARTSet17[ARTTS_longest] = true;
    ARTSet17[ARTTS_module] = true;
    ARTSet17[ARTTS_option] = true;
    ARTSet17[ARTTS_prelude] = true;
    ARTSet17[ARTTS_start] = true;
    ARTSet17[ARTTS_support] = true;
    ARTSet17[ARTTS_terminal] = true;
    ARTSet17[ARTTS_whitespace] = true;
    ARTSet17[ARTTS__BAR] = true;
    ARTSet17[ARTTS__BAR_BAR] = true;
    ARTSet17[ARTTI__QUOTE_QUOTE] = true;
  }

  public void ARTSet43initialise() {
    ARTSet43 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet43, 0, artSetExtent, false);
    ARTSet43[ARTTS__COLON_COLON_EQUAL] = true;
  }

  public void ARTSet52initialise() {
    ARTSet52 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet52, 0, artSetExtent, false);
    ARTSet52[ARTTB_ID] = true;
    ARTSet52[ARTTB_STRING_DOLLAR] = true;
  }

  public void ARTSet53initialise() {
    ARTSet53 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet53, 0, artSetExtent, false);
    ARTSet53[ARTTI__QUOTE_QUOTE] = true;
  }

  public void ARTSet92initialise() {
    ARTSet92 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet92, 0, artSetExtent, false);
    ARTSet92[ARTTB_ID] = true;
    ARTSet92[ARTTB_STRING_DOLLAR] = true;
    ARTSet92[ARTTS_choose] = true;
    ARTSet92[ARTTS_import] = true;
    ARTSet92[ARTTS_option] = true;
    ARTSet92[ARTTS_prelude] = true;
    ARTSet92[ARTTS_start] = true;
    ARTSet92[ARTTS_support] = true;
    ARTSet92[ARTTS_terminal] = true;
    ARTSet92[ARTTS_whitespace] = true;
  }

  public void ARTSet34initialise() {
    ARTSet34 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet34, 0, artSetExtent, false);
    ARTSet34[ARTTS__RPAR] = true;
    ARTSet34[ARTTS__RBRACK] = true;
  }

  public void ARTSet51initialise() {
    ARTSet51 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet51, 0, artSetExtent, false);
    ARTSet51[ARTX_EOS] = true;
    ARTSet51[ARTTB_CHAR_BQ] = true;
    ARTSet51[ARTTB_ID] = true;
    ARTSet51[ARTTB_STRING_DOLLAR] = true;
    ARTSet51[ARTTB_STRING_DQ] = true;
    ARTSet51[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet51[ARTTS__AMPERSAND] = true;
    ARTSet51[ARTTS__PERIOD] = true;
    ARTSet51[ARTTS__LT] = true;
    ARTSet51[ARTTS__LT_LT] = true;
    ARTSet51[ARTTS__GT] = true;
    ARTSet51[ARTTS__GT_GT] = true;
    ARTSet51[ARTTS_choose] = true;
    ARTSet51[ARTTS_import] = true;
    ARTSet51[ARTTS_longest] = true;
    ARTSet51[ARTTS_module] = true;
    ARTSet51[ARTTS_option] = true;
    ARTSet51[ARTTS_prelude] = true;
    ARTSet51[ARTTS_start] = true;
    ARTSet51[ARTTS_support] = true;
    ARTSet51[ARTTS_terminal] = true;
    ARTSet51[ARTTS_whitespace] = true;
    ARTSet51[ARTTI__QUOTE_QUOTE] = true;
  }

  public void ARTSet192initialise() {
    ARTSet192 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet192, 0, artSetExtent, false);
    ARTSet192[ARTTS_gllClusteredGeneratorPool] = true;
  }

  public void ARTSet163initialise() {
    ARTSet163 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet163, 0, artSetExtent, false);
    ARTSet163[ARTTS_suppressPopGuard] = true;
  }

  public void ARTSet96initialise() {
    ARTSet96 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet96, 0, artSetExtent, false);
    ARTSet96[ARTTB_INTEGER] = true;
    ARTSet96[ARTTS__COLON] = true;
  }

  public void ARTSet150initialise() {
    ARTSet150 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet150, 0, artSetExtent, false);
    ARTSet150[ARTTS_outputDirectory] = true;
  }

  public void ARTSet181initialise() {
    ARTSet181 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet181, 0, artSetExtent, false);
    ARTSet181[ARTTS_cnpIndexedAPI] = true;
  }

  public void ARTSet48initialise() {
    ARTSet48 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet48, 0, artSetExtent, false);
    ARTSet48[ARTX_EOS] = true;
    ARTSet48[ARTTB_ID] = true;
    ARTSet48[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet48[ARTTB_STRING_DOLLAR] = true;
    ARTSet48[ARTTS__RPAR] = true;
    ARTSet48[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet48[ARTTS__RBRACK] = true;
    ARTSet48[ARTTS_choose] = true;
    ARTSet48[ARTTS_import] = true;
    ARTSet48[ARTTS_module] = true;
    ARTSet48[ARTTS_option] = true;
    ARTSet48[ARTTS_prelude] = true;
    ARTSet48[ARTTS_start] = true;
    ARTSet48[ARTTS_support] = true;
    ARTSet48[ARTTS_terminal] = true;
    ARTSet48[ARTTS_whitespace] = true;
    ARTSet48[ARTTS__BAR] = true;
  }

  public void ARTSet149initialise() {
    ARTSet149 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet149, 0, artSetExtent, false);
    ARTSet149[ARTTS_postPriority] = true;
  }

  public void ARTSet191initialise() {
    ARTSet191 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet191, 0, artSetExtent, false);
    ARTSet191[ARTTS_gllTWEGeneratorPool] = true;
  }

  public void ARTSet142initialise() {
    ARTSet142 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet142, 0, artSetExtent, false);
    ARTSet142[ARTTS_lexDead] = true;
  }

  public void ARTSet164initialise() {
    ARTSet164 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet164, 0, artSetExtent, false);
    ARTSet164[ARTTS_suppressProductionGuard] = true;
  }

  public void ARTSet61initialise() {
    ARTSet61 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet61, 0, artSetExtent, false);
    ARTSet61[ARTTS__COLON_TILDE_EQUAL] = true;
  }

  public void ARTSet120initialise() {
    ARTSet120 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet120, 0, artSetExtent, false);
    ARTSet120[ARTTS_showBSR] = true;
  }

  public void ARTSet119initialise() {
    ARTSet119 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet119, 0, artSetExtent, false);
    ARTSet119[ARTTS_showTWE] = true;
  }

  public void ARTSet105initialise() {
    ARTSet105 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet105, 0, artSetExtent, false);
    ARTSet105[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet105[ARTTS__COLON] = true;
  }

  public void ARTSet158initialise() {
    ARTSet158 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet158, 0, artSetExtent, false);
    ARTSet158[ARTTS_generatePool] = true;
  }

  public void ARTSet98initialise() {
    ARTSet98 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet98, 0, artSetExtent, false);
    ARTSet98[ARTTS_statistics] = true;
  }

  public void ARTSet172initialise() {
    ARTSet172 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet172, 0, artSetExtent, false);
    ARTSet172[ARTTS_earleyIndexedPool] = true;
  }

  public void ARTSet184initialise() {
    ARTSet184 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet184, 0, artSetExtent, false);
    ARTSet184[ARTTS_lcnp] = true;
  }

  public void ARTSet140initialise() {
    ARTSet140 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet140, 0, artSetExtent, false);
    ARTSet140[ARTTS_lexRecursive] = true;
  }

  public void ARTSet14initialise() {
    ARTSet14 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet14, 0, artSetExtent, false);
    ARTSet14[ARTTB_STRING_DOLLAR] = true;
  }

  public void ARTSet156initialise() {
    ARTSet156 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet156, 0, artSetExtent, false);
    ARTSet156[ARTTS_generateState] = true;
  }

  public void ARTSet67initialise() {
    ARTSet67 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet67, 0, artSetExtent, false);
    ARTSet67[ARTTB_ID] = true;
    ARTSet67[ARTTB_STRING_DOLLAR] = true;
    ARTSet67[ARTTS__AMPERSAND] = true;
  }

  public void ARTSet159initialise() {
    ARTSet159 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet159, 0, artSetExtent, false);
    ARTSet159[ARTTS_generateJava] = true;
  }

  public void ARTSet179initialise() {
    ARTSet179 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet179, 0, artSetExtent, false);
    ARTSet179[ARTTS_cnp] = true;
  }

  public void ARTSet165initialise() {
    ARTSet165 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet165, 0, artSetExtent, false);
    ARTSet165[ARTTS_suppressTestRepeat] = true;
  }

  public void ARTSet3initialise() {
    ARTSet3 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet3, 0, artSetExtent, false);
    ARTSet3[ARTX_EOS] = true;
    ARTSet3[ARTTB_CHAR_BQ] = true;
    ARTSet3[ARTTB_ID] = true;
    ARTSet3[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet3[ARTTB_STRING_DOLLAR] = true;
    ARTSet3[ARTTB_STRING_DQ] = true;
    ARTSet3[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet3[ARTTS__SHREIK] = true;
    ARTSet3[ARTTS__HASH] = true;
    ARTSet3[ARTTS__AMPERSAND] = true;
    ARTSet3[ARTTS__LPAR] = true;
    ARTSet3[ARTTS__RPAR] = true;
    ARTSet3[ARTTS__STAR] = true;
    ARTSet3[ARTTS__PLUS] = true;
    ARTSet3[ARTTS__PERIOD] = true;
    ARTSet3[ARTTS__PERIOD_PERIOD] = true;
    ARTSet3[ARTTS__COLON] = true;
    ARTSet3[ARTTS__LT] = true;
    ARTSet3[ARTTS__LT_LT] = true;
    ARTSet3[ARTTS__GT] = true;
    ARTSet3[ARTTS__GT_GT] = true;
    ARTSet3[ARTTS__QUERY] = true;
    ARTSet3[ARTTS__AT] = true;
    ARTSet3[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet3[ARTTS__RBRACK] = true;
    ARTSet3[ARTTS__UPARROW] = true;
    ARTSet3[ARTTS__UPARROW_UPARROW] = true;
    ARTSet3[ARTTS__UPARROW_UPARROW_UPARROW] = true;
    ARTSet3[ARTTS__UPARROW_] = true;
    ARTSet3[ARTTS_choose] = true;
    ARTSet3[ARTTS_import] = true;
    ARTSet3[ARTTS_longest] = true;
    ARTSet3[ARTTS_module] = true;
    ARTSet3[ARTTS_option] = true;
    ARTSet3[ARTTS_prelude] = true;
    ARTSet3[ARTTS_start] = true;
    ARTSet3[ARTTS_support] = true;
    ARTSet3[ARTTS_terminal] = true;
    ARTSet3[ARTTS_whitespace] = true;
    ARTSet3[ARTTS__BAR] = true;
    ARTSet3[ARTTS__BAR_BAR] = true;
    ARTSet3[ARTTI__QUOTE_QUOTE] = true;
  }

  public void ARTSet89initialise() {
    ARTSet89 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet89, 0, artSetExtent, false);
    ARTSet89[ARTTS_module] = true;
  }

  public void ARTSet55initialise() {
    ARTSet55 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet55, 0, artSetExtent, false);
    ARTSet55[ARTTB_CHAR_BQ] = true;
    ARTSet55[ARTTB_ID] = true;
    ARTSet55[ARTTB_STRING_DOLLAR] = true;
    ARTSet55[ARTTB_STRING_DQ] = true;
    ARTSet55[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet55[ARTTS__AMPERSAND] = true;
    ARTSet55[ARTTS__PERIOD] = true;
    ARTSet55[ARTTS_longest] = true;
    ARTSet55[ARTTI__QUOTE_QUOTE] = true;
  }

  public void ARTSet37initialise() {
    ARTSet37 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet37, 0, artSetExtent, false);
    ARTSet37[ARTX_EOS] = true;
    ARTSet37[ARTTB_CHAR_BQ] = true;
    ARTSet37[ARTTB_ID] = true;
    ARTSet37[ARTTB_STRING_BRACE_NEST] = true;
    ARTSet37[ARTTB_STRING_DOLLAR] = true;
    ARTSet37[ARTTB_STRING_DQ] = true;
    ARTSet37[ARTTB_STRING_PLAIN_SQ] = true;
    ARTSet37[ARTTS__SHREIK] = true;
    ARTSet37[ARTTS__HASH] = true;
    ARTSet37[ARTTS__AMPERSAND] = true;
    ARTSet37[ARTTS__LPAR] = true;
    ARTSet37[ARTTS__RPAR] = true;
    ARTSet37[ARTTS__STAR] = true;
    ARTSet37[ARTTS__PLUS] = true;
    ARTSet37[ARTTS__COLON] = true;
    ARTSet37[ARTTS__LT] = true;
    ARTSet37[ARTTS__QUERY] = true;
    ARTSet37[ARTTS__AT] = true;
    ARTSet37[ARTTS__BACKSLASH_BACKSLASH] = true;
    ARTSet37[ARTTS__RBRACK] = true;
    ARTSet37[ARTTS__UPARROW] = true;
    ARTSet37[ARTTS__UPARROW_UPARROW] = true;
    ARTSet37[ARTTS__UPARROW_UPARROW_UPARROW] = true;
    ARTSet37[ARTTS__UPARROW_] = true;
    ARTSet37[ARTTS_choose] = true;
    ARTSet37[ARTTS_import] = true;
    ARTSet37[ARTTS_module] = true;
    ARTSet37[ARTTS_option] = true;
    ARTSet37[ARTTS_prelude] = true;
    ARTSet37[ARTTS_start] = true;
    ARTSet37[ARTTS_support] = true;
    ARTSet37[ARTTS_terminal] = true;
    ARTSet37[ARTTS_whitespace] = true;
    ARTSet37[ARTTS__BAR] = true;
    ARTSet37[ARTTS__BAR_BAR] = true;
  }

  public void ARTSet100initialise() {
    ARTSet100 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet100, 0, artSetExtent, false);
    ARTSet100[ARTX_EOS] = true;
    ARTSet100[ARTTB_ID] = true;
    ARTSet100[ARTTB_STRING_DOLLAR] = true;
    ARTSet100[ARTTS__COLON] = true;
    ARTSet100[ARTTS_FIFODescriptors] = true;
    ARTSet100[ARTTS_choose] = true;
    ARTSet100[ARTTS_cnp] = true;
    ARTSet100[ARTTS_cnpGeneratorPool] = true;
    ARTSet100[ARTTS_cnpIndexedAPI] = true;
    ARTSet100[ARTTS_cnpIndexedPool] = true;
    ARTSet100[ARTTS_cnpLinkedAPI] = true;
    ARTSet100[ARTTS_earley] = true;
    ARTSet100[ARTTS_earley2007LinkedAPI] = true;
    ARTSet100[ARTTS_earleyIndexedAPI] = true;
    ARTSet100[ARTTS_earleyIndexedData] = true;
    ARTSet100[ARTTS_earleyIndexedPool] = true;
    ARTSet100[ARTTS_earleyLinkedAPI] = true;
    ARTSet100[ARTTS_earleyTable] = true;
    ARTSet100[ARTTS_earleyTableIndexedAPI] = true;
    ARTSet100[ARTTS_earleyTableIndexedData] = true;
    ARTSet100[ARTTS_earleyTableIndexedPool] = true;
    ARTSet100[ARTTS_earleyTableLinkedAPI] = true;
    ARTSet100[ARTTS_ebnfClosureLeft] = true;
    ARTSet100[ARTTS_ebnfClosureRight] = true;
    ARTSet100[ARTTS_ebnfLeftFactor] = true;
    ARTSet100[ARTTS_ebnfMultiplyOut] = true;
    ARTSet100[ARTTS_ebnfracketToNonterminal] = true;
    ARTSet100[ARTTS_false] = true;
    ARTSet100[ARTTS_generateC_PLUS_PLUS] = true;
    ARTSet100[ARTTS_generateDynamic] = true;
    ARTSet100[ARTTS_generateFragment] = true;
    ARTSet100[ARTTS_generateJava] = true;
    ARTSet100[ARTTS_generatePool] = true;
    ARTSet100[ARTTS_generateState] = true;
    ARTSet100[ARTTS_generateStatic] = true;
    ARTSet100[ARTTS_gll] = true;
    ARTSet100[ARTTS_gllClusteredGeneratorPool] = true;
    ARTSet100[ARTTS_gllGeneratorPool] = true;
    ARTSet100[ARTTS_gllTWEGeneratorPool] = true;
    ARTSet100[ARTTS_import] = true;
    ARTSet100[ARTTS_inputFile] = true;
    ARTSet100[ARTTS_inputFileIfExists] = true;
    ARTSet100[ARTTS_inputString] = true;
    ARTSet100[ARTTS_lcnp] = true;
    ARTSet100[ARTTS_lcnpGeneratorPool] = true;
    ARTSet100[ARTTS_lcnpIndexedAPI] = true;
    ARTSet100[ARTTS_lcnpIndexedPool] = true;
    ARTSet100[ARTTS_lcnpLinkedAPI] = true;
    ARTSet100[ARTTS_lexCFParse] = true;
    ARTSet100[ARTTS_lexCFRecognise] = true;
    ARTSet100[ARTTS_lexDFA] = true;
    ARTSet100[ARTTS_lexDead] = true;
    ARTSet100[ARTTS_lexExtents] = true;
    ARTSet100[ARTTS_lexLongestAcross] = true;
    ARTSet100[ARTTS_lexLongestWithin] = true;
    ARTSet100[ARTTS_lexPrintTWESet] = true;
    ARTSet100[ARTTS_lexPriority] = true;
    ARTSet100[ARTTS_lexRecursive] = true;
    ARTSet100[ARTTS_lexSegments] = true;
    ARTSet100[ARTTS_lexWSSuffix] = true;
    ARTSet100[ARTTS_lexerData] = true;
    ARTSet100[ARTTS_lexerName] = true;
    ARTSet100[ARTTS_mgll] = true;
    ARTSet100[ARTTS_mgllGeneratorPool] = true;
    ARTSet100[ARTTS_module] = true;
    ARTSet100[ARTTS_namespace] = true;
    ARTSet100[ARTTS_option] = true;
    ARTSet100[ARTTS_osbrd] = true;
    ARTSet100[ARTTS_osbrdGenerator] = true;
    ARTSet100[ARTTS_outputDirectory] = true;
    ARTSet100[ARTTS_parserName] = true;
    ARTSet100[ARTTS_phaseAG] = true;
    ARTSet100[ARTTS_phaseDerivationSelect] = true;
    ARTSet100[ARTTS_phaseGIFT] = true;
    ARTSet100[ARTTS_phaseLex] = true;
    ARTSet100[ARTTS_phaseModule] = true;
    ARTSet100[ARTTS_phaseParse] = true;
    ARTSet100[ARTTS_phasePostChoose] = true;
    ARTSet100[ARTTS_phasePreChoose] = true;
    ARTSet100[ARTTS_phaseSOS] = true;
    ARTSet100[ARTTS_phaseTR] = true;
    ARTSet100[ARTTS_postLongestAcross] = true;
    ARTSet100[ARTTS_postLongestWithin] = true;
    ARTSet100[ARTTS_postPriority] = true;
    ARTSet100[ARTTS_postUseTerminals] = true;
    ARTSet100[ARTTS_predictivePops] = true;
    ARTSet100[ARTTS_prelude] = true;
    ARTSet100[ARTTS_showAG] = true;
    ARTSet100[ARTTS_showAll] = true;
    ARTSet100[ARTTS_showBSR] = true;
    ARTSet100[ARTTS_showDT] = true;
    ARTSet100[ARTTS_showGIFT] = true;
    ARTSet100[ARTTS_showSOS] = true;
    ARTSet100[ARTTS_showSPPFCore] = true;
    ARTSet100[ARTTS_showSPPFFull] = true;
    ARTSet100[ARTTS_showTR] = true;
    ARTSet100[ARTTS_showTWE] = true;
    ARTSet100[ARTTS_start] = true;
    ARTSet100[ARTTS_statistics] = true;
    ARTSet100[ARTTS_support] = true;
    ARTSet100[ARTTS_suppressPopGuard] = true;
    ARTSet100[ARTTS_suppressProductionGuard] = true;
    ARTSet100[ARTTS_suppressSemantics] = true;
    ARTSet100[ARTTS_suppressTestRepeat] = true;
    ARTSet100[ARTTS_terminal] = true;
    ARTSet100[ARTTS_trace] = true;
    ARTSet100[ARTTS_true] = true;
    ARTSet100[ARTTS_verbosity] = true;
    ARTSet100[ARTTS_whitespace] = true;
  }

  public void ARTSet124initialise() {
    ARTSet124 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet124, 0, artSetExtent, false);
    ARTSet124[ARTTS_showGIFT] = true;
  }

  public void ARTSet134initialise() {
    ARTSet134 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet134, 0, artSetExtent, false);
    ARTSet134[ARTTS_lexDFA] = true;
  }

  public void ARTSet10initialise() {
    ARTSet10 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet10, 0, artSetExtent, false);
    ARTSet10[ARTTB_REAL] = true;
  }

  public void ARTSet31initialise() {
    ARTSet31 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet31, 0, artSetExtent, false);
    ARTSet31[ARTTS__BACKSLASH_BACKSLASH] = true;
  }

  public void ARTSet58initialise() {
    ARTSet58 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet58, 0, artSetExtent, false);
    ARTSet58[ARTTS__LT_LT] = true;
  }

  public void ARTSet204initialise() {
    ARTSet204 = new boolean[artSetExtent];
    artInitialiseBooleanArray(ARTSet204, 0, artSetExtent, false);
    ARTSet204[ARTTS__BAR_BAR] = true;
  }

  public void artSetInitialise() {
    ARTSet1initialise();
    ARTSet122initialise();
    ARTSet185initialise();
    ARTSet117initialise();
    ARTSet154initialise();
    ARTSet47initialise();
    ARTSet107initialise();
    ARTSet7initialise();
    ARTSet20initialise();
    ARTSet170initialise();
    ARTSet175initialise();
    ARTSet45initialise();
    ARTSet82initialise();
    ARTSet167initialise();
    ARTSet129initialise();
    ARTSet178initialise();
    ARTSet201initialise();
    ARTSet50initialise();
    ARTSet11initialise();
    ARTSet49initialise();
    ARTSet57initialise();
    ARTSet80initialise();
    ARTSet109initialise();
    ARTSet202initialise();
    ARTSet32initialise();
    ARTSet78initialise();
    ARTSet90initialise();
    ARTSet94initialise();
    ARTSet133initialise();
    ARTSet69initialise();
    ARTSet65initialise();
    ARTSet194initialise();
    ARTSet203initialise();
    ARTSet190initialise();
    ARTSet136initialise();
    ARTSet102initialise();
    ARTSet168initialise();
    ARTSet196initialise();
    ARTSet40initialise();
    ARTSet72initialise();
    ARTSet95initialise();
    ARTSet125initialise();
    ARTSet162initialise();
    ARTSet18initialise();
    ARTSet33initialise();
    ARTSet66initialise();
    ARTSet186initialise();
    ARTSet36initialise();
    ARTSet195initialise();
    ARTSet182initialise();
    ARTSet118initialise();
    ARTSet130initialise();
    ARTSet143initialise();
    ARTSet155initialise();
    ARTSet144initialise();
    ARTSet126initialise();
    ARTSet39initialise();
    ARTSet198initialise();
    ARTSet75initialise();
    ARTSet146initialise();
    ARTSet91initialise();
    ARTSet26initialise();
    ARTSet46initialise();
    ARTSet44initialise();
    ARTSet101initialise();
    ARTSet132initialise();
    ARTSet189initialise();
    ARTSet88initialise();
    ARTSet76initialise();
    ARTSet77initialise();
    ARTSet27initialise();
    ARTSet157initialise();
    ARTSet28initialise();
    ARTSet22initialise();
    ARTSet54initialise();
    ARTSet177initialise();
    ARTSet141initialise();
    ARTSet145initialise();
    ARTSet166initialise();
    ARTSet38initialise();
    ARTSet24initialise();
    ARTSet86initialise();
    ARTSet4initialise();
    ARTSet21initialise();
    ARTSet23initialise();
    ARTSet29initialise();
    ARTSet87initialise();
    ARTSet174initialise();
    ARTSet114initialise();
    ARTSet30initialise();
    ARTSet131initialise();
    ARTSet2initialise();
    ARTSet59initialise();
    ARTSet6initialise();
    ARTSet111initialise();
    ARTSet83initialise();
    ARTSet128initialise();
    ARTSet84initialise();
    ARTSet79initialise();
    ARTSet12initialise();
    ARTSet8initialise();
    ARTSet180initialise();
    ARTSet123initialise();
    ARTSet116initialise();
    ARTSet127initialise();
    ARTSet112initialise();
    ARTSet200initialise();
    ARTSet35initialise();
    ARTSet15initialise();
    ARTSet176initialise();
    ARTSet183initialise();
    ARTSet135initialise();
    ARTSet138initialise();
    ARTSet56initialise();
    ARTSet139initialise();
    ARTSet63initialise();
    ARTSet148initialise();
    ARTSet113initialise();
    ARTSet188initialise();
    ARTSet160initialise();
    ARTSet99initialise();
    ARTSet74initialise();
    ARTSet147initialise();
    ARTSet81initialise();
    ARTSet85initialise();
    ARTSet25initialise();
    ARTSet137initialise();
    ARTSet171initialise();
    ARTSet193initialise();
    ARTSet9initialise();
    ARTSet197initialise();
    ARTSet115initialise();
    ARTSet108initialise();
    ARTSet110initialise();
    ARTSet106initialise();
    ARTSet73initialise();
    ARTSet173initialise();
    ARTSet19initialise();
    ARTSet70initialise();
    ARTSet169initialise();
    ARTSet60initialise();
    ARTSet64initialise();
    ARTSet153initialise();
    ARTSet104initialise();
    ARTSet152initialise();
    ARTSet103initialise();
    ARTSet161initialise();
    ARTSet5initialise();
    ARTSet93initialise();
    ARTSet41initialise();
    ARTSet13initialise();
    ARTSet62initialise();
    ARTSet16initialise();
    ARTSet121initialise();
    ARTSet68initialise();
    ARTSet187initialise();
    ARTSet97initialise();
    ARTSet42initialise();
    ARTSet71initialise();
    ARTSet199initialise();
    ARTSet151initialise();
    ARTSet17initialise();
    ARTSet43initialise();
    ARTSet52initialise();
    ARTSet53initialise();
    ARTSet92initialise();
    ARTSet34initialise();
    ARTSet51initialise();
    ARTSet192initialise();
    ARTSet163initialise();
    ARTSet96initialise();
    ARTSet150initialise();
    ARTSet181initialise();
    ARTSet48initialise();
    ARTSet149initialise();
    ARTSet191initialise();
    ARTSet142initialise();
    ARTSet164initialise();
    ARTSet61initialise();
    ARTSet120initialise();
    ARTSet119initialise();
    ARTSet105initialise();
    ARTSet158initialise();
    ARTSet98initialise();
    ARTSet172initialise();
    ARTSet184initialise();
    ARTSet140initialise();
    ARTSet14initialise();
    ARTSet156initialise();
    ARTSet67initialise();
    ARTSet159initialise();
    ARTSet179initialise();
    ARTSet165initialise();
    ARTSet3initialise();
    ARTSet89initialise();
    ARTSet55initialise();
    ARTSet37initialise();
    ARTSet100initialise();
    ARTSet124initialise();
    ARTSet134initialise();
    ARTSet10initialise();
    ARTSet31initialise();
    ARTSet58initialise();
    ARTSet204initialise();
  }

  public void artTableInitialiser_ARTV3_CHAR_BQ() {
    artLabelInternalStrings[ARTL_ARTV3_CHAR_BQ] = "ARTV3.CHAR_BQ";
    artLabelStrings[ARTL_ARTV3_CHAR_BQ] = "ARTV3.CHAR_BQ";
    artKindOfs[ARTL_ARTV3_CHAR_BQ] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_CHAR_BQ_1650] = "ARTV3.CHAR_BQ ::= . &CHAR_BQ ";
    artLabelStrings[ARTL_ARTV3_CHAR_BQ_1650] = "";
    artlhsL[ARTL_ARTV3_CHAR_BQ_1650] = ARTL_ARTV3_CHAR_BQ;
    artKindOfs[ARTL_ARTV3_CHAR_BQ_1650] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_CHAR_BQ_1650] = true;
    artLabelInternalStrings[ARTL_ARTV3_CHAR_BQ_1651] = "ARTV3.CHAR_BQ ::= &CHAR_BQ ";
    artLabelStrings[ARTL_ARTV3_CHAR_BQ_1651] = "";
    artlhsL[ARTL_ARTV3_CHAR_BQ_1651] = ARTL_ARTV3_CHAR_BQ;
    artPopD[ARTL_ARTV3_CHAR_BQ_1651] = true;
    artLabelInternalStrings[ARTL_ARTV3_CHAR_BQ_1652] = "ARTV3.CHAR_BQ ::= &CHAR_BQ .";
    artLabelStrings[ARTL_ARTV3_CHAR_BQ_1652] = "";
    artlhsL[ARTL_ARTV3_CHAR_BQ_1652] = ARTL_ARTV3_CHAR_BQ;
    artKindOfs[ARTL_ARTV3_CHAR_BQ_1652] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_CHAR_BQ_1652] = true;
    arteoR_pL[ARTL_ARTV3_CHAR_BQ_1652] = true;
    artPopD[ARTL_ARTV3_CHAR_BQ_1652] = true;
  }

  public void artTableInitialiser_ARTV3_ID() {
    artLabelInternalStrings[ARTL_ARTV3_ID] = "ARTV3.ID";
    artLabelStrings[ARTL_ARTV3_ID] = "ARTV3.ID";
    artKindOfs[ARTL_ARTV3_ID] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_ID_1582] = "ARTV3.ID ::= . &ID ";
    artLabelStrings[ARTL_ARTV3_ID_1582] = "";
    artlhsL[ARTL_ARTV3_ID_1582] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_ID_1582] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_ID_1582] = true;
    artLabelInternalStrings[ARTL_ARTV3_ID_1583] = "ARTV3.ID ::= &ID ";
    artLabelStrings[ARTL_ARTV3_ID_1583] = "";
    artlhsL[ARTL_ARTV3_ID_1583] = ARTL_ARTV3_ID;
    artPopD[ARTL_ARTV3_ID_1583] = true;
    artLabelInternalStrings[ARTL_ARTV3_ID_1584] = "ARTV3.ID ::= &ID .";
    artLabelStrings[ARTL_ARTV3_ID_1584] = "";
    artlhsL[ARTL_ARTV3_ID_1584] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_ID_1584] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_ID_1584] = true;
    arteoR_pL[ARTL_ARTV3_ID_1584] = true;
    artPopD[ARTL_ARTV3_ID_1584] = true;
  }

  public void artTableInitialiser_ARTV3_IDList() {
    artLabelInternalStrings[ARTL_ARTV3_IDList] = "ARTV3.IDList";
    artLabelStrings[ARTL_ARTV3_IDList] = "ARTV3.IDList";
    artKindOfs[ARTL_ARTV3_IDList] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_IDList_1514] = "ARTV3.IDList ::= . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_IDList_1514] = "";
    artlhsL[ARTL_ARTV3_IDList_1514] = ARTL_ARTV3_IDList;
    artKindOfs[ARTL_ARTV3_IDList_1514] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_IDList_1516] = "ARTV3.IDList ::= ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_IDList_1516] = "";
    artlhsL[ARTL_ARTV3_IDList_1516] = ARTL_ARTV3_IDList;
    artSlotInstanceOfs[ARTL_ARTV3_IDList_1516] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_IDList_1516] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_IDList_1516] = true;
    arteoR_pL[ARTL_ARTV3_IDList_1516] = true;
    artPopD[ARTL_ARTV3_IDList_1516] = true;
    artLabelInternalStrings[ARTL_ARTV3_IDList_1518] = "ARTV3.IDList ::= . ARTV3.ID ARTV3.IDList ";
    artLabelStrings[ARTL_ARTV3_IDList_1518] = "";
    artlhsL[ARTL_ARTV3_IDList_1518] = ARTL_ARTV3_IDList;
    artKindOfs[ARTL_ARTV3_IDList_1518] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_IDList_1520] = "ARTV3.IDList ::= ARTV3.ID . ARTV3.IDList ";
    artLabelStrings[ARTL_ARTV3_IDList_1520] = "";
    artlhsL[ARTL_ARTV3_IDList_1520] = ARTL_ARTV3_IDList;
    artSlotInstanceOfs[ARTL_ARTV3_IDList_1520] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_IDList_1520] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_IDList_1520] = true;
    artLabelInternalStrings[ARTL_ARTV3_IDList_1522] = "ARTV3.IDList ::= ARTV3.ID ARTV3.IDList .";
    artLabelStrings[ARTL_ARTV3_IDList_1522] = "";
    artlhsL[ARTL_ARTV3_IDList_1522] = ARTL_ARTV3_IDList;
    artSlotInstanceOfs[ARTL_ARTV3_IDList_1522] = ARTL_ARTV3_IDList;
    artKindOfs[ARTL_ARTV3_IDList_1522] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_IDList_1522] = true;
    arteoR_pL[ARTL_ARTV3_IDList_1522] = true;
    artPopD[ARTL_ARTV3_IDList_1522] = true;
  }

  public void artTableInitialiser_ARTV3_IDopt() {
    artLabelInternalStrings[ARTL_ARTV3_IDopt] = "ARTV3.IDopt";
    artLabelStrings[ARTL_ARTV3_IDopt] = "ARTV3.IDopt";
    artKindOfs[ARTL_ARTV3_IDopt] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_IDopt_1524] = "ARTV3.IDopt ::= . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_IDopt_1524] = "";
    artlhsL[ARTL_ARTV3_IDopt_1524] = ARTL_ARTV3_IDopt;
    artKindOfs[ARTL_ARTV3_IDopt_1524] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_IDopt_1526] = "ARTV3.IDopt ::= ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_IDopt_1526] = "";
    artlhsL[ARTL_ARTV3_IDopt_1526] = ARTL_ARTV3_IDopt;
    artSlotInstanceOfs[ARTL_ARTV3_IDopt_1526] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_IDopt_1526] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_IDopt_1526] = true;
    arteoR_pL[ARTL_ARTV3_IDopt_1526] = true;
    artPopD[ARTL_ARTV3_IDopt_1526] = true;
    artLabelInternalStrings[ARTL_ARTV3_IDopt_1530] = "ARTV3.IDopt ::= . # ";
    artLabelStrings[ARTL_ARTV3_IDopt_1530] = "";
    artlhsL[ARTL_ARTV3_IDopt_1530] = ARTL_ARTV3_IDopt;
    artKindOfs[ARTL_ARTV3_IDopt_1530] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_IDopt_1530] = true;
    artLabelInternalStrings[ARTL_ARTV3_IDopt_1534] = "ARTV3.IDopt ::= # .";
    artLabelStrings[ARTL_ARTV3_IDopt_1534] = "";
    artlhsL[ARTL_ARTV3_IDopt_1534] = ARTL_ARTV3_IDopt;
    artKindOfs[ARTL_ARTV3_IDopt_1534] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_IDopt_1534] = true;
    arteoR_pL[ARTL_ARTV3_IDopt_1534] = true;
    artPopD[ARTL_ARTV3_IDopt_1534] = true;
  }

  public void artTableInitialiser_ARTV3_INTEGER() {
    artLabelInternalStrings[ARTL_ARTV3_INTEGER] = "ARTV3.INTEGER";
    artLabelStrings[ARTL_ARTV3_INTEGER] = "ARTV3.INTEGER";
    artKindOfs[ARTL_ARTV3_INTEGER] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_INTEGER_1620] = "ARTV3.INTEGER ::= . &INTEGER ";
    artLabelStrings[ARTL_ARTV3_INTEGER_1620] = "";
    artlhsL[ARTL_ARTV3_INTEGER_1620] = ARTL_ARTV3_INTEGER;
    artKindOfs[ARTL_ARTV3_INTEGER_1620] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_INTEGER_1620] = true;
    artLabelInternalStrings[ARTL_ARTV3_INTEGER_1621] = "ARTV3.INTEGER ::= &INTEGER ";
    artLabelStrings[ARTL_ARTV3_INTEGER_1621] = "";
    artlhsL[ARTL_ARTV3_INTEGER_1621] = ARTL_ARTV3_INTEGER;
    artPopD[ARTL_ARTV3_INTEGER_1621] = true;
    artLabelInternalStrings[ARTL_ARTV3_INTEGER_1622] = "ARTV3.INTEGER ::= &INTEGER .";
    artLabelStrings[ARTL_ARTV3_INTEGER_1622] = "";
    artlhsL[ARTL_ARTV3_INTEGER_1622] = ARTL_ARTV3_INTEGER;
    artKindOfs[ARTL_ARTV3_INTEGER_1622] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_INTEGER_1622] = true;
    arteoR_pL[ARTL_ARTV3_INTEGER_1622] = true;
    artPopD[ARTL_ARTV3_INTEGER_1622] = true;
  }

  public void artTableInitialiser_ARTV3_REAL() {
    artLabelInternalStrings[ARTL_ARTV3_REAL] = "ARTV3.REAL";
    artLabelStrings[ARTL_ARTV3_REAL] = "ARTV3.REAL";
    artKindOfs[ARTL_ARTV3_REAL] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_REAL_1626] = "ARTV3.REAL ::= . &REAL ";
    artLabelStrings[ARTL_ARTV3_REAL_1626] = "";
    artlhsL[ARTL_ARTV3_REAL_1626] = ARTL_ARTV3_REAL;
    artKindOfs[ARTL_ARTV3_REAL_1626] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_REAL_1626] = true;
    artLabelInternalStrings[ARTL_ARTV3_REAL_1627] = "ARTV3.REAL ::= &REAL ";
    artLabelStrings[ARTL_ARTV3_REAL_1627] = "";
    artlhsL[ARTL_ARTV3_REAL_1627] = ARTL_ARTV3_REAL;
    artPopD[ARTL_ARTV3_REAL_1627] = true;
    artLabelInternalStrings[ARTL_ARTV3_REAL_1628] = "ARTV3.REAL ::= &REAL .";
    artLabelStrings[ARTL_ARTV3_REAL_1628] = "";
    artlhsL[ARTL_ARTV3_REAL_1628] = ARTL_ARTV3_REAL;
    artKindOfs[ARTL_ARTV3_REAL_1628] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_REAL_1628] = true;
    arteoR_pL[ARTL_ARTV3_REAL_1628] = true;
    artPopD[ARTL_ARTV3_REAL_1628] = true;
  }

  public void artTableInitialiser_ARTV3_STRING_BRACE_NEST() {
    artLabelInternalStrings[ARTL_ARTV3_STRING_BRACE_NEST] = "ARTV3.STRING_BRACE_NEST";
    artLabelStrings[ARTL_ARTV3_STRING_BRACE_NEST] = "ARTV3.STRING_BRACE_NEST";
    artKindOfs[ARTL_ARTV3_STRING_BRACE_NEST] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_STRING_BRACE_NEST_1656] = "ARTV3.STRING_BRACE_NEST ::= . &STRING_BRACE_NEST ";
    artLabelStrings[ARTL_ARTV3_STRING_BRACE_NEST_1656] = "";
    artlhsL[ARTL_ARTV3_STRING_BRACE_NEST_1656] = ARTL_ARTV3_STRING_BRACE_NEST;
    artKindOfs[ARTL_ARTV3_STRING_BRACE_NEST_1656] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_STRING_BRACE_NEST_1656] = true;
    artLabelInternalStrings[ARTL_ARTV3_STRING_BRACE_NEST_1657] = "ARTV3.STRING_BRACE_NEST ::= &STRING_BRACE_NEST ";
    artLabelStrings[ARTL_ARTV3_STRING_BRACE_NEST_1657] = "";
    artlhsL[ARTL_ARTV3_STRING_BRACE_NEST_1657] = ARTL_ARTV3_STRING_BRACE_NEST;
    artPopD[ARTL_ARTV3_STRING_BRACE_NEST_1657] = true;
    artLabelInternalStrings[ARTL_ARTV3_STRING_BRACE_NEST_1658] = "ARTV3.STRING_BRACE_NEST ::= &STRING_BRACE_NEST .";
    artLabelStrings[ARTL_ARTV3_STRING_BRACE_NEST_1658] = "";
    artlhsL[ARTL_ARTV3_STRING_BRACE_NEST_1658] = ARTL_ARTV3_STRING_BRACE_NEST;
    artKindOfs[ARTL_ARTV3_STRING_BRACE_NEST_1658] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_STRING_BRACE_NEST_1658] = true;
    arteoR_pL[ARTL_ARTV3_STRING_BRACE_NEST_1658] = true;
    artPopD[ARTL_ARTV3_STRING_BRACE_NEST_1658] = true;
  }

  public void artTableInitialiser_ARTV3_STRING_DOLLAR() {
    artLabelInternalStrings[ARTL_ARTV3_STRING_DOLLAR] = "ARTV3.STRING_DOLLAR";
    artLabelStrings[ARTL_ARTV3_STRING_DOLLAR] = "ARTV3.STRING_DOLLAR";
    artKindOfs[ARTL_ARTV3_STRING_DOLLAR] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_STRING_DOLLAR_1638] = "ARTV3.STRING_DOLLAR ::= . &STRING_DOLLAR ";
    artLabelStrings[ARTL_ARTV3_STRING_DOLLAR_1638] = "";
    artlhsL[ARTL_ARTV3_STRING_DOLLAR_1638] = ARTL_ARTV3_STRING_DOLLAR;
    artKindOfs[ARTL_ARTV3_STRING_DOLLAR_1638] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_STRING_DOLLAR_1638] = true;
    artLabelInternalStrings[ARTL_ARTV3_STRING_DOLLAR_1639] = "ARTV3.STRING_DOLLAR ::= &STRING_DOLLAR ";
    artLabelStrings[ARTL_ARTV3_STRING_DOLLAR_1639] = "";
    artlhsL[ARTL_ARTV3_STRING_DOLLAR_1639] = ARTL_ARTV3_STRING_DOLLAR;
    artPopD[ARTL_ARTV3_STRING_DOLLAR_1639] = true;
    artLabelInternalStrings[ARTL_ARTV3_STRING_DOLLAR_1640] = "ARTV3.STRING_DOLLAR ::= &STRING_DOLLAR .";
    artLabelStrings[ARTL_ARTV3_STRING_DOLLAR_1640] = "";
    artlhsL[ARTL_ARTV3_STRING_DOLLAR_1640] = ARTL_ARTV3_STRING_DOLLAR;
    artKindOfs[ARTL_ARTV3_STRING_DOLLAR_1640] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_STRING_DOLLAR_1640] = true;
    arteoR_pL[ARTL_ARTV3_STRING_DOLLAR_1640] = true;
    artPopD[ARTL_ARTV3_STRING_DOLLAR_1640] = true;
  }

  public void artTableInitialiser_ARTV3_STRING_DQ() {
    artLabelInternalStrings[ARTL_ARTV3_STRING_DQ] = "ARTV3.STRING_DQ";
    artLabelStrings[ARTL_ARTV3_STRING_DQ] = "ARTV3.STRING_DQ";
    artKindOfs[ARTL_ARTV3_STRING_DQ] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_STRING_DQ_1632] = "ARTV3.STRING_DQ ::= . &STRING_DQ ";
    artLabelStrings[ARTL_ARTV3_STRING_DQ_1632] = "";
    artlhsL[ARTL_ARTV3_STRING_DQ_1632] = ARTL_ARTV3_STRING_DQ;
    artKindOfs[ARTL_ARTV3_STRING_DQ_1632] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_STRING_DQ_1632] = true;
    artLabelInternalStrings[ARTL_ARTV3_STRING_DQ_1633] = "ARTV3.STRING_DQ ::= &STRING_DQ ";
    artLabelStrings[ARTL_ARTV3_STRING_DQ_1633] = "";
    artlhsL[ARTL_ARTV3_STRING_DQ_1633] = ARTL_ARTV3_STRING_DQ;
    artPopD[ARTL_ARTV3_STRING_DQ_1633] = true;
    artLabelInternalStrings[ARTL_ARTV3_STRING_DQ_1634] = "ARTV3.STRING_DQ ::= &STRING_DQ .";
    artLabelStrings[ARTL_ARTV3_STRING_DQ_1634] = "";
    artlhsL[ARTL_ARTV3_STRING_DQ_1634] = ARTL_ARTV3_STRING_DQ;
    artKindOfs[ARTL_ARTV3_STRING_DQ_1634] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_STRING_DQ_1634] = true;
    arteoR_pL[ARTL_ARTV3_STRING_DQ_1634] = true;
    artPopD[ARTL_ARTV3_STRING_DQ_1634] = true;
  }

  public void artTableInitialiser_ARTV3_STRING_PLAIN_SQ() {
    artLabelInternalStrings[ARTL_ARTV3_STRING_PLAIN_SQ] = "ARTV3.STRING_PLAIN_SQ";
    artLabelStrings[ARTL_ARTV3_STRING_PLAIN_SQ] = "ARTV3.STRING_PLAIN_SQ";
    artKindOfs[ARTL_ARTV3_STRING_PLAIN_SQ] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_STRING_PLAIN_SQ_1644] = "ARTV3.STRING_PLAIN_SQ ::= . &STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_STRING_PLAIN_SQ_1644] = "";
    artlhsL[ARTL_ARTV3_STRING_PLAIN_SQ_1644] = ARTL_ARTV3_STRING_PLAIN_SQ;
    artKindOfs[ARTL_ARTV3_STRING_PLAIN_SQ_1644] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_STRING_PLAIN_SQ_1644] = true;
    artLabelInternalStrings[ARTL_ARTV3_STRING_PLAIN_SQ_1645] = "ARTV3.STRING_PLAIN_SQ ::= &STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_STRING_PLAIN_SQ_1645] = "";
    artlhsL[ARTL_ARTV3_STRING_PLAIN_SQ_1645] = ARTL_ARTV3_STRING_PLAIN_SQ;
    artPopD[ARTL_ARTV3_STRING_PLAIN_SQ_1645] = true;
    artLabelInternalStrings[ARTL_ARTV3_STRING_PLAIN_SQ_1646] = "ARTV3.STRING_PLAIN_SQ ::= &STRING_PLAIN_SQ .";
    artLabelStrings[ARTL_ARTV3_STRING_PLAIN_SQ_1646] = "";
    artlhsL[ARTL_ARTV3_STRING_PLAIN_SQ_1646] = ARTL_ARTV3_STRING_PLAIN_SQ;
    artKindOfs[ARTL_ARTV3_STRING_PLAIN_SQ_1646] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_STRING_PLAIN_SQ_1646] = true;
    arteoR_pL[ARTL_ARTV3_STRING_PLAIN_SQ_1646] = true;
    artPopD[ARTL_ARTV3_STRING_PLAIN_SQ_1646] = true;
  }

  public void artTableInitialiser_ARTV3_TYPE() {
    artLabelInternalStrings[ARTL_ARTV3_TYPE] = "ARTV3.TYPE";
    artLabelStrings[ARTL_ARTV3_TYPE] = "ARTV3.TYPE";
    artKindOfs[ARTL_ARTV3_TYPE] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_TYPE_1588] = "ARTV3.TYPE ::= . ARTV3.TypeNest ";
    artLabelStrings[ARTL_ARTV3_TYPE_1588] = "";
    artlhsL[ARTL_ARTV3_TYPE_1588] = ARTL_ARTV3_TYPE;
    artKindOfs[ARTL_ARTV3_TYPE_1588] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_TYPE_1590] = "ARTV3.TYPE ::= ARTV3.TypeNest .";
    artLabelStrings[ARTL_ARTV3_TYPE_1590] = "";
    artlhsL[ARTL_ARTV3_TYPE_1590] = ARTL_ARTV3_TYPE;
    artSlotInstanceOfs[ARTL_ARTV3_TYPE_1590] = ARTL_ARTV3_TypeNest;
    artKindOfs[ARTL_ARTV3_TYPE_1590] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_TYPE_1590] = true;
    arteoR_pL[ARTL_ARTV3_TYPE_1590] = true;
    artPopD[ARTL_ARTV3_TYPE_1590] = true;
  }

  public void artTableInitialiser_ARTV3_TypeList() {
    artLabelInternalStrings[ARTL_ARTV3_TypeList] = "ARTV3.TypeList";
    artLabelStrings[ARTL_ARTV3_TypeList] = "ARTV3.TypeList";
    artKindOfs[ARTL_ARTV3_TypeList] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_TypeList_1608] = "ARTV3.TypeList ::= . ARTV3.TypeNest ";
    artLabelStrings[ARTL_ARTV3_TypeList_1608] = "";
    artlhsL[ARTL_ARTV3_TypeList_1608] = ARTL_ARTV3_TypeList;
    artKindOfs[ARTL_ARTV3_TypeList_1608] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_TypeList_1610] = "ARTV3.TypeList ::= ARTV3.TypeNest .";
    artLabelStrings[ARTL_ARTV3_TypeList_1610] = "";
    artlhsL[ARTL_ARTV3_TypeList_1610] = ARTL_ARTV3_TypeList;
    artSlotInstanceOfs[ARTL_ARTV3_TypeList_1610] = ARTL_ARTV3_TypeNest;
    artKindOfs[ARTL_ARTV3_TypeList_1610] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_TypeList_1610] = true;
    arteoR_pL[ARTL_ARTV3_TypeList_1610] = true;
    artPopD[ARTL_ARTV3_TypeList_1610] = true;
    artLabelInternalStrings[ARTL_ARTV3_TypeList_1612] = "ARTV3.TypeList ::= . ARTV3.TypeNest ',' ARTV3.TypeList ";
    artLabelStrings[ARTL_ARTV3_TypeList_1612] = "";
    artlhsL[ARTL_ARTV3_TypeList_1612] = ARTL_ARTV3_TypeList;
    artKindOfs[ARTL_ARTV3_TypeList_1612] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_TypeList_1614] = "ARTV3.TypeList ::= ARTV3.TypeNest . ',' ARTV3.TypeList ";
    artLabelStrings[ARTL_ARTV3_TypeList_1614] = "";
    artlhsL[ARTL_ARTV3_TypeList_1614] = ARTL_ARTV3_TypeList;
    artSlotInstanceOfs[ARTL_ARTV3_TypeList_1614] = ARTL_ARTV3_TypeNest;
    artKindOfs[ARTL_ARTV3_TypeList_1614] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_TypeList_1614] = true;
    artLabelInternalStrings[ARTL_ARTV3_TypeList_1615] = "ARTV3.TypeList ::= ARTV3.TypeNest ',' ARTV3.TypeList ";
    artLabelStrings[ARTL_ARTV3_TypeList_1615] = "";
    artlhsL[ARTL_ARTV3_TypeList_1615] = ARTL_ARTV3_TypeList;
    artLabelInternalStrings[ARTL_ARTV3_TypeList_1616] = "ARTV3.TypeList ::= ARTV3.TypeNest ',' . ARTV3.TypeList ";
    artLabelStrings[ARTL_ARTV3_TypeList_1616] = "";
    artlhsL[ARTL_ARTV3_TypeList_1616] = ARTL_ARTV3_TypeList;
    artKindOfs[ARTL_ARTV3_TypeList_1616] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_TypeList_1618] = "ARTV3.TypeList ::= ARTV3.TypeNest ',' ARTV3.TypeList .";
    artLabelStrings[ARTL_ARTV3_TypeList_1618] = "";
    artlhsL[ARTL_ARTV3_TypeList_1618] = ARTL_ARTV3_TypeList;
    artSlotInstanceOfs[ARTL_ARTV3_TypeList_1618] = ARTL_ARTV3_TypeList;
    artKindOfs[ARTL_ARTV3_TypeList_1618] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_TypeList_1618] = true;
    arteoR_pL[ARTL_ARTV3_TypeList_1618] = true;
    artPopD[ARTL_ARTV3_TypeList_1618] = true;
  }

  public void artTableInitialiser_ARTV3_TypeNest() {
    artLabelInternalStrings[ARTL_ARTV3_TypeNest] = "ARTV3.TypeNest";
    artLabelStrings[ARTL_ARTV3_TypeNest] = "ARTV3.TypeNest";
    artKindOfs[ARTL_ARTV3_TypeNest] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_TypeNest_1594] = "ARTV3.TypeNest ::= . &ID ";
    artLabelStrings[ARTL_ARTV3_TypeNest_1594] = "";
    artlhsL[ARTL_ARTV3_TypeNest_1594] = ARTL_ARTV3_TypeNest;
    artKindOfs[ARTL_ARTV3_TypeNest_1594] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_TypeNest_1594] = true;
    artLabelInternalStrings[ARTL_ARTV3_TypeNest_1595] = "ARTV3.TypeNest ::= &ID ";
    artLabelStrings[ARTL_ARTV3_TypeNest_1595] = "";
    artlhsL[ARTL_ARTV3_TypeNest_1595] = ARTL_ARTV3_TypeNest;
    artPopD[ARTL_ARTV3_TypeNest_1595] = true;
    artLabelInternalStrings[ARTL_ARTV3_TypeNest_1596] = "ARTV3.TypeNest ::= &ID .";
    artLabelStrings[ARTL_ARTV3_TypeNest_1596] = "";
    artlhsL[ARTL_ARTV3_TypeNest_1596] = ARTL_ARTV3_TypeNest;
    artKindOfs[ARTL_ARTV3_TypeNest_1596] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_TypeNest_1596] = true;
    arteoR_pL[ARTL_ARTV3_TypeNest_1596] = true;
    artPopD[ARTL_ARTV3_TypeNest_1596] = true;
    artLabelInternalStrings[ARTL_ARTV3_TypeNest_1598] = "ARTV3.TypeNest ::= . &ID '<' ARTV3.TypeList '>' ";
    artLabelStrings[ARTL_ARTV3_TypeNest_1598] = "";
    artlhsL[ARTL_ARTV3_TypeNest_1598] = ARTL_ARTV3_TypeNest;
    artKindOfs[ARTL_ARTV3_TypeNest_1598] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_TypeNest_1599] = "ARTV3.TypeNest ::= &ID '<' ARTV3.TypeList '>' ";
    artLabelStrings[ARTL_ARTV3_TypeNest_1599] = "";
    artlhsL[ARTL_ARTV3_TypeNest_1599] = ARTL_ARTV3_TypeNest;
    artLabelInternalStrings[ARTL_ARTV3_TypeNest_1600] = "ARTV3.TypeNest ::= &ID . '<' ARTV3.TypeList '>' ";
    artLabelStrings[ARTL_ARTV3_TypeNest_1600] = "";
    artlhsL[ARTL_ARTV3_TypeNest_1600] = ARTL_ARTV3_TypeNest;
    artKindOfs[ARTL_ARTV3_TypeNest_1600] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_TypeNest_1600] = true;
    artLabelInternalStrings[ARTL_ARTV3_TypeNest_1601] = "ARTV3.TypeNest ::= &ID '<' ARTV3.TypeList '>' ";
    artLabelStrings[ARTL_ARTV3_TypeNest_1601] = "";
    artlhsL[ARTL_ARTV3_TypeNest_1601] = ARTL_ARTV3_TypeNest;
    artLabelInternalStrings[ARTL_ARTV3_TypeNest_1602] = "ARTV3.TypeNest ::= &ID '<' . ARTV3.TypeList '>' ";
    artLabelStrings[ARTL_ARTV3_TypeNest_1602] = "";
    artlhsL[ARTL_ARTV3_TypeNest_1602] = ARTL_ARTV3_TypeNest;
    artKindOfs[ARTL_ARTV3_TypeNest_1602] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_TypeNest_1604] = "ARTV3.TypeNest ::= &ID '<' ARTV3.TypeList . '>' ";
    artLabelStrings[ARTL_ARTV3_TypeNest_1604] = "";
    artlhsL[ARTL_ARTV3_TypeNest_1604] = ARTL_ARTV3_TypeNest;
    artSlotInstanceOfs[ARTL_ARTV3_TypeNest_1604] = ARTL_ARTV3_TypeList;
    artKindOfs[ARTL_ARTV3_TypeNest_1604] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_TypeNest_1604] = true;
    artLabelInternalStrings[ARTL_ARTV3_TypeNest_1605] = "ARTV3.TypeNest ::= &ID '<' ARTV3.TypeList '>' ";
    artLabelStrings[ARTL_ARTV3_TypeNest_1605] = "";
    artlhsL[ARTL_ARTV3_TypeNest_1605] = ARTL_ARTV3_TypeNest;
    artPopD[ARTL_ARTV3_TypeNest_1605] = true;
    artLabelInternalStrings[ARTL_ARTV3_TypeNest_1606] = "ARTV3.TypeNest ::= &ID '<' ARTV3.TypeList '>' .";
    artLabelStrings[ARTL_ARTV3_TypeNest_1606] = "";
    artlhsL[ARTL_ARTV3_TypeNest_1606] = ARTL_ARTV3_TypeNest;
    artKindOfs[ARTL_ARTV3_TypeNest_1606] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_TypeNest_1606] = true;
    arteoR_pL[ARTL_ARTV3_TypeNest_1606] = true;
    artPopD[ARTL_ARTV3_TypeNest_1606] = true;
  }

  public void artTableInitialiser_ARTV3_abbrev() {
    artLabelInternalStrings[ARTL_ARTV3_abbrev] = "ARTV3.abbrev";
    artLabelStrings[ARTL_ARTV3_abbrev] = "ARTV3.abbrev";
    artKindOfs[ARTL_ARTV3_abbrev] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1228] = "ARTV3.abbrev ::= . ARTV3.iter ";
    artLabelStrings[ARTL_ARTV3_abbrev_1228] = "";
    artlhsL[ARTL_ARTV3_abbrev_1228] = ARTL_ARTV3_abbrev;
    artKindOfs[ARTL_ARTV3_abbrev_1228] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1230] = "ARTV3.abbrev ::= ARTV3.iter .";
    artLabelStrings[ARTL_ARTV3_abbrev_1230] = "";
    artlhsL[ARTL_ARTV3_abbrev_1230] = ARTL_ARTV3_abbrev;
    artSlotInstanceOfs[ARTL_ARTV3_abbrev_1230] = ARTL_ARTV3_iter;
    artKindOfs[ARTL_ARTV3_abbrev_1230] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_abbrev_1230] = true;
    arteoR_pL[ARTL_ARTV3_abbrev_1230] = true;
    artPopD[ARTL_ARTV3_abbrev_1230] = true;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1232] = "ARTV3.abbrev ::= . ARTV3.iter '*' ";
    artLabelStrings[ARTL_ARTV3_abbrev_1232] = "";
    artlhsL[ARTL_ARTV3_abbrev_1232] = ARTL_ARTV3_abbrev;
    artKindOfs[ARTL_ARTV3_abbrev_1232] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1234] = "ARTV3.abbrev ::= ARTV3.iter . '*' ";
    artLabelStrings[ARTL_ARTV3_abbrev_1234] = "";
    artlhsL[ARTL_ARTV3_abbrev_1234] = ARTL_ARTV3_abbrev;
    artSlotInstanceOfs[ARTL_ARTV3_abbrev_1234] = ARTL_ARTV3_iter;
    artKindOfs[ARTL_ARTV3_abbrev_1234] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_abbrev_1234] = true;
    artPopD[ARTL_ARTV3_abbrev_1234] = true;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1235] = "ARTV3.abbrev ::= ARTV3.iter '*' ";
    artLabelStrings[ARTL_ARTV3_abbrev_1235] = "";
    artlhsL[ARTL_ARTV3_abbrev_1235] = ARTL_ARTV3_abbrev;
    artPopD[ARTL_ARTV3_abbrev_1235] = true;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1236] = "ARTV3.abbrev ::= ARTV3.iter '*' .";
    artLabelStrings[ARTL_ARTV3_abbrev_1236] = "";
    artlhsL[ARTL_ARTV3_abbrev_1236] = ARTL_ARTV3_abbrev;
    artKindOfs[ARTL_ARTV3_abbrev_1236] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_abbrev_1236] = true;
    arteoR_pL[ARTL_ARTV3_abbrev_1236] = true;
    artPopD[ARTL_ARTV3_abbrev_1236] = true;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1238] = "ARTV3.abbrev ::= . ARTV3.iter '+' ";
    artLabelStrings[ARTL_ARTV3_abbrev_1238] = "";
    artlhsL[ARTL_ARTV3_abbrev_1238] = ARTL_ARTV3_abbrev;
    artKindOfs[ARTL_ARTV3_abbrev_1238] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1240] = "ARTV3.abbrev ::= ARTV3.iter . '+' ";
    artLabelStrings[ARTL_ARTV3_abbrev_1240] = "";
    artlhsL[ARTL_ARTV3_abbrev_1240] = ARTL_ARTV3_abbrev;
    artSlotInstanceOfs[ARTL_ARTV3_abbrev_1240] = ARTL_ARTV3_iter;
    artKindOfs[ARTL_ARTV3_abbrev_1240] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_abbrev_1240] = true;
    artPopD[ARTL_ARTV3_abbrev_1240] = true;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1241] = "ARTV3.abbrev ::= ARTV3.iter '+' ";
    artLabelStrings[ARTL_ARTV3_abbrev_1241] = "";
    artlhsL[ARTL_ARTV3_abbrev_1241] = ARTL_ARTV3_abbrev;
    artPopD[ARTL_ARTV3_abbrev_1241] = true;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1242] = "ARTV3.abbrev ::= ARTV3.iter '+' .";
    artLabelStrings[ARTL_ARTV3_abbrev_1242] = "";
    artlhsL[ARTL_ARTV3_abbrev_1242] = ARTL_ARTV3_abbrev;
    artKindOfs[ARTL_ARTV3_abbrev_1242] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_abbrev_1242] = true;
    arteoR_pL[ARTL_ARTV3_abbrev_1242] = true;
    artPopD[ARTL_ARTV3_abbrev_1242] = true;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1244] = "ARTV3.abbrev ::= . ARTV3.iter '?' ";
    artLabelStrings[ARTL_ARTV3_abbrev_1244] = "";
    artlhsL[ARTL_ARTV3_abbrev_1244] = ARTL_ARTV3_abbrev;
    artKindOfs[ARTL_ARTV3_abbrev_1244] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1246] = "ARTV3.abbrev ::= ARTV3.iter . '?' ";
    artLabelStrings[ARTL_ARTV3_abbrev_1246] = "";
    artlhsL[ARTL_ARTV3_abbrev_1246] = ARTL_ARTV3_abbrev;
    artSlotInstanceOfs[ARTL_ARTV3_abbrev_1246] = ARTL_ARTV3_iter;
    artKindOfs[ARTL_ARTV3_abbrev_1246] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_abbrev_1246] = true;
    artPopD[ARTL_ARTV3_abbrev_1246] = true;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1247] = "ARTV3.abbrev ::= ARTV3.iter '?' ";
    artLabelStrings[ARTL_ARTV3_abbrev_1247] = "";
    artlhsL[ARTL_ARTV3_abbrev_1247] = ARTL_ARTV3_abbrev;
    artPopD[ARTL_ARTV3_abbrev_1247] = true;
    artLabelInternalStrings[ARTL_ARTV3_abbrev_1248] = "ARTV3.abbrev ::= ARTV3.iter '?' .";
    artLabelStrings[ARTL_ARTV3_abbrev_1248] = "";
    artlhsL[ARTL_ARTV3_abbrev_1248] = ARTL_ARTV3_abbrev;
    artKindOfs[ARTL_ARTV3_abbrev_1248] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_abbrev_1248] = true;
    arteoR_pL[ARTL_ARTV3_abbrev_1248] = true;
    artPopD[ARTL_ARTV3_abbrev_1248] = true;
  }

  public void artTableInitialiser_ARTV3_action() {
    artLabelInternalStrings[ARTL_ARTV3_action] = "ARTV3.action";
    artLabelStrings[ARTL_ARTV3_action] = "ARTV3.action";
    artKindOfs[ARTL_ARTV3_action] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_action_1494] = "ARTV3.action ::= . ARTV3.STRING_BRACE_NEST ";
    artLabelStrings[ARTL_ARTV3_action_1494] = "";
    artlhsL[ARTL_ARTV3_action_1494] = ARTL_ARTV3_action;
    artKindOfs[ARTL_ARTV3_action_1494] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_action_1496] = "ARTV3.action ::= ARTV3.STRING_BRACE_NEST .";
    artLabelStrings[ARTL_ARTV3_action_1496] = "";
    artlhsL[ARTL_ARTV3_action_1496] = ARTL_ARTV3_action;
    artSlotInstanceOfs[ARTL_ARTV3_action_1496] = ARTL_ARTV3_STRING_BRACE_NEST;
    artKindOfs[ARTL_ARTV3_action_1496] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_action_1496] = true;
    arteoR_pL[ARTL_ARTV3_action_1496] = true;
    artPopD[ARTL_ARTV3_action_1496] = true;
    artLabelInternalStrings[ARTL_ARTV3_action_1500] = "ARTV3.action ::= . '\\\\' ARTV3.term ";
    artLabelStrings[ARTL_ARTV3_action_1500] = "";
    artlhsL[ARTL_ARTV3_action_1500] = ARTL_ARTV3_action;
    artKindOfs[ARTL_ARTV3_action_1500] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_action_1501] = "ARTV3.action ::= '\\\\' ARTV3.term ";
    artLabelStrings[ARTL_ARTV3_action_1501] = "";
    artlhsL[ARTL_ARTV3_action_1501] = ARTL_ARTV3_action;
    artLabelInternalStrings[ARTL_ARTV3_action_1502] = "ARTV3.action ::= '\\\\' . ARTV3.term ";
    artLabelStrings[ARTL_ARTV3_action_1502] = "";
    artlhsL[ARTL_ARTV3_action_1502] = ARTL_ARTV3_action;
    artKindOfs[ARTL_ARTV3_action_1502] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_action_1502] = true;
    artLabelInternalStrings[ARTL_ARTV3_action_1504] = "ARTV3.action ::= '\\\\' ARTV3.term .";
    artLabelStrings[ARTL_ARTV3_action_1504] = "";
    artlhsL[ARTL_ARTV3_action_1504] = ARTL_ARTV3_action;
    artSlotInstanceOfs[ARTL_ARTV3_action_1504] = ARTL_ARTV3_term;
    artKindOfs[ARTL_ARTV3_action_1504] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_action_1504] = true;
    arteoR_pL[ARTL_ARTV3_action_1504] = true;
    artPopD[ARTL_ARTV3_action_1504] = true;
  }

  public void artTableInitialiser_ARTV3_alt() {
    artLabelInternalStrings[ARTL_ARTV3_alt] = "ARTV3.alt";
    artLabelStrings[ARTL_ARTV3_alt] = "ARTV3.alt";
    artKindOfs[ARTL_ARTV3_alt] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_alt_1176] = "ARTV3.alt ::= . ARTV3.cat ";
    artLabelStrings[ARTL_ARTV3_alt_1176] = "";
    artlhsL[ARTL_ARTV3_alt_1176] = ARTL_ARTV3_alt;
    artKindOfs[ARTL_ARTV3_alt_1176] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_alt_1178] = "ARTV3.alt ::= ARTV3.cat .";
    artLabelStrings[ARTL_ARTV3_alt_1178] = "";
    artlhsL[ARTL_ARTV3_alt_1178] = ARTL_ARTV3_alt;
    artSlotInstanceOfs[ARTL_ARTV3_alt_1178] = ARTL_ARTV3_cat;
    artKindOfs[ARTL_ARTV3_alt_1178] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_alt_1178] = true;
    arteoR_pL[ARTL_ARTV3_alt_1178] = true;
    artPopD[ARTL_ARTV3_alt_1178] = true;
    artLabelInternalStrings[ARTL_ARTV3_alt_1180] = "ARTV3.alt ::= . ARTV3.cat '|' ARTV3.alt1 ";
    artLabelStrings[ARTL_ARTV3_alt_1180] = "";
    artlhsL[ARTL_ARTV3_alt_1180] = ARTL_ARTV3_alt;
    artKindOfs[ARTL_ARTV3_alt_1180] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_alt_1182] = "ARTV3.alt ::= ARTV3.cat . '|' ARTV3.alt1 ";
    artLabelStrings[ARTL_ARTV3_alt_1182] = "";
    artlhsL[ARTL_ARTV3_alt_1182] = ARTL_ARTV3_alt;
    artSlotInstanceOfs[ARTL_ARTV3_alt_1182] = ARTL_ARTV3_cat;
    artKindOfs[ARTL_ARTV3_alt_1182] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_alt_1182] = true;
    artLabelInternalStrings[ARTL_ARTV3_alt_1183] = "ARTV3.alt ::= ARTV3.cat '|' ARTV3.alt1 ";
    artLabelStrings[ARTL_ARTV3_alt_1183] = "";
    artlhsL[ARTL_ARTV3_alt_1183] = ARTL_ARTV3_alt;
    artLabelInternalStrings[ARTL_ARTV3_alt_1184] = "ARTV3.alt ::= ARTV3.cat '|' . ARTV3.alt1 ";
    artLabelStrings[ARTL_ARTV3_alt_1184] = "";
    artlhsL[ARTL_ARTV3_alt_1184] = ARTL_ARTV3_alt;
    artKindOfs[ARTL_ARTV3_alt_1184] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_alt_1186] = "ARTV3.alt ::= ARTV3.cat '|' ARTV3.alt1 .";
    artLabelStrings[ARTL_ARTV3_alt_1186] = "";
    artlhsL[ARTL_ARTV3_alt_1186] = ARTL_ARTV3_alt;
    artSlotInstanceOfs[ARTL_ARTV3_alt_1186] = ARTL_ARTV3_alt1;
    artKindOfs[ARTL_ARTV3_alt_1186] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_alt_1186] = true;
    arteoR_pL[ARTL_ARTV3_alt_1186] = true;
    artPopD[ARTL_ARTV3_alt_1186] = true;
  }

  public void artTableInitialiser_ARTV3_alt1() {
    artLabelInternalStrings[ARTL_ARTV3_alt1] = "ARTV3.alt1";
    artLabelStrings[ARTL_ARTV3_alt1] = "ARTV3.alt1";
    artKindOfs[ARTL_ARTV3_alt1] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_alt1_1188] = "ARTV3.alt1 ::= . ARTV3.cat ";
    artLabelStrings[ARTL_ARTV3_alt1_1188] = "";
    artlhsL[ARTL_ARTV3_alt1_1188] = ARTL_ARTV3_alt1;
    artKindOfs[ARTL_ARTV3_alt1_1188] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_alt1_1190] = "ARTV3.alt1 ::= ARTV3.cat .";
    artLabelStrings[ARTL_ARTV3_alt1_1190] = "";
    artlhsL[ARTL_ARTV3_alt1_1190] = ARTL_ARTV3_alt1;
    artSlotInstanceOfs[ARTL_ARTV3_alt1_1190] = ARTL_ARTV3_cat;
    artKindOfs[ARTL_ARTV3_alt1_1190] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_alt1_1190] = true;
    arteoR_pL[ARTL_ARTV3_alt1_1190] = true;
    artPopD[ARTL_ARTV3_alt1_1190] = true;
    artLabelInternalStrings[ARTL_ARTV3_alt1_1192] = "ARTV3.alt1 ::= . ARTV3.cat '|' ARTV3.alt1 ";
    artLabelStrings[ARTL_ARTV3_alt1_1192] = "";
    artlhsL[ARTL_ARTV3_alt1_1192] = ARTL_ARTV3_alt1;
    artKindOfs[ARTL_ARTV3_alt1_1192] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_alt1_1194] = "ARTV3.alt1 ::= ARTV3.cat . '|' ARTV3.alt1 ";
    artLabelStrings[ARTL_ARTV3_alt1_1194] = "";
    artlhsL[ARTL_ARTV3_alt1_1194] = ARTL_ARTV3_alt1;
    artSlotInstanceOfs[ARTL_ARTV3_alt1_1194] = ARTL_ARTV3_cat;
    artKindOfs[ARTL_ARTV3_alt1_1194] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_alt1_1194] = true;
    artLabelInternalStrings[ARTL_ARTV3_alt1_1195] = "ARTV3.alt1 ::= ARTV3.cat '|' ARTV3.alt1 ";
    artLabelStrings[ARTL_ARTV3_alt1_1195] = "";
    artlhsL[ARTL_ARTV3_alt1_1195] = ARTL_ARTV3_alt1;
    artLabelInternalStrings[ARTL_ARTV3_alt1_1196] = "ARTV3.alt1 ::= ARTV3.cat '|' . ARTV3.alt1 ";
    artLabelStrings[ARTL_ARTV3_alt1_1196] = "";
    artlhsL[ARTL_ARTV3_alt1_1196] = ARTL_ARTV3_alt1;
    artKindOfs[ARTL_ARTV3_alt1_1196] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_alt1_1198] = "ARTV3.alt1 ::= ARTV3.cat '|' ARTV3.alt1 .";
    artLabelStrings[ARTL_ARTV3_alt1_1198] = "";
    artlhsL[ARTL_ARTV3_alt1_1198] = ARTL_ARTV3_alt1;
    artSlotInstanceOfs[ARTL_ARTV3_alt1_1198] = ARTL_ARTV3_alt1;
    artKindOfs[ARTL_ARTV3_alt1_1198] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_alt1_1198] = true;
    arteoR_pL[ARTL_ARTV3_alt1_1198] = true;
    artPopD[ARTL_ARTV3_alt1_1198] = true;
  }

  public void artTableInitialiser_ARTV3_annotation() {
    artLabelInternalStrings[ARTL_ARTV3_annotation] = "ARTV3.annotation";
    artLabelStrings[ARTL_ARTV3_annotation] = "ARTV3.annotation";
    artKindOfs[ARTL_ARTV3_annotation] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_annotation_1384] = "ARTV3.annotation ::= . ARTV3.name ";
    artLabelStrings[ARTL_ARTV3_annotation_1384] = "";
    artlhsL[ARTL_ARTV3_annotation_1384] = ARTL_ARTV3_annotation;
    artKindOfs[ARTL_ARTV3_annotation_1384] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_annotation_1386] = "ARTV3.annotation ::= ARTV3.name .";
    artLabelStrings[ARTL_ARTV3_annotation_1386] = "";
    artlhsL[ARTL_ARTV3_annotation_1386] = ARTL_ARTV3_annotation;
    artSlotInstanceOfs[ARTL_ARTV3_annotation_1386] = ARTL_ARTV3_name;
    artKindOfs[ARTL_ARTV3_annotation_1386] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_annotation_1386] = true;
    arteoR_pL[ARTL_ARTV3_annotation_1386] = true;
    artPopD[ARTL_ARTV3_annotation_1386] = true;
    artLabelInternalStrings[ARTL_ARTV3_annotation_1388] = "ARTV3.annotation ::= . ARTV3.delay ";
    artLabelStrings[ARTL_ARTV3_annotation_1388] = "";
    artlhsL[ARTL_ARTV3_annotation_1388] = ARTL_ARTV3_annotation;
    artKindOfs[ARTL_ARTV3_annotation_1388] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_annotation_1390] = "ARTV3.annotation ::= ARTV3.delay .";
    artLabelStrings[ARTL_ARTV3_annotation_1390] = "";
    artlhsL[ARTL_ARTV3_annotation_1390] = ARTL_ARTV3_annotation;
    artSlotInstanceOfs[ARTL_ARTV3_annotation_1390] = ARTL_ARTV3_delay;
    artKindOfs[ARTL_ARTV3_annotation_1390] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_annotation_1390] = true;
    arteoR_pL[ARTL_ARTV3_annotation_1390] = true;
    artPopD[ARTL_ARTV3_annotation_1390] = true;
    artLabelInternalStrings[ARTL_ARTV3_annotation_1392] = "ARTV3.annotation ::= . ARTV3.gather ";
    artLabelStrings[ARTL_ARTV3_annotation_1392] = "";
    artlhsL[ARTL_ARTV3_annotation_1392] = ARTL_ARTV3_annotation;
    artKindOfs[ARTL_ARTV3_annotation_1392] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_annotation_1394] = "ARTV3.annotation ::= ARTV3.gather .";
    artLabelStrings[ARTL_ARTV3_annotation_1394] = "";
    artlhsL[ARTL_ARTV3_annotation_1394] = ARTL_ARTV3_annotation;
    artSlotInstanceOfs[ARTL_ARTV3_annotation_1394] = ARTL_ARTV3_gather;
    artKindOfs[ARTL_ARTV3_annotation_1394] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_annotation_1394] = true;
    arteoR_pL[ARTL_ARTV3_annotation_1394] = true;
    artPopD[ARTL_ARTV3_annotation_1394] = true;
    artLabelInternalStrings[ARTL_ARTV3_annotation_1396] = "ARTV3.annotation ::= . ARTV3.fold ";
    artLabelStrings[ARTL_ARTV3_annotation_1396] = "";
    artlhsL[ARTL_ARTV3_annotation_1396] = ARTL_ARTV3_annotation;
    artKindOfs[ARTL_ARTV3_annotation_1396] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_annotation_1398] = "ARTV3.annotation ::= ARTV3.fold .";
    artLabelStrings[ARTL_ARTV3_annotation_1398] = "";
    artlhsL[ARTL_ARTV3_annotation_1398] = ARTL_ARTV3_annotation;
    artSlotInstanceOfs[ARTL_ARTV3_annotation_1398] = ARTL_ARTV3_fold;
    artKindOfs[ARTL_ARTV3_annotation_1398] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_annotation_1398] = true;
    arteoR_pL[ARTL_ARTV3_annotation_1398] = true;
    artPopD[ARTL_ARTV3_annotation_1398] = true;
  }

  public void artTableInitialiser_ARTV3_annotations() {
    artLabelInternalStrings[ARTL_ARTV3_annotations] = "ARTV3.annotations";
    artLabelStrings[ARTL_ARTV3_annotations] = "ARTV3.annotations";
    artKindOfs[ARTL_ARTV3_annotations] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_annotations_1374] = "ARTV3.annotations ::= . ARTV3.annotation ";
    artLabelStrings[ARTL_ARTV3_annotations_1374] = "";
    artlhsL[ARTL_ARTV3_annotations_1374] = ARTL_ARTV3_annotations;
    artKindOfs[ARTL_ARTV3_annotations_1374] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_annotations_1376] = "ARTV3.annotations ::= ARTV3.annotation .";
    artLabelStrings[ARTL_ARTV3_annotations_1376] = "";
    artlhsL[ARTL_ARTV3_annotations_1376] = ARTL_ARTV3_annotations;
    artSlotInstanceOfs[ARTL_ARTV3_annotations_1376] = ARTL_ARTV3_annotation;
    artKindOfs[ARTL_ARTV3_annotations_1376] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_annotations_1376] = true;
    arteoR_pL[ARTL_ARTV3_annotations_1376] = true;
    artPopD[ARTL_ARTV3_annotations_1376] = true;
    artLabelInternalStrings[ARTL_ARTV3_annotations_1378] = "ARTV3.annotations ::= . ARTV3.annotation ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_annotations_1378] = "";
    artlhsL[ARTL_ARTV3_annotations_1378] = ARTL_ARTV3_annotations;
    artKindOfs[ARTL_ARTV3_annotations_1378] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_annotations_1380] = "ARTV3.annotations ::= ARTV3.annotation . ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_annotations_1380] = "";
    artlhsL[ARTL_ARTV3_annotations_1380] = ARTL_ARTV3_annotations;
    artSlotInstanceOfs[ARTL_ARTV3_annotations_1380] = ARTL_ARTV3_annotation;
    artKindOfs[ARTL_ARTV3_annotations_1380] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_annotations_1380] = true;
    artLabelInternalStrings[ARTL_ARTV3_annotations_1382] = "ARTV3.annotations ::= ARTV3.annotation ARTV3.annotations .";
    artLabelStrings[ARTL_ARTV3_annotations_1382] = "";
    artlhsL[ARTL_ARTV3_annotations_1382] = ARTL_ARTV3_annotations;
    artSlotInstanceOfs[ARTL_ARTV3_annotations_1382] = ARTL_ARTV3_annotations;
    artKindOfs[ARTL_ARTV3_annotations_1382] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_annotations_1382] = true;
    arteoR_pL[ARTL_ARTV3_annotations_1382] = true;
    artPopD[ARTL_ARTV3_annotations_1382] = true;
  }

  public void artTableInitialiser_ARTV3_attribute() {
    artLabelInternalStrings[ARTL_ARTV3_attribute] = "ARTV3.attribute";
    artLabelStrings[ARTL_ARTV3_attribute] = "ARTV3.attribute";
    artKindOfs[ARTL_ARTV3_attribute] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_attribute_1148] = "ARTV3.attribute ::= . ARTV3.ID ':' ARTV3.TYPE ";
    artLabelStrings[ARTL_ARTV3_attribute_1148] = "";
    artlhsL[ARTL_ARTV3_attribute_1148] = ARTL_ARTV3_attribute;
    artKindOfs[ARTL_ARTV3_attribute_1148] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_attribute_1150] = "ARTV3.attribute ::= ARTV3.ID . ':' ARTV3.TYPE ";
    artLabelStrings[ARTL_ARTV3_attribute_1150] = "";
    artlhsL[ARTL_ARTV3_attribute_1150] = ARTL_ARTV3_attribute;
    artSlotInstanceOfs[ARTL_ARTV3_attribute_1150] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_attribute_1150] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_attribute_1150] = true;
    artLabelInternalStrings[ARTL_ARTV3_attribute_1151] = "ARTV3.attribute ::= ARTV3.ID ':' ARTV3.TYPE ";
    artLabelStrings[ARTL_ARTV3_attribute_1151] = "";
    artlhsL[ARTL_ARTV3_attribute_1151] = ARTL_ARTV3_attribute;
    artLabelInternalStrings[ARTL_ARTV3_attribute_1152] = "ARTV3.attribute ::= ARTV3.ID ':' . ARTV3.TYPE ";
    artLabelStrings[ARTL_ARTV3_attribute_1152] = "";
    artlhsL[ARTL_ARTV3_attribute_1152] = ARTL_ARTV3_attribute;
    artKindOfs[ARTL_ARTV3_attribute_1152] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_attribute_1154] = "ARTV3.attribute ::= ARTV3.ID ':' ARTV3.TYPE .";
    artLabelStrings[ARTL_ARTV3_attribute_1154] = "";
    artlhsL[ARTL_ARTV3_attribute_1154] = ARTL_ARTV3_attribute;
    artSlotInstanceOfs[ARTL_ARTV3_attribute_1154] = ARTL_ARTV3_TYPE;
    artKindOfs[ARTL_ARTV3_attribute_1154] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_attribute_1154] = true;
    arteoR_pL[ARTL_ARTV3_attribute_1154] = true;
    artPopD[ARTL_ARTV3_attribute_1154] = true;
  }

  public void artTableInitialiser_ARTV3_attributes() {
    artLabelInternalStrings[ARTL_ARTV3_attributes] = "ARTV3.attributes";
    artLabelStrings[ARTL_ARTV3_attributes] = "ARTV3.attributes";
    artKindOfs[ARTL_ARTV3_attributes] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_attributes_1136] = "ARTV3.attributes ::= . ARTV3.attribute ARTV3.attributes ";
    artLabelStrings[ARTL_ARTV3_attributes_1136] = "";
    artlhsL[ARTL_ARTV3_attributes_1136] = ARTL_ARTV3_attributes;
    artKindOfs[ARTL_ARTV3_attributes_1136] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_attributes_1140] = "ARTV3.attributes ::= ARTV3.attribute . ARTV3.attributes ";
    artLabelStrings[ARTL_ARTV3_attributes_1140] = "";
    artlhsL[ARTL_ARTV3_attributes_1140] = ARTL_ARTV3_attributes;
    artSlotInstanceOfs[ARTL_ARTV3_attributes_1140] = ARTL_ARTV3_attribute;
    artKindOfs[ARTL_ARTV3_attributes_1140] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_attributes_1140] = true;
    artLabelInternalStrings[ARTL_ARTV3_attributes_1142] = "ARTV3.attributes ::= ARTV3.attribute ARTV3.attributes .";
    artLabelStrings[ARTL_ARTV3_attributes_1142] = "";
    artlhsL[ARTL_ARTV3_attributes_1142] = ARTL_ARTV3_attributes;
    artSlotInstanceOfs[ARTL_ARTV3_attributes_1142] = ARTL_ARTV3_attributes;
    artKindOfs[ARTL_ARTV3_attributes_1142] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_attributes_1142] = true;
    arteoR_pL[ARTL_ARTV3_attributes_1142] = true;
    artPopD[ARTL_ARTV3_attributes_1142] = true;
    artLabelInternalStrings[ARTL_ARTV3_attributes_1144] = "ARTV3.attributes ::= . # ";
    artLabelStrings[ARTL_ARTV3_attributes_1144] = "";
    artlhsL[ARTL_ARTV3_attributes_1144] = ARTL_ARTV3_attributes;
    artKindOfs[ARTL_ARTV3_attributes_1144] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_attributes_1144] = true;
    artLabelInternalStrings[ARTL_ARTV3_attributes_1146] = "ARTV3.attributes ::= # .";
    artLabelStrings[ARTL_ARTV3_attributes_1146] = "";
    artlhsL[ARTL_ARTV3_attributes_1146] = ARTL_ARTV3_attributes;
    artKindOfs[ARTL_ARTV3_attributes_1146] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_attributes_1146] = true;
    arteoR_pL[ARTL_ARTV3_attributes_1146] = true;
    artPopD[ARTL_ARTV3_attributes_1146] = true;
  }

  public void artTableInitialiser_ARTV3_attributesOpt() {
    artLabelInternalStrings[ARTL_ARTV3_attributesOpt] = "ARTV3.attributesOpt";
    artLabelStrings[ARTL_ARTV3_attributesOpt] = "ARTV3.attributesOpt";
    artKindOfs[ARTL_ARTV3_attributesOpt] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_attributesOpt_1122] = "ARTV3.attributesOpt ::= . '<' ARTV3.attributes '>' ";
    artLabelStrings[ARTL_ARTV3_attributesOpt_1122] = "";
    artlhsL[ARTL_ARTV3_attributesOpt_1122] = ARTL_ARTV3_attributesOpt;
    artKindOfs[ARTL_ARTV3_attributesOpt_1122] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_attributesOpt_1125] = "ARTV3.attributesOpt ::= '<' ARTV3.attributes '>' ";
    artLabelStrings[ARTL_ARTV3_attributesOpt_1125] = "";
    artlhsL[ARTL_ARTV3_attributesOpt_1125] = ARTL_ARTV3_attributesOpt;
    artLabelInternalStrings[ARTL_ARTV3_attributesOpt_1126] = "ARTV3.attributesOpt ::= '<' . ARTV3.attributes '>' ";
    artLabelStrings[ARTL_ARTV3_attributesOpt_1126] = "";
    artlhsL[ARTL_ARTV3_attributesOpt_1126] = ARTL_ARTV3_attributesOpt;
    artKindOfs[ARTL_ARTV3_attributesOpt_1126] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_attributesOpt_1126] = true;
    artLabelInternalStrings[ARTL_ARTV3_attributesOpt_1128] = "ARTV3.attributesOpt ::= '<' ARTV3.attributes . '>' ";
    artLabelStrings[ARTL_ARTV3_attributesOpt_1128] = "";
    artlhsL[ARTL_ARTV3_attributesOpt_1128] = ARTL_ARTV3_attributesOpt;
    artSlotInstanceOfs[ARTL_ARTV3_attributesOpt_1128] = ARTL_ARTV3_attributes;
    artKindOfs[ARTL_ARTV3_attributesOpt_1128] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_attributesOpt_1128] = true;
    artLabelInternalStrings[ARTL_ARTV3_attributesOpt_1129] = "ARTV3.attributesOpt ::= '<' ARTV3.attributes '>' ";
    artLabelStrings[ARTL_ARTV3_attributesOpt_1129] = "";
    artlhsL[ARTL_ARTV3_attributesOpt_1129] = ARTL_ARTV3_attributesOpt;
    artPopD[ARTL_ARTV3_attributesOpt_1129] = true;
    artLabelInternalStrings[ARTL_ARTV3_attributesOpt_1130] = "ARTV3.attributesOpt ::= '<' ARTV3.attributes '>' .";
    artLabelStrings[ARTL_ARTV3_attributesOpt_1130] = "";
    artlhsL[ARTL_ARTV3_attributesOpt_1130] = ARTL_ARTV3_attributesOpt;
    artKindOfs[ARTL_ARTV3_attributesOpt_1130] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_attributesOpt_1130] = true;
    arteoR_pL[ARTL_ARTV3_attributesOpt_1130] = true;
    artPopD[ARTL_ARTV3_attributesOpt_1130] = true;
    artLabelInternalStrings[ARTL_ARTV3_attributesOpt_1132] = "ARTV3.attributesOpt ::= . # ";
    artLabelStrings[ARTL_ARTV3_attributesOpt_1132] = "";
    artlhsL[ARTL_ARTV3_attributesOpt_1132] = ARTL_ARTV3_attributesOpt;
    artKindOfs[ARTL_ARTV3_attributesOpt_1132] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_attributesOpt_1132] = true;
    artLabelInternalStrings[ARTL_ARTV3_attributesOpt_1134] = "ARTV3.attributesOpt ::= # .";
    artLabelStrings[ARTL_ARTV3_attributesOpt_1134] = "";
    artlhsL[ARTL_ARTV3_attributesOpt_1134] = ARTL_ARTV3_attributesOpt;
    artKindOfs[ARTL_ARTV3_attributesOpt_1134] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_attributesOpt_1134] = true;
    arteoR_pL[ARTL_ARTV3_attributesOpt_1134] = true;
    artPopD[ARTL_ARTV3_attributesOpt_1134] = true;
  }

  public void artTableInitialiser_ARTV3_builtinTerminal() {
    artLabelInternalStrings[ARTL_ARTV3_builtinTerminal] = "ARTV3.builtinTerminal";
    artLabelStrings[ARTL_ARTV3_builtinTerminal] = "ARTV3.builtinTerminal";
    artKindOfs[ARTL_ARTV3_builtinTerminal] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_builtinTerminal_1474] = "ARTV3.builtinTerminal ::= . '&' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_builtinTerminal_1474] = "";
    artlhsL[ARTL_ARTV3_builtinTerminal_1474] = ARTL_ARTV3_builtinTerminal;
    artKindOfs[ARTL_ARTV3_builtinTerminal_1474] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_builtinTerminal_1475] = "ARTV3.builtinTerminal ::= '&' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_builtinTerminal_1475] = "";
    artlhsL[ARTL_ARTV3_builtinTerminal_1475] = ARTL_ARTV3_builtinTerminal;
    artLabelInternalStrings[ARTL_ARTV3_builtinTerminal_1476] = "ARTV3.builtinTerminal ::= '&' . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_builtinTerminal_1476] = "";
    artlhsL[ARTL_ARTV3_builtinTerminal_1476] = ARTL_ARTV3_builtinTerminal;
    artKindOfs[ARTL_ARTV3_builtinTerminal_1476] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_builtinTerminal_1476] = true;
    artLabelInternalStrings[ARTL_ARTV3_builtinTerminal_1478] = "ARTV3.builtinTerminal ::= '&' ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_builtinTerminal_1478] = "";
    artlhsL[ARTL_ARTV3_builtinTerminal_1478] = ARTL_ARTV3_builtinTerminal;
    artSlotInstanceOfs[ARTL_ARTV3_builtinTerminal_1478] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_builtinTerminal_1478] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_builtinTerminal_1478] = true;
    arteoR_pL[ARTL_ARTV3_builtinTerminal_1478] = true;
    artPopD[ARTL_ARTV3_builtinTerminal_1478] = true;
  }

  public void artTableInitialiser_ARTV3_caseInsensitiveTerminal() {
    artLabelInternalStrings[ARTL_ARTV3_caseInsensitiveTerminal] = "ARTV3.caseInsensitiveTerminal";
    artLabelStrings[ARTL_ARTV3_caseInsensitiveTerminal] = "ARTV3.caseInsensitiveTerminal";
    artKindOfs[ARTL_ARTV3_caseInsensitiveTerminal] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_caseInsensitiveTerminal_1450] = "ARTV3.caseInsensitiveTerminal ::= . ARTV3.STRING_DQ ";
    artLabelStrings[ARTL_ARTV3_caseInsensitiveTerminal_1450] = "";
    artlhsL[ARTL_ARTV3_caseInsensitiveTerminal_1450] = ARTL_ARTV3_caseInsensitiveTerminal;
    artKindOfs[ARTL_ARTV3_caseInsensitiveTerminal_1450] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_caseInsensitiveTerminal_1452] = "ARTV3.caseInsensitiveTerminal ::= ARTV3.STRING_DQ .";
    artLabelStrings[ARTL_ARTV3_caseInsensitiveTerminal_1452] = "";
    artlhsL[ARTL_ARTV3_caseInsensitiveTerminal_1452] = ARTL_ARTV3_caseInsensitiveTerminal;
    artSlotInstanceOfs[ARTL_ARTV3_caseInsensitiveTerminal_1452] = ARTL_ARTV3_STRING_DQ;
    artKindOfs[ARTL_ARTV3_caseInsensitiveTerminal_1452] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_caseInsensitiveTerminal_1452] = true;
    arteoR_pL[ARTL_ARTV3_caseInsensitiveTerminal_1452] = true;
    artPopD[ARTL_ARTV3_caseInsensitiveTerminal_1452] = true;
  }

  public void artTableInitialiser_ARTV3_caseSensitiveTerminal() {
    artLabelInternalStrings[ARTL_ARTV3_caseSensitiveTerminal] = "ARTV3.caseSensitiveTerminal";
    artLabelStrings[ARTL_ARTV3_caseSensitiveTerminal] = "ARTV3.caseSensitiveTerminal";
    artKindOfs[ARTL_ARTV3_caseSensitiveTerminal] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_caseSensitiveTerminal_1444] = "ARTV3.caseSensitiveTerminal ::= . ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_caseSensitiveTerminal_1444] = "";
    artlhsL[ARTL_ARTV3_caseSensitiveTerminal_1444] = ARTL_ARTV3_caseSensitiveTerminal;
    artKindOfs[ARTL_ARTV3_caseSensitiveTerminal_1444] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_caseSensitiveTerminal_1446] = "ARTV3.caseSensitiveTerminal ::= ARTV3.STRING_PLAIN_SQ .";
    artLabelStrings[ARTL_ARTV3_caseSensitiveTerminal_1446] = "";
    artlhsL[ARTL_ARTV3_caseSensitiveTerminal_1446] = ARTL_ARTV3_caseSensitiveTerminal;
    artSlotInstanceOfs[ARTL_ARTV3_caseSensitiveTerminal_1446] = ARTL_ARTV3_STRING_PLAIN_SQ;
    artKindOfs[ARTL_ARTV3_caseSensitiveTerminal_1446] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_caseSensitiveTerminal_1446] = true;
    arteoR_pL[ARTL_ARTV3_caseSensitiveTerminal_1446] = true;
    artPopD[ARTL_ARTV3_caseSensitiveTerminal_1446] = true;
  }

  public void artTableInitialiser_ARTV3_cat() {
    artLabelInternalStrings[ARTL_ARTV3_cat] = "ARTV3.cat";
    artLabelStrings[ARTL_ARTV3_cat] = "ARTV3.cat";
    artKindOfs[ARTL_ARTV3_cat] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_cat_1200] = "ARTV3.cat ::= . ARTV3.slot ARTV3.catTail ";
    artLabelStrings[ARTL_ARTV3_cat_1200] = "";
    artlhsL[ARTL_ARTV3_cat_1200] = ARTL_ARTV3_cat;
    artKindOfs[ARTL_ARTV3_cat_1200] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_cat_1202] = "ARTV3.cat ::= ARTV3.slot . ARTV3.catTail ";
    artLabelStrings[ARTL_ARTV3_cat_1202] = "";
    artlhsL[ARTL_ARTV3_cat_1202] = ARTL_ARTV3_cat;
    artSlotInstanceOfs[ARTL_ARTV3_cat_1202] = ARTL_ARTV3_slot;
    artKindOfs[ARTL_ARTV3_cat_1202] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_cat_1202] = true;
    artLabelInternalStrings[ARTL_ARTV3_cat_1204] = "ARTV3.cat ::= ARTV3.slot ARTV3.catTail .";
    artLabelStrings[ARTL_ARTV3_cat_1204] = "";
    artlhsL[ARTL_ARTV3_cat_1204] = ARTL_ARTV3_cat;
    artSlotInstanceOfs[ARTL_ARTV3_cat_1204] = ARTL_ARTV3_catTail;
    artKindOfs[ARTL_ARTV3_cat_1204] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_cat_1204] = true;
    arteoR_pL[ARTL_ARTV3_cat_1204] = true;
    artPopD[ARTL_ARTV3_cat_1204] = true;
  }

  public void artTableInitialiser_ARTV3_catTail() {
    artLabelInternalStrings[ARTL_ARTV3_catTail] = "ARTV3.catTail";
    artLabelStrings[ARTL_ARTV3_catTail] = "ARTV3.catTail";
    artKindOfs[ARTL_ARTV3_catTail] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_catTail_1206] = "ARTV3.catTail ::= . ARTV3.abbrev ARTV3.slot ";
    artLabelStrings[ARTL_ARTV3_catTail_1206] = "";
    artlhsL[ARTL_ARTV3_catTail_1206] = ARTL_ARTV3_catTail;
    artKindOfs[ARTL_ARTV3_catTail_1206] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_catTail_1208] = "ARTV3.catTail ::= ARTV3.abbrev . ARTV3.slot ";
    artLabelStrings[ARTL_ARTV3_catTail_1208] = "";
    artlhsL[ARTL_ARTV3_catTail_1208] = ARTL_ARTV3_catTail;
    artSlotInstanceOfs[ARTL_ARTV3_catTail_1208] = ARTL_ARTV3_abbrev;
    artKindOfs[ARTL_ARTV3_catTail_1208] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_catTail_1208] = true;
    artLabelInternalStrings[ARTL_ARTV3_catTail_1210] = "ARTV3.catTail ::= ARTV3.abbrev ARTV3.slot .";
    artLabelStrings[ARTL_ARTV3_catTail_1210] = "";
    artlhsL[ARTL_ARTV3_catTail_1210] = ARTL_ARTV3_catTail;
    artSlotInstanceOfs[ARTL_ARTV3_catTail_1210] = ARTL_ARTV3_slot;
    artKindOfs[ARTL_ARTV3_catTail_1210] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_catTail_1210] = true;
    arteoR_pL[ARTL_ARTV3_catTail_1210] = true;
    artPopD[ARTL_ARTV3_catTail_1210] = true;
    artLabelInternalStrings[ARTL_ARTV3_catTail_1212] = "ARTV3.catTail ::= . ARTV3.abbrev ARTV3.slot ARTV3.catTail ";
    artLabelStrings[ARTL_ARTV3_catTail_1212] = "";
    artlhsL[ARTL_ARTV3_catTail_1212] = ARTL_ARTV3_catTail;
    artKindOfs[ARTL_ARTV3_catTail_1212] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_catTail_1214] = "ARTV3.catTail ::= ARTV3.abbrev . ARTV3.slot ARTV3.catTail ";
    artLabelStrings[ARTL_ARTV3_catTail_1214] = "";
    artlhsL[ARTL_ARTV3_catTail_1214] = ARTL_ARTV3_catTail;
    artSlotInstanceOfs[ARTL_ARTV3_catTail_1214] = ARTL_ARTV3_abbrev;
    artKindOfs[ARTL_ARTV3_catTail_1214] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_catTail_1214] = true;
    artLabelInternalStrings[ARTL_ARTV3_catTail_1216] = "ARTV3.catTail ::= ARTV3.abbrev ARTV3.slot . ARTV3.catTail ";
    artLabelStrings[ARTL_ARTV3_catTail_1216] = "";
    artlhsL[ARTL_ARTV3_catTail_1216] = ARTL_ARTV3_catTail;
    artSlotInstanceOfs[ARTL_ARTV3_catTail_1216] = ARTL_ARTV3_slot;
    artKindOfs[ARTL_ARTV3_catTail_1216] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_catTail_1218] = "ARTV3.catTail ::= ARTV3.abbrev ARTV3.slot ARTV3.catTail .";
    artLabelStrings[ARTL_ARTV3_catTail_1218] = "";
    artlhsL[ARTL_ARTV3_catTail_1218] = ARTL_ARTV3_catTail;
    artSlotInstanceOfs[ARTL_ARTV3_catTail_1218] = ARTL_ARTV3_catTail;
    artKindOfs[ARTL_ARTV3_catTail_1218] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_catTail_1218] = true;
    arteoR_pL[ARTL_ARTV3_catTail_1218] = true;
    artPopD[ARTL_ARTV3_catTail_1218] = true;
  }

  public void artTableInitialiser_ARTV3_characterSetTerminal() {
    artLabelInternalStrings[ARTL_ARTV3_characterSetTerminal] = "ARTV3.characterSetTerminal";
    artLabelStrings[ARTL_ARTV3_characterSetTerminal] = "ARTV3.characterSetTerminal";
    artKindOfs[ARTL_ARTV3_characterSetTerminal] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_characterSetTerminal_1462] = "ARTV3.characterSetTerminal ::= . ARTV3.CHAR_BQ '..' ARTV3.CHAR_BQ ";
    artLabelStrings[ARTL_ARTV3_characterSetTerminal_1462] = "";
    artlhsL[ARTL_ARTV3_characterSetTerminal_1462] = ARTL_ARTV3_characterSetTerminal;
    artKindOfs[ARTL_ARTV3_characterSetTerminal_1462] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_characterSetTerminal_1464] = "ARTV3.characterSetTerminal ::= ARTV3.CHAR_BQ . '..' ARTV3.CHAR_BQ ";
    artLabelStrings[ARTL_ARTV3_characterSetTerminal_1464] = "";
    artlhsL[ARTL_ARTV3_characterSetTerminal_1464] = ARTL_ARTV3_characterSetTerminal;
    artSlotInstanceOfs[ARTL_ARTV3_characterSetTerminal_1464] = ARTL_ARTV3_CHAR_BQ;
    artKindOfs[ARTL_ARTV3_characterSetTerminal_1464] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_characterSetTerminal_1464] = true;
    artLabelInternalStrings[ARTL_ARTV3_characterSetTerminal_1467] = "ARTV3.characterSetTerminal ::= ARTV3.CHAR_BQ '..' ARTV3.CHAR_BQ ";
    artLabelStrings[ARTL_ARTV3_characterSetTerminal_1467] = "";
    artlhsL[ARTL_ARTV3_characterSetTerminal_1467] = ARTL_ARTV3_characterSetTerminal;
    artLabelInternalStrings[ARTL_ARTV3_characterSetTerminal_1468] = "ARTV3.characterSetTerminal ::= ARTV3.CHAR_BQ '..' . ARTV3.CHAR_BQ ";
    artLabelStrings[ARTL_ARTV3_characterSetTerminal_1468] = "";
    artlhsL[ARTL_ARTV3_characterSetTerminal_1468] = ARTL_ARTV3_characterSetTerminal;
    artKindOfs[ARTL_ARTV3_characterSetTerminal_1468] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_characterSetTerminal_1470] = "ARTV3.characterSetTerminal ::= ARTV3.CHAR_BQ '..' ARTV3.CHAR_BQ .";
    artLabelStrings[ARTL_ARTV3_characterSetTerminal_1470] = "";
    artlhsL[ARTL_ARTV3_characterSetTerminal_1470] = ARTL_ARTV3_characterSetTerminal;
    artSlotInstanceOfs[ARTL_ARTV3_characterSetTerminal_1470] = ARTL_ARTV3_CHAR_BQ;
    artKindOfs[ARTL_ARTV3_characterSetTerminal_1470] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_characterSetTerminal_1470] = true;
    arteoR_pL[ARTL_ARTV3_characterSetTerminal_1470] = true;
    artPopD[ARTL_ARTV3_characterSetTerminal_1470] = true;
  }

  public void artTableInitialiser_ARTV3_characterTerminal() {
    artLabelInternalStrings[ARTL_ARTV3_characterTerminal] = "ARTV3.characterTerminal";
    artLabelStrings[ARTL_ARTV3_characterTerminal] = "ARTV3.characterTerminal";
    artKindOfs[ARTL_ARTV3_characterTerminal] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_characterTerminal_1456] = "ARTV3.characterTerminal ::= . ARTV3.CHAR_BQ ";
    artLabelStrings[ARTL_ARTV3_characterTerminal_1456] = "";
    artlhsL[ARTL_ARTV3_characterTerminal_1456] = ARTL_ARTV3_characterTerminal;
    artKindOfs[ARTL_ARTV3_characterTerminal_1456] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_characterTerminal_1458] = "ARTV3.characterTerminal ::= ARTV3.CHAR_BQ .";
    artLabelStrings[ARTL_ARTV3_characterTerminal_1458] = "";
    artlhsL[ARTL_ARTV3_characterTerminal_1458] = ARTL_ARTV3_characterTerminal;
    artSlotInstanceOfs[ARTL_ARTV3_characterTerminal_1458] = ARTL_ARTV3_CHAR_BQ;
    artKindOfs[ARTL_ARTV3_characterTerminal_1458] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_characterTerminal_1458] = true;
    arteoR_pL[ARTL_ARTV3_characterTerminal_1458] = true;
    artPopD[ARTL_ARTV3_characterTerminal_1458] = true;
  }

  public void artTableInitialiser_ARTV3_choiceElement() {
    artLabelInternalStrings[ARTL_ARTV3_choiceElement] = "ARTV3.choiceElement";
    artLabelStrings[ARTL_ARTV3_choiceElement] = "ARTV3.choiceElement";
    artKindOfs[ARTL_ARTV3_choiceElement] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_200] = "ARTV3.choiceElement ::= . ARTV3.nonterminal ";
    artLabelStrings[ARTL_ARTV3_choiceElement_200] = "";
    artlhsL[ARTL_ARTV3_choiceElement_200] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_choiceElement_200] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_202] = "ARTV3.choiceElement ::= ARTV3.nonterminal .";
    artLabelStrings[ARTL_ARTV3_choiceElement_202] = "";
    artlhsL[ARTL_ARTV3_choiceElement_202] = ARTL_ARTV3_choiceElement;
    artSlotInstanceOfs[ARTL_ARTV3_choiceElement_202] = ARTL_ARTV3_nonterminal;
    artKindOfs[ARTL_ARTV3_choiceElement_202] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_choiceElement_202] = true;
    arteoR_pL[ARTL_ARTV3_choiceElement_202] = true;
    artPopD[ARTL_ARTV3_choiceElement_202] = true;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_206] = "ARTV3.choiceElement ::= . ARTV3.caseSensitiveTerminal ";
    artLabelStrings[ARTL_ARTV3_choiceElement_206] = "";
    artlhsL[ARTL_ARTV3_choiceElement_206] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_choiceElement_206] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_208] = "ARTV3.choiceElement ::= ARTV3.caseSensitiveTerminal .";
    artLabelStrings[ARTL_ARTV3_choiceElement_208] = "";
    artlhsL[ARTL_ARTV3_choiceElement_208] = ARTL_ARTV3_choiceElement;
    artSlotInstanceOfs[ARTL_ARTV3_choiceElement_208] = ARTL_ARTV3_caseSensitiveTerminal;
    artKindOfs[ARTL_ARTV3_choiceElement_208] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_choiceElement_208] = true;
    arteoR_pL[ARTL_ARTV3_choiceElement_208] = true;
    artPopD[ARTL_ARTV3_choiceElement_208] = true;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_212] = "ARTV3.choiceElement ::= . ARTV3.caseInsensitiveTerminal ";
    artLabelStrings[ARTL_ARTV3_choiceElement_212] = "";
    artlhsL[ARTL_ARTV3_choiceElement_212] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_choiceElement_212] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_214] = "ARTV3.choiceElement ::= ARTV3.caseInsensitiveTerminal .";
    artLabelStrings[ARTL_ARTV3_choiceElement_214] = "";
    artlhsL[ARTL_ARTV3_choiceElement_214] = ARTL_ARTV3_choiceElement;
    artSlotInstanceOfs[ARTL_ARTV3_choiceElement_214] = ARTL_ARTV3_caseInsensitiveTerminal;
    artKindOfs[ARTL_ARTV3_choiceElement_214] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_choiceElement_214] = true;
    arteoR_pL[ARTL_ARTV3_choiceElement_214] = true;
    artPopD[ARTL_ARTV3_choiceElement_214] = true;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_218] = "ARTV3.choiceElement ::= . ARTV3.characterTerminal ";
    artLabelStrings[ARTL_ARTV3_choiceElement_218] = "";
    artlhsL[ARTL_ARTV3_choiceElement_218] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_choiceElement_218] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_220] = "ARTV3.choiceElement ::= ARTV3.characterTerminal .";
    artLabelStrings[ARTL_ARTV3_choiceElement_220] = "";
    artlhsL[ARTL_ARTV3_choiceElement_220] = ARTL_ARTV3_choiceElement;
    artSlotInstanceOfs[ARTL_ARTV3_choiceElement_220] = ARTL_ARTV3_characterTerminal;
    artKindOfs[ARTL_ARTV3_choiceElement_220] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_choiceElement_220] = true;
    arteoR_pL[ARTL_ARTV3_choiceElement_220] = true;
    artPopD[ARTL_ARTV3_choiceElement_220] = true;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_224] = "ARTV3.choiceElement ::= . ARTV3.characterSetTerminal ";
    artLabelStrings[ARTL_ARTV3_choiceElement_224] = "";
    artlhsL[ARTL_ARTV3_choiceElement_224] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_choiceElement_224] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_226] = "ARTV3.choiceElement ::= ARTV3.characterSetTerminal .";
    artLabelStrings[ARTL_ARTV3_choiceElement_226] = "";
    artlhsL[ARTL_ARTV3_choiceElement_226] = ARTL_ARTV3_choiceElement;
    artSlotInstanceOfs[ARTL_ARTV3_choiceElement_226] = ARTL_ARTV3_characterSetTerminal;
    artKindOfs[ARTL_ARTV3_choiceElement_226] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_choiceElement_226] = true;
    arteoR_pL[ARTL_ARTV3_choiceElement_226] = true;
    artPopD[ARTL_ARTV3_choiceElement_226] = true;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_230] = "ARTV3.choiceElement ::= . ARTV3.builtinTerminal ";
    artLabelStrings[ARTL_ARTV3_choiceElement_230] = "";
    artlhsL[ARTL_ARTV3_choiceElement_230] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_choiceElement_230] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_232] = "ARTV3.choiceElement ::= ARTV3.builtinTerminal .";
    artLabelStrings[ARTL_ARTV3_choiceElement_232] = "";
    artlhsL[ARTL_ARTV3_choiceElement_232] = ARTL_ARTV3_choiceElement;
    artSlotInstanceOfs[ARTL_ARTV3_choiceElement_232] = ARTL_ARTV3_builtinTerminal;
    artKindOfs[ARTL_ARTV3_choiceElement_232] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_choiceElement_232] = true;
    arteoR_pL[ARTL_ARTV3_choiceElement_232] = true;
    artPopD[ARTL_ARTV3_choiceElement_232] = true;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_236] = "ARTV3.choiceElement ::= . \"''\" ";
    artLabelStrings[ARTL_ARTV3_choiceElement_236] = "";
    artlhsL[ARTL_ARTV3_choiceElement_236] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_choiceElement_236] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_choiceElement_236] = true;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_237] = "ARTV3.choiceElement ::= \"''\" ";
    artLabelStrings[ARTL_ARTV3_choiceElement_237] = "";
    artlhsL[ARTL_ARTV3_choiceElement_237] = ARTL_ARTV3_choiceElement;
    artPopD[ARTL_ARTV3_choiceElement_237] = true;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_238] = "ARTV3.choiceElement ::= \"''\" .";
    artLabelStrings[ARTL_ARTV3_choiceElement_238] = "";
    artlhsL[ARTL_ARTV3_choiceElement_238] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_choiceElement_238] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_choiceElement_238] = true;
    arteoR_pL[ARTL_ARTV3_choiceElement_238] = true;
    artPopD[ARTL_ARTV3_choiceElement_238] = true;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_242] = "ARTV3.choiceElement ::= . '.' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_choiceElement_242] = "";
    artlhsL[ARTL_ARTV3_choiceElement_242] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_choiceElement_242] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_243] = "ARTV3.choiceElement ::= '.' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_choiceElement_243] = "";
    artlhsL[ARTL_ARTV3_choiceElement_243] = ARTL_ARTV3_choiceElement;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_244] = "ARTV3.choiceElement ::= '.' . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_choiceElement_244] = "";
    artlhsL[ARTL_ARTV3_choiceElement_244] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_choiceElement_244] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_choiceElement_244] = true;
    artLabelInternalStrings[ARTL_ARTV3_choiceElement_246] = "ARTV3.choiceElement ::= '.' ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_choiceElement_246] = "";
    artlhsL[ARTL_ARTV3_choiceElement_246] = ARTL_ARTV3_choiceElement;
    artSlotInstanceOfs[ARTL_ARTV3_choiceElement_246] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_choiceElement_246] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_choiceElement_246] = true;
    arteoR_pL[ARTL_ARTV3_choiceElement_246] = true;
    artPopD[ARTL_ARTV3_choiceElement_246] = true;
  }

  public void artTableInitialiser_ARTV3_chooser() {
    artLabelInternalStrings[ARTL_ARTV3_chooser] = "ARTV3.chooser";
    artLabelStrings[ARTL_ARTV3_chooser] = "ARTV3.chooser";
    artKindOfs[ARTL_ARTV3_chooser] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_chooser_152] = "ARTV3.chooser ::= . ARTV3.choiceElement '>' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_152] = "";
    artlhsL[ARTL_ARTV3_chooser_152] = ARTL_ARTV3_chooser;
    artKindOfs[ARTL_ARTV3_chooser_152] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_chooser_154] = "ARTV3.chooser ::= ARTV3.choiceElement . '>' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_154] = "";
    artlhsL[ARTL_ARTV3_chooser_154] = ARTL_ARTV3_chooser;
    artSlotInstanceOfs[ARTL_ARTV3_chooser_154] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_chooser_154] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_chooser_154] = true;
    artLabelInternalStrings[ARTL_ARTV3_chooser_155] = "ARTV3.chooser ::= ARTV3.choiceElement '>' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_155] = "";
    artlhsL[ARTL_ARTV3_chooser_155] = ARTL_ARTV3_chooser;
    artLabelInternalStrings[ARTL_ARTV3_chooser_156] = "ARTV3.chooser ::= ARTV3.choiceElement '>' . ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_156] = "";
    artlhsL[ARTL_ARTV3_chooser_156] = ARTL_ARTV3_chooser;
    artKindOfs[ARTL_ARTV3_chooser_156] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_chooser_158] = "ARTV3.chooser ::= ARTV3.choiceElement '>' ARTV3.choiceElement .";
    artLabelStrings[ARTL_ARTV3_chooser_158] = "";
    artlhsL[ARTL_ARTV3_chooser_158] = ARTL_ARTV3_chooser;
    artSlotInstanceOfs[ARTL_ARTV3_chooser_158] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_chooser_158] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_chooser_158] = true;
    arteoR_pL[ARTL_ARTV3_chooser_158] = true;
    artPopD[ARTL_ARTV3_chooser_158] = true;
    artLabelInternalStrings[ARTL_ARTV3_chooser_162] = "ARTV3.chooser ::= . ARTV3.choiceElement '<' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_162] = "";
    artlhsL[ARTL_ARTV3_chooser_162] = ARTL_ARTV3_chooser;
    artKindOfs[ARTL_ARTV3_chooser_162] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_chooser_164] = "ARTV3.chooser ::= ARTV3.choiceElement . '<' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_164] = "";
    artlhsL[ARTL_ARTV3_chooser_164] = ARTL_ARTV3_chooser;
    artSlotInstanceOfs[ARTL_ARTV3_chooser_164] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_chooser_164] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_chooser_164] = true;
    artLabelInternalStrings[ARTL_ARTV3_chooser_165] = "ARTV3.chooser ::= ARTV3.choiceElement '<' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_165] = "";
    artlhsL[ARTL_ARTV3_chooser_165] = ARTL_ARTV3_chooser;
    artLabelInternalStrings[ARTL_ARTV3_chooser_166] = "ARTV3.chooser ::= ARTV3.choiceElement '<' . ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_166] = "";
    artlhsL[ARTL_ARTV3_chooser_166] = ARTL_ARTV3_chooser;
    artKindOfs[ARTL_ARTV3_chooser_166] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_chooser_168] = "ARTV3.chooser ::= ARTV3.choiceElement '<' ARTV3.choiceElement .";
    artLabelStrings[ARTL_ARTV3_chooser_168] = "";
    artlhsL[ARTL_ARTV3_chooser_168] = ARTL_ARTV3_chooser;
    artSlotInstanceOfs[ARTL_ARTV3_chooser_168] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_chooser_168] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_chooser_168] = true;
    arteoR_pL[ARTL_ARTV3_chooser_168] = true;
    artPopD[ARTL_ARTV3_chooser_168] = true;
    artLabelInternalStrings[ARTL_ARTV3_chooser_172] = "ARTV3.chooser ::= . ARTV3.choiceElement '>>' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_172] = "";
    artlhsL[ARTL_ARTV3_chooser_172] = ARTL_ARTV3_chooser;
    artKindOfs[ARTL_ARTV3_chooser_172] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_chooser_174] = "ARTV3.chooser ::= ARTV3.choiceElement . '>>' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_174] = "";
    artlhsL[ARTL_ARTV3_chooser_174] = ARTL_ARTV3_chooser;
    artSlotInstanceOfs[ARTL_ARTV3_chooser_174] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_chooser_174] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_chooser_174] = true;
    artLabelInternalStrings[ARTL_ARTV3_chooser_175] = "ARTV3.chooser ::= ARTV3.choiceElement '>>' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_175] = "";
    artlhsL[ARTL_ARTV3_chooser_175] = ARTL_ARTV3_chooser;
    artLabelInternalStrings[ARTL_ARTV3_chooser_176] = "ARTV3.chooser ::= ARTV3.choiceElement '>>' . ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_176] = "";
    artlhsL[ARTL_ARTV3_chooser_176] = ARTL_ARTV3_chooser;
    artKindOfs[ARTL_ARTV3_chooser_176] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_chooser_178] = "ARTV3.chooser ::= ARTV3.choiceElement '>>' ARTV3.choiceElement .";
    artLabelStrings[ARTL_ARTV3_chooser_178] = "";
    artlhsL[ARTL_ARTV3_chooser_178] = ARTL_ARTV3_chooser;
    artSlotInstanceOfs[ARTL_ARTV3_chooser_178] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_chooser_178] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_chooser_178] = true;
    arteoR_pL[ARTL_ARTV3_chooser_178] = true;
    artPopD[ARTL_ARTV3_chooser_178] = true;
    artLabelInternalStrings[ARTL_ARTV3_chooser_182] = "ARTV3.chooser ::= . ARTV3.choiceElement '<<' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_182] = "";
    artlhsL[ARTL_ARTV3_chooser_182] = ARTL_ARTV3_chooser;
    artKindOfs[ARTL_ARTV3_chooser_182] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_chooser_184] = "ARTV3.chooser ::= ARTV3.choiceElement . '<<' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_184] = "";
    artlhsL[ARTL_ARTV3_chooser_184] = ARTL_ARTV3_chooser;
    artSlotInstanceOfs[ARTL_ARTV3_chooser_184] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_chooser_184] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_chooser_184] = true;
    artLabelInternalStrings[ARTL_ARTV3_chooser_185] = "ARTV3.chooser ::= ARTV3.choiceElement '<<' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_185] = "";
    artlhsL[ARTL_ARTV3_chooser_185] = ARTL_ARTV3_chooser;
    artLabelInternalStrings[ARTL_ARTV3_chooser_186] = "ARTV3.chooser ::= ARTV3.choiceElement '<<' . ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_186] = "";
    artlhsL[ARTL_ARTV3_chooser_186] = ARTL_ARTV3_chooser;
    artKindOfs[ARTL_ARTV3_chooser_186] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_chooser_188] = "ARTV3.chooser ::= ARTV3.choiceElement '<<' ARTV3.choiceElement .";
    artLabelStrings[ARTL_ARTV3_chooser_188] = "";
    artlhsL[ARTL_ARTV3_chooser_188] = ARTL_ARTV3_chooser;
    artSlotInstanceOfs[ARTL_ARTV3_chooser_188] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_chooser_188] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_chooser_188] = true;
    arteoR_pL[ARTL_ARTV3_chooser_188] = true;
    artPopD[ARTL_ARTV3_chooser_188] = true;
    artLabelInternalStrings[ARTL_ARTV3_chooser_192] = "ARTV3.chooser ::= . 'longest' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_192] = "";
    artlhsL[ARTL_ARTV3_chooser_192] = ARTL_ARTV3_chooser;
    artKindOfs[ARTL_ARTV3_chooser_192] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_chooser_193] = "ARTV3.chooser ::= 'longest' ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_193] = "";
    artlhsL[ARTL_ARTV3_chooser_193] = ARTL_ARTV3_chooser;
    artLabelInternalStrings[ARTL_ARTV3_chooser_194] = "ARTV3.chooser ::= 'longest' . ARTV3.choiceElement ";
    artLabelStrings[ARTL_ARTV3_chooser_194] = "";
    artlhsL[ARTL_ARTV3_chooser_194] = ARTL_ARTV3_chooser;
    artKindOfs[ARTL_ARTV3_chooser_194] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_chooser_194] = true;
    artLabelInternalStrings[ARTL_ARTV3_chooser_196] = "ARTV3.chooser ::= 'longest' ARTV3.choiceElement .";
    artLabelStrings[ARTL_ARTV3_chooser_196] = "";
    artlhsL[ARTL_ARTV3_chooser_196] = ARTL_ARTV3_chooser;
    artSlotInstanceOfs[ARTL_ARTV3_chooser_196] = ARTL_ARTV3_choiceElement;
    artKindOfs[ARTL_ARTV3_chooser_196] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_chooser_196] = true;
    arteoR_pL[ARTL_ARTV3_chooser_196] = true;
    artPopD[ARTL_ARTV3_chooser_196] = true;
  }

  public void artTableInitialiser_ARTV3_choosers() {
    artLabelInternalStrings[ARTL_ARTV3_choosers] = "ARTV3.choosers";
    artLabelStrings[ARTL_ARTV3_choosers] = "ARTV3.choosers";
    artKindOfs[ARTL_ARTV3_choosers] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_choosers_142] = "ARTV3.choosers ::= . ARTV3.chooser ";
    artLabelStrings[ARTL_ARTV3_choosers_142] = "";
    artlhsL[ARTL_ARTV3_choosers_142] = ARTL_ARTV3_choosers;
    artKindOfs[ARTL_ARTV3_choosers_142] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_choosers_144] = "ARTV3.choosers ::= ARTV3.chooser .";
    artLabelStrings[ARTL_ARTV3_choosers_144] = "";
    artlhsL[ARTL_ARTV3_choosers_144] = ARTL_ARTV3_choosers;
    artSlotInstanceOfs[ARTL_ARTV3_choosers_144] = ARTL_ARTV3_chooser;
    artKindOfs[ARTL_ARTV3_choosers_144] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_choosers_144] = true;
    arteoR_pL[ARTL_ARTV3_choosers_144] = true;
    artPopD[ARTL_ARTV3_choosers_144] = true;
    artLabelInternalStrings[ARTL_ARTV3_choosers_146] = "ARTV3.choosers ::= . ARTV3.chooser ARTV3.choosers ";
    artLabelStrings[ARTL_ARTV3_choosers_146] = "";
    artlhsL[ARTL_ARTV3_choosers_146] = ARTL_ARTV3_choosers;
    artKindOfs[ARTL_ARTV3_choosers_146] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_choosers_148] = "ARTV3.choosers ::= ARTV3.chooser . ARTV3.choosers ";
    artLabelStrings[ARTL_ARTV3_choosers_148] = "";
    artlhsL[ARTL_ARTV3_choosers_148] = ARTL_ARTV3_choosers;
    artSlotInstanceOfs[ARTL_ARTV3_choosers_148] = ARTL_ARTV3_chooser;
    artKindOfs[ARTL_ARTV3_choosers_148] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_choosers_148] = true;
    artLabelInternalStrings[ARTL_ARTV3_choosers_150] = "ARTV3.choosers ::= ARTV3.chooser ARTV3.choosers .";
    artLabelStrings[ARTL_ARTV3_choosers_150] = "";
    artlhsL[ARTL_ARTV3_choosers_150] = ARTL_ARTV3_choosers;
    artSlotInstanceOfs[ARTL_ARTV3_choosers_150] = ARTL_ARTV3_choosers;
    artKindOfs[ARTL_ARTV3_choosers_150] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_choosers_150] = true;
    arteoR_pL[ARTL_ARTV3_choosers_150] = true;
    artPopD[ARTL_ARTV3_choosers_150] = true;
  }

  public void artTableInitialiser_ARTV3_delay() {
    artLabelInternalStrings[ARTL_ARTV3_delay] = "ARTV3.delay";
    artLabelStrings[ARTL_ARTV3_delay] = "ARTV3.delay";
    artKindOfs[ARTL_ARTV3_delay] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_delay_1406] = "ARTV3.delay ::= . '<' ";
    artLabelStrings[ARTL_ARTV3_delay_1406] = "";
    artlhsL[ARTL_ARTV3_delay_1406] = ARTL_ARTV3_delay;
    artKindOfs[ARTL_ARTV3_delay_1406] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_delay_1406] = true;
    artLabelInternalStrings[ARTL_ARTV3_delay_1407] = "ARTV3.delay ::= '<' ";
    artLabelStrings[ARTL_ARTV3_delay_1407] = "";
    artlhsL[ARTL_ARTV3_delay_1407] = ARTL_ARTV3_delay;
    artPopD[ARTL_ARTV3_delay_1407] = true;
    artLabelInternalStrings[ARTL_ARTV3_delay_1408] = "ARTV3.delay ::= '<' .";
    artLabelStrings[ARTL_ARTV3_delay_1408] = "";
    artlhsL[ARTL_ARTV3_delay_1408] = ARTL_ARTV3_delay;
    artKindOfs[ARTL_ARTV3_delay_1408] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_delay_1408] = true;
    arteoR_pL[ARTL_ARTV3_delay_1408] = true;
    artPopD[ARTL_ARTV3_delay_1408] = true;
  }

  public void artTableInitialiser_ARTV3_deleter() {
    artLabelInternalStrings[ARTL_ARTV3_deleter] = "ARTV3.deleter";
    artLabelStrings[ARTL_ARTV3_deleter] = "ARTV3.deleter";
    artKindOfs[ARTL_ARTV3_deleter] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_deleter_1112] = "ARTV3.deleter ::= . ARTV3.nonterminal ':~=' ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_deleter_1112] = "";
    artlhsL[ARTL_ARTV3_deleter_1112] = ARTL_ARTV3_deleter;
    artKindOfs[ARTL_ARTV3_deleter_1112] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_deleter_1114] = "ARTV3.deleter ::= ARTV3.nonterminal . ':~=' ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_deleter_1114] = "";
    artlhsL[ARTL_ARTV3_deleter_1114] = ARTL_ARTV3_deleter;
    artSlotInstanceOfs[ARTL_ARTV3_deleter_1114] = ARTL_ARTV3_nonterminal;
    artKindOfs[ARTL_ARTV3_deleter_1114] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_deleter_1114] = true;
    artLabelInternalStrings[ARTL_ARTV3_deleter_1115] = "ARTV3.deleter ::= ARTV3.nonterminal ':~=' ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_deleter_1115] = "";
    artlhsL[ARTL_ARTV3_deleter_1115] = ARTL_ARTV3_deleter;
    artLabelInternalStrings[ARTL_ARTV3_deleter_1116] = "ARTV3.deleter ::= ARTV3.nonterminal ':~=' . ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_deleter_1116] = "";
    artlhsL[ARTL_ARTV3_deleter_1116] = ARTL_ARTV3_deleter;
    artKindOfs[ARTL_ARTV3_deleter_1116] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_deleter_1120] = "ARTV3.deleter ::= ARTV3.nonterminal ':~=' ARTV3.rhs .";
    artLabelStrings[ARTL_ARTV3_deleter_1120] = "";
    artlhsL[ARTL_ARTV3_deleter_1120] = ARTL_ARTV3_deleter;
    artSlotInstanceOfs[ARTL_ARTV3_deleter_1120] = ARTL_ARTV3_rhs;
    artKindOfs[ARTL_ARTV3_deleter_1120] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_deleter_1120] = true;
    arteoR_pL[ARTL_ARTV3_deleter_1120] = true;
    artPopD[ARTL_ARTV3_deleter_1120] = true;
  }

  public void artTableInitialiser_ARTV3_diff() {
    artLabelInternalStrings[ARTL_ARTV3_diff] = "ARTV3.diff";
    artLabelStrings[ARTL_ARTV3_diff] = "ARTV3.diff";
    artKindOfs[ARTL_ARTV3_diff] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_diff_1262] = "ARTV3.diff ::= . ARTV3.union ";
    artLabelStrings[ARTL_ARTV3_diff_1262] = "";
    artlhsL[ARTL_ARTV3_diff_1262] = ARTL_ARTV3_diff;
    artKindOfs[ARTL_ARTV3_diff_1262] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_diff_1264] = "ARTV3.diff ::= ARTV3.union .";
    artLabelStrings[ARTL_ARTV3_diff_1264] = "";
    artlhsL[ARTL_ARTV3_diff_1264] = ARTL_ARTV3_diff;
    artSlotInstanceOfs[ARTL_ARTV3_diff_1264] = ARTL_ARTV3_union;
    artKindOfs[ARTL_ARTV3_diff_1264] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_diff_1264] = true;
    arteoR_pL[ARTL_ARTV3_diff_1264] = true;
    artPopD[ARTL_ARTV3_diff_1264] = true;
    artLabelInternalStrings[ARTL_ARTV3_diff_1266] = "ARTV3.diff ::= . ARTV3.diff '\\\\' ARTV3.union ";
    artLabelStrings[ARTL_ARTV3_diff_1266] = "";
    artlhsL[ARTL_ARTV3_diff_1266] = ARTL_ARTV3_diff;
    artKindOfs[ARTL_ARTV3_diff_1266] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_diff_1268] = "ARTV3.diff ::= ARTV3.diff . '\\\\' ARTV3.union ";
    artLabelStrings[ARTL_ARTV3_diff_1268] = "";
    artlhsL[ARTL_ARTV3_diff_1268] = ARTL_ARTV3_diff;
    artSlotInstanceOfs[ARTL_ARTV3_diff_1268] = ARTL_ARTV3_diff;
    artKindOfs[ARTL_ARTV3_diff_1268] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_diff_1268] = true;
    artLabelInternalStrings[ARTL_ARTV3_diff_1269] = "ARTV3.diff ::= ARTV3.diff '\\\\' ARTV3.union ";
    artLabelStrings[ARTL_ARTV3_diff_1269] = "";
    artlhsL[ARTL_ARTV3_diff_1269] = ARTL_ARTV3_diff;
    artLabelInternalStrings[ARTL_ARTV3_diff_1270] = "ARTV3.diff ::= ARTV3.diff '\\\\' . ARTV3.union ";
    artLabelStrings[ARTL_ARTV3_diff_1270] = "";
    artlhsL[ARTL_ARTV3_diff_1270] = ARTL_ARTV3_diff;
    artKindOfs[ARTL_ARTV3_diff_1270] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_diff_1272] = "ARTV3.diff ::= ARTV3.diff '\\\\' ARTV3.union .";
    artLabelStrings[ARTL_ARTV3_diff_1272] = "";
    artlhsL[ARTL_ARTV3_diff_1272] = ARTL_ARTV3_diff;
    artSlotInstanceOfs[ARTL_ARTV3_diff_1272] = ARTL_ARTV3_union;
    artKindOfs[ARTL_ARTV3_diff_1272] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_diff_1272] = true;
    arteoR_pL[ARTL_ARTV3_diff_1272] = true;
    artPopD[ARTL_ARTV3_diff_1272] = true;
  }

  public void artTableInitialiser_ARTV3_directive() {
    artLabelInternalStrings[ARTL_ARTV3_directive] = "ARTV3.directive";
    artLabelStrings[ARTL_ARTV3_directive] = "ARTV3.directive";
    artKindOfs[ARTL_ARTV3_directive] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_directive_56] = "ARTV3.directive ::= . 'import' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_directive_56] = "";
    artlhsL[ARTL_ARTV3_directive_56] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_56] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_directive_57] = "ARTV3.directive ::= 'import' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_directive_57] = "";
    artlhsL[ARTL_ARTV3_directive_57] = ARTL_ARTV3_directive;
    artLabelInternalStrings[ARTL_ARTV3_directive_58] = "ARTV3.directive ::= 'import' . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_directive_58] = "";
    artlhsL[ARTL_ARTV3_directive_58] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_58] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_directive_58] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_60] = "ARTV3.directive ::= 'import' ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_directive_60] = "";
    artlhsL[ARTL_ARTV3_directive_60] = ARTL_ARTV3_directive;
    artSlotInstanceOfs[ARTL_ARTV3_directive_60] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_directive_60] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_directive_60] = true;
    arteoR_pL[ARTL_ARTV3_directive_60] = true;
    artPopD[ARTL_ARTV3_directive_60] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_62] = "ARTV3.directive ::= . 'start' ARTV3.nonterminal ";
    artLabelStrings[ARTL_ARTV3_directive_62] = "";
    artlhsL[ARTL_ARTV3_directive_62] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_62] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_directive_63] = "ARTV3.directive ::= 'start' ARTV3.nonterminal ";
    artLabelStrings[ARTL_ARTV3_directive_63] = "";
    artlhsL[ARTL_ARTV3_directive_63] = ARTL_ARTV3_directive;
    artLabelInternalStrings[ARTL_ARTV3_directive_64] = "ARTV3.directive ::= 'start' . ARTV3.nonterminal ";
    artLabelStrings[ARTL_ARTV3_directive_64] = "";
    artlhsL[ARTL_ARTV3_directive_64] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_64] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_directive_64] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_66] = "ARTV3.directive ::= 'start' ARTV3.nonterminal .";
    artLabelStrings[ARTL_ARTV3_directive_66] = "";
    artlhsL[ARTL_ARTV3_directive_66] = ARTL_ARTV3_directive;
    artSlotInstanceOfs[ARTL_ARTV3_directive_66] = ARTL_ARTV3_nonterminal;
    artKindOfs[ARTL_ARTV3_directive_66] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_directive_66] = true;
    arteoR_pL[ARTL_ARTV3_directive_66] = true;
    artPopD[ARTL_ARTV3_directive_66] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_70] = "ARTV3.directive ::= . 'whitespace' ARTV3.terminalisers ";
    artLabelStrings[ARTL_ARTV3_directive_70] = "";
    artlhsL[ARTL_ARTV3_directive_70] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_70] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_directive_71] = "ARTV3.directive ::= 'whitespace' ARTV3.terminalisers ";
    artLabelStrings[ARTL_ARTV3_directive_71] = "";
    artlhsL[ARTL_ARTV3_directive_71] = ARTL_ARTV3_directive;
    artLabelInternalStrings[ARTL_ARTV3_directive_72] = "ARTV3.directive ::= 'whitespace' . ARTV3.terminalisers ";
    artLabelStrings[ARTL_ARTV3_directive_72] = "";
    artlhsL[ARTL_ARTV3_directive_72] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_72] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_directive_72] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_76] = "ARTV3.directive ::= 'whitespace' ARTV3.terminalisers .";
    artLabelStrings[ARTL_ARTV3_directive_76] = "";
    artlhsL[ARTL_ARTV3_directive_76] = ARTL_ARTV3_directive;
    artSlotInstanceOfs[ARTL_ARTV3_directive_76] = ARTL_ARTV3_terminalisers;
    artKindOfs[ARTL_ARTV3_directive_76] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_directive_76] = true;
    arteoR_pL[ARTL_ARTV3_directive_76] = true;
    artPopD[ARTL_ARTV3_directive_76] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_78] = "ARTV3.directive ::= . 'terminal' ARTV3.terminalisers ";
    artLabelStrings[ARTL_ARTV3_directive_78] = "";
    artlhsL[ARTL_ARTV3_directive_78] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_78] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_directive_79] = "ARTV3.directive ::= 'terminal' ARTV3.terminalisers ";
    artLabelStrings[ARTL_ARTV3_directive_79] = "";
    artlhsL[ARTL_ARTV3_directive_79] = ARTL_ARTV3_directive;
    artLabelInternalStrings[ARTL_ARTV3_directive_80] = "ARTV3.directive ::= 'terminal' . ARTV3.terminalisers ";
    artLabelStrings[ARTL_ARTV3_directive_80] = "";
    artlhsL[ARTL_ARTV3_directive_80] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_80] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_directive_80] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_84] = "ARTV3.directive ::= 'terminal' ARTV3.terminalisers .";
    artLabelStrings[ARTL_ARTV3_directive_84] = "";
    artlhsL[ARTL_ARTV3_directive_84] = ARTL_ARTV3_directive;
    artSlotInstanceOfs[ARTL_ARTV3_directive_84] = ARTL_ARTV3_terminalisers;
    artKindOfs[ARTL_ARTV3_directive_84] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_directive_84] = true;
    arteoR_pL[ARTL_ARTV3_directive_84] = true;
    artPopD[ARTL_ARTV3_directive_84] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_86] = "ARTV3.directive ::= . 'choose' ARTV3.choosers ";
    artLabelStrings[ARTL_ARTV3_directive_86] = "";
    artlhsL[ARTL_ARTV3_directive_86] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_86] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_directive_87] = "ARTV3.directive ::= 'choose' ARTV3.choosers ";
    artLabelStrings[ARTL_ARTV3_directive_87] = "";
    artlhsL[ARTL_ARTV3_directive_87] = ARTL_ARTV3_directive;
    artLabelInternalStrings[ARTL_ARTV3_directive_88] = "ARTV3.directive ::= 'choose' . ARTV3.choosers ";
    artLabelStrings[ARTL_ARTV3_directive_88] = "";
    artlhsL[ARTL_ARTV3_directive_88] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_88] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_directive_88] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_90] = "ARTV3.directive ::= 'choose' ARTV3.choosers .";
    artLabelStrings[ARTL_ARTV3_directive_90] = "";
    artlhsL[ARTL_ARTV3_directive_90] = ARTL_ARTV3_directive;
    artSlotInstanceOfs[ARTL_ARTV3_directive_90] = ARTL_ARTV3_choosers;
    artKindOfs[ARTL_ARTV3_directive_90] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_directive_90] = true;
    arteoR_pL[ARTL_ARTV3_directive_90] = true;
    artPopD[ARTL_ARTV3_directive_90] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_92] = "ARTV3.directive ::= . 'option' ARTV3.options ";
    artLabelStrings[ARTL_ARTV3_directive_92] = "";
    artlhsL[ARTL_ARTV3_directive_92] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_92] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_directive_93] = "ARTV3.directive ::= 'option' ARTV3.options ";
    artLabelStrings[ARTL_ARTV3_directive_93] = "";
    artlhsL[ARTL_ARTV3_directive_93] = ARTL_ARTV3_directive;
    artLabelInternalStrings[ARTL_ARTV3_directive_94] = "ARTV3.directive ::= 'option' . ARTV3.options ";
    artLabelStrings[ARTL_ARTV3_directive_94] = "";
    artlhsL[ARTL_ARTV3_directive_94] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_94] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_directive_94] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_96] = "ARTV3.directive ::= 'option' ARTV3.options .";
    artLabelStrings[ARTL_ARTV3_directive_96] = "";
    artlhsL[ARTL_ARTV3_directive_96] = ARTL_ARTV3_directive;
    artSlotInstanceOfs[ARTL_ARTV3_directive_96] = ARTL_ARTV3_options;
    artKindOfs[ARTL_ARTV3_directive_96] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_directive_96] = true;
    arteoR_pL[ARTL_ARTV3_directive_96] = true;
    artPopD[ARTL_ARTV3_directive_96] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_98] = "ARTV3.directive ::= . 'prelude' ARTV3.STRING_BRACE_NEST ";
    artLabelStrings[ARTL_ARTV3_directive_98] = "";
    artlhsL[ARTL_ARTV3_directive_98] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_98] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_directive_99] = "ARTV3.directive ::= 'prelude' ARTV3.STRING_BRACE_NEST ";
    artLabelStrings[ARTL_ARTV3_directive_99] = "";
    artlhsL[ARTL_ARTV3_directive_99] = ARTL_ARTV3_directive;
    artLabelInternalStrings[ARTL_ARTV3_directive_100] = "ARTV3.directive ::= 'prelude' . ARTV3.STRING_BRACE_NEST ";
    artLabelStrings[ARTL_ARTV3_directive_100] = "";
    artlhsL[ARTL_ARTV3_directive_100] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_100] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_directive_100] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_102] = "ARTV3.directive ::= 'prelude' ARTV3.STRING_BRACE_NEST .";
    artLabelStrings[ARTL_ARTV3_directive_102] = "";
    artlhsL[ARTL_ARTV3_directive_102] = ARTL_ARTV3_directive;
    artSlotInstanceOfs[ARTL_ARTV3_directive_102] = ARTL_ARTV3_STRING_BRACE_NEST;
    artKindOfs[ARTL_ARTV3_directive_102] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_directive_102] = true;
    arteoR_pL[ARTL_ARTV3_directive_102] = true;
    artPopD[ARTL_ARTV3_directive_102] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_106] = "ARTV3.directive ::= . 'support' ARTV3.STRING_BRACE_NEST ";
    artLabelStrings[ARTL_ARTV3_directive_106] = "";
    artlhsL[ARTL_ARTV3_directive_106] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_106] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_directive_107] = "ARTV3.directive ::= 'support' ARTV3.STRING_BRACE_NEST ";
    artLabelStrings[ARTL_ARTV3_directive_107] = "";
    artlhsL[ARTL_ARTV3_directive_107] = ARTL_ARTV3_directive;
    artLabelInternalStrings[ARTL_ARTV3_directive_108] = "ARTV3.directive ::= 'support' . ARTV3.STRING_BRACE_NEST ";
    artLabelStrings[ARTL_ARTV3_directive_108] = "";
    artlhsL[ARTL_ARTV3_directive_108] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_directive_108] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_directive_108] = true;
    artLabelInternalStrings[ARTL_ARTV3_directive_110] = "ARTV3.directive ::= 'support' ARTV3.STRING_BRACE_NEST .";
    artLabelStrings[ARTL_ARTV3_directive_110] = "";
    artlhsL[ARTL_ARTV3_directive_110] = ARTL_ARTV3_directive;
    artSlotInstanceOfs[ARTL_ARTV3_directive_110] = ARTL_ARTV3_STRING_BRACE_NEST;
    artKindOfs[ARTL_ARTV3_directive_110] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_directive_110] = true;
    arteoR_pL[ARTL_ARTV3_directive_110] = true;
    artPopD[ARTL_ARTV3_directive_110] = true;
  }

  public void artTableInitialiser_ARTV3_element() {
    artLabelInternalStrings[ARTL_ARTV3_element] = "ARTV3.element";
    artLabelStrings[ARTL_ARTV3_element] = "ARTV3.element";
    artKindOfs[ARTL_ARTV3_element] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_element_1296] = "ARTV3.element ::= . ARTV3.epsilon ";
    artLabelStrings[ARTL_ARTV3_element_1296] = "";
    artlhsL[ARTL_ARTV3_element_1296] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1296] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1298] = "ARTV3.element ::= ARTV3.epsilon .";
    artLabelStrings[ARTL_ARTV3_element_1298] = "";
    artlhsL[ARTL_ARTV3_element_1298] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1298] = ARTL_ARTV3_epsilon;
    artKindOfs[ARTL_ARTV3_element_1298] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1298] = true;
    arteoR_pL[ARTL_ARTV3_element_1298] = true;
    artPopD[ARTL_ARTV3_element_1298] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1300] = "ARTV3.element ::= . ARTV3.nonterminal ";
    artLabelStrings[ARTL_ARTV3_element_1300] = "";
    artlhsL[ARTL_ARTV3_element_1300] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1300] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1302] = "ARTV3.element ::= ARTV3.nonterminal .";
    artLabelStrings[ARTL_ARTV3_element_1302] = "";
    artlhsL[ARTL_ARTV3_element_1302] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1302] = ARTL_ARTV3_nonterminal;
    artKindOfs[ARTL_ARTV3_element_1302] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1302] = true;
    arteoR_pL[ARTL_ARTV3_element_1302] = true;
    artPopD[ARTL_ARTV3_element_1302] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1304] = "ARTV3.element ::= . ARTV3.caseSensitiveTerminal ";
    artLabelStrings[ARTL_ARTV3_element_1304] = "";
    artlhsL[ARTL_ARTV3_element_1304] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1304] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1306] = "ARTV3.element ::= ARTV3.caseSensitiveTerminal .";
    artLabelStrings[ARTL_ARTV3_element_1306] = "";
    artlhsL[ARTL_ARTV3_element_1306] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1306] = ARTL_ARTV3_caseSensitiveTerminal;
    artKindOfs[ARTL_ARTV3_element_1306] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1306] = true;
    arteoR_pL[ARTL_ARTV3_element_1306] = true;
    artPopD[ARTL_ARTV3_element_1306] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1308] = "ARTV3.element ::= . ARTV3.caseInsensitiveTerminal ";
    artLabelStrings[ARTL_ARTV3_element_1308] = "";
    artlhsL[ARTL_ARTV3_element_1308] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1308] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1310] = "ARTV3.element ::= ARTV3.caseInsensitiveTerminal .";
    artLabelStrings[ARTL_ARTV3_element_1310] = "";
    artlhsL[ARTL_ARTV3_element_1310] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1310] = ARTL_ARTV3_caseInsensitiveTerminal;
    artKindOfs[ARTL_ARTV3_element_1310] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1310] = true;
    arteoR_pL[ARTL_ARTV3_element_1310] = true;
    artPopD[ARTL_ARTV3_element_1310] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1312] = "ARTV3.element ::= . ARTV3.characterTerminal ";
    artLabelStrings[ARTL_ARTV3_element_1312] = "";
    artlhsL[ARTL_ARTV3_element_1312] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1312] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1314] = "ARTV3.element ::= ARTV3.characterTerminal .";
    artLabelStrings[ARTL_ARTV3_element_1314] = "";
    artlhsL[ARTL_ARTV3_element_1314] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1314] = ARTL_ARTV3_characterTerminal;
    artKindOfs[ARTL_ARTV3_element_1314] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1314] = true;
    arteoR_pL[ARTL_ARTV3_element_1314] = true;
    artPopD[ARTL_ARTV3_element_1314] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1316] = "ARTV3.element ::= . ARTV3.characterSetTerminal ";
    artLabelStrings[ARTL_ARTV3_element_1316] = "";
    artlhsL[ARTL_ARTV3_element_1316] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1316] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1318] = "ARTV3.element ::= ARTV3.characterSetTerminal .";
    artLabelStrings[ARTL_ARTV3_element_1318] = "";
    artlhsL[ARTL_ARTV3_element_1318] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1318] = ARTL_ARTV3_characterSetTerminal;
    artKindOfs[ARTL_ARTV3_element_1318] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1318] = true;
    arteoR_pL[ARTL_ARTV3_element_1318] = true;
    artPopD[ARTL_ARTV3_element_1318] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1320] = "ARTV3.element ::= . ARTV3.builtinTerminal ";
    artLabelStrings[ARTL_ARTV3_element_1320] = "";
    artlhsL[ARTL_ARTV3_element_1320] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1320] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1322] = "ARTV3.element ::= ARTV3.builtinTerminal .";
    artLabelStrings[ARTL_ARTV3_element_1322] = "";
    artlhsL[ARTL_ARTV3_element_1322] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1322] = ARTL_ARTV3_builtinTerminal;
    artKindOfs[ARTL_ARTV3_element_1322] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1322] = true;
    arteoR_pL[ARTL_ARTV3_element_1322] = true;
    artPopD[ARTL_ARTV3_element_1322] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1324] = "ARTV3.element ::= . ARTV3.epsilon ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1324] = "";
    artlhsL[ARTL_ARTV3_element_1324] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1324] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1326] = "ARTV3.element ::= ARTV3.epsilon . ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1326] = "";
    artlhsL[ARTL_ARTV3_element_1326] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1326] = ARTL_ARTV3_epsilon;
    artKindOfs[ARTL_ARTV3_element_1326] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_element_1326] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1328] = "ARTV3.element ::= ARTV3.epsilon ARTV3.annotations .";
    artLabelStrings[ARTL_ARTV3_element_1328] = "";
    artlhsL[ARTL_ARTV3_element_1328] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1328] = ARTL_ARTV3_annotations;
    artKindOfs[ARTL_ARTV3_element_1328] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1328] = true;
    arteoR_pL[ARTL_ARTV3_element_1328] = true;
    artPopD[ARTL_ARTV3_element_1328] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1330] = "ARTV3.element ::= . ARTV3.nonterminal ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1330] = "";
    artlhsL[ARTL_ARTV3_element_1330] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1330] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1332] = "ARTV3.element ::= ARTV3.nonterminal . ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1332] = "";
    artlhsL[ARTL_ARTV3_element_1332] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1332] = ARTL_ARTV3_nonterminal;
    artKindOfs[ARTL_ARTV3_element_1332] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_element_1332] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1334] = "ARTV3.element ::= ARTV3.nonterminal ARTV3.annotations .";
    artLabelStrings[ARTL_ARTV3_element_1334] = "";
    artlhsL[ARTL_ARTV3_element_1334] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1334] = ARTL_ARTV3_annotations;
    artKindOfs[ARTL_ARTV3_element_1334] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1334] = true;
    arteoR_pL[ARTL_ARTV3_element_1334] = true;
    artPopD[ARTL_ARTV3_element_1334] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1336] = "ARTV3.element ::= . ARTV3.caseSensitiveTerminal ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1336] = "";
    artlhsL[ARTL_ARTV3_element_1336] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1336] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1338] = "ARTV3.element ::= ARTV3.caseSensitiveTerminal . ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1338] = "";
    artlhsL[ARTL_ARTV3_element_1338] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1338] = ARTL_ARTV3_caseSensitiveTerminal;
    artKindOfs[ARTL_ARTV3_element_1338] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_element_1338] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1340] = "ARTV3.element ::= ARTV3.caseSensitiveTerminal ARTV3.annotations .";
    artLabelStrings[ARTL_ARTV3_element_1340] = "";
    artlhsL[ARTL_ARTV3_element_1340] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1340] = ARTL_ARTV3_annotations;
    artKindOfs[ARTL_ARTV3_element_1340] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1340] = true;
    arteoR_pL[ARTL_ARTV3_element_1340] = true;
    artPopD[ARTL_ARTV3_element_1340] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1342] = "ARTV3.element ::= . ARTV3.caseInsensitiveTerminal ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1342] = "";
    artlhsL[ARTL_ARTV3_element_1342] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1342] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1344] = "ARTV3.element ::= ARTV3.caseInsensitiveTerminal . ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1344] = "";
    artlhsL[ARTL_ARTV3_element_1344] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1344] = ARTL_ARTV3_caseInsensitiveTerminal;
    artKindOfs[ARTL_ARTV3_element_1344] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_element_1344] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1346] = "ARTV3.element ::= ARTV3.caseInsensitiveTerminal ARTV3.annotations .";
    artLabelStrings[ARTL_ARTV3_element_1346] = "";
    artlhsL[ARTL_ARTV3_element_1346] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1346] = ARTL_ARTV3_annotations;
    artKindOfs[ARTL_ARTV3_element_1346] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1346] = true;
    arteoR_pL[ARTL_ARTV3_element_1346] = true;
    artPopD[ARTL_ARTV3_element_1346] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1348] = "ARTV3.element ::= . ARTV3.characterTerminal ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1348] = "";
    artlhsL[ARTL_ARTV3_element_1348] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1348] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1350] = "ARTV3.element ::= ARTV3.characterTerminal . ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1350] = "";
    artlhsL[ARTL_ARTV3_element_1350] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1350] = ARTL_ARTV3_characterTerminal;
    artKindOfs[ARTL_ARTV3_element_1350] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_element_1350] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1352] = "ARTV3.element ::= ARTV3.characterTerminal ARTV3.annotations .";
    artLabelStrings[ARTL_ARTV3_element_1352] = "";
    artlhsL[ARTL_ARTV3_element_1352] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1352] = ARTL_ARTV3_annotations;
    artKindOfs[ARTL_ARTV3_element_1352] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1352] = true;
    arteoR_pL[ARTL_ARTV3_element_1352] = true;
    artPopD[ARTL_ARTV3_element_1352] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1354] = "ARTV3.element ::= . ARTV3.characterSetTerminal ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1354] = "";
    artlhsL[ARTL_ARTV3_element_1354] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1354] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1356] = "ARTV3.element ::= ARTV3.characterSetTerminal . ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1356] = "";
    artlhsL[ARTL_ARTV3_element_1356] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1356] = ARTL_ARTV3_characterSetTerminal;
    artKindOfs[ARTL_ARTV3_element_1356] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_element_1356] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1358] = "ARTV3.element ::= ARTV3.characterSetTerminal ARTV3.annotations .";
    artLabelStrings[ARTL_ARTV3_element_1358] = "";
    artlhsL[ARTL_ARTV3_element_1358] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1358] = ARTL_ARTV3_annotations;
    artKindOfs[ARTL_ARTV3_element_1358] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1358] = true;
    arteoR_pL[ARTL_ARTV3_element_1358] = true;
    artPopD[ARTL_ARTV3_element_1358] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1360] = "ARTV3.element ::= . ARTV3.builtinTerminal ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1360] = "";
    artlhsL[ARTL_ARTV3_element_1360] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1360] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1362] = "ARTV3.element ::= ARTV3.builtinTerminal . ARTV3.annotations ";
    artLabelStrings[ARTL_ARTV3_element_1362] = "";
    artlhsL[ARTL_ARTV3_element_1362] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1362] = ARTL_ARTV3_builtinTerminal;
    artKindOfs[ARTL_ARTV3_element_1362] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_element_1362] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1364] = "ARTV3.element ::= ARTV3.builtinTerminal ARTV3.annotations .";
    artLabelStrings[ARTL_ARTV3_element_1364] = "";
    artlhsL[ARTL_ARTV3_element_1364] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1364] = ARTL_ARTV3_annotations;
    artKindOfs[ARTL_ARTV3_element_1364] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1364] = true;
    arteoR_pL[ARTL_ARTV3_element_1364] = true;
    artPopD[ARTL_ARTV3_element_1364] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1366] = "ARTV3.element ::= . '(' ARTV3.alt ')' ";
    artLabelStrings[ARTL_ARTV3_element_1366] = "";
    artlhsL[ARTL_ARTV3_element_1366] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1366] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_element_1367] = "ARTV3.element ::= '(' ARTV3.alt ')' ";
    artLabelStrings[ARTL_ARTV3_element_1367] = "";
    artlhsL[ARTL_ARTV3_element_1367] = ARTL_ARTV3_element;
    artLabelInternalStrings[ARTL_ARTV3_element_1368] = "ARTV3.element ::= '(' . ARTV3.alt ')' ";
    artLabelStrings[ARTL_ARTV3_element_1368] = "";
    artlhsL[ARTL_ARTV3_element_1368] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1368] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_element_1368] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1370] = "ARTV3.element ::= '(' ARTV3.alt . ')' ";
    artLabelStrings[ARTL_ARTV3_element_1370] = "";
    artlhsL[ARTL_ARTV3_element_1370] = ARTL_ARTV3_element;
    artSlotInstanceOfs[ARTL_ARTV3_element_1370] = ARTL_ARTV3_alt;
    artKindOfs[ARTL_ARTV3_element_1370] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_element_1370] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1371] = "ARTV3.element ::= '(' ARTV3.alt ')' ";
    artLabelStrings[ARTL_ARTV3_element_1371] = "";
    artlhsL[ARTL_ARTV3_element_1371] = ARTL_ARTV3_element;
    artPopD[ARTL_ARTV3_element_1371] = true;
    artLabelInternalStrings[ARTL_ARTV3_element_1372] = "ARTV3.element ::= '(' ARTV3.alt ')' .";
    artLabelStrings[ARTL_ARTV3_element_1372] = "";
    artlhsL[ARTL_ARTV3_element_1372] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_element_1372] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_element_1372] = true;
    arteoR_pL[ARTL_ARTV3_element_1372] = true;
    artPopD[ARTL_ARTV3_element_1372] = true;
  }

  public void artTableInitialiser_ARTV3_epsilon() {
    artLabelInternalStrings[ARTL_ARTV3_epsilon] = "ARTV3.epsilon";
    artLabelStrings[ARTL_ARTV3_epsilon] = "ARTV3.epsilon";
    artKindOfs[ARTL_ARTV3_epsilon] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_epsilon_1490] = "ARTV3.epsilon ::= . '#' ";
    artLabelStrings[ARTL_ARTV3_epsilon_1490] = "";
    artlhsL[ARTL_ARTV3_epsilon_1490] = ARTL_ARTV3_epsilon;
    artKindOfs[ARTL_ARTV3_epsilon_1490] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_epsilon_1490] = true;
    artLabelInternalStrings[ARTL_ARTV3_epsilon_1491] = "ARTV3.epsilon ::= '#' ";
    artLabelStrings[ARTL_ARTV3_epsilon_1491] = "";
    artlhsL[ARTL_ARTV3_epsilon_1491] = ARTL_ARTV3_epsilon;
    artPopD[ARTL_ARTV3_epsilon_1491] = true;
    artLabelInternalStrings[ARTL_ARTV3_epsilon_1492] = "ARTV3.epsilon ::= '#' .";
    artLabelStrings[ARTL_ARTV3_epsilon_1492] = "";
    artlhsL[ARTL_ARTV3_epsilon_1492] = ARTL_ARTV3_epsilon;
    artKindOfs[ARTL_ARTV3_epsilon_1492] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_epsilon_1492] = true;
    arteoR_pL[ARTL_ARTV3_epsilon_1492] = true;
    artPopD[ARTL_ARTV3_epsilon_1492] = true;
  }

  public void artTableInitialiser_ARTV3_fold() {
    artLabelInternalStrings[ARTL_ARTV3_fold] = "ARTV3.fold";
    artLabelStrings[ARTL_ARTV3_fold] = "ARTV3.fold";
    artKindOfs[ARTL_ARTV3_fold] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_fold_1416] = "ARTV3.fold ::= . '^_' ";
    artLabelStrings[ARTL_ARTV3_fold_1416] = "";
    artlhsL[ARTL_ARTV3_fold_1416] = ARTL_ARTV3_fold;
    artKindOfs[ARTL_ARTV3_fold_1416] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_fold_1416] = true;
    artLabelInternalStrings[ARTL_ARTV3_fold_1417] = "ARTV3.fold ::= '^_' ";
    artLabelStrings[ARTL_ARTV3_fold_1417] = "";
    artlhsL[ARTL_ARTV3_fold_1417] = ARTL_ARTV3_fold;
    artPopD[ARTL_ARTV3_fold_1417] = true;
    artLabelInternalStrings[ARTL_ARTV3_fold_1418] = "ARTV3.fold ::= '^_' .";
    artLabelStrings[ARTL_ARTV3_fold_1418] = "";
    artlhsL[ARTL_ARTV3_fold_1418] = ARTL_ARTV3_fold;
    artKindOfs[ARTL_ARTV3_fold_1418] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_fold_1418] = true;
    arteoR_pL[ARTL_ARTV3_fold_1418] = true;
    artPopD[ARTL_ARTV3_fold_1418] = true;
    artLabelInternalStrings[ARTL_ARTV3_fold_1420] = "ARTV3.fold ::= . '^' ";
    artLabelStrings[ARTL_ARTV3_fold_1420] = "";
    artlhsL[ARTL_ARTV3_fold_1420] = ARTL_ARTV3_fold;
    artKindOfs[ARTL_ARTV3_fold_1420] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_fold_1420] = true;
    artLabelInternalStrings[ARTL_ARTV3_fold_1421] = "ARTV3.fold ::= '^' ";
    artLabelStrings[ARTL_ARTV3_fold_1421] = "";
    artlhsL[ARTL_ARTV3_fold_1421] = ARTL_ARTV3_fold;
    artPopD[ARTL_ARTV3_fold_1421] = true;
    artLabelInternalStrings[ARTL_ARTV3_fold_1422] = "ARTV3.fold ::= '^' .";
    artLabelStrings[ARTL_ARTV3_fold_1422] = "";
    artlhsL[ARTL_ARTV3_fold_1422] = ARTL_ARTV3_fold;
    artKindOfs[ARTL_ARTV3_fold_1422] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_fold_1422] = true;
    arteoR_pL[ARTL_ARTV3_fold_1422] = true;
    artPopD[ARTL_ARTV3_fold_1422] = true;
    artLabelInternalStrings[ARTL_ARTV3_fold_1424] = "ARTV3.fold ::= . '^^' ";
    artLabelStrings[ARTL_ARTV3_fold_1424] = "";
    artlhsL[ARTL_ARTV3_fold_1424] = ARTL_ARTV3_fold;
    artKindOfs[ARTL_ARTV3_fold_1424] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_fold_1424] = true;
    artLabelInternalStrings[ARTL_ARTV3_fold_1425] = "ARTV3.fold ::= '^^' ";
    artLabelStrings[ARTL_ARTV3_fold_1425] = "";
    artlhsL[ARTL_ARTV3_fold_1425] = ARTL_ARTV3_fold;
    artPopD[ARTL_ARTV3_fold_1425] = true;
    artLabelInternalStrings[ARTL_ARTV3_fold_1426] = "ARTV3.fold ::= '^^' .";
    artLabelStrings[ARTL_ARTV3_fold_1426] = "";
    artlhsL[ARTL_ARTV3_fold_1426] = ARTL_ARTV3_fold;
    artKindOfs[ARTL_ARTV3_fold_1426] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_fold_1426] = true;
    arteoR_pL[ARTL_ARTV3_fold_1426] = true;
    artPopD[ARTL_ARTV3_fold_1426] = true;
    artLabelInternalStrings[ARTL_ARTV3_fold_1428] = "ARTV3.fold ::= . '^^^' ";
    artLabelStrings[ARTL_ARTV3_fold_1428] = "";
    artlhsL[ARTL_ARTV3_fold_1428] = ARTL_ARTV3_fold;
    artKindOfs[ARTL_ARTV3_fold_1428] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_fold_1428] = true;
    artLabelInternalStrings[ARTL_ARTV3_fold_1429] = "ARTV3.fold ::= '^^^' ";
    artLabelStrings[ARTL_ARTV3_fold_1429] = "";
    artlhsL[ARTL_ARTV3_fold_1429] = ARTL_ARTV3_fold;
    artPopD[ARTL_ARTV3_fold_1429] = true;
    artLabelInternalStrings[ARTL_ARTV3_fold_1430] = "ARTV3.fold ::= '^^^' .";
    artLabelStrings[ARTL_ARTV3_fold_1430] = "";
    artlhsL[ARTL_ARTV3_fold_1430] = ARTL_ARTV3_fold;
    artKindOfs[ARTL_ARTV3_fold_1430] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_fold_1430] = true;
    arteoR_pL[ARTL_ARTV3_fold_1430] = true;
    artPopD[ARTL_ARTV3_fold_1430] = true;
  }

  public void artTableInitialiser_ARTV3_gather() {
    artLabelInternalStrings[ARTL_ARTV3_gather] = "ARTV3.gather";
    artLabelStrings[ARTL_ARTV3_gather] = "ARTV3.gather";
    artKindOfs[ARTL_ARTV3_gather] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_gather_1410] = "ARTV3.gather ::= . '!' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_gather_1410] = "";
    artlhsL[ARTL_ARTV3_gather_1410] = ARTL_ARTV3_gather;
    artKindOfs[ARTL_ARTV3_gather_1410] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_gather_1411] = "ARTV3.gather ::= '!' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_gather_1411] = "";
    artlhsL[ARTL_ARTV3_gather_1411] = ARTL_ARTV3_gather;
    artLabelInternalStrings[ARTL_ARTV3_gather_1412] = "ARTV3.gather ::= '!' . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_gather_1412] = "";
    artlhsL[ARTL_ARTV3_gather_1412] = ARTL_ARTV3_gather;
    artKindOfs[ARTL_ARTV3_gather_1412] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_gather_1412] = true;
    artLabelInternalStrings[ARTL_ARTV3_gather_1414] = "ARTV3.gather ::= '!' ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_gather_1414] = "";
    artlhsL[ARTL_ARTV3_gather_1414] = ARTL_ARTV3_gather;
    artSlotInstanceOfs[ARTL_ARTV3_gather_1414] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_gather_1414] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_gather_1414] = true;
    arteoR_pL[ARTL_ARTV3_gather_1414] = true;
    artPopD[ARTL_ARTV3_gather_1414] = true;
  }

  public void artTableInitialiser_ARTV3_grammarRule() {
    artLabelInternalStrings[ARTL_ARTV3_grammarRule] = "ARTV3.grammarRule";
    artLabelStrings[ARTL_ARTV3_grammarRule] = "ARTV3.grammarRule";
    artKindOfs[ARTL_ARTV3_grammarRule] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_grammarRule_1098] = "ARTV3.grammarRule ::= . ARTV3.nonterminal ARTV3.attributesOpt '::=' ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_grammarRule_1098] = "";
    artlhsL[ARTL_ARTV3_grammarRule_1098] = ARTL_ARTV3_grammarRule;
    artKindOfs[ARTL_ARTV3_grammarRule_1098] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_grammarRule_1100] = "ARTV3.grammarRule ::= ARTV3.nonterminal . ARTV3.attributesOpt '::=' ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_grammarRule_1100] = "";
    artlhsL[ARTL_ARTV3_grammarRule_1100] = ARTL_ARTV3_grammarRule;
    artSlotInstanceOfs[ARTL_ARTV3_grammarRule_1100] = ARTL_ARTV3_nonterminal;
    artKindOfs[ARTL_ARTV3_grammarRule_1100] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_grammarRule_1100] = true;
    artLabelInternalStrings[ARTL_ARTV3_grammarRule_1104] = "ARTV3.grammarRule ::= ARTV3.nonterminal ARTV3.attributesOpt . '::=' ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_grammarRule_1104] = "";
    artlhsL[ARTL_ARTV3_grammarRule_1104] = ARTL_ARTV3_grammarRule;
    artSlotInstanceOfs[ARTL_ARTV3_grammarRule_1104] = ARTL_ARTV3_attributesOpt;
    artKindOfs[ARTL_ARTV3_grammarRule_1104] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_grammarRule_1105] = "ARTV3.grammarRule ::= ARTV3.nonterminal ARTV3.attributesOpt '::=' ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_grammarRule_1105] = "";
    artlhsL[ARTL_ARTV3_grammarRule_1105] = ARTL_ARTV3_grammarRule;
    artLabelInternalStrings[ARTL_ARTV3_grammarRule_1106] = "ARTV3.grammarRule ::= ARTV3.nonterminal ARTV3.attributesOpt '::=' . ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_grammarRule_1106] = "";
    artlhsL[ARTL_ARTV3_grammarRule_1106] = ARTL_ARTV3_grammarRule;
    artKindOfs[ARTL_ARTV3_grammarRule_1106] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_grammarRule_1110] = "ARTV3.grammarRule ::= ARTV3.nonterminal ARTV3.attributesOpt '::=' ARTV3.rhs .";
    artLabelStrings[ARTL_ARTV3_grammarRule_1110] = "";
    artlhsL[ARTL_ARTV3_grammarRule_1110] = ARTL_ARTV3_grammarRule;
    artSlotInstanceOfs[ARTL_ARTV3_grammarRule_1110] = ARTL_ARTV3_rhs;
    artKindOfs[ARTL_ARTV3_grammarRule_1110] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_grammarRule_1110] = true;
    arteoR_pL[ARTL_ARTV3_grammarRule_1110] = true;
    artPopD[ARTL_ARTV3_grammarRule_1110] = true;
  }

  public void artTableInitialiser_ARTV3_insertion() {
    artLabelInternalStrings[ARTL_ARTV3_insertion] = "ARTV3.insertion";
    artLabelStrings[ARTL_ARTV3_insertion] = "ARTV3.insertion";
    artKindOfs[ARTL_ARTV3_insertion] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_insertion_1506] = "ARTV3.insertion ::= . '[' ARTV3.alt ']' ";
    artLabelStrings[ARTL_ARTV3_insertion_1506] = "";
    artlhsL[ARTL_ARTV3_insertion_1506] = ARTL_ARTV3_insertion;
    artKindOfs[ARTL_ARTV3_insertion_1506] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_insertion_1507] = "ARTV3.insertion ::= '[' ARTV3.alt ']' ";
    artLabelStrings[ARTL_ARTV3_insertion_1507] = "";
    artlhsL[ARTL_ARTV3_insertion_1507] = ARTL_ARTV3_insertion;
    artLabelInternalStrings[ARTL_ARTV3_insertion_1508] = "ARTV3.insertion ::= '[' . ARTV3.alt ']' ";
    artLabelStrings[ARTL_ARTV3_insertion_1508] = "";
    artlhsL[ARTL_ARTV3_insertion_1508] = ARTL_ARTV3_insertion;
    artKindOfs[ARTL_ARTV3_insertion_1508] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_insertion_1508] = true;
    artLabelInternalStrings[ARTL_ARTV3_insertion_1510] = "ARTV3.insertion ::= '[' ARTV3.alt . ']' ";
    artLabelStrings[ARTL_ARTV3_insertion_1510] = "";
    artlhsL[ARTL_ARTV3_insertion_1510] = ARTL_ARTV3_insertion;
    artSlotInstanceOfs[ARTL_ARTV3_insertion_1510] = ARTL_ARTV3_alt;
    artKindOfs[ARTL_ARTV3_insertion_1510] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_insertion_1510] = true;
    artLabelInternalStrings[ARTL_ARTV3_insertion_1511] = "ARTV3.insertion ::= '[' ARTV3.alt ']' ";
    artLabelStrings[ARTL_ARTV3_insertion_1511] = "";
    artlhsL[ARTL_ARTV3_insertion_1511] = ARTL_ARTV3_insertion;
    artPopD[ARTL_ARTV3_insertion_1511] = true;
    artLabelInternalStrings[ARTL_ARTV3_insertion_1512] = "ARTV3.insertion ::= '[' ARTV3.alt ']' .";
    artLabelStrings[ARTL_ARTV3_insertion_1512] = "";
    artlhsL[ARTL_ARTV3_insertion_1512] = ARTL_ARTV3_insertion;
    artKindOfs[ARTL_ARTV3_insertion_1512] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_insertion_1512] = true;
    arteoR_pL[ARTL_ARTV3_insertion_1512] = true;
    artPopD[ARTL_ARTV3_insertion_1512] = true;
  }

  public void artTableInitialiser_ARTV3_insertionName() {
    artLabelInternalStrings[ARTL_ARTV3_insertionName] = "ARTV3.insertionName";
    artLabelStrings[ARTL_ARTV3_insertionName] = "ARTV3.insertionName";
    artKindOfs[ARTL_ARTV3_insertionName] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_insertionName_1482] = "ARTV3.insertionName ::= . '%%' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_insertionName_1482] = "";
    artlhsL[ARTL_ARTV3_insertionName_1482] = ARTL_ARTV3_insertionName;
    artKindOfs[ARTL_ARTV3_insertionName_1482] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_insertionName_1483] = "ARTV3.insertionName ::= '%%' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_insertionName_1483] = "";
    artlhsL[ARTL_ARTV3_insertionName_1483] = ARTL_ARTV3_insertionName;
    artLabelInternalStrings[ARTL_ARTV3_insertionName_1484] = "ARTV3.insertionName ::= '%%' . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_insertionName_1484] = "";
    artlhsL[ARTL_ARTV3_insertionName_1484] = ARTL_ARTV3_insertionName;
    artKindOfs[ARTL_ARTV3_insertionName_1484] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_insertionName_1484] = true;
    artLabelInternalStrings[ARTL_ARTV3_insertionName_1486] = "ARTV3.insertionName ::= '%%' ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_insertionName_1486] = "";
    artlhsL[ARTL_ARTV3_insertionName_1486] = ARTL_ARTV3_insertionName;
    artSlotInstanceOfs[ARTL_ARTV3_insertionName_1486] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_insertionName_1486] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_insertionName_1486] = true;
    arteoR_pL[ARTL_ARTV3_insertionName_1486] = true;
    artPopD[ARTL_ARTV3_insertionName_1486] = true;
  }

  public void artTableInitialiser_ARTV3_iter() {
    artLabelInternalStrings[ARTL_ARTV3_iter] = "ARTV3.iter";
    artLabelStrings[ARTL_ARTV3_iter] = "ARTV3.iter";
    artKindOfs[ARTL_ARTV3_iter] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_iter_1250] = "ARTV3.iter ::= . ARTV3.diff ";
    artLabelStrings[ARTL_ARTV3_iter_1250] = "";
    artlhsL[ARTL_ARTV3_iter_1250] = ARTL_ARTV3_iter;
    artKindOfs[ARTL_ARTV3_iter_1250] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_iter_1252] = "ARTV3.iter ::= ARTV3.diff .";
    artLabelStrings[ARTL_ARTV3_iter_1252] = "";
    artlhsL[ARTL_ARTV3_iter_1252] = ARTL_ARTV3_iter;
    artSlotInstanceOfs[ARTL_ARTV3_iter_1252] = ARTL_ARTV3_diff;
    artKindOfs[ARTL_ARTV3_iter_1252] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_iter_1252] = true;
    arteoR_pL[ARTL_ARTV3_iter_1252] = true;
    artPopD[ARTL_ARTV3_iter_1252] = true;
    artLabelInternalStrings[ARTL_ARTV3_iter_1254] = "ARTV3.iter ::= . ARTV3.diff '@' ARTV3.iter ";
    artLabelStrings[ARTL_ARTV3_iter_1254] = "";
    artlhsL[ARTL_ARTV3_iter_1254] = ARTL_ARTV3_iter;
    artKindOfs[ARTL_ARTV3_iter_1254] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_iter_1256] = "ARTV3.iter ::= ARTV3.diff . '@' ARTV3.iter ";
    artLabelStrings[ARTL_ARTV3_iter_1256] = "";
    artlhsL[ARTL_ARTV3_iter_1256] = ARTL_ARTV3_iter;
    artSlotInstanceOfs[ARTL_ARTV3_iter_1256] = ARTL_ARTV3_diff;
    artKindOfs[ARTL_ARTV3_iter_1256] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_iter_1256] = true;
    artLabelInternalStrings[ARTL_ARTV3_iter_1257] = "ARTV3.iter ::= ARTV3.diff '@' ARTV3.iter ";
    artLabelStrings[ARTL_ARTV3_iter_1257] = "";
    artlhsL[ARTL_ARTV3_iter_1257] = ARTL_ARTV3_iter;
    artLabelInternalStrings[ARTL_ARTV3_iter_1258] = "ARTV3.iter ::= ARTV3.diff '@' . ARTV3.iter ";
    artLabelStrings[ARTL_ARTV3_iter_1258] = "";
    artlhsL[ARTL_ARTV3_iter_1258] = ARTL_ARTV3_iter;
    artKindOfs[ARTL_ARTV3_iter_1258] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_iter_1260] = "ARTV3.iter ::= ARTV3.diff '@' ARTV3.iter .";
    artLabelStrings[ARTL_ARTV3_iter_1260] = "";
    artlhsL[ARTL_ARTV3_iter_1260] = ARTL_ARTV3_iter;
    artSlotInstanceOfs[ARTL_ARTV3_iter_1260] = ARTL_ARTV3_iter;
    artKindOfs[ARTL_ARTV3_iter_1260] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_iter_1260] = true;
    arteoR_pL[ARTL_ARTV3_iter_1260] = true;
    artPopD[ARTL_ARTV3_iter_1260] = true;
  }

  public void artTableInitialiser_ARTV3_moduleHeader() {
    artLabelInternalStrings[ARTL_ARTV3_moduleHeader] = "ARTV3.moduleHeader";
    artLabelStrings[ARTL_ARTV3_moduleHeader] = "ARTV3.moduleHeader";
    artKindOfs[ARTL_ARTV3_moduleHeader] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_moduleHeader_26] = "ARTV3.moduleHeader ::= . 'module' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_moduleHeader_26] = "";
    artlhsL[ARTL_ARTV3_moduleHeader_26] = ARTL_ARTV3_moduleHeader;
    artKindOfs[ARTL_ARTV3_moduleHeader_26] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_moduleHeader_27] = "ARTV3.moduleHeader ::= 'module' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_moduleHeader_27] = "";
    artlhsL[ARTL_ARTV3_moduleHeader_27] = ARTL_ARTV3_moduleHeader;
    artLabelInternalStrings[ARTL_ARTV3_moduleHeader_28] = "ARTV3.moduleHeader ::= 'module' . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_moduleHeader_28] = "";
    artlhsL[ARTL_ARTV3_moduleHeader_28] = ARTL_ARTV3_moduleHeader;
    artKindOfs[ARTL_ARTV3_moduleHeader_28] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_moduleHeader_28] = true;
    artLabelInternalStrings[ARTL_ARTV3_moduleHeader_30] = "ARTV3.moduleHeader ::= 'module' ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_moduleHeader_30] = "";
    artlhsL[ARTL_ARTV3_moduleHeader_30] = ARTL_ARTV3_moduleHeader;
    artSlotInstanceOfs[ARTL_ARTV3_moduleHeader_30] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_moduleHeader_30] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_moduleHeader_30] = true;
    arteoR_pL[ARTL_ARTV3_moduleHeader_30] = true;
    artPopD[ARTL_ARTV3_moduleHeader_30] = true;
  }

  public void artTableInitialiser_ARTV3_modules() {
    artLabelInternalStrings[ARTL_ARTV3_modules] = "ARTV3.modules";
    artLabelStrings[ARTL_ARTV3_modules] = "ARTV3.modules";
    artKindOfs[ARTL_ARTV3_modules] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_modules_14] = "ARTV3.modules ::= . # ";
    artLabelStrings[ARTL_ARTV3_modules_14] = "";
    artlhsL[ARTL_ARTV3_modules_14] = ARTL_ARTV3_modules;
    artKindOfs[ARTL_ARTV3_modules_14] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_modules_14] = true;
    artLabelInternalStrings[ARTL_ARTV3_modules_16] = "ARTV3.modules ::= # .";
    artLabelStrings[ARTL_ARTV3_modules_16] = "";
    artlhsL[ARTL_ARTV3_modules_16] = ARTL_ARTV3_modules;
    artKindOfs[ARTL_ARTV3_modules_16] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_modules_16] = true;
    arteoR_pL[ARTL_ARTV3_modules_16] = true;
    artPopD[ARTL_ARTV3_modules_16] = true;
    artLabelInternalStrings[ARTL_ARTV3_modules_18] = "ARTV3.modules ::= . ARTV3.moduleHeader ARTV3.textElements ARTV3.modules ";
    artLabelStrings[ARTL_ARTV3_modules_18] = "";
    artlhsL[ARTL_ARTV3_modules_18] = ARTL_ARTV3_modules;
    artKindOfs[ARTL_ARTV3_modules_18] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_modules_20] = "ARTV3.modules ::= ARTV3.moduleHeader . ARTV3.textElements ARTV3.modules ";
    artLabelStrings[ARTL_ARTV3_modules_20] = "";
    artlhsL[ARTL_ARTV3_modules_20] = ARTL_ARTV3_modules;
    artSlotInstanceOfs[ARTL_ARTV3_modules_20] = ARTL_ARTV3_moduleHeader;
    artKindOfs[ARTL_ARTV3_modules_20] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_modules_20] = true;
    artLabelInternalStrings[ARTL_ARTV3_modules_22] = "ARTV3.modules ::= ARTV3.moduleHeader ARTV3.textElements . ARTV3.modules ";
    artLabelStrings[ARTL_ARTV3_modules_22] = "";
    artlhsL[ARTL_ARTV3_modules_22] = ARTL_ARTV3_modules;
    artSlotInstanceOfs[ARTL_ARTV3_modules_22] = ARTL_ARTV3_textElements;
    artKindOfs[ARTL_ARTV3_modules_22] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_modules_24] = "ARTV3.modules ::= ARTV3.moduleHeader ARTV3.textElements ARTV3.modules .";
    artLabelStrings[ARTL_ARTV3_modules_24] = "";
    artlhsL[ARTL_ARTV3_modules_24] = ARTL_ARTV3_modules;
    artSlotInstanceOfs[ARTL_ARTV3_modules_24] = ARTL_ARTV3_modules;
    artKindOfs[ARTL_ARTV3_modules_24] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_modules_24] = true;
    arteoR_pL[ARTL_ARTV3_modules_24] = true;
    artPopD[ARTL_ARTV3_modules_24] = true;
  }

  public void artTableInitialiser_ARTV3_name() {
    artLabelInternalStrings[ARTL_ARTV3_name] = "ARTV3.name";
    artLabelStrings[ARTL_ARTV3_name] = "ARTV3.name";
    artKindOfs[ARTL_ARTV3_name] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_name_1400] = "ARTV3.name ::= . ':' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_name_1400] = "";
    artlhsL[ARTL_ARTV3_name_1400] = ARTL_ARTV3_name;
    artKindOfs[ARTL_ARTV3_name_1400] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_name_1401] = "ARTV3.name ::= ':' ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_name_1401] = "";
    artlhsL[ARTL_ARTV3_name_1401] = ARTL_ARTV3_name;
    artLabelInternalStrings[ARTL_ARTV3_name_1402] = "ARTV3.name ::= ':' . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_name_1402] = "";
    artlhsL[ARTL_ARTV3_name_1402] = ARTL_ARTV3_name;
    artKindOfs[ARTL_ARTV3_name_1402] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_name_1402] = true;
    artLabelInternalStrings[ARTL_ARTV3_name_1404] = "ARTV3.name ::= ':' ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_name_1404] = "";
    artlhsL[ARTL_ARTV3_name_1404] = ARTL_ARTV3_name;
    artSlotInstanceOfs[ARTL_ARTV3_name_1404] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_name_1404] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_name_1404] = true;
    arteoR_pL[ARTL_ARTV3_name_1404] = true;
    artPopD[ARTL_ARTV3_name_1404] = true;
  }

  public void artTableInitialiser_ARTV3_nonterminal() {
    artLabelInternalStrings[ARTL_ARTV3_nonterminal] = "ARTV3.nonterminal";
    artLabelStrings[ARTL_ARTV3_nonterminal] = "ARTV3.nonterminal";
    artKindOfs[ARTL_ARTV3_nonterminal] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_nonterminal_1432] = "ARTV3.nonterminal ::= . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_nonterminal_1432] = "";
    artlhsL[ARTL_ARTV3_nonterminal_1432] = ARTL_ARTV3_nonterminal;
    artKindOfs[ARTL_ARTV3_nonterminal_1432] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_nonterminal_1434] = "ARTV3.nonterminal ::= ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_nonterminal_1434] = "";
    artlhsL[ARTL_ARTV3_nonterminal_1434] = ARTL_ARTV3_nonterminal;
    artSlotInstanceOfs[ARTL_ARTV3_nonterminal_1434] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_nonterminal_1434] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_nonterminal_1434] = true;
    arteoR_pL[ARTL_ARTV3_nonterminal_1434] = true;
    artPopD[ARTL_ARTV3_nonterminal_1434] = true;
    artLabelInternalStrings[ARTL_ARTV3_nonterminal_1438] = "ARTV3.nonterminal ::= . ARTV3.STRING_DOLLAR ";
    artLabelStrings[ARTL_ARTV3_nonterminal_1438] = "";
    artlhsL[ARTL_ARTV3_nonterminal_1438] = ARTL_ARTV3_nonterminal;
    artKindOfs[ARTL_ARTV3_nonterminal_1438] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_nonterminal_1440] = "ARTV3.nonterminal ::= ARTV3.STRING_DOLLAR .";
    artLabelStrings[ARTL_ARTV3_nonterminal_1440] = "";
    artlhsL[ARTL_ARTV3_nonterminal_1440] = ARTL_ARTV3_nonterminal;
    artSlotInstanceOfs[ARTL_ARTV3_nonterminal_1440] = ARTL_ARTV3_STRING_DOLLAR;
    artKindOfs[ARTL_ARTV3_nonterminal_1440] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_nonterminal_1440] = true;
    arteoR_pL[ARTL_ARTV3_nonterminal_1440] = true;
    artPopD[ARTL_ARTV3_nonterminal_1440] = true;
  }

  public void artTableInitialiser_ARTV3_not() {
    artLabelInternalStrings[ARTL_ARTV3_not] = "ARTV3.not";
    artLabelStrings[ARTL_ARTV3_not] = "ARTV3.not";
    artKindOfs[ARTL_ARTV3_not] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_not_1286] = "ARTV3.not ::= . ARTV3.element ";
    artLabelStrings[ARTL_ARTV3_not_1286] = "";
    artlhsL[ARTL_ARTV3_not_1286] = ARTL_ARTV3_not;
    artKindOfs[ARTL_ARTV3_not_1286] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_not_1288] = "ARTV3.not ::= ARTV3.element .";
    artLabelStrings[ARTL_ARTV3_not_1288] = "";
    artlhsL[ARTL_ARTV3_not_1288] = ARTL_ARTV3_not;
    artSlotInstanceOfs[ARTL_ARTV3_not_1288] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_not_1288] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_not_1288] = true;
    arteoR_pL[ARTL_ARTV3_not_1288] = true;
    artPopD[ARTL_ARTV3_not_1288] = true;
    artLabelInternalStrings[ARTL_ARTV3_not_1290] = "ARTV3.not ::= . '\\\\' ARTV3.element ";
    artLabelStrings[ARTL_ARTV3_not_1290] = "";
    artlhsL[ARTL_ARTV3_not_1290] = ARTL_ARTV3_not;
    artKindOfs[ARTL_ARTV3_not_1290] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_not_1291] = "ARTV3.not ::= '\\\\' ARTV3.element ";
    artLabelStrings[ARTL_ARTV3_not_1291] = "";
    artlhsL[ARTL_ARTV3_not_1291] = ARTL_ARTV3_not;
    artLabelInternalStrings[ARTL_ARTV3_not_1292] = "ARTV3.not ::= '\\\\' . ARTV3.element ";
    artLabelStrings[ARTL_ARTV3_not_1292] = "";
    artlhsL[ARTL_ARTV3_not_1292] = ARTL_ARTV3_not;
    artKindOfs[ARTL_ARTV3_not_1292] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_not_1292] = true;
    artLabelInternalStrings[ARTL_ARTV3_not_1294] = "ARTV3.not ::= '\\\\' ARTV3.element .";
    artLabelStrings[ARTL_ARTV3_not_1294] = "";
    artlhsL[ARTL_ARTV3_not_1294] = ARTL_ARTV3_not;
    artSlotInstanceOfs[ARTL_ARTV3_not_1294] = ARTL_ARTV3_element;
    artKindOfs[ARTL_ARTV3_not_1294] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_not_1294] = true;
    arteoR_pL[ARTL_ARTV3_not_1294] = true;
    artPopD[ARTL_ARTV3_not_1294] = true;
  }

  public void artTableInitialiser_ARTV3_optionSingle() {
    artLabelInternalStrings[ARTL_ARTV3_optionSingle] = "ARTV3.optionSingle";
    artLabelStrings[ARTL_ARTV3_optionSingle] = "ARTV3.optionSingle";
    artKindOfs[ARTL_ARTV3_optionSingle] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_260] = "ARTV3.optionSingle ::= . 'verbosity' ARTV3.optionalColon ARTV3.INTEGER ";
    artLabelStrings[ARTL_ARTV3_optionSingle_260] = "";
    artlhsL[ARTL_ARTV3_optionSingle_260] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_260] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_261] = "ARTV3.optionSingle ::= 'verbosity' ARTV3.optionalColon ARTV3.INTEGER ";
    artLabelStrings[ARTL_ARTV3_optionSingle_261] = "";
    artlhsL[ARTL_ARTV3_optionSingle_261] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_262] = "ARTV3.optionSingle ::= 'verbosity' . ARTV3.optionalColon ARTV3.INTEGER ";
    artLabelStrings[ARTL_ARTV3_optionSingle_262] = "";
    artlhsL[ARTL_ARTV3_optionSingle_262] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_262] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_262] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_264] = "ARTV3.optionSingle ::= 'verbosity' ARTV3.optionalColon . ARTV3.INTEGER ";
    artLabelStrings[ARTL_ARTV3_optionSingle_264] = "";
    artlhsL[ARTL_ARTV3_optionSingle_264] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_264] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_264] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_266] = "ARTV3.optionSingle ::= 'verbosity' ARTV3.optionalColon ARTV3.INTEGER .";
    artLabelStrings[ARTL_ARTV3_optionSingle_266] = "";
    artlhsL[ARTL_ARTV3_optionSingle_266] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_266] = ARTL_ARTV3_INTEGER;
    artKindOfs[ARTL_ARTV3_optionSingle_266] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_266] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_266] = true;
    artPopD[ARTL_ARTV3_optionSingle_266] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_270] = "ARTV3.optionSingle ::= . 'statistics' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_270] = "";
    artlhsL[ARTL_ARTV3_optionSingle_270] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_270] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_271] = "ARTV3.optionSingle ::= 'statistics' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_271] = "";
    artlhsL[ARTL_ARTV3_optionSingle_271] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_272] = "ARTV3.optionSingle ::= 'statistics' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_272] = "";
    artlhsL[ARTL_ARTV3_optionSingle_272] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_272] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_272] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_274] = "ARTV3.optionSingle ::= 'statistics' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_274] = "";
    artlhsL[ARTL_ARTV3_optionSingle_274] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_274] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_274] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_276] = "ARTV3.optionSingle ::= 'statistics' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_276] = "";
    artlhsL[ARTL_ARTV3_optionSingle_276] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_276] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_276] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_276] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_276] = true;
    artPopD[ARTL_ARTV3_optionSingle_276] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_280] = "ARTV3.optionSingle ::= . 'trace' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_280] = "";
    artlhsL[ARTL_ARTV3_optionSingle_280] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_280] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_281] = "ARTV3.optionSingle ::= 'trace' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_281] = "";
    artlhsL[ARTL_ARTV3_optionSingle_281] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_282] = "ARTV3.optionSingle ::= 'trace' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_282] = "";
    artlhsL[ARTL_ARTV3_optionSingle_282] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_282] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_282] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_284] = "ARTV3.optionSingle ::= 'trace' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_284] = "";
    artlhsL[ARTL_ARTV3_optionSingle_284] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_284] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_284] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_286] = "ARTV3.optionSingle ::= 'trace' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_286] = "";
    artlhsL[ARTL_ARTV3_optionSingle_286] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_286] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_286] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_286] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_286] = true;
    artPopD[ARTL_ARTV3_optionSingle_286] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_290] = "ARTV3.optionSingle ::= . 'inputFile' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_290] = "";
    artlhsL[ARTL_ARTV3_optionSingle_290] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_290] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_291] = "ARTV3.optionSingle ::= 'inputFile' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_291] = "";
    artlhsL[ARTL_ARTV3_optionSingle_291] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_292] = "ARTV3.optionSingle ::= 'inputFile' . ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_292] = "";
    artlhsL[ARTL_ARTV3_optionSingle_292] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_292] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_292] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_294] = "ARTV3.optionSingle ::= 'inputFile' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_294] = "";
    artlhsL[ARTL_ARTV3_optionSingle_294] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_294] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_294] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_296] = "ARTV3.optionSingle ::= 'inputFile' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .";
    artLabelStrings[ARTL_ARTV3_optionSingle_296] = "";
    artlhsL[ARTL_ARTV3_optionSingle_296] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_296] = ARTL_ARTV3_STRING_PLAIN_SQ;
    artKindOfs[ARTL_ARTV3_optionSingle_296] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_296] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_296] = true;
    artPopD[ARTL_ARTV3_optionSingle_296] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_300] = "ARTV3.optionSingle ::= . 'inputFileIfExists' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_300] = "";
    artlhsL[ARTL_ARTV3_optionSingle_300] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_300] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_301] = "ARTV3.optionSingle ::= 'inputFileIfExists' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_301] = "";
    artlhsL[ARTL_ARTV3_optionSingle_301] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_302] = "ARTV3.optionSingle ::= 'inputFileIfExists' . ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_302] = "";
    artlhsL[ARTL_ARTV3_optionSingle_302] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_302] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_302] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_304] = "ARTV3.optionSingle ::= 'inputFileIfExists' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_304] = "";
    artlhsL[ARTL_ARTV3_optionSingle_304] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_304] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_304] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_306] = "ARTV3.optionSingle ::= 'inputFileIfExists' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .";
    artLabelStrings[ARTL_ARTV3_optionSingle_306] = "";
    artlhsL[ARTL_ARTV3_optionSingle_306] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_306] = ARTL_ARTV3_STRING_PLAIN_SQ;
    artKindOfs[ARTL_ARTV3_optionSingle_306] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_306] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_306] = true;
    artPopD[ARTL_ARTV3_optionSingle_306] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_310] = "ARTV3.optionSingle ::= . 'inputFile' ARTV3.optionalColon ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_optionSingle_310] = "";
    artlhsL[ARTL_ARTV3_optionSingle_310] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_310] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_311] = "ARTV3.optionSingle ::= 'inputFile' ARTV3.optionalColon ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_optionSingle_311] = "";
    artlhsL[ARTL_ARTV3_optionSingle_311] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_312] = "ARTV3.optionSingle ::= 'inputFile' . ARTV3.optionalColon ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_optionSingle_312] = "";
    artlhsL[ARTL_ARTV3_optionSingle_312] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_312] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_312] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_314] = "ARTV3.optionSingle ::= 'inputFile' ARTV3.optionalColon . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_optionSingle_314] = "";
    artlhsL[ARTL_ARTV3_optionSingle_314] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_314] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_314] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_316] = "ARTV3.optionSingle ::= 'inputFile' ARTV3.optionalColon ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_optionSingle_316] = "";
    artlhsL[ARTL_ARTV3_optionSingle_316] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_316] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_optionSingle_316] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_316] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_316] = true;
    artPopD[ARTL_ARTV3_optionSingle_316] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_320] = "ARTV3.optionSingle ::= . 'inputFileIfExists' ARTV3.optionalColon ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_optionSingle_320] = "";
    artlhsL[ARTL_ARTV3_optionSingle_320] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_320] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_321] = "ARTV3.optionSingle ::= 'inputFileIfExists' ARTV3.optionalColon ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_optionSingle_321] = "";
    artlhsL[ARTL_ARTV3_optionSingle_321] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_322] = "ARTV3.optionSingle ::= 'inputFileIfExists' . ARTV3.optionalColon ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_optionSingle_322] = "";
    artlhsL[ARTL_ARTV3_optionSingle_322] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_322] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_322] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_324] = "ARTV3.optionSingle ::= 'inputFileIfExists' ARTV3.optionalColon . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_optionSingle_324] = "";
    artlhsL[ARTL_ARTV3_optionSingle_324] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_324] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_324] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_326] = "ARTV3.optionSingle ::= 'inputFileIfExists' ARTV3.optionalColon ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_optionSingle_326] = "";
    artlhsL[ARTL_ARTV3_optionSingle_326] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_326] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_optionSingle_326] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_326] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_326] = true;
    artPopD[ARTL_ARTV3_optionSingle_326] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_330] = "ARTV3.optionSingle ::= . 'inputString' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_330] = "";
    artlhsL[ARTL_ARTV3_optionSingle_330] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_330] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_331] = "ARTV3.optionSingle ::= 'inputString' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_331] = "";
    artlhsL[ARTL_ARTV3_optionSingle_331] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_332] = "ARTV3.optionSingle ::= 'inputString' . ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_332] = "";
    artlhsL[ARTL_ARTV3_optionSingle_332] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_332] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_332] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_334] = "ARTV3.optionSingle ::= 'inputString' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_334] = "";
    artlhsL[ARTL_ARTV3_optionSingle_334] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_334] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_334] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_336] = "ARTV3.optionSingle ::= 'inputString' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .";
    artLabelStrings[ARTL_ARTV3_optionSingle_336] = "";
    artlhsL[ARTL_ARTV3_optionSingle_336] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_336] = ARTL_ARTV3_STRING_PLAIN_SQ;
    artKindOfs[ARTL_ARTV3_optionSingle_336] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_336] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_336] = true;
    artPopD[ARTL_ARTV3_optionSingle_336] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_340] = "ARTV3.optionSingle ::= . 'phaseModule' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_340] = "";
    artlhsL[ARTL_ARTV3_optionSingle_340] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_340] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_341] = "ARTV3.optionSingle ::= 'phaseModule' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_341] = "";
    artlhsL[ARTL_ARTV3_optionSingle_341] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_342] = "ARTV3.optionSingle ::= 'phaseModule' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_342] = "";
    artlhsL[ARTL_ARTV3_optionSingle_342] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_342] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_342] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_344] = "ARTV3.optionSingle ::= 'phaseModule' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_344] = "";
    artlhsL[ARTL_ARTV3_optionSingle_344] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_344] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_344] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_346] = "ARTV3.optionSingle ::= 'phaseModule' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_346] = "";
    artlhsL[ARTL_ARTV3_optionSingle_346] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_346] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_346] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_346] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_346] = true;
    artPopD[ARTL_ARTV3_optionSingle_346] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_350] = "ARTV3.optionSingle ::= . 'phaseLex' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_350] = "";
    artlhsL[ARTL_ARTV3_optionSingle_350] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_350] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_351] = "ARTV3.optionSingle ::= 'phaseLex' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_351] = "";
    artlhsL[ARTL_ARTV3_optionSingle_351] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_352] = "ARTV3.optionSingle ::= 'phaseLex' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_352] = "";
    artlhsL[ARTL_ARTV3_optionSingle_352] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_352] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_352] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_354] = "ARTV3.optionSingle ::= 'phaseLex' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_354] = "";
    artlhsL[ARTL_ARTV3_optionSingle_354] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_354] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_354] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_356] = "ARTV3.optionSingle ::= 'phaseLex' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_356] = "";
    artlhsL[ARTL_ARTV3_optionSingle_356] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_356] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_356] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_356] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_356] = true;
    artPopD[ARTL_ARTV3_optionSingle_356] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_360] = "ARTV3.optionSingle ::= . 'phasePreChoose' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_360] = "";
    artlhsL[ARTL_ARTV3_optionSingle_360] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_360] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_361] = "ARTV3.optionSingle ::= 'phasePreChoose' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_361] = "";
    artlhsL[ARTL_ARTV3_optionSingle_361] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_362] = "ARTV3.optionSingle ::= 'phasePreChoose' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_362] = "";
    artlhsL[ARTL_ARTV3_optionSingle_362] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_362] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_362] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_364] = "ARTV3.optionSingle ::= 'phasePreChoose' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_364] = "";
    artlhsL[ARTL_ARTV3_optionSingle_364] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_364] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_364] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_366] = "ARTV3.optionSingle ::= 'phasePreChoose' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_366] = "";
    artlhsL[ARTL_ARTV3_optionSingle_366] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_366] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_366] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_366] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_366] = true;
    artPopD[ARTL_ARTV3_optionSingle_366] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_370] = "ARTV3.optionSingle ::= . 'phaseParse' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_370] = "";
    artlhsL[ARTL_ARTV3_optionSingle_370] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_370] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_371] = "ARTV3.optionSingle ::= 'phaseParse' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_371] = "";
    artlhsL[ARTL_ARTV3_optionSingle_371] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_372] = "ARTV3.optionSingle ::= 'phaseParse' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_372] = "";
    artlhsL[ARTL_ARTV3_optionSingle_372] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_372] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_372] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_374] = "ARTV3.optionSingle ::= 'phaseParse' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_374] = "";
    artlhsL[ARTL_ARTV3_optionSingle_374] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_374] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_374] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_376] = "ARTV3.optionSingle ::= 'phaseParse' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_376] = "";
    artlhsL[ARTL_ARTV3_optionSingle_376] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_376] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_376] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_376] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_376] = true;
    artPopD[ARTL_ARTV3_optionSingle_376] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_380] = "ARTV3.optionSingle ::= . 'phasePostChoose' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_380] = "";
    artlhsL[ARTL_ARTV3_optionSingle_380] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_380] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_381] = "ARTV3.optionSingle ::= 'phasePostChoose' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_381] = "";
    artlhsL[ARTL_ARTV3_optionSingle_381] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_382] = "ARTV3.optionSingle ::= 'phasePostChoose' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_382] = "";
    artlhsL[ARTL_ARTV3_optionSingle_382] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_382] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_382] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_384] = "ARTV3.optionSingle ::= 'phasePostChoose' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_384] = "";
    artlhsL[ARTL_ARTV3_optionSingle_384] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_384] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_384] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_386] = "ARTV3.optionSingle ::= 'phasePostChoose' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_386] = "";
    artlhsL[ARTL_ARTV3_optionSingle_386] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_386] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_386] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_386] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_386] = true;
    artPopD[ARTL_ARTV3_optionSingle_386] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_390] = "ARTV3.optionSingle ::= . 'phaseDerivationSelect' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_390] = "";
    artlhsL[ARTL_ARTV3_optionSingle_390] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_390] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_391] = "ARTV3.optionSingle ::= 'phaseDerivationSelect' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_391] = "";
    artlhsL[ARTL_ARTV3_optionSingle_391] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_392] = "ARTV3.optionSingle ::= 'phaseDerivationSelect' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_392] = "";
    artlhsL[ARTL_ARTV3_optionSingle_392] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_392] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_392] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_394] = "ARTV3.optionSingle ::= 'phaseDerivationSelect' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_394] = "";
    artlhsL[ARTL_ARTV3_optionSingle_394] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_394] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_394] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_396] = "ARTV3.optionSingle ::= 'phaseDerivationSelect' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_396] = "";
    artlhsL[ARTL_ARTV3_optionSingle_396] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_396] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_396] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_396] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_396] = true;
    artPopD[ARTL_ARTV3_optionSingle_396] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_400] = "ARTV3.optionSingle ::= . 'phaseGIFT' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_400] = "";
    artlhsL[ARTL_ARTV3_optionSingle_400] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_400] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_401] = "ARTV3.optionSingle ::= 'phaseGIFT' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_401] = "";
    artlhsL[ARTL_ARTV3_optionSingle_401] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_402] = "ARTV3.optionSingle ::= 'phaseGIFT' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_402] = "";
    artlhsL[ARTL_ARTV3_optionSingle_402] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_402] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_402] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_404] = "ARTV3.optionSingle ::= 'phaseGIFT' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_404] = "";
    artlhsL[ARTL_ARTV3_optionSingle_404] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_404] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_404] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_406] = "ARTV3.optionSingle ::= 'phaseGIFT' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_406] = "";
    artlhsL[ARTL_ARTV3_optionSingle_406] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_406] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_406] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_406] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_406] = true;
    artPopD[ARTL_ARTV3_optionSingle_406] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_410] = "ARTV3.optionSingle ::= . 'phaseAG' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_410] = "";
    artlhsL[ARTL_ARTV3_optionSingle_410] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_410] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_411] = "ARTV3.optionSingle ::= 'phaseAG' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_411] = "";
    artlhsL[ARTL_ARTV3_optionSingle_411] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_412] = "ARTV3.optionSingle ::= 'phaseAG' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_412] = "";
    artlhsL[ARTL_ARTV3_optionSingle_412] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_412] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_412] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_414] = "ARTV3.optionSingle ::= 'phaseAG' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_414] = "";
    artlhsL[ARTL_ARTV3_optionSingle_414] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_414] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_414] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_416] = "ARTV3.optionSingle ::= 'phaseAG' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_416] = "";
    artlhsL[ARTL_ARTV3_optionSingle_416] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_416] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_416] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_416] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_416] = true;
    artPopD[ARTL_ARTV3_optionSingle_416] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_420] = "ARTV3.optionSingle ::= . 'phaseTR' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_420] = "";
    artlhsL[ARTL_ARTV3_optionSingle_420] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_420] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_421] = "ARTV3.optionSingle ::= 'phaseTR' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_421] = "";
    artlhsL[ARTL_ARTV3_optionSingle_421] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_422] = "ARTV3.optionSingle ::= 'phaseTR' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_422] = "";
    artlhsL[ARTL_ARTV3_optionSingle_422] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_422] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_422] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_424] = "ARTV3.optionSingle ::= 'phaseTR' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_424] = "";
    artlhsL[ARTL_ARTV3_optionSingle_424] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_424] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_424] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_426] = "ARTV3.optionSingle ::= 'phaseTR' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_426] = "";
    artlhsL[ARTL_ARTV3_optionSingle_426] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_426] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_426] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_426] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_426] = true;
    artPopD[ARTL_ARTV3_optionSingle_426] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_430] = "ARTV3.optionSingle ::= . 'phaseSOS' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_430] = "";
    artlhsL[ARTL_ARTV3_optionSingle_430] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_430] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_431] = "ARTV3.optionSingle ::= 'phaseSOS' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_431] = "";
    artlhsL[ARTL_ARTV3_optionSingle_431] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_432] = "ARTV3.optionSingle ::= 'phaseSOS' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_432] = "";
    artlhsL[ARTL_ARTV3_optionSingle_432] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_432] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_432] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_434] = "ARTV3.optionSingle ::= 'phaseSOS' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_434] = "";
    artlhsL[ARTL_ARTV3_optionSingle_434] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_434] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_434] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_436] = "ARTV3.optionSingle ::= 'phaseSOS' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_436] = "";
    artlhsL[ARTL_ARTV3_optionSingle_436] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_436] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_436] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_436] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_436] = true;
    artPopD[ARTL_ARTV3_optionSingle_436] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_440] = "ARTV3.optionSingle ::= . 'showTWE' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_440] = "";
    artlhsL[ARTL_ARTV3_optionSingle_440] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_440] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_441] = "ARTV3.optionSingle ::= 'showTWE' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_441] = "";
    artlhsL[ARTL_ARTV3_optionSingle_441] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_442] = "ARTV3.optionSingle ::= 'showTWE' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_442] = "";
    artlhsL[ARTL_ARTV3_optionSingle_442] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_442] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_442] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_444] = "ARTV3.optionSingle ::= 'showTWE' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_444] = "";
    artlhsL[ARTL_ARTV3_optionSingle_444] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_444] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_444] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_446] = "ARTV3.optionSingle ::= 'showTWE' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_446] = "";
    artlhsL[ARTL_ARTV3_optionSingle_446] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_446] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_446] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_446] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_446] = true;
    artPopD[ARTL_ARTV3_optionSingle_446] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_450] = "ARTV3.optionSingle ::= . 'showBSR' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_450] = "";
    artlhsL[ARTL_ARTV3_optionSingle_450] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_450] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_451] = "ARTV3.optionSingle ::= 'showBSR' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_451] = "";
    artlhsL[ARTL_ARTV3_optionSingle_451] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_452] = "ARTV3.optionSingle ::= 'showBSR' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_452] = "";
    artlhsL[ARTL_ARTV3_optionSingle_452] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_452] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_452] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_454] = "ARTV3.optionSingle ::= 'showBSR' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_454] = "";
    artlhsL[ARTL_ARTV3_optionSingle_454] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_454] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_454] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_456] = "ARTV3.optionSingle ::= 'showBSR' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_456] = "";
    artlhsL[ARTL_ARTV3_optionSingle_456] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_456] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_456] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_456] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_456] = true;
    artPopD[ARTL_ARTV3_optionSingle_456] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_460] = "ARTV3.optionSingle ::= . 'showSPPFFull' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_460] = "";
    artlhsL[ARTL_ARTV3_optionSingle_460] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_460] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_461] = "ARTV3.optionSingle ::= 'showSPPFFull' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_461] = "";
    artlhsL[ARTL_ARTV3_optionSingle_461] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_462] = "ARTV3.optionSingle ::= 'showSPPFFull' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_462] = "";
    artlhsL[ARTL_ARTV3_optionSingle_462] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_462] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_462] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_464] = "ARTV3.optionSingle ::= 'showSPPFFull' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_464] = "";
    artlhsL[ARTL_ARTV3_optionSingle_464] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_464] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_464] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_466] = "ARTV3.optionSingle ::= 'showSPPFFull' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_466] = "";
    artlhsL[ARTL_ARTV3_optionSingle_466] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_466] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_466] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_466] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_466] = true;
    artPopD[ARTL_ARTV3_optionSingle_466] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_470] = "ARTV3.optionSingle ::= . 'showSPPFCore' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_470] = "";
    artlhsL[ARTL_ARTV3_optionSingle_470] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_470] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_471] = "ARTV3.optionSingle ::= 'showSPPFCore' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_471] = "";
    artlhsL[ARTL_ARTV3_optionSingle_471] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_472] = "ARTV3.optionSingle ::= 'showSPPFCore' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_472] = "";
    artlhsL[ARTL_ARTV3_optionSingle_472] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_472] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_472] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_474] = "ARTV3.optionSingle ::= 'showSPPFCore' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_474] = "";
    artlhsL[ARTL_ARTV3_optionSingle_474] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_474] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_474] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_476] = "ARTV3.optionSingle ::= 'showSPPFCore' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_476] = "";
    artlhsL[ARTL_ARTV3_optionSingle_476] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_476] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_476] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_476] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_476] = true;
    artPopD[ARTL_ARTV3_optionSingle_476] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_480] = "ARTV3.optionSingle ::= . 'showDT' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_480] = "";
    artlhsL[ARTL_ARTV3_optionSingle_480] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_480] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_481] = "ARTV3.optionSingle ::= 'showDT' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_481] = "";
    artlhsL[ARTL_ARTV3_optionSingle_481] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_482] = "ARTV3.optionSingle ::= 'showDT' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_482] = "";
    artlhsL[ARTL_ARTV3_optionSingle_482] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_482] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_482] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_484] = "ARTV3.optionSingle ::= 'showDT' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_484] = "";
    artlhsL[ARTL_ARTV3_optionSingle_484] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_484] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_484] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_486] = "ARTV3.optionSingle ::= 'showDT' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_486] = "";
    artlhsL[ARTL_ARTV3_optionSingle_486] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_486] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_486] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_486] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_486] = true;
    artPopD[ARTL_ARTV3_optionSingle_486] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_490] = "ARTV3.optionSingle ::= . 'showGIFT' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_490] = "";
    artlhsL[ARTL_ARTV3_optionSingle_490] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_490] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_491] = "ARTV3.optionSingle ::= 'showGIFT' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_491] = "";
    artlhsL[ARTL_ARTV3_optionSingle_491] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_492] = "ARTV3.optionSingle ::= 'showGIFT' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_492] = "";
    artlhsL[ARTL_ARTV3_optionSingle_492] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_492] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_492] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_494] = "ARTV3.optionSingle ::= 'showGIFT' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_494] = "";
    artlhsL[ARTL_ARTV3_optionSingle_494] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_494] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_494] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_496] = "ARTV3.optionSingle ::= 'showGIFT' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_496] = "";
    artlhsL[ARTL_ARTV3_optionSingle_496] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_496] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_496] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_496] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_496] = true;
    artPopD[ARTL_ARTV3_optionSingle_496] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_500] = "ARTV3.optionSingle ::= . 'showAG' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_500] = "";
    artlhsL[ARTL_ARTV3_optionSingle_500] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_500] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_501] = "ARTV3.optionSingle ::= 'showAG' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_501] = "";
    artlhsL[ARTL_ARTV3_optionSingle_501] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_502] = "ARTV3.optionSingle ::= 'showAG' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_502] = "";
    artlhsL[ARTL_ARTV3_optionSingle_502] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_502] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_502] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_504] = "ARTV3.optionSingle ::= 'showAG' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_504] = "";
    artlhsL[ARTL_ARTV3_optionSingle_504] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_504] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_504] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_506] = "ARTV3.optionSingle ::= 'showAG' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_506] = "";
    artlhsL[ARTL_ARTV3_optionSingle_506] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_506] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_506] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_506] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_506] = true;
    artPopD[ARTL_ARTV3_optionSingle_506] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_510] = "ARTV3.optionSingle ::= . 'showTR' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_510] = "";
    artlhsL[ARTL_ARTV3_optionSingle_510] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_510] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_511] = "ARTV3.optionSingle ::= 'showTR' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_511] = "";
    artlhsL[ARTL_ARTV3_optionSingle_511] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_512] = "ARTV3.optionSingle ::= 'showTR' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_512] = "";
    artlhsL[ARTL_ARTV3_optionSingle_512] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_512] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_512] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_514] = "ARTV3.optionSingle ::= 'showTR' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_514] = "";
    artlhsL[ARTL_ARTV3_optionSingle_514] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_514] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_514] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_516] = "ARTV3.optionSingle ::= 'showTR' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_516] = "";
    artlhsL[ARTL_ARTV3_optionSingle_516] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_516] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_516] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_516] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_516] = true;
    artPopD[ARTL_ARTV3_optionSingle_516] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_520] = "ARTV3.optionSingle ::= . 'showSOS' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_520] = "";
    artlhsL[ARTL_ARTV3_optionSingle_520] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_520] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_521] = "ARTV3.optionSingle ::= 'showSOS' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_521] = "";
    artlhsL[ARTL_ARTV3_optionSingle_521] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_522] = "ARTV3.optionSingle ::= 'showSOS' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_522] = "";
    artlhsL[ARTL_ARTV3_optionSingle_522] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_522] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_522] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_524] = "ARTV3.optionSingle ::= 'showSOS' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_524] = "";
    artlhsL[ARTL_ARTV3_optionSingle_524] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_524] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_524] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_526] = "ARTV3.optionSingle ::= 'showSOS' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_526] = "";
    artlhsL[ARTL_ARTV3_optionSingle_526] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_526] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_526] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_526] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_526] = true;
    artPopD[ARTL_ARTV3_optionSingle_526] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_530] = "ARTV3.optionSingle ::= . 'showAll' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_530] = "";
    artlhsL[ARTL_ARTV3_optionSingle_530] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_530] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_531] = "ARTV3.optionSingle ::= 'showAll' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_531] = "";
    artlhsL[ARTL_ARTV3_optionSingle_531] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_532] = "ARTV3.optionSingle ::= 'showAll' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_532] = "";
    artlhsL[ARTL_ARTV3_optionSingle_532] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_532] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_532] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_534] = "ARTV3.optionSingle ::= 'showAll' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_534] = "";
    artlhsL[ARTL_ARTV3_optionSingle_534] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_534] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_534] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_536] = "ARTV3.optionSingle ::= 'showAll' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_536] = "";
    artlhsL[ARTL_ARTV3_optionSingle_536] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_536] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_536] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_536] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_536] = true;
    artPopD[ARTL_ARTV3_optionSingle_536] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_540] = "ARTV3.optionSingle ::= . 'ebnfMultiplyOut' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_540] = "";
    artlhsL[ARTL_ARTV3_optionSingle_540] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_540] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_541] = "ARTV3.optionSingle ::= 'ebnfMultiplyOut' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_541] = "";
    artlhsL[ARTL_ARTV3_optionSingle_541] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_542] = "ARTV3.optionSingle ::= 'ebnfMultiplyOut' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_542] = "";
    artlhsL[ARTL_ARTV3_optionSingle_542] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_542] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_542] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_544] = "ARTV3.optionSingle ::= 'ebnfMultiplyOut' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_544] = "";
    artlhsL[ARTL_ARTV3_optionSingle_544] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_544] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_544] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_546] = "ARTV3.optionSingle ::= 'ebnfMultiplyOut' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_546] = "";
    artlhsL[ARTL_ARTV3_optionSingle_546] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_546] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_546] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_546] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_546] = true;
    artPopD[ARTL_ARTV3_optionSingle_546] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_550] = "ARTV3.optionSingle ::= . 'ebnfracketToNonterminal' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_550] = "";
    artlhsL[ARTL_ARTV3_optionSingle_550] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_550] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_551] = "ARTV3.optionSingle ::= 'ebnfracketToNonterminal' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_551] = "";
    artlhsL[ARTL_ARTV3_optionSingle_551] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_552] = "ARTV3.optionSingle ::= 'ebnfracketToNonterminal' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_552] = "";
    artlhsL[ARTL_ARTV3_optionSingle_552] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_552] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_552] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_554] = "ARTV3.optionSingle ::= 'ebnfracketToNonterminal' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_554] = "";
    artlhsL[ARTL_ARTV3_optionSingle_554] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_554] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_554] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_556] = "ARTV3.optionSingle ::= 'ebnfracketToNonterminal' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_556] = "";
    artlhsL[ARTL_ARTV3_optionSingle_556] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_556] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_556] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_556] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_556] = true;
    artPopD[ARTL_ARTV3_optionSingle_556] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_560] = "ARTV3.optionSingle ::= . 'ebnfClosureRight' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_560] = "";
    artlhsL[ARTL_ARTV3_optionSingle_560] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_560] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_561] = "ARTV3.optionSingle ::= 'ebnfClosureRight' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_561] = "";
    artlhsL[ARTL_ARTV3_optionSingle_561] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_562] = "ARTV3.optionSingle ::= 'ebnfClosureRight' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_562] = "";
    artlhsL[ARTL_ARTV3_optionSingle_562] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_562] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_562] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_564] = "ARTV3.optionSingle ::= 'ebnfClosureRight' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_564] = "";
    artlhsL[ARTL_ARTV3_optionSingle_564] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_564] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_564] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_566] = "ARTV3.optionSingle ::= 'ebnfClosureRight' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_566] = "";
    artlhsL[ARTL_ARTV3_optionSingle_566] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_566] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_566] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_566] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_566] = true;
    artPopD[ARTL_ARTV3_optionSingle_566] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_570] = "ARTV3.optionSingle ::= . 'ebnfClosureLeft' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_570] = "";
    artlhsL[ARTL_ARTV3_optionSingle_570] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_570] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_571] = "ARTV3.optionSingle ::= 'ebnfClosureLeft' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_571] = "";
    artlhsL[ARTL_ARTV3_optionSingle_571] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_572] = "ARTV3.optionSingle ::= 'ebnfClosureLeft' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_572] = "";
    artlhsL[ARTL_ARTV3_optionSingle_572] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_572] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_572] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_574] = "ARTV3.optionSingle ::= 'ebnfClosureLeft' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_574] = "";
    artlhsL[ARTL_ARTV3_optionSingle_574] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_574] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_574] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_576] = "ARTV3.optionSingle ::= 'ebnfClosureLeft' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_576] = "";
    artlhsL[ARTL_ARTV3_optionSingle_576] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_576] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_576] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_576] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_576] = true;
    artPopD[ARTL_ARTV3_optionSingle_576] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_580] = "ARTV3.optionSingle ::= . 'ebnfLeftFactor' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_580] = "";
    artlhsL[ARTL_ARTV3_optionSingle_580] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_580] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_581] = "ARTV3.optionSingle ::= 'ebnfLeftFactor' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_581] = "";
    artlhsL[ARTL_ARTV3_optionSingle_581] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_582] = "ARTV3.optionSingle ::= 'ebnfLeftFactor' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_582] = "";
    artlhsL[ARTL_ARTV3_optionSingle_582] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_582] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_582] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_584] = "ARTV3.optionSingle ::= 'ebnfLeftFactor' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_584] = "";
    artlhsL[ARTL_ARTV3_optionSingle_584] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_584] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_584] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_586] = "ARTV3.optionSingle ::= 'ebnfLeftFactor' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_586] = "";
    artlhsL[ARTL_ARTV3_optionSingle_586] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_586] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_586] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_586] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_586] = true;
    artPopD[ARTL_ARTV3_optionSingle_586] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_590] = "ARTV3.optionSingle ::= . 'lexDFA' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_590] = "";
    artlhsL[ARTL_ARTV3_optionSingle_590] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_590] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_591] = "ARTV3.optionSingle ::= 'lexDFA' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_591] = "";
    artlhsL[ARTL_ARTV3_optionSingle_591] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_592] = "ARTV3.optionSingle ::= 'lexDFA' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_592] = "";
    artlhsL[ARTL_ARTV3_optionSingle_592] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_592] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_592] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_594] = "ARTV3.optionSingle ::= 'lexDFA' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_594] = "";
    artlhsL[ARTL_ARTV3_optionSingle_594] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_594] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_594] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_596] = "ARTV3.optionSingle ::= 'lexDFA' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_596] = "";
    artlhsL[ARTL_ARTV3_optionSingle_596] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_596] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_596] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_596] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_596] = true;
    artPopD[ARTL_ARTV3_optionSingle_596] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_600] = "ARTV3.optionSingle ::= . 'lexCFRecognise' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_600] = "";
    artlhsL[ARTL_ARTV3_optionSingle_600] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_600] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_601] = "ARTV3.optionSingle ::= 'lexCFRecognise' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_601] = "";
    artlhsL[ARTL_ARTV3_optionSingle_601] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_602] = "ARTV3.optionSingle ::= 'lexCFRecognise' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_602] = "";
    artlhsL[ARTL_ARTV3_optionSingle_602] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_602] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_602] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_604] = "ARTV3.optionSingle ::= 'lexCFRecognise' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_604] = "";
    artlhsL[ARTL_ARTV3_optionSingle_604] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_604] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_604] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_606] = "ARTV3.optionSingle ::= 'lexCFRecognise' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_606] = "";
    artlhsL[ARTL_ARTV3_optionSingle_606] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_606] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_606] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_606] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_606] = true;
    artPopD[ARTL_ARTV3_optionSingle_606] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_610] = "ARTV3.optionSingle ::= . 'lexCFParse' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_610] = "";
    artlhsL[ARTL_ARTV3_optionSingle_610] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_610] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_611] = "ARTV3.optionSingle ::= 'lexCFParse' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_611] = "";
    artlhsL[ARTL_ARTV3_optionSingle_611] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_612] = "ARTV3.optionSingle ::= 'lexCFParse' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_612] = "";
    artlhsL[ARTL_ARTV3_optionSingle_612] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_612] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_612] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_614] = "ARTV3.optionSingle ::= 'lexCFParse' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_614] = "";
    artlhsL[ARTL_ARTV3_optionSingle_614] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_614] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_614] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_616] = "ARTV3.optionSingle ::= 'lexCFParse' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_616] = "";
    artlhsL[ARTL_ARTV3_optionSingle_616] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_616] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_616] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_616] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_616] = true;
    artPopD[ARTL_ARTV3_optionSingle_616] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_620] = "ARTV3.optionSingle ::= . 'lexWSSuffix' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_620] = "";
    artlhsL[ARTL_ARTV3_optionSingle_620] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_620] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_621] = "ARTV3.optionSingle ::= 'lexWSSuffix' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_621] = "";
    artlhsL[ARTL_ARTV3_optionSingle_621] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_622] = "ARTV3.optionSingle ::= 'lexWSSuffix' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_622] = "";
    artlhsL[ARTL_ARTV3_optionSingle_622] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_622] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_622] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_624] = "ARTV3.optionSingle ::= 'lexWSSuffix' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_624] = "";
    artlhsL[ARTL_ARTV3_optionSingle_624] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_624] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_624] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_626] = "ARTV3.optionSingle ::= 'lexWSSuffix' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_626] = "";
    artlhsL[ARTL_ARTV3_optionSingle_626] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_626] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_626] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_626] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_626] = true;
    artPopD[ARTL_ARTV3_optionSingle_626] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_630] = "ARTV3.optionSingle ::= . 'lexExtents' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_630] = "";
    artlhsL[ARTL_ARTV3_optionSingle_630] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_630] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_631] = "ARTV3.optionSingle ::= 'lexExtents' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_631] = "";
    artlhsL[ARTL_ARTV3_optionSingle_631] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_632] = "ARTV3.optionSingle ::= 'lexExtents' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_632] = "";
    artlhsL[ARTL_ARTV3_optionSingle_632] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_632] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_632] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_634] = "ARTV3.optionSingle ::= 'lexExtents' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_634] = "";
    artlhsL[ARTL_ARTV3_optionSingle_634] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_634] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_634] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_636] = "ARTV3.optionSingle ::= 'lexExtents' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_636] = "";
    artlhsL[ARTL_ARTV3_optionSingle_636] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_636] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_636] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_636] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_636] = true;
    artPopD[ARTL_ARTV3_optionSingle_636] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_640] = "ARTV3.optionSingle ::= . 'lexSegments' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_640] = "";
    artlhsL[ARTL_ARTV3_optionSingle_640] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_640] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_641] = "ARTV3.optionSingle ::= 'lexSegments' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_641] = "";
    artlhsL[ARTL_ARTV3_optionSingle_641] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_642] = "ARTV3.optionSingle ::= 'lexSegments' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_642] = "";
    artlhsL[ARTL_ARTV3_optionSingle_642] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_642] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_642] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_644] = "ARTV3.optionSingle ::= 'lexSegments' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_644] = "";
    artlhsL[ARTL_ARTV3_optionSingle_644] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_644] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_644] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_646] = "ARTV3.optionSingle ::= 'lexSegments' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_646] = "";
    artlhsL[ARTL_ARTV3_optionSingle_646] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_646] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_646] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_646] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_646] = true;
    artPopD[ARTL_ARTV3_optionSingle_646] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_650] = "ARTV3.optionSingle ::= . 'lexRecursive' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_650] = "";
    artlhsL[ARTL_ARTV3_optionSingle_650] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_650] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_651] = "ARTV3.optionSingle ::= 'lexRecursive' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_651] = "";
    artlhsL[ARTL_ARTV3_optionSingle_651] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_652] = "ARTV3.optionSingle ::= 'lexRecursive' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_652] = "";
    artlhsL[ARTL_ARTV3_optionSingle_652] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_652] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_652] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_654] = "ARTV3.optionSingle ::= 'lexRecursive' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_654] = "";
    artlhsL[ARTL_ARTV3_optionSingle_654] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_654] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_654] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_656] = "ARTV3.optionSingle ::= 'lexRecursive' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_656] = "";
    artlhsL[ARTL_ARTV3_optionSingle_656] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_656] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_656] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_656] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_656] = true;
    artPopD[ARTL_ARTV3_optionSingle_656] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_660] = "ARTV3.optionSingle ::= . 'lexPrintTWESet' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_660] = "";
    artlhsL[ARTL_ARTV3_optionSingle_660] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_660] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_661] = "ARTV3.optionSingle ::= 'lexPrintTWESet' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_661] = "";
    artlhsL[ARTL_ARTV3_optionSingle_661] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_662] = "ARTV3.optionSingle ::= 'lexPrintTWESet' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_662] = "";
    artlhsL[ARTL_ARTV3_optionSingle_662] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_662] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_662] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_664] = "ARTV3.optionSingle ::= 'lexPrintTWESet' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_664] = "";
    artlhsL[ARTL_ARTV3_optionSingle_664] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_664] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_664] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_666] = "ARTV3.optionSingle ::= 'lexPrintTWESet' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_666] = "";
    artlhsL[ARTL_ARTV3_optionSingle_666] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_666] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_666] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_666] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_666] = true;
    artPopD[ARTL_ARTV3_optionSingle_666] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_670] = "ARTV3.optionSingle ::= . 'lexDead' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_670] = "";
    artlhsL[ARTL_ARTV3_optionSingle_670] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_670] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_671] = "ARTV3.optionSingle ::= 'lexDead' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_671] = "";
    artlhsL[ARTL_ARTV3_optionSingle_671] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_672] = "ARTV3.optionSingle ::= 'lexDead' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_672] = "";
    artlhsL[ARTL_ARTV3_optionSingle_672] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_672] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_672] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_674] = "ARTV3.optionSingle ::= 'lexDead' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_674] = "";
    artlhsL[ARTL_ARTV3_optionSingle_674] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_674] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_674] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_676] = "ARTV3.optionSingle ::= 'lexDead' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_676] = "";
    artlhsL[ARTL_ARTV3_optionSingle_676] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_676] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_676] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_676] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_676] = true;
    artPopD[ARTL_ARTV3_optionSingle_676] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_680] = "ARTV3.optionSingle ::= . 'lexLongestWithin' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_680] = "";
    artlhsL[ARTL_ARTV3_optionSingle_680] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_680] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_681] = "ARTV3.optionSingle ::= 'lexLongestWithin' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_681] = "";
    artlhsL[ARTL_ARTV3_optionSingle_681] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_682] = "ARTV3.optionSingle ::= 'lexLongestWithin' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_682] = "";
    artlhsL[ARTL_ARTV3_optionSingle_682] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_682] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_682] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_684] = "ARTV3.optionSingle ::= 'lexLongestWithin' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_684] = "";
    artlhsL[ARTL_ARTV3_optionSingle_684] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_684] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_684] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_686] = "ARTV3.optionSingle ::= 'lexLongestWithin' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_686] = "";
    artlhsL[ARTL_ARTV3_optionSingle_686] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_686] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_686] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_686] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_686] = true;
    artPopD[ARTL_ARTV3_optionSingle_686] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_690] = "ARTV3.optionSingle ::= . 'lexLongestAcross' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_690] = "";
    artlhsL[ARTL_ARTV3_optionSingle_690] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_690] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_691] = "ARTV3.optionSingle ::= 'lexLongestAcross' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_691] = "";
    artlhsL[ARTL_ARTV3_optionSingle_691] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_692] = "ARTV3.optionSingle ::= 'lexLongestAcross' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_692] = "";
    artlhsL[ARTL_ARTV3_optionSingle_692] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_692] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_692] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_694] = "ARTV3.optionSingle ::= 'lexLongestAcross' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_694] = "";
    artlhsL[ARTL_ARTV3_optionSingle_694] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_694] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_694] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_696] = "ARTV3.optionSingle ::= 'lexLongestAcross' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_696] = "";
    artlhsL[ARTL_ARTV3_optionSingle_696] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_696] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_696] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_696] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_696] = true;
    artPopD[ARTL_ARTV3_optionSingle_696] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_700] = "ARTV3.optionSingle ::= . 'lexPriority' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_700] = "";
    artlhsL[ARTL_ARTV3_optionSingle_700] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_700] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_701] = "ARTV3.optionSingle ::= 'lexPriority' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_701] = "";
    artlhsL[ARTL_ARTV3_optionSingle_701] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_702] = "ARTV3.optionSingle ::= 'lexPriority' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_702] = "";
    artlhsL[ARTL_ARTV3_optionSingle_702] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_702] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_702] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_704] = "ARTV3.optionSingle ::= 'lexPriority' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_704] = "";
    artlhsL[ARTL_ARTV3_optionSingle_704] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_704] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_704] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_706] = "ARTV3.optionSingle ::= 'lexPriority' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_706] = "";
    artlhsL[ARTL_ARTV3_optionSingle_706] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_706] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_706] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_706] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_706] = true;
    artPopD[ARTL_ARTV3_optionSingle_706] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_710] = "ARTV3.optionSingle ::= . 'postUseTerminals' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_710] = "";
    artlhsL[ARTL_ARTV3_optionSingle_710] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_710] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_711] = "ARTV3.optionSingle ::= 'postUseTerminals' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_711] = "";
    artlhsL[ARTL_ARTV3_optionSingle_711] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_712] = "ARTV3.optionSingle ::= 'postUseTerminals' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_712] = "";
    artlhsL[ARTL_ARTV3_optionSingle_712] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_712] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_712] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_714] = "ARTV3.optionSingle ::= 'postUseTerminals' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_714] = "";
    artlhsL[ARTL_ARTV3_optionSingle_714] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_714] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_714] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_716] = "ARTV3.optionSingle ::= 'postUseTerminals' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_716] = "";
    artlhsL[ARTL_ARTV3_optionSingle_716] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_716] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_716] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_716] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_716] = true;
    artPopD[ARTL_ARTV3_optionSingle_716] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_720] = "ARTV3.optionSingle ::= . 'postLongestWithin' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_720] = "";
    artlhsL[ARTL_ARTV3_optionSingle_720] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_720] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_721] = "ARTV3.optionSingle ::= 'postLongestWithin' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_721] = "";
    artlhsL[ARTL_ARTV3_optionSingle_721] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_722] = "ARTV3.optionSingle ::= 'postLongestWithin' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_722] = "";
    artlhsL[ARTL_ARTV3_optionSingle_722] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_722] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_722] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_724] = "ARTV3.optionSingle ::= 'postLongestWithin' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_724] = "";
    artlhsL[ARTL_ARTV3_optionSingle_724] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_724] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_724] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_726] = "ARTV3.optionSingle ::= 'postLongestWithin' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_726] = "";
    artlhsL[ARTL_ARTV3_optionSingle_726] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_726] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_726] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_726] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_726] = true;
    artPopD[ARTL_ARTV3_optionSingle_726] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_730] = "ARTV3.optionSingle ::= . 'postLongestAcross' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_730] = "";
    artlhsL[ARTL_ARTV3_optionSingle_730] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_730] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_731] = "ARTV3.optionSingle ::= 'postLongestAcross' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_731] = "";
    artlhsL[ARTL_ARTV3_optionSingle_731] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_732] = "ARTV3.optionSingle ::= 'postLongestAcross' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_732] = "";
    artlhsL[ARTL_ARTV3_optionSingle_732] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_732] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_732] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_734] = "ARTV3.optionSingle ::= 'postLongestAcross' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_734] = "";
    artlhsL[ARTL_ARTV3_optionSingle_734] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_734] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_734] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_736] = "ARTV3.optionSingle ::= 'postLongestAcross' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_736] = "";
    artlhsL[ARTL_ARTV3_optionSingle_736] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_736] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_736] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_736] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_736] = true;
    artPopD[ARTL_ARTV3_optionSingle_736] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_740] = "ARTV3.optionSingle ::= . 'postPriority' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_740] = "";
    artlhsL[ARTL_ARTV3_optionSingle_740] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_740] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_741] = "ARTV3.optionSingle ::= 'postPriority' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_741] = "";
    artlhsL[ARTL_ARTV3_optionSingle_741] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_742] = "ARTV3.optionSingle ::= 'postPriority' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_742] = "";
    artlhsL[ARTL_ARTV3_optionSingle_742] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_742] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_742] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_744] = "ARTV3.optionSingle ::= 'postPriority' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_744] = "";
    artlhsL[ARTL_ARTV3_optionSingle_744] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_744] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_744] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_746] = "ARTV3.optionSingle ::= 'postPriority' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_746] = "";
    artlhsL[ARTL_ARTV3_optionSingle_746] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_746] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_746] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_746] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_746] = true;
    artPopD[ARTL_ARTV3_optionSingle_746] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_750] = "ARTV3.optionSingle ::= . 'outputDirectory' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_750] = "";
    artlhsL[ARTL_ARTV3_optionSingle_750] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_750] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_751] = "ARTV3.optionSingle ::= 'outputDirectory' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_751] = "";
    artlhsL[ARTL_ARTV3_optionSingle_751] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_752] = "ARTV3.optionSingle ::= 'outputDirectory' . ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_752] = "";
    artlhsL[ARTL_ARTV3_optionSingle_752] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_752] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_752] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_754] = "ARTV3.optionSingle ::= 'outputDirectory' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_754] = "";
    artlhsL[ARTL_ARTV3_optionSingle_754] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_754] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_754] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_756] = "ARTV3.optionSingle ::= 'outputDirectory' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .";
    artLabelStrings[ARTL_ARTV3_optionSingle_756] = "";
    artlhsL[ARTL_ARTV3_optionSingle_756] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_756] = ARTL_ARTV3_STRING_PLAIN_SQ;
    artKindOfs[ARTL_ARTV3_optionSingle_756] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_756] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_756] = true;
    artPopD[ARTL_ARTV3_optionSingle_756] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_760] = "ARTV3.optionSingle ::= . 'namespace' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_760] = "";
    artlhsL[ARTL_ARTV3_optionSingle_760] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_760] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_761] = "ARTV3.optionSingle ::= 'namespace' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_761] = "";
    artlhsL[ARTL_ARTV3_optionSingle_761] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_762] = "ARTV3.optionSingle ::= 'namespace' . ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_762] = "";
    artlhsL[ARTL_ARTV3_optionSingle_762] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_762] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_762] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_764] = "ARTV3.optionSingle ::= 'namespace' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_764] = "";
    artlhsL[ARTL_ARTV3_optionSingle_764] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_764] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_764] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_766] = "ARTV3.optionSingle ::= 'namespace' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .";
    artLabelStrings[ARTL_ARTV3_optionSingle_766] = "";
    artlhsL[ARTL_ARTV3_optionSingle_766] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_766] = ARTL_ARTV3_STRING_PLAIN_SQ;
    artKindOfs[ARTL_ARTV3_optionSingle_766] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_766] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_766] = true;
    artPopD[ARTL_ARTV3_optionSingle_766] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_770] = "ARTV3.optionSingle ::= . 'lexerName' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_770] = "";
    artlhsL[ARTL_ARTV3_optionSingle_770] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_770] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_771] = "ARTV3.optionSingle ::= 'lexerName' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_771] = "";
    artlhsL[ARTL_ARTV3_optionSingle_771] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_772] = "ARTV3.optionSingle ::= 'lexerName' . ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_772] = "";
    artlhsL[ARTL_ARTV3_optionSingle_772] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_772] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_772] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_774] = "ARTV3.optionSingle ::= 'lexerName' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_774] = "";
    artlhsL[ARTL_ARTV3_optionSingle_774] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_774] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_774] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_776] = "ARTV3.optionSingle ::= 'lexerName' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .";
    artLabelStrings[ARTL_ARTV3_optionSingle_776] = "";
    artlhsL[ARTL_ARTV3_optionSingle_776] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_776] = ARTL_ARTV3_STRING_PLAIN_SQ;
    artKindOfs[ARTL_ARTV3_optionSingle_776] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_776] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_776] = true;
    artPopD[ARTL_ARTV3_optionSingle_776] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_780] = "ARTV3.optionSingle ::= . 'parserName' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_780] = "";
    artlhsL[ARTL_ARTV3_optionSingle_780] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_780] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_781] = "ARTV3.optionSingle ::= 'parserName' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_781] = "";
    artlhsL[ARTL_ARTV3_optionSingle_781] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_782] = "ARTV3.optionSingle ::= 'parserName' . ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_782] = "";
    artlhsL[ARTL_ARTV3_optionSingle_782] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_782] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_782] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_784] = "ARTV3.optionSingle ::= 'parserName' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ ";
    artLabelStrings[ARTL_ARTV3_optionSingle_784] = "";
    artlhsL[ARTL_ARTV3_optionSingle_784] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_784] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_784] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_786] = "ARTV3.optionSingle ::= 'parserName' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .";
    artLabelStrings[ARTL_ARTV3_optionSingle_786] = "";
    artlhsL[ARTL_ARTV3_optionSingle_786] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_786] = ARTL_ARTV3_STRING_PLAIN_SQ;
    artKindOfs[ARTL_ARTV3_optionSingle_786] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_786] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_786] = true;
    artPopD[ARTL_ARTV3_optionSingle_786] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_790] = "ARTV3.optionSingle ::= . 'generateDynamic' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_790] = "";
    artlhsL[ARTL_ARTV3_optionSingle_790] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_790] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_790] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_791] = "ARTV3.optionSingle ::= 'generateDynamic' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_791] = "";
    artlhsL[ARTL_ARTV3_optionSingle_791] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_791] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_792] = "ARTV3.optionSingle ::= 'generateDynamic' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_792] = "";
    artlhsL[ARTL_ARTV3_optionSingle_792] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_792] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_792] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_792] = true;
    artPopD[ARTL_ARTV3_optionSingle_792] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_796] = "ARTV3.optionSingle ::= . 'generateStatic' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_796] = "";
    artlhsL[ARTL_ARTV3_optionSingle_796] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_796] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_796] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_797] = "ARTV3.optionSingle ::= 'generateStatic' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_797] = "";
    artlhsL[ARTL_ARTV3_optionSingle_797] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_797] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_798] = "ARTV3.optionSingle ::= 'generateStatic' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_798] = "";
    artlhsL[ARTL_ARTV3_optionSingle_798] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_798] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_798] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_798] = true;
    artPopD[ARTL_ARTV3_optionSingle_798] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_802] = "ARTV3.optionSingle ::= . 'generateState' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_802] = "";
    artlhsL[ARTL_ARTV3_optionSingle_802] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_802] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_802] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_803] = "ARTV3.optionSingle ::= 'generateState' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_803] = "";
    artlhsL[ARTL_ARTV3_optionSingle_803] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_803] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_804] = "ARTV3.optionSingle ::= 'generateState' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_804] = "";
    artlhsL[ARTL_ARTV3_optionSingle_804] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_804] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_804] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_804] = true;
    artPopD[ARTL_ARTV3_optionSingle_804] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_808] = "ARTV3.optionSingle ::= . 'generateFragment' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_808] = "";
    artlhsL[ARTL_ARTV3_optionSingle_808] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_808] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_808] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_809] = "ARTV3.optionSingle ::= 'generateFragment' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_809] = "";
    artlhsL[ARTL_ARTV3_optionSingle_809] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_809] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_810] = "ARTV3.optionSingle ::= 'generateFragment' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_810] = "";
    artlhsL[ARTL_ARTV3_optionSingle_810] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_810] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_810] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_810] = true;
    artPopD[ARTL_ARTV3_optionSingle_810] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_814] = "ARTV3.optionSingle ::= . 'generatePool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_814] = "";
    artlhsL[ARTL_ARTV3_optionSingle_814] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_814] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_814] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_815] = "ARTV3.optionSingle ::= 'generatePool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_815] = "";
    artlhsL[ARTL_ARTV3_optionSingle_815] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_815] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_816] = "ARTV3.optionSingle ::= 'generatePool' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_816] = "";
    artlhsL[ARTL_ARTV3_optionSingle_816] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_816] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_816] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_816] = true;
    artPopD[ARTL_ARTV3_optionSingle_816] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_820] = "ARTV3.optionSingle ::= . 'generateJava' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_820] = "";
    artlhsL[ARTL_ARTV3_optionSingle_820] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_820] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_820] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_821] = "ARTV3.optionSingle ::= 'generateJava' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_821] = "";
    artlhsL[ARTL_ARTV3_optionSingle_821] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_821] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_822] = "ARTV3.optionSingle ::= 'generateJava' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_822] = "";
    artlhsL[ARTL_ARTV3_optionSingle_822] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_822] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_822] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_822] = true;
    artPopD[ARTL_ARTV3_optionSingle_822] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_826] = "ARTV3.optionSingle ::= . 'generateC++' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_826] = "";
    artlhsL[ARTL_ARTV3_optionSingle_826] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_826] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_826] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_827] = "ARTV3.optionSingle ::= 'generateC++' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_827] = "";
    artlhsL[ARTL_ARTV3_optionSingle_827] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_827] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_828] = "ARTV3.optionSingle ::= 'generateC++' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_828] = "";
    artlhsL[ARTL_ARTV3_optionSingle_828] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_828] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_828] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_828] = true;
    artPopD[ARTL_ARTV3_optionSingle_828] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_832] = "ARTV3.optionSingle ::= . 'predictivePops' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_832] = "";
    artlhsL[ARTL_ARTV3_optionSingle_832] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_832] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_833] = "ARTV3.optionSingle ::= 'predictivePops' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_833] = "";
    artlhsL[ARTL_ARTV3_optionSingle_833] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_834] = "ARTV3.optionSingle ::= 'predictivePops' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_834] = "";
    artlhsL[ARTL_ARTV3_optionSingle_834] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_834] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_834] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_836] = "ARTV3.optionSingle ::= 'predictivePops' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_836] = "";
    artlhsL[ARTL_ARTV3_optionSingle_836] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_836] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_836] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_838] = "ARTV3.optionSingle ::= 'predictivePops' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_838] = "";
    artlhsL[ARTL_ARTV3_optionSingle_838] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_838] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_838] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_838] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_838] = true;
    artPopD[ARTL_ARTV3_optionSingle_838] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_842] = "ARTV3.optionSingle ::= . 'FIFODescriptors' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_842] = "";
    artlhsL[ARTL_ARTV3_optionSingle_842] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_842] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_843] = "ARTV3.optionSingle ::= 'FIFODescriptors' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_843] = "";
    artlhsL[ARTL_ARTV3_optionSingle_843] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_844] = "ARTV3.optionSingle ::= 'FIFODescriptors' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_844] = "";
    artlhsL[ARTL_ARTV3_optionSingle_844] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_844] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_844] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_846] = "ARTV3.optionSingle ::= 'FIFODescriptors' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_846] = "";
    artlhsL[ARTL_ARTV3_optionSingle_846] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_846] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_846] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_848] = "ARTV3.optionSingle ::= 'FIFODescriptors' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_848] = "";
    artlhsL[ARTL_ARTV3_optionSingle_848] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_848] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_848] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_848] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_848] = true;
    artPopD[ARTL_ARTV3_optionSingle_848] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_852] = "ARTV3.optionSingle ::= . 'suppressPopGuard' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_852] = "";
    artlhsL[ARTL_ARTV3_optionSingle_852] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_852] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_853] = "ARTV3.optionSingle ::= 'suppressPopGuard' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_853] = "";
    artlhsL[ARTL_ARTV3_optionSingle_853] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_854] = "ARTV3.optionSingle ::= 'suppressPopGuard' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_854] = "";
    artlhsL[ARTL_ARTV3_optionSingle_854] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_854] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_854] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_856] = "ARTV3.optionSingle ::= 'suppressPopGuard' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_856] = "";
    artlhsL[ARTL_ARTV3_optionSingle_856] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_856] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_856] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_858] = "ARTV3.optionSingle ::= 'suppressPopGuard' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_858] = "";
    artlhsL[ARTL_ARTV3_optionSingle_858] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_858] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_858] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_858] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_858] = true;
    artPopD[ARTL_ARTV3_optionSingle_858] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_862] = "ARTV3.optionSingle ::= . 'suppressProductionGuard' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_862] = "";
    artlhsL[ARTL_ARTV3_optionSingle_862] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_862] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_863] = "ARTV3.optionSingle ::= 'suppressProductionGuard' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_863] = "";
    artlhsL[ARTL_ARTV3_optionSingle_863] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_864] = "ARTV3.optionSingle ::= 'suppressProductionGuard' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_864] = "";
    artlhsL[ARTL_ARTV3_optionSingle_864] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_864] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_864] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_866] = "ARTV3.optionSingle ::= 'suppressProductionGuard' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_866] = "";
    artlhsL[ARTL_ARTV3_optionSingle_866] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_866] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_866] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_868] = "ARTV3.optionSingle ::= 'suppressProductionGuard' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_868] = "";
    artlhsL[ARTL_ARTV3_optionSingle_868] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_868] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_868] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_868] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_868] = true;
    artPopD[ARTL_ARTV3_optionSingle_868] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_872] = "ARTV3.optionSingle ::= . 'suppressTestRepeat' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_872] = "";
    artlhsL[ARTL_ARTV3_optionSingle_872] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_872] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_873] = "ARTV3.optionSingle ::= 'suppressTestRepeat' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_873] = "";
    artlhsL[ARTL_ARTV3_optionSingle_873] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_874] = "ARTV3.optionSingle ::= 'suppressTestRepeat' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_874] = "";
    artlhsL[ARTL_ARTV3_optionSingle_874] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_874] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_874] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_876] = "ARTV3.optionSingle ::= 'suppressTestRepeat' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_876] = "";
    artlhsL[ARTL_ARTV3_optionSingle_876] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_876] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_876] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_878] = "ARTV3.optionSingle ::= 'suppressTestRepeat' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_878] = "";
    artlhsL[ARTL_ARTV3_optionSingle_878] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_878] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_878] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_878] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_878] = true;
    artPopD[ARTL_ARTV3_optionSingle_878] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_882] = "ARTV3.optionSingle ::= . 'suppressSemantics' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_882] = "";
    artlhsL[ARTL_ARTV3_optionSingle_882] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_882] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_883] = "ARTV3.optionSingle ::= 'suppressSemantics' ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_883] = "";
    artlhsL[ARTL_ARTV3_optionSingle_883] = ARTL_ARTV3_optionSingle;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_884] = "ARTV3.optionSingle ::= 'suppressSemantics' . ARTV3.optionalColon ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_884] = "";
    artlhsL[ARTL_ARTV3_optionSingle_884] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_884] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_optionSingle_884] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_886] = "ARTV3.optionSingle ::= 'suppressSemantics' ARTV3.optionalColon . ARTV3.trueFalse ";
    artLabelStrings[ARTL_ARTV3_optionSingle_886] = "";
    artlhsL[ARTL_ARTV3_optionSingle_886] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_886] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionSingle_886] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_888] = "ARTV3.optionSingle ::= 'suppressSemantics' ARTV3.optionalColon ARTV3.trueFalse .";
    artLabelStrings[ARTL_ARTV3_optionSingle_888] = "";
    artlhsL[ARTL_ARTV3_optionSingle_888] = ARTL_ARTV3_optionSingle;
    artSlotInstanceOfs[ARTL_ARTV3_optionSingle_888] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_optionSingle_888] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_888] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_888] = true;
    artPopD[ARTL_ARTV3_optionSingle_888] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_892] = "ARTV3.optionSingle ::= . 'lexerData' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_892] = "";
    artlhsL[ARTL_ARTV3_optionSingle_892] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_892] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_892] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_893] = "ARTV3.optionSingle ::= 'lexerData' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_893] = "";
    artlhsL[ARTL_ARTV3_optionSingle_893] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_893] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_894] = "ARTV3.optionSingle ::= 'lexerData' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_894] = "";
    artlhsL[ARTL_ARTV3_optionSingle_894] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_894] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_894] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_894] = true;
    artPopD[ARTL_ARTV3_optionSingle_894] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_898] = "ARTV3.optionSingle ::= . 'earley' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_898] = "";
    artlhsL[ARTL_ARTV3_optionSingle_898] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_898] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_898] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_899] = "ARTV3.optionSingle ::= 'earley' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_899] = "";
    artlhsL[ARTL_ARTV3_optionSingle_899] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_899] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_900] = "ARTV3.optionSingle ::= 'earley' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_900] = "";
    artlhsL[ARTL_ARTV3_optionSingle_900] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_900] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_900] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_900] = true;
    artPopD[ARTL_ARTV3_optionSingle_900] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_904] = "ARTV3.optionSingle ::= . 'earley2007LinkedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_904] = "";
    artlhsL[ARTL_ARTV3_optionSingle_904] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_904] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_904] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_905] = "ARTV3.optionSingle ::= 'earley2007LinkedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_905] = "";
    artlhsL[ARTL_ARTV3_optionSingle_905] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_905] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_906] = "ARTV3.optionSingle ::= 'earley2007LinkedAPI' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_906] = "";
    artlhsL[ARTL_ARTV3_optionSingle_906] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_906] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_906] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_906] = true;
    artPopD[ARTL_ARTV3_optionSingle_906] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_910] = "ARTV3.optionSingle ::= . 'earleyLinkedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_910] = "";
    artlhsL[ARTL_ARTV3_optionSingle_910] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_910] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_910] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_911] = "ARTV3.optionSingle ::= 'earleyLinkedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_911] = "";
    artlhsL[ARTL_ARTV3_optionSingle_911] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_911] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_912] = "ARTV3.optionSingle ::= 'earleyLinkedAPI' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_912] = "";
    artlhsL[ARTL_ARTV3_optionSingle_912] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_912] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_912] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_912] = true;
    artPopD[ARTL_ARTV3_optionSingle_912] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_916] = "ARTV3.optionSingle ::= . 'earleyIndexedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_916] = "";
    artlhsL[ARTL_ARTV3_optionSingle_916] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_916] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_916] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_917] = "ARTV3.optionSingle ::= 'earleyIndexedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_917] = "";
    artlhsL[ARTL_ARTV3_optionSingle_917] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_917] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_918] = "ARTV3.optionSingle ::= 'earleyIndexedAPI' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_918] = "";
    artlhsL[ARTL_ARTV3_optionSingle_918] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_918] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_918] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_918] = true;
    artPopD[ARTL_ARTV3_optionSingle_918] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_922] = "ARTV3.optionSingle ::= . 'earleyIndexedPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_922] = "";
    artlhsL[ARTL_ARTV3_optionSingle_922] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_922] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_922] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_923] = "ARTV3.optionSingle ::= 'earleyIndexedPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_923] = "";
    artlhsL[ARTL_ARTV3_optionSingle_923] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_923] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_924] = "ARTV3.optionSingle ::= 'earleyIndexedPool' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_924] = "";
    artlhsL[ARTL_ARTV3_optionSingle_924] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_924] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_924] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_924] = true;
    artPopD[ARTL_ARTV3_optionSingle_924] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_928] = "ARTV3.optionSingle ::= . 'earleyIndexedData' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_928] = "";
    artlhsL[ARTL_ARTV3_optionSingle_928] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_928] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_928] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_929] = "ARTV3.optionSingle ::= 'earleyIndexedData' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_929] = "";
    artlhsL[ARTL_ARTV3_optionSingle_929] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_929] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_930] = "ARTV3.optionSingle ::= 'earleyIndexedData' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_930] = "";
    artlhsL[ARTL_ARTV3_optionSingle_930] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_930] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_930] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_930] = true;
    artPopD[ARTL_ARTV3_optionSingle_930] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_934] = "ARTV3.optionSingle ::= . 'earleyTable' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_934] = "";
    artlhsL[ARTL_ARTV3_optionSingle_934] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_934] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_934] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_935] = "ARTV3.optionSingle ::= 'earleyTable' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_935] = "";
    artlhsL[ARTL_ARTV3_optionSingle_935] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_935] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_936] = "ARTV3.optionSingle ::= 'earleyTable' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_936] = "";
    artlhsL[ARTL_ARTV3_optionSingle_936] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_936] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_936] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_936] = true;
    artPopD[ARTL_ARTV3_optionSingle_936] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_940] = "ARTV3.optionSingle ::= . 'earleyTableLinkedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_940] = "";
    artlhsL[ARTL_ARTV3_optionSingle_940] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_940] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_940] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_941] = "ARTV3.optionSingle ::= 'earleyTableLinkedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_941] = "";
    artlhsL[ARTL_ARTV3_optionSingle_941] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_941] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_942] = "ARTV3.optionSingle ::= 'earleyTableLinkedAPI' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_942] = "";
    artlhsL[ARTL_ARTV3_optionSingle_942] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_942] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_942] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_942] = true;
    artPopD[ARTL_ARTV3_optionSingle_942] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_946] = "ARTV3.optionSingle ::= . 'earleyTableIndexedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_946] = "";
    artlhsL[ARTL_ARTV3_optionSingle_946] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_946] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_946] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_947] = "ARTV3.optionSingle ::= 'earleyTableIndexedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_947] = "";
    artlhsL[ARTL_ARTV3_optionSingle_947] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_947] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_948] = "ARTV3.optionSingle ::= 'earleyTableIndexedAPI' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_948] = "";
    artlhsL[ARTL_ARTV3_optionSingle_948] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_948] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_948] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_948] = true;
    artPopD[ARTL_ARTV3_optionSingle_948] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_952] = "ARTV3.optionSingle ::= . 'earleyTableIndexedPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_952] = "";
    artlhsL[ARTL_ARTV3_optionSingle_952] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_952] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_952] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_953] = "ARTV3.optionSingle ::= 'earleyTableIndexedPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_953] = "";
    artlhsL[ARTL_ARTV3_optionSingle_953] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_953] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_954] = "ARTV3.optionSingle ::= 'earleyTableIndexedPool' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_954] = "";
    artlhsL[ARTL_ARTV3_optionSingle_954] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_954] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_954] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_954] = true;
    artPopD[ARTL_ARTV3_optionSingle_954] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_958] = "ARTV3.optionSingle ::= . 'earleyTableIndexedData' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_958] = "";
    artlhsL[ARTL_ARTV3_optionSingle_958] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_958] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_958] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_959] = "ARTV3.optionSingle ::= 'earleyTableIndexedData' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_959] = "";
    artlhsL[ARTL_ARTV3_optionSingle_959] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_959] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_960] = "ARTV3.optionSingle ::= 'earleyTableIndexedData' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_960] = "";
    artlhsL[ARTL_ARTV3_optionSingle_960] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_960] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_960] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_960] = true;
    artPopD[ARTL_ARTV3_optionSingle_960] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_964] = "ARTV3.optionSingle ::= . 'cnp' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_964] = "";
    artlhsL[ARTL_ARTV3_optionSingle_964] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_964] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_964] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_965] = "ARTV3.optionSingle ::= 'cnp' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_965] = "";
    artlhsL[ARTL_ARTV3_optionSingle_965] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_965] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_966] = "ARTV3.optionSingle ::= 'cnp' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_966] = "";
    artlhsL[ARTL_ARTV3_optionSingle_966] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_966] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_966] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_966] = true;
    artPopD[ARTL_ARTV3_optionSingle_966] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_970] = "ARTV3.optionSingle ::= . 'cnpLinkedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_970] = "";
    artlhsL[ARTL_ARTV3_optionSingle_970] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_970] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_970] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_971] = "ARTV3.optionSingle ::= 'cnpLinkedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_971] = "";
    artlhsL[ARTL_ARTV3_optionSingle_971] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_971] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_972] = "ARTV3.optionSingle ::= 'cnpLinkedAPI' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_972] = "";
    artlhsL[ARTL_ARTV3_optionSingle_972] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_972] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_972] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_972] = true;
    artPopD[ARTL_ARTV3_optionSingle_972] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_976] = "ARTV3.optionSingle ::= . 'cnpIndexedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_976] = "";
    artlhsL[ARTL_ARTV3_optionSingle_976] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_976] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_976] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_977] = "ARTV3.optionSingle ::= 'cnpIndexedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_977] = "";
    artlhsL[ARTL_ARTV3_optionSingle_977] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_977] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_978] = "ARTV3.optionSingle ::= 'cnpIndexedAPI' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_978] = "";
    artlhsL[ARTL_ARTV3_optionSingle_978] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_978] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_978] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_978] = true;
    artPopD[ARTL_ARTV3_optionSingle_978] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_982] = "ARTV3.optionSingle ::= . 'cnpIndexedPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_982] = "";
    artlhsL[ARTL_ARTV3_optionSingle_982] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_982] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_982] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_983] = "ARTV3.optionSingle ::= 'cnpIndexedPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_983] = "";
    artlhsL[ARTL_ARTV3_optionSingle_983] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_983] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_984] = "ARTV3.optionSingle ::= 'cnpIndexedPool' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_984] = "";
    artlhsL[ARTL_ARTV3_optionSingle_984] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_984] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_984] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_984] = true;
    artPopD[ARTL_ARTV3_optionSingle_984] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_988] = "ARTV3.optionSingle ::= . 'cnpGeneratorPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_988] = "";
    artlhsL[ARTL_ARTV3_optionSingle_988] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_988] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_988] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_989] = "ARTV3.optionSingle ::= 'cnpGeneratorPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_989] = "";
    artlhsL[ARTL_ARTV3_optionSingle_989] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_989] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_990] = "ARTV3.optionSingle ::= 'cnpGeneratorPool' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_990] = "";
    artlhsL[ARTL_ARTV3_optionSingle_990] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_990] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_990] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_990] = true;
    artPopD[ARTL_ARTV3_optionSingle_990] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_994] = "ARTV3.optionSingle ::= . 'lcnp' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_994] = "";
    artlhsL[ARTL_ARTV3_optionSingle_994] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_994] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_994] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_995] = "ARTV3.optionSingle ::= 'lcnp' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_995] = "";
    artlhsL[ARTL_ARTV3_optionSingle_995] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_995] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_996] = "ARTV3.optionSingle ::= 'lcnp' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_996] = "";
    artlhsL[ARTL_ARTV3_optionSingle_996] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_996] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_996] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_996] = true;
    artPopD[ARTL_ARTV3_optionSingle_996] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1000] = "ARTV3.optionSingle ::= . 'lcnpLinkedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1000] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1000] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1000] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_1000] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1001] = "ARTV3.optionSingle ::= 'lcnpLinkedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1001] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1001] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_1001] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1002] = "ARTV3.optionSingle ::= 'lcnpLinkedAPI' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_1002] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1002] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1002] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_1002] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_1002] = true;
    artPopD[ARTL_ARTV3_optionSingle_1002] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1006] = "ARTV3.optionSingle ::= . 'lcnpIndexedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1006] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1006] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1006] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_1006] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1007] = "ARTV3.optionSingle ::= 'lcnpIndexedAPI' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1007] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1007] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_1007] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1008] = "ARTV3.optionSingle ::= 'lcnpIndexedAPI' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_1008] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1008] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1008] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_1008] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_1008] = true;
    artPopD[ARTL_ARTV3_optionSingle_1008] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1012] = "ARTV3.optionSingle ::= . 'lcnpIndexedPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1012] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1012] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1012] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_1012] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1013] = "ARTV3.optionSingle ::= 'lcnpIndexedPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1013] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1013] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_1013] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1014] = "ARTV3.optionSingle ::= 'lcnpIndexedPool' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_1014] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1014] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1014] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_1014] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_1014] = true;
    artPopD[ARTL_ARTV3_optionSingle_1014] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1018] = "ARTV3.optionSingle ::= . 'lcnpGeneratorPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1018] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1018] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1018] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_1018] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1019] = "ARTV3.optionSingle ::= 'lcnpGeneratorPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1019] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1019] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_1019] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1020] = "ARTV3.optionSingle ::= 'lcnpGeneratorPool' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_1020] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1020] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1020] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_1020] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_1020] = true;
    artPopD[ARTL_ARTV3_optionSingle_1020] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1024] = "ARTV3.optionSingle ::= . 'gll' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1024] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1024] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1024] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_1024] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1025] = "ARTV3.optionSingle ::= 'gll' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1025] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1025] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_1025] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1026] = "ARTV3.optionSingle ::= 'gll' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_1026] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1026] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1026] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_1026] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_1026] = true;
    artPopD[ARTL_ARTV3_optionSingle_1026] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1030] = "ARTV3.optionSingle ::= . 'gllGeneratorPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1030] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1030] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1030] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_1030] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1031] = "ARTV3.optionSingle ::= 'gllGeneratorPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1031] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1031] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_1031] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1032] = "ARTV3.optionSingle ::= 'gllGeneratorPool' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_1032] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1032] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1032] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_1032] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_1032] = true;
    artPopD[ARTL_ARTV3_optionSingle_1032] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1036] = "ARTV3.optionSingle ::= . 'gllTWEGeneratorPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1036] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1036] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1036] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_1036] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1037] = "ARTV3.optionSingle ::= 'gllTWEGeneratorPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1037] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1037] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_1037] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1038] = "ARTV3.optionSingle ::= 'gllTWEGeneratorPool' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_1038] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1038] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1038] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_1038] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_1038] = true;
    artPopD[ARTL_ARTV3_optionSingle_1038] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1042] = "ARTV3.optionSingle ::= . 'gllClusteredGeneratorPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1042] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1042] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1042] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_1042] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1043] = "ARTV3.optionSingle ::= 'gllClusteredGeneratorPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1043] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1043] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_1043] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1044] = "ARTV3.optionSingle ::= 'gllClusteredGeneratorPool' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_1044] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1044] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1044] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_1044] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_1044] = true;
    artPopD[ARTL_ARTV3_optionSingle_1044] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1048] = "ARTV3.optionSingle ::= . 'mgll' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1048] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1048] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1048] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_1048] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1049] = "ARTV3.optionSingle ::= 'mgll' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1049] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1049] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_1049] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1050] = "ARTV3.optionSingle ::= 'mgll' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_1050] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1050] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1050] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_1050] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_1050] = true;
    artPopD[ARTL_ARTV3_optionSingle_1050] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1054] = "ARTV3.optionSingle ::= . 'mgllGeneratorPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1054] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1054] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1054] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_1054] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1055] = "ARTV3.optionSingle ::= 'mgllGeneratorPool' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1055] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1055] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_1055] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1056] = "ARTV3.optionSingle ::= 'mgllGeneratorPool' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_1056] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1056] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1056] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_1056] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_1056] = true;
    artPopD[ARTL_ARTV3_optionSingle_1056] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1060] = "ARTV3.optionSingle ::= . 'osbrd' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1060] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1060] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1060] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_1060] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1061] = "ARTV3.optionSingle ::= 'osbrd' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1061] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1061] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_1061] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1062] = "ARTV3.optionSingle ::= 'osbrd' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_1062] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1062] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1062] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_1062] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_1062] = true;
    artPopD[ARTL_ARTV3_optionSingle_1062] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1066] = "ARTV3.optionSingle ::= . 'osbrdGenerator' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1066] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1066] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1066] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionSingle_1066] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1067] = "ARTV3.optionSingle ::= 'osbrdGenerator' ";
    artLabelStrings[ARTL_ARTV3_optionSingle_1067] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1067] = ARTL_ARTV3_optionSingle;
    artPopD[ARTL_ARTV3_optionSingle_1067] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionSingle_1068] = "ARTV3.optionSingle ::= 'osbrdGenerator' .";
    artLabelStrings[ARTL_ARTV3_optionSingle_1068] = "";
    artlhsL[ARTL_ARTV3_optionSingle_1068] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_optionSingle_1068] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionSingle_1068] = true;
    arteoR_pL[ARTL_ARTV3_optionSingle_1068] = true;
    artPopD[ARTL_ARTV3_optionSingle_1068] = true;
  }

  public void artTableInitialiser_ARTV3_optionalColon() {
    artLabelInternalStrings[ARTL_ARTV3_optionalColon] = "ARTV3.optionalColon";
    artLabelStrings[ARTL_ARTV3_optionalColon] = "ARTV3.optionalColon";
    artKindOfs[ARTL_ARTV3_optionalColon] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_optionalColon_1072] = "ARTV3.optionalColon ::= . # ";
    artLabelStrings[ARTL_ARTV3_optionalColon_1072] = "";
    artlhsL[ARTL_ARTV3_optionalColon_1072] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionalColon_1072] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionalColon_1072] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionalColon_1074] = "ARTV3.optionalColon ::= # .";
    artLabelStrings[ARTL_ARTV3_optionalColon_1074] = "";
    artlhsL[ARTL_ARTV3_optionalColon_1074] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionalColon_1074] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionalColon_1074] = true;
    arteoR_pL[ARTL_ARTV3_optionalColon_1074] = true;
    artPopD[ARTL_ARTV3_optionalColon_1074] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionalColon_1076] = "ARTV3.optionalColon ::= . ':' ";
    artLabelStrings[ARTL_ARTV3_optionalColon_1076] = "";
    artlhsL[ARTL_ARTV3_optionalColon_1076] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionalColon_1076] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_optionalColon_1076] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionalColon_1077] = "ARTV3.optionalColon ::= ':' ";
    artLabelStrings[ARTL_ARTV3_optionalColon_1077] = "";
    artlhsL[ARTL_ARTV3_optionalColon_1077] = ARTL_ARTV3_optionalColon;
    artPopD[ARTL_ARTV3_optionalColon_1077] = true;
    artLabelInternalStrings[ARTL_ARTV3_optionalColon_1078] = "ARTV3.optionalColon ::= ':' .";
    artLabelStrings[ARTL_ARTV3_optionalColon_1078] = "";
    artlhsL[ARTL_ARTV3_optionalColon_1078] = ARTL_ARTV3_optionalColon;
    artKindOfs[ARTL_ARTV3_optionalColon_1078] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_optionalColon_1078] = true;
    arteoR_pL[ARTL_ARTV3_optionalColon_1078] = true;
    artPopD[ARTL_ARTV3_optionalColon_1078] = true;
  }

  public void artTableInitialiser_ARTV3_options() {
    artLabelInternalStrings[ARTL_ARTV3_options] = "ARTV3.options";
    artLabelStrings[ARTL_ARTV3_options] = "ARTV3.options";
    artKindOfs[ARTL_ARTV3_options] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_options_250] = "ARTV3.options ::= . ARTV3.optionSingle ";
    artLabelStrings[ARTL_ARTV3_options_250] = "";
    artlhsL[ARTL_ARTV3_options_250] = ARTL_ARTV3_options;
    artKindOfs[ARTL_ARTV3_options_250] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_options_252] = "ARTV3.options ::= ARTV3.optionSingle .";
    artLabelStrings[ARTL_ARTV3_options_252] = "";
    artlhsL[ARTL_ARTV3_options_252] = ARTL_ARTV3_options;
    artSlotInstanceOfs[ARTL_ARTV3_options_252] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_options_252] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_options_252] = true;
    arteoR_pL[ARTL_ARTV3_options_252] = true;
    artPopD[ARTL_ARTV3_options_252] = true;
    artLabelInternalStrings[ARTL_ARTV3_options_254] = "ARTV3.options ::= . ARTV3.optionSingle ARTV3.options ";
    artLabelStrings[ARTL_ARTV3_options_254] = "";
    artlhsL[ARTL_ARTV3_options_254] = ARTL_ARTV3_options;
    artKindOfs[ARTL_ARTV3_options_254] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_options_256] = "ARTV3.options ::= ARTV3.optionSingle . ARTV3.options ";
    artLabelStrings[ARTL_ARTV3_options_256] = "";
    artlhsL[ARTL_ARTV3_options_256] = ARTL_ARTV3_options;
    artSlotInstanceOfs[ARTL_ARTV3_options_256] = ARTL_ARTV3_optionSingle;
    artKindOfs[ARTL_ARTV3_options_256] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_options_256] = true;
    artLabelInternalStrings[ARTL_ARTV3_options_258] = "ARTV3.options ::= ARTV3.optionSingle ARTV3.options .";
    artLabelStrings[ARTL_ARTV3_options_258] = "";
    artlhsL[ARTL_ARTV3_options_258] = ARTL_ARTV3_options;
    artSlotInstanceOfs[ARTL_ARTV3_options_258] = ARTL_ARTV3_options;
    artKindOfs[ARTL_ARTV3_options_258] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_options_258] = true;
    arteoR_pL[ARTL_ARTV3_options_258] = true;
    artPopD[ARTL_ARTV3_options_258] = true;
  }

  public void artTableInitialiser_ARTV3_rhs() {
    artLabelInternalStrings[ARTL_ARTV3_rhs] = "ARTV3.rhs";
    artLabelStrings[ARTL_ARTV3_rhs] = "ARTV3.rhs";
    artKindOfs[ARTL_ARTV3_rhs] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_rhs_1158] = "ARTV3.rhs ::= . ARTV3.cat ";
    artLabelStrings[ARTL_ARTV3_rhs_1158] = "";
    artlhsL[ARTL_ARTV3_rhs_1158] = ARTL_ARTV3_rhs;
    artKindOfs[ARTL_ARTV3_rhs_1158] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_rhs_1160] = "ARTV3.rhs ::= ARTV3.cat .";
    artLabelStrings[ARTL_ARTV3_rhs_1160] = "";
    artlhsL[ARTL_ARTV3_rhs_1160] = ARTL_ARTV3_rhs;
    artSlotInstanceOfs[ARTL_ARTV3_rhs_1160] = ARTL_ARTV3_cat;
    artKindOfs[ARTL_ARTV3_rhs_1160] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_rhs_1160] = true;
    arteoR_pL[ARTL_ARTV3_rhs_1160] = true;
    artPopD[ARTL_ARTV3_rhs_1160] = true;
    artLabelInternalStrings[ARTL_ARTV3_rhs_1164] = "ARTV3.rhs ::= . ARTV3.cat '|' ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_rhs_1164] = "";
    artlhsL[ARTL_ARTV3_rhs_1164] = ARTL_ARTV3_rhs;
    artKindOfs[ARTL_ARTV3_rhs_1164] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_rhs_1166] = "ARTV3.rhs ::= ARTV3.cat . '|' ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_rhs_1166] = "";
    artlhsL[ARTL_ARTV3_rhs_1166] = ARTL_ARTV3_rhs;
    artSlotInstanceOfs[ARTL_ARTV3_rhs_1166] = ARTL_ARTV3_cat;
    artKindOfs[ARTL_ARTV3_rhs_1166] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_rhs_1166] = true;
    artLabelInternalStrings[ARTL_ARTV3_rhs_1169] = "ARTV3.rhs ::= ARTV3.cat '|' ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_rhs_1169] = "";
    artlhsL[ARTL_ARTV3_rhs_1169] = ARTL_ARTV3_rhs;
    artLabelInternalStrings[ARTL_ARTV3_rhs_1170] = "ARTV3.rhs ::= ARTV3.cat '|' . ARTV3.rhs ";
    artLabelStrings[ARTL_ARTV3_rhs_1170] = "";
    artlhsL[ARTL_ARTV3_rhs_1170] = ARTL_ARTV3_rhs;
    artKindOfs[ARTL_ARTV3_rhs_1170] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_rhs_1174] = "ARTV3.rhs ::= ARTV3.cat '|' ARTV3.rhs .";
    artLabelStrings[ARTL_ARTV3_rhs_1174] = "";
    artlhsL[ARTL_ARTV3_rhs_1174] = ARTL_ARTV3_rhs;
    artSlotInstanceOfs[ARTL_ARTV3_rhs_1174] = ARTL_ARTV3_rhs;
    artKindOfs[ARTL_ARTV3_rhs_1174] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_rhs_1174] = true;
    arteoR_pL[ARTL_ARTV3_rhs_1174] = true;
    artPopD[ARTL_ARTV3_rhs_1174] = true;
  }

  public void artTableInitialiser_ARTV3_slot() {
    artLabelInternalStrings[ARTL_ARTV3_slot] = "ARTV3.slot";
    artLabelStrings[ARTL_ARTV3_slot] = "ARTV3.slot";
    artKindOfs[ARTL_ARTV3_slot] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_slot_1220] = "ARTV3.slot ::= . # ";
    artLabelStrings[ARTL_ARTV3_slot_1220] = "";
    artlhsL[ARTL_ARTV3_slot_1220] = ARTL_ARTV3_slot;
    artKindOfs[ARTL_ARTV3_slot_1220] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_slot_1220] = true;
    artLabelInternalStrings[ARTL_ARTV3_slot_1222] = "ARTV3.slot ::= # .";
    artLabelStrings[ARTL_ARTV3_slot_1222] = "";
    artlhsL[ARTL_ARTV3_slot_1222] = ARTL_ARTV3_slot;
    artKindOfs[ARTL_ARTV3_slot_1222] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_slot_1222] = true;
    arteoR_pL[ARTL_ARTV3_slot_1222] = true;
    artPopD[ARTL_ARTV3_slot_1222] = true;
    artLabelInternalStrings[ARTL_ARTV3_slot_1224] = "ARTV3.slot ::= . ARTV3.action ";
    artLabelStrings[ARTL_ARTV3_slot_1224] = "";
    artlhsL[ARTL_ARTV3_slot_1224] = ARTL_ARTV3_slot;
    artKindOfs[ARTL_ARTV3_slot_1224] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_slot_1226] = "ARTV3.slot ::= ARTV3.action .";
    artLabelStrings[ARTL_ARTV3_slot_1226] = "";
    artlhsL[ARTL_ARTV3_slot_1226] = ARTL_ARTV3_slot;
    artSlotInstanceOfs[ARTL_ARTV3_slot_1226] = ARTL_ARTV3_action;
    artKindOfs[ARTL_ARTV3_slot_1226] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_slot_1226] = true;
    arteoR_pL[ARTL_ARTV3_slot_1226] = true;
    artPopD[ARTL_ARTV3_slot_1226] = true;
  }

  public void artTableInitialiser_ARTV3_term() {
    artLabelInternalStrings[ARTL_ARTV3_term] = "ARTV3.term";
    artLabelStrings[ARTL_ARTV3_term] = "ARTV3.term";
    artKindOfs[ARTL_ARTV3_term] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_term_1536] = "ARTV3.term ::= . ARTV3.INTEGER ";
    artLabelStrings[ARTL_ARTV3_term_1536] = "";
    artlhsL[ARTL_ARTV3_term_1536] = ARTL_ARTV3_term;
    artKindOfs[ARTL_ARTV3_term_1536] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_term_1538] = "ARTV3.term ::= ARTV3.INTEGER .";
    artLabelStrings[ARTL_ARTV3_term_1538] = "";
    artlhsL[ARTL_ARTV3_term_1538] = ARTL_ARTV3_term;
    artSlotInstanceOfs[ARTL_ARTV3_term_1538] = ARTL_ARTV3_INTEGER;
    artKindOfs[ARTL_ARTV3_term_1538] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_term_1538] = true;
    arteoR_pL[ARTL_ARTV3_term_1538] = true;
    artPopD[ARTL_ARTV3_term_1538] = true;
    artLabelInternalStrings[ARTL_ARTV3_term_1540] = "ARTV3.term ::= . ARTV3.REAL ";
    artLabelStrings[ARTL_ARTV3_term_1540] = "";
    artlhsL[ARTL_ARTV3_term_1540] = ARTL_ARTV3_term;
    artKindOfs[ARTL_ARTV3_term_1540] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_term_1542] = "ARTV3.term ::= ARTV3.REAL .";
    artLabelStrings[ARTL_ARTV3_term_1542] = "";
    artlhsL[ARTL_ARTV3_term_1542] = ARTL_ARTV3_term;
    artSlotInstanceOfs[ARTL_ARTV3_term_1542] = ARTL_ARTV3_REAL;
    artKindOfs[ARTL_ARTV3_term_1542] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_term_1542] = true;
    arteoR_pL[ARTL_ARTV3_term_1542] = true;
    artPopD[ARTL_ARTV3_term_1542] = true;
    artLabelInternalStrings[ARTL_ARTV3_term_1544] = "ARTV3.term ::= . ARTV3.STRING_DQ ";
    artLabelStrings[ARTL_ARTV3_term_1544] = "";
    artlhsL[ARTL_ARTV3_term_1544] = ARTL_ARTV3_term;
    artKindOfs[ARTL_ARTV3_term_1544] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_term_1546] = "ARTV3.term ::= ARTV3.STRING_DQ .";
    artLabelStrings[ARTL_ARTV3_term_1546] = "";
    artlhsL[ARTL_ARTV3_term_1546] = ARTL_ARTV3_term;
    artSlotInstanceOfs[ARTL_ARTV3_term_1546] = ARTL_ARTV3_STRING_DQ;
    artKindOfs[ARTL_ARTV3_term_1546] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_term_1546] = true;
    arteoR_pL[ARTL_ARTV3_term_1546] = true;
    artPopD[ARTL_ARTV3_term_1546] = true;
    artLabelInternalStrings[ARTL_ARTV3_term_1548] = "ARTV3.term ::= . ARTV3.ID ";
    artLabelStrings[ARTL_ARTV3_term_1548] = "";
    artlhsL[ARTL_ARTV3_term_1548] = ARTL_ARTV3_term;
    artKindOfs[ARTL_ARTV3_term_1548] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_term_1550] = "ARTV3.term ::= ARTV3.ID .";
    artLabelStrings[ARTL_ARTV3_term_1550] = "";
    artlhsL[ARTL_ARTV3_term_1550] = ARTL_ARTV3_term;
    artSlotInstanceOfs[ARTL_ARTV3_term_1550] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_term_1550] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_term_1550] = true;
    arteoR_pL[ARTL_ARTV3_term_1550] = true;
    artPopD[ARTL_ARTV3_term_1550] = true;
    artLabelInternalStrings[ARTL_ARTV3_term_1552] = "ARTV3.term ::= . ARTV3.ID '(' ARTV3.terms ')' ";
    artLabelStrings[ARTL_ARTV3_term_1552] = "";
    artlhsL[ARTL_ARTV3_term_1552] = ARTL_ARTV3_term;
    artKindOfs[ARTL_ARTV3_term_1552] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_term_1554] = "ARTV3.term ::= ARTV3.ID . '(' ARTV3.terms ')' ";
    artLabelStrings[ARTL_ARTV3_term_1554] = "";
    artlhsL[ARTL_ARTV3_term_1554] = ARTL_ARTV3_term;
    artSlotInstanceOfs[ARTL_ARTV3_term_1554] = ARTL_ARTV3_ID;
    artKindOfs[ARTL_ARTV3_term_1554] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_term_1554] = true;
    artLabelInternalStrings[ARTL_ARTV3_term_1555] = "ARTV3.term ::= ARTV3.ID '(' ARTV3.terms ')' ";
    artLabelStrings[ARTL_ARTV3_term_1555] = "";
    artlhsL[ARTL_ARTV3_term_1555] = ARTL_ARTV3_term;
    artLabelInternalStrings[ARTL_ARTV3_term_1556] = "ARTV3.term ::= ARTV3.ID '(' . ARTV3.terms ')' ";
    artLabelStrings[ARTL_ARTV3_term_1556] = "";
    artlhsL[ARTL_ARTV3_term_1556] = ARTL_ARTV3_term;
    artKindOfs[ARTL_ARTV3_term_1556] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_term_1558] = "ARTV3.term ::= ARTV3.ID '(' ARTV3.terms . ')' ";
    artLabelStrings[ARTL_ARTV3_term_1558] = "";
    artlhsL[ARTL_ARTV3_term_1558] = ARTL_ARTV3_term;
    artSlotInstanceOfs[ARTL_ARTV3_term_1558] = ARTL_ARTV3_terms;
    artKindOfs[ARTL_ARTV3_term_1558] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_term_1558] = true;
    artLabelInternalStrings[ARTL_ARTV3_term_1559] = "ARTV3.term ::= ARTV3.ID '(' ARTV3.terms ')' ";
    artLabelStrings[ARTL_ARTV3_term_1559] = "";
    artlhsL[ARTL_ARTV3_term_1559] = ARTL_ARTV3_term;
    artPopD[ARTL_ARTV3_term_1559] = true;
    artLabelInternalStrings[ARTL_ARTV3_term_1560] = "ARTV3.term ::= ARTV3.ID '(' ARTV3.terms ')' .";
    artLabelStrings[ARTL_ARTV3_term_1560] = "";
    artlhsL[ARTL_ARTV3_term_1560] = ARTL_ARTV3_term;
    artKindOfs[ARTL_ARTV3_term_1560] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_term_1560] = true;
    arteoR_pL[ARTL_ARTV3_term_1560] = true;
    artPopD[ARTL_ARTV3_term_1560] = true;
  }

  public void artTableInitialiser_ARTV3_terminaliser() {
    artLabelInternalStrings[ARTL_ARTV3_terminaliser] = "ARTV3.terminaliser";
    artLabelStrings[ARTL_ARTV3_terminaliser] = "ARTV3.terminaliser";
    artKindOfs[ARTL_ARTV3_terminaliser] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_terminaliser_130] = "ARTV3.terminaliser ::= . ARTV3.nonterminal ";
    artLabelStrings[ARTL_ARTV3_terminaliser_130] = "";
    artlhsL[ARTL_ARTV3_terminaliser_130] = ARTL_ARTV3_terminaliser;
    artKindOfs[ARTL_ARTV3_terminaliser_130] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_terminaliser_132] = "ARTV3.terminaliser ::= ARTV3.nonterminal .";
    artLabelStrings[ARTL_ARTV3_terminaliser_132] = "";
    artlhsL[ARTL_ARTV3_terminaliser_132] = ARTL_ARTV3_terminaliser;
    artSlotInstanceOfs[ARTL_ARTV3_terminaliser_132] = ARTL_ARTV3_nonterminal;
    artKindOfs[ARTL_ARTV3_terminaliser_132] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_terminaliser_132] = true;
    arteoR_pL[ARTL_ARTV3_terminaliser_132] = true;
    artPopD[ARTL_ARTV3_terminaliser_132] = true;
    artLabelInternalStrings[ARTL_ARTV3_terminaliser_136] = "ARTV3.terminaliser ::= . ARTV3.builtinTerminal ";
    artLabelStrings[ARTL_ARTV3_terminaliser_136] = "";
    artlhsL[ARTL_ARTV3_terminaliser_136] = ARTL_ARTV3_terminaliser;
    artKindOfs[ARTL_ARTV3_terminaliser_136] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_terminaliser_138] = "ARTV3.terminaliser ::= ARTV3.builtinTerminal .";
    artLabelStrings[ARTL_ARTV3_terminaliser_138] = "";
    artlhsL[ARTL_ARTV3_terminaliser_138] = ARTL_ARTV3_terminaliser;
    artSlotInstanceOfs[ARTL_ARTV3_terminaliser_138] = ARTL_ARTV3_builtinTerminal;
    artKindOfs[ARTL_ARTV3_terminaliser_138] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_terminaliser_138] = true;
    arteoR_pL[ARTL_ARTV3_terminaliser_138] = true;
    artPopD[ARTL_ARTV3_terminaliser_138] = true;
  }

  public void artTableInitialiser_ARTV3_terminalisers() {
    artLabelInternalStrings[ARTL_ARTV3_terminalisers] = "ARTV3.terminalisers";
    artLabelStrings[ARTL_ARTV3_terminalisers] = "ARTV3.terminalisers";
    artKindOfs[ARTL_ARTV3_terminalisers] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_terminalisers_114] = "ARTV3.terminalisers ::= . ARTV3.terminaliser ";
    artLabelStrings[ARTL_ARTV3_terminalisers_114] = "";
    artlhsL[ARTL_ARTV3_terminalisers_114] = ARTL_ARTV3_terminalisers;
    artKindOfs[ARTL_ARTV3_terminalisers_114] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_terminalisers_118] = "ARTV3.terminalisers ::= ARTV3.terminaliser .";
    artLabelStrings[ARTL_ARTV3_terminalisers_118] = "";
    artlhsL[ARTL_ARTV3_terminalisers_118] = ARTL_ARTV3_terminalisers;
    artSlotInstanceOfs[ARTL_ARTV3_terminalisers_118] = ARTL_ARTV3_terminaliser;
    artKindOfs[ARTL_ARTV3_terminalisers_118] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_terminalisers_118] = true;
    arteoR_pL[ARTL_ARTV3_terminalisers_118] = true;
    artPopD[ARTL_ARTV3_terminalisers_118] = true;
    artLabelInternalStrings[ARTL_ARTV3_terminalisers_120] = "ARTV3.terminalisers ::= . ARTV3.terminaliser ARTV3.terminalisers ";
    artLabelStrings[ARTL_ARTV3_terminalisers_120] = "";
    artlhsL[ARTL_ARTV3_terminalisers_120] = ARTL_ARTV3_terminalisers;
    artKindOfs[ARTL_ARTV3_terminalisers_120] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_terminalisers_124] = "ARTV3.terminalisers ::= ARTV3.terminaliser . ARTV3.terminalisers ";
    artLabelStrings[ARTL_ARTV3_terminalisers_124] = "";
    artlhsL[ARTL_ARTV3_terminalisers_124] = ARTL_ARTV3_terminalisers;
    artSlotInstanceOfs[ARTL_ARTV3_terminalisers_124] = ARTL_ARTV3_terminaliser;
    artKindOfs[ARTL_ARTV3_terminalisers_124] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_terminalisers_124] = true;
    artLabelInternalStrings[ARTL_ARTV3_terminalisers_128] = "ARTV3.terminalisers ::= ARTV3.terminaliser ARTV3.terminalisers .";
    artLabelStrings[ARTL_ARTV3_terminalisers_128] = "";
    artlhsL[ARTL_ARTV3_terminalisers_128] = ARTL_ARTV3_terminalisers;
    artSlotInstanceOfs[ARTL_ARTV3_terminalisers_128] = ARTL_ARTV3_terminalisers;
    artKindOfs[ARTL_ARTV3_terminalisers_128] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_terminalisers_128] = true;
    arteoR_pL[ARTL_ARTV3_terminalisers_128] = true;
    artPopD[ARTL_ARTV3_terminalisers_128] = true;
  }

  public void artTableInitialiser_ARTV3_terms() {
    artLabelInternalStrings[ARTL_ARTV3_terms] = "ARTV3.terms";
    artLabelStrings[ARTL_ARTV3_terms] = "ARTV3.terms";
    artKindOfs[ARTL_ARTV3_terms] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_terms_1570] = "ARTV3.terms ::= . ARTV3.term ";
    artLabelStrings[ARTL_ARTV3_terms_1570] = "";
    artlhsL[ARTL_ARTV3_terms_1570] = ARTL_ARTV3_terms;
    artKindOfs[ARTL_ARTV3_terms_1570] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_terms_1572] = "ARTV3.terms ::= ARTV3.term .";
    artLabelStrings[ARTL_ARTV3_terms_1572] = "";
    artlhsL[ARTL_ARTV3_terms_1572] = ARTL_ARTV3_terms;
    artSlotInstanceOfs[ARTL_ARTV3_terms_1572] = ARTL_ARTV3_term;
    artKindOfs[ARTL_ARTV3_terms_1572] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_terms_1572] = true;
    arteoR_pL[ARTL_ARTV3_terms_1572] = true;
    artPopD[ARTL_ARTV3_terms_1572] = true;
    artLabelInternalStrings[ARTL_ARTV3_terms_1574] = "ARTV3.terms ::= . ARTV3.term ',' ARTV3.term ";
    artLabelStrings[ARTL_ARTV3_terms_1574] = "";
    artlhsL[ARTL_ARTV3_terms_1574] = ARTL_ARTV3_terms;
    artKindOfs[ARTL_ARTV3_terms_1574] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_terms_1576] = "ARTV3.terms ::= ARTV3.term . ',' ARTV3.term ";
    artLabelStrings[ARTL_ARTV3_terms_1576] = "";
    artlhsL[ARTL_ARTV3_terms_1576] = ARTL_ARTV3_terms;
    artSlotInstanceOfs[ARTL_ARTV3_terms_1576] = ARTL_ARTV3_term;
    artKindOfs[ARTL_ARTV3_terms_1576] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_terms_1576] = true;
    artLabelInternalStrings[ARTL_ARTV3_terms_1577] = "ARTV3.terms ::= ARTV3.term ',' ARTV3.term ";
    artLabelStrings[ARTL_ARTV3_terms_1577] = "";
    artlhsL[ARTL_ARTV3_terms_1577] = ARTL_ARTV3_terms;
    artLabelInternalStrings[ARTL_ARTV3_terms_1578] = "ARTV3.terms ::= ARTV3.term ',' . ARTV3.term ";
    artLabelStrings[ARTL_ARTV3_terms_1578] = "";
    artlhsL[ARTL_ARTV3_terms_1578] = ARTL_ARTV3_terms;
    artKindOfs[ARTL_ARTV3_terms_1578] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_terms_1580] = "ARTV3.terms ::= ARTV3.term ',' ARTV3.term .";
    artLabelStrings[ARTL_ARTV3_terms_1580] = "";
    artlhsL[ARTL_ARTV3_terms_1580] = ARTL_ARTV3_terms;
    artSlotInstanceOfs[ARTL_ARTV3_terms_1580] = ARTL_ARTV3_term;
    artKindOfs[ARTL_ARTV3_terms_1580] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_terms_1580] = true;
    arteoR_pL[ARTL_ARTV3_terms_1580] = true;
    artPopD[ARTL_ARTV3_terms_1580] = true;
  }

  public void artTableInitialiser_ARTV3_termsOpt() {
    artLabelInternalStrings[ARTL_ARTV3_termsOpt] = "ARTV3.termsOpt";
    artLabelStrings[ARTL_ARTV3_termsOpt] = "ARTV3.termsOpt";
    artKindOfs[ARTL_ARTV3_termsOpt] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_termsOpt_1562] = "ARTV3.termsOpt ::= . # ";
    artLabelStrings[ARTL_ARTV3_termsOpt_1562] = "";
    artlhsL[ARTL_ARTV3_termsOpt_1562] = ARTL_ARTV3_termsOpt;
    artKindOfs[ARTL_ARTV3_termsOpt_1562] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_termsOpt_1562] = true;
    artLabelInternalStrings[ARTL_ARTV3_termsOpt_1564] = "ARTV3.termsOpt ::= # .";
    artLabelStrings[ARTL_ARTV3_termsOpt_1564] = "";
    artlhsL[ARTL_ARTV3_termsOpt_1564] = ARTL_ARTV3_termsOpt;
    artKindOfs[ARTL_ARTV3_termsOpt_1564] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_termsOpt_1564] = true;
    arteoR_pL[ARTL_ARTV3_termsOpt_1564] = true;
    artPopD[ARTL_ARTV3_termsOpt_1564] = true;
    artLabelInternalStrings[ARTL_ARTV3_termsOpt_1566] = "ARTV3.termsOpt ::= . ARTV3.terms ";
    artLabelStrings[ARTL_ARTV3_termsOpt_1566] = "";
    artlhsL[ARTL_ARTV3_termsOpt_1566] = ARTL_ARTV3_termsOpt;
    artKindOfs[ARTL_ARTV3_termsOpt_1566] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_termsOpt_1568] = "ARTV3.termsOpt ::= ARTV3.terms .";
    artLabelStrings[ARTL_ARTV3_termsOpt_1568] = "";
    artlhsL[ARTL_ARTV3_termsOpt_1568] = ARTL_ARTV3_termsOpt;
    artSlotInstanceOfs[ARTL_ARTV3_termsOpt_1568] = ARTL_ARTV3_terms;
    artKindOfs[ARTL_ARTV3_termsOpt_1568] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_termsOpt_1568] = true;
    arteoR_pL[ARTL_ARTV3_termsOpt_1568] = true;
    artPopD[ARTL_ARTV3_termsOpt_1568] = true;
  }

  public void artTableInitialiser_ARTV3_text() {
    artLabelInternalStrings[ARTL_ARTV3_text] = "ARTV3.text";
    artLabelStrings[ARTL_ARTV3_text] = "ARTV3.text";
    artKindOfs[ARTL_ARTV3_text] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_text_2] = "ARTV3.text ::= . ARTV3.textElements ";
    artLabelStrings[ARTL_ARTV3_text_2] = "";
    artlhsL[ARTL_ARTV3_text_2] = ARTL_ARTV3_text;
    artKindOfs[ARTL_ARTV3_text_2] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_text_6] = "ARTV3.text ::= ARTV3.textElements .";
    artLabelStrings[ARTL_ARTV3_text_6] = "";
    artlhsL[ARTL_ARTV3_text_6] = ARTL_ARTV3_text;
    artSlotInstanceOfs[ARTL_ARTV3_text_6] = ARTL_ARTV3_textElements;
    artKindOfs[ARTL_ARTV3_text_6] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_text_6] = true;
    arteoR_pL[ARTL_ARTV3_text_6] = true;
    artPopD[ARTL_ARTV3_text_6] = true;
    artLabelInternalStrings[ARTL_ARTV3_text_8] = "ARTV3.text ::= . ARTV3.modules ";
    artLabelStrings[ARTL_ARTV3_text_8] = "";
    artlhsL[ARTL_ARTV3_text_8] = ARTL_ARTV3_text;
    artKindOfs[ARTL_ARTV3_text_8] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_text_12] = "ARTV3.text ::= ARTV3.modules .";
    artLabelStrings[ARTL_ARTV3_text_12] = "";
    artlhsL[ARTL_ARTV3_text_12] = ARTL_ARTV3_text;
    artSlotInstanceOfs[ARTL_ARTV3_text_12] = ARTL_ARTV3_modules;
    artKindOfs[ARTL_ARTV3_text_12] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_text_12] = true;
    arteoR_pL[ARTL_ARTV3_text_12] = true;
    artPopD[ARTL_ARTV3_text_12] = true;
  }

  public void artTableInitialiser_ARTV3_textElement() {
    artLabelInternalStrings[ARTL_ARTV3_textElement] = "ARTV3.textElement";
    artLabelStrings[ARTL_ARTV3_textElement] = "ARTV3.textElement";
    artKindOfs[ARTL_ARTV3_textElement] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_textElement_44] = "ARTV3.textElement ::= . ARTV3.directive ";
    artLabelStrings[ARTL_ARTV3_textElement_44] = "";
    artlhsL[ARTL_ARTV3_textElement_44] = ARTL_ARTV3_textElement;
    artKindOfs[ARTL_ARTV3_textElement_44] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_textElement_46] = "ARTV3.textElement ::= ARTV3.directive .";
    artLabelStrings[ARTL_ARTV3_textElement_46] = "";
    artlhsL[ARTL_ARTV3_textElement_46] = ARTL_ARTV3_textElement;
    artSlotInstanceOfs[ARTL_ARTV3_textElement_46] = ARTL_ARTV3_directive;
    artKindOfs[ARTL_ARTV3_textElement_46] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_textElement_46] = true;
    arteoR_pL[ARTL_ARTV3_textElement_46] = true;
    artPopD[ARTL_ARTV3_textElement_46] = true;
    artLabelInternalStrings[ARTL_ARTV3_textElement_48] = "ARTV3.textElement ::= . ARTV3.grammarRule ";
    artLabelStrings[ARTL_ARTV3_textElement_48] = "";
    artlhsL[ARTL_ARTV3_textElement_48] = ARTL_ARTV3_textElement;
    artKindOfs[ARTL_ARTV3_textElement_48] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_textElement_50] = "ARTV3.textElement ::= ARTV3.grammarRule .";
    artLabelStrings[ARTL_ARTV3_textElement_50] = "";
    artlhsL[ARTL_ARTV3_textElement_50] = ARTL_ARTV3_textElement;
    artSlotInstanceOfs[ARTL_ARTV3_textElement_50] = ARTL_ARTV3_grammarRule;
    artKindOfs[ARTL_ARTV3_textElement_50] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_textElement_50] = true;
    arteoR_pL[ARTL_ARTV3_textElement_50] = true;
    artPopD[ARTL_ARTV3_textElement_50] = true;
    artLabelInternalStrings[ARTL_ARTV3_textElement_52] = "ARTV3.textElement ::= . ARTV3.deleter ";
    artLabelStrings[ARTL_ARTV3_textElement_52] = "";
    artlhsL[ARTL_ARTV3_textElement_52] = ARTL_ARTV3_textElement;
    artKindOfs[ARTL_ARTV3_textElement_52] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_textElement_54] = "ARTV3.textElement ::= ARTV3.deleter .";
    artLabelStrings[ARTL_ARTV3_textElement_54] = "";
    artlhsL[ARTL_ARTV3_textElement_54] = ARTL_ARTV3_textElement;
    artSlotInstanceOfs[ARTL_ARTV3_textElement_54] = ARTL_ARTV3_deleter;
    artKindOfs[ARTL_ARTV3_textElement_54] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_textElement_54] = true;
    arteoR_pL[ARTL_ARTV3_textElement_54] = true;
    artPopD[ARTL_ARTV3_textElement_54] = true;
  }

  public void artTableInitialiser_ARTV3_textElements() {
    artLabelInternalStrings[ARTL_ARTV3_textElements] = "ARTV3.textElements";
    artLabelStrings[ARTL_ARTV3_textElements] = "ARTV3.textElements";
    artKindOfs[ARTL_ARTV3_textElements] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_textElements_34] = "ARTV3.textElements ::= . ARTV3.textElement ARTV3.textElements ";
    artLabelStrings[ARTL_ARTV3_textElements_34] = "";
    artlhsL[ARTL_ARTV3_textElements_34] = ARTL_ARTV3_textElements;
    artKindOfs[ARTL_ARTV3_textElements_34] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_textElements_36] = "ARTV3.textElements ::= ARTV3.textElement . ARTV3.textElements ";
    artLabelStrings[ARTL_ARTV3_textElements_36] = "";
    artlhsL[ARTL_ARTV3_textElements_36] = ARTL_ARTV3_textElements;
    artSlotInstanceOfs[ARTL_ARTV3_textElements_36] = ARTL_ARTV3_textElement;
    artKindOfs[ARTL_ARTV3_textElements_36] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_textElements_36] = true;
    artLabelInternalStrings[ARTL_ARTV3_textElements_38] = "ARTV3.textElements ::= ARTV3.textElement ARTV3.textElements .";
    artLabelStrings[ARTL_ARTV3_textElements_38] = "";
    artlhsL[ARTL_ARTV3_textElements_38] = ARTL_ARTV3_textElements;
    artSlotInstanceOfs[ARTL_ARTV3_textElements_38] = ARTL_ARTV3_textElements;
    artKindOfs[ARTL_ARTV3_textElements_38] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_textElements_38] = true;
    arteoR_pL[ARTL_ARTV3_textElements_38] = true;
    artPopD[ARTL_ARTV3_textElements_38] = true;
    artLabelInternalStrings[ARTL_ARTV3_textElements_40] = "ARTV3.textElements ::= . # ";
    artLabelStrings[ARTL_ARTV3_textElements_40] = "";
    artlhsL[ARTL_ARTV3_textElements_40] = ARTL_ARTV3_textElements;
    artKindOfs[ARTL_ARTV3_textElements_40] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_textElements_40] = true;
    artLabelInternalStrings[ARTL_ARTV3_textElements_42] = "ARTV3.textElements ::= # .";
    artLabelStrings[ARTL_ARTV3_textElements_42] = "";
    artlhsL[ARTL_ARTV3_textElements_42] = ARTL_ARTV3_textElements;
    artKindOfs[ARTL_ARTV3_textElements_42] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_textElements_42] = true;
    arteoR_pL[ARTL_ARTV3_textElements_42] = true;
    artPopD[ARTL_ARTV3_textElements_42] = true;
  }

  public void artTableInitialiser_ARTV3_trueFalse() {
    artLabelInternalStrings[ARTL_ARTV3_trueFalse] = "ARTV3.trueFalse";
    artLabelStrings[ARTL_ARTV3_trueFalse] = "ARTV3.trueFalse";
    artKindOfs[ARTL_ARTV3_trueFalse] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_trueFalse_1080] = "ARTV3.trueFalse ::= . # ";
    artLabelStrings[ARTL_ARTV3_trueFalse_1080] = "";
    artlhsL[ARTL_ARTV3_trueFalse_1080] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_trueFalse_1080] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_trueFalse_1080] = true;
    artLabelInternalStrings[ARTL_ARTV3_trueFalse_1082] = "ARTV3.trueFalse ::= # .";
    artLabelStrings[ARTL_ARTV3_trueFalse_1082] = "";
    artlhsL[ARTL_ARTV3_trueFalse_1082] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_trueFalse_1082] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_trueFalse_1082] = true;
    arteoR_pL[ARTL_ARTV3_trueFalse_1082] = true;
    artPopD[ARTL_ARTV3_trueFalse_1082] = true;
    artLabelInternalStrings[ARTL_ARTV3_trueFalse_1086] = "ARTV3.trueFalse ::= . 'true' ";
    artLabelStrings[ARTL_ARTV3_trueFalse_1086] = "";
    artlhsL[ARTL_ARTV3_trueFalse_1086] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_trueFalse_1086] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_trueFalse_1086] = true;
    artLabelInternalStrings[ARTL_ARTV3_trueFalse_1087] = "ARTV3.trueFalse ::= 'true' ";
    artLabelStrings[ARTL_ARTV3_trueFalse_1087] = "";
    artlhsL[ARTL_ARTV3_trueFalse_1087] = ARTL_ARTV3_trueFalse;
    artPopD[ARTL_ARTV3_trueFalse_1087] = true;
    artLabelInternalStrings[ARTL_ARTV3_trueFalse_1088] = "ARTV3.trueFalse ::= 'true' .";
    artLabelStrings[ARTL_ARTV3_trueFalse_1088] = "";
    artlhsL[ARTL_ARTV3_trueFalse_1088] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_trueFalse_1088] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_trueFalse_1088] = true;
    arteoR_pL[ARTL_ARTV3_trueFalse_1088] = true;
    artPopD[ARTL_ARTV3_trueFalse_1088] = true;
    artLabelInternalStrings[ARTL_ARTV3_trueFalse_1092] = "ARTV3.trueFalse ::= . 'false' ";
    artLabelStrings[ARTL_ARTV3_trueFalse_1092] = "";
    artlhsL[ARTL_ARTV3_trueFalse_1092] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_trueFalse_1092] = ARTK_INTERMEDIATE;
    artPopD[ARTL_ARTV3_trueFalse_1092] = true;
    artLabelInternalStrings[ARTL_ARTV3_trueFalse_1093] = "ARTV3.trueFalse ::= 'false' ";
    artLabelStrings[ARTL_ARTV3_trueFalse_1093] = "";
    artlhsL[ARTL_ARTV3_trueFalse_1093] = ARTL_ARTV3_trueFalse;
    artPopD[ARTL_ARTV3_trueFalse_1093] = true;
    artLabelInternalStrings[ARTL_ARTV3_trueFalse_1094] = "ARTV3.trueFalse ::= 'false' .";
    artLabelStrings[ARTL_ARTV3_trueFalse_1094] = "";
    artlhsL[ARTL_ARTV3_trueFalse_1094] = ARTL_ARTV3_trueFalse;
    artKindOfs[ARTL_ARTV3_trueFalse_1094] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_trueFalse_1094] = true;
    arteoR_pL[ARTL_ARTV3_trueFalse_1094] = true;
    artPopD[ARTL_ARTV3_trueFalse_1094] = true;
  }

  public void artTableInitialiser_ARTV3_union() {
    artLabelInternalStrings[ARTL_ARTV3_union] = "ARTV3.union";
    artLabelStrings[ARTL_ARTV3_union] = "ARTV3.union";
    artKindOfs[ARTL_ARTV3_union] = ARTK_NONTERMINAL;
    artLabelInternalStrings[ARTL_ARTV3_union_1274] = "ARTV3.union ::= . ARTV3.not ";
    artLabelStrings[ARTL_ARTV3_union_1274] = "";
    artlhsL[ARTL_ARTV3_union_1274] = ARTL_ARTV3_union;
    artKindOfs[ARTL_ARTV3_union_1274] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_union_1276] = "ARTV3.union ::= ARTV3.not .";
    artLabelStrings[ARTL_ARTV3_union_1276] = "";
    artlhsL[ARTL_ARTV3_union_1276] = ARTL_ARTV3_union;
    artSlotInstanceOfs[ARTL_ARTV3_union_1276] = ARTL_ARTV3_not;
    artKindOfs[ARTL_ARTV3_union_1276] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_union_1276] = true;
    arteoR_pL[ARTL_ARTV3_union_1276] = true;
    artPopD[ARTL_ARTV3_union_1276] = true;
    artLabelInternalStrings[ARTL_ARTV3_union_1278] = "ARTV3.union ::= . ARTV3.union '||' ARTV3.not ";
    artLabelStrings[ARTL_ARTV3_union_1278] = "";
    artlhsL[ARTL_ARTV3_union_1278] = ARTL_ARTV3_union;
    artKindOfs[ARTL_ARTV3_union_1278] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_union_1280] = "ARTV3.union ::= ARTV3.union . '||' ARTV3.not ";
    artLabelStrings[ARTL_ARTV3_union_1280] = "";
    artlhsL[ARTL_ARTV3_union_1280] = ARTL_ARTV3_union;
    artSlotInstanceOfs[ARTL_ARTV3_union_1280] = ARTL_ARTV3_union;
    artKindOfs[ARTL_ARTV3_union_1280] = ARTK_INTERMEDIATE;
    artfiRL[ARTL_ARTV3_union_1280] = true;
    artLabelInternalStrings[ARTL_ARTV3_union_1281] = "ARTV3.union ::= ARTV3.union '||' ARTV3.not ";
    artLabelStrings[ARTL_ARTV3_union_1281] = "";
    artlhsL[ARTL_ARTV3_union_1281] = ARTL_ARTV3_union;
    artLabelInternalStrings[ARTL_ARTV3_union_1282] = "ARTV3.union ::= ARTV3.union '||' . ARTV3.not ";
    artLabelStrings[ARTL_ARTV3_union_1282] = "";
    artlhsL[ARTL_ARTV3_union_1282] = ARTL_ARTV3_union;
    artKindOfs[ARTL_ARTV3_union_1282] = ARTK_INTERMEDIATE;
    artLabelInternalStrings[ARTL_ARTV3_union_1284] = "ARTV3.union ::= ARTV3.union '||' ARTV3.not .";
    artLabelStrings[ARTL_ARTV3_union_1284] = "";
    artlhsL[ARTL_ARTV3_union_1284] = ARTL_ARTV3_union;
    artSlotInstanceOfs[ARTL_ARTV3_union_1284] = ARTL_ARTV3_not;
    artKindOfs[ARTL_ARTV3_union_1284] = ARTK_INTERMEDIATE;
    arteoRL[ARTL_ARTV3_union_1284] = true;
    arteoR_pL[ARTL_ARTV3_union_1284] = true;
    artPopD[ARTL_ARTV3_union_1284] = true;
  }

  public void artTableInitialise() {
    artLabelInternalStrings = new String[ARTX_LABEL_EXTENT + 1];
    artLabelStrings = new String[ARTX_LABEL_EXTENT + 1];
    artLabelInternalStrings[ARTL_EOS] = "ART$";
    artLabelStrings[ARTL_EOS] = " EOS $";
    artLabelInternalStrings[ARTX_DESPATCH] = "ARTX_DESPATCH";
    artLabelStrings[ARTX_DESPATCH] = " DESPATCH";
    artLabelInternalStrings[ARTL_DUMMY] = "ARTL_DUMMY";
    artLabelStrings[ARTL_DUMMY] = " DUMMY";
    artLabelInternalStrings[ARTX_LABEL_EXTENT] = "!!ILLEGAL!!";
    artLabelStrings[ARTX_LABEL_EXTENT] = " ILLEGAL";
    artLabelStrings[ARTL_EPSILON] = "#";
    artLabelInternalStrings[ARTL_EPSILON] = "#";

    artTerminalRequiresWhiteSpace = new boolean[ARTL_EPSILON];
    artInitialiseBooleanArray(artTerminalRequiresWhiteSpace, 0, ARTL_EPSILON, false);

    artTerminalCaseInsensitive = new boolean[ARTL_EPSILON];
    artInitialiseBooleanArray(artTerminalCaseInsensitive, 0, ARTL_EPSILON, false);

    artlhsL = new int[ARTX_LABEL_EXTENT];
    artInitialiseIntegerArray(artlhsL, 0, ARTX_LABEL_EXTENT);
    artlhsL[ARTX_DESPATCH] = ARTX_DESPATCH;

    artKindOfs = new int[ARTX_LABEL_EXTENT + 1];
    artKindOfs[ARTL_EOS] = ARTK_EOS;
    artKindOfs[ARTL_EPSILON] = ARTK_EPSILON;

    artTerminalsFromNonterminals = new boolean[ARTX_LABEL_EXTENT];

    artNonterminalsDeclaredAsTerminals = new boolean[ARTX_LABEL_EXTENT];

    artLonger = new ARTBitSet[ARTX_LABEL_EXTENT + 1];
    for (int i = 0; i < ARTX_LABEL_EXTENT + 1; i++) artLonger[i] = new ARTBitSet();
    artHigher = new ARTBitSet[ARTX_LABEL_EXTENT + 1];
    for (int i = 0; i < ARTX_LABEL_EXTENT + 1; i++) artHigher[i] = new ARTBitSet();

    artAnnotations = new String[ARTX_LABEL_EXTENT];
    artInitialiseStringArray(artAnnotations, 0, ARTX_LABEL_EXTENT, null);

    artPreSlots = new int[ARTX_LABEL_EXTENT];
    artInitialiseIntegerArray(artPreSlots, 0, ARTX_LABEL_EXTENT);

    artPostSlots = new int[ARTX_LABEL_EXTENT];
    artInitialiseIntegerArray(artPostSlots, 0, ARTX_LABEL_EXTENT);

    artInstanceOfs = new int[ARTX_LABEL_EXTENT];
    artInitialiseIntegerArray(artInstanceOfs, 0, ARTX_LABEL_EXTENT);

    artSlotInstanceOfs = new int[ARTX_LABEL_EXTENT];
    artInitialiseIntegerArray(artSlotInstanceOfs, 0, ARTX_LABEL_EXTENT);

    artUserNameOfs = new int[ARTX_LABEL_EXTENT + 1];

    artGathers = new int[ARTX_LABEL_EXTENT];
    artInitialiseIntegerArray(artGathers, 0, ARTX_LABEL_EXTENT);

    artFolds = new int[ARTX_LABEL_EXTENT];
    artInitialiseIntegerArray(artFolds, 0, ARTX_LABEL_EXTENT, 0);

    artpL = new int[ARTX_LABEL_EXTENT];
    artInitialiseIntegerArray(artpL, 0, ARTX_LABEL_EXTENT);

    artaL = new int[ARTX_LABEL_EXTENT];
    artInitialiseIntegerArray(artaL, 0, ARTX_LABEL_EXTENT);

    artcolonL = new int[ARTX_LABEL_EXTENT];
    artInitialiseIntegerArray(artcolonL, 0, ARTX_LABEL_EXTENT);

    arteoOPL = new boolean[ARTX_LABEL_EXTENT];
    artInitialiseBooleanArray(arteoOPL, 0, ARTX_LABEL_EXTENT, false);

    artfiRL = new boolean[ARTX_LABEL_EXTENT];
    artInitialiseBooleanArray(artfiRL, 0, ARTX_LABEL_EXTENT, false);

    artfiPCL = new boolean[ARTX_LABEL_EXTENT];
    artInitialiseBooleanArray(artfiPCL, 0, ARTX_LABEL_EXTENT, false);

    arteoRL = new boolean[ARTX_LABEL_EXTENT];
    artInitialiseBooleanArray(arteoRL, 0, ARTX_LABEL_EXTENT, false);

    arteoR_pL = new boolean[ARTX_LABEL_EXTENT];
    artInitialiseBooleanArray(arteoR_pL, 0, ARTX_LABEL_EXTENT, false);

    artPopD = new boolean[ARTX_LABEL_EXTENT];
    artInitialiseBooleanArray(artPopD, 0, ARTX_LABEL_EXTENT, false);

    artLabelStrings[ARTTB_CHAR_BQ] = "CHAR_BQ";
    artLabelInternalStrings[ARTTB_CHAR_BQ] = "&CHAR_BQ";
    artKindOfs[ARTTB_CHAR_BQ] = ARTK_BUILTIN_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTB_CHAR_BQ] = true;
    artLabelStrings[ARTTB_ID] = "ID";
    artLabelInternalStrings[ARTTB_ID] = "&ID";
    artKindOfs[ARTTB_ID] = ARTK_BUILTIN_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTB_ID] = true;
    artLabelStrings[ARTTB_INTEGER] = "INTEGER";
    artLabelInternalStrings[ARTTB_INTEGER] = "&INTEGER";
    artKindOfs[ARTTB_INTEGER] = ARTK_BUILTIN_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTB_INTEGER] = true;
    artLabelStrings[ARTTB_REAL] = "REAL";
    artLabelInternalStrings[ARTTB_REAL] = "&REAL";
    artKindOfs[ARTTB_REAL] = ARTK_BUILTIN_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTB_REAL] = true;
    artLabelStrings[ARTTB_STRING_BRACE_NEST] = "STRING_BRACE_NEST";
    artLabelInternalStrings[ARTTB_STRING_BRACE_NEST] = "&STRING_BRACE_NEST";
    artKindOfs[ARTTB_STRING_BRACE_NEST] = ARTK_BUILTIN_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTB_STRING_BRACE_NEST] = true;
    artLabelStrings[ARTTB_STRING_DOLLAR] = "STRING_DOLLAR";
    artLabelInternalStrings[ARTTB_STRING_DOLLAR] = "&STRING_DOLLAR";
    artKindOfs[ARTTB_STRING_DOLLAR] = ARTK_BUILTIN_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTB_STRING_DOLLAR] = true;
    artLabelStrings[ARTTB_STRING_DQ] = "STRING_DQ";
    artLabelInternalStrings[ARTTB_STRING_DQ] = "&STRING_DQ";
    artKindOfs[ARTTB_STRING_DQ] = ARTK_BUILTIN_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTB_STRING_DQ] = true;
    artLabelStrings[ARTTB_STRING_PLAIN_SQ] = "STRING_PLAIN_SQ";
    artLabelInternalStrings[ARTTB_STRING_PLAIN_SQ] = "&STRING_PLAIN_SQ";
    artKindOfs[ARTTB_STRING_PLAIN_SQ] = ARTK_BUILTIN_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTB_STRING_PLAIN_SQ] = true;
    artLabelStrings[ARTTS__SHREIK] = "!";
    artLabelInternalStrings[ARTTS__SHREIK] = "'!'";
    artKindOfs[ARTTS__SHREIK] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__SHREIK] = true;
    artLabelStrings[ARTTS__HASH] = "#";
    artLabelInternalStrings[ARTTS__HASH] = "'#'";
    artKindOfs[ARTTS__HASH] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__HASH] = true;
    artLabelStrings[ARTTS__PERCENT_PERCENT] = "%%";
    artLabelInternalStrings[ARTTS__PERCENT_PERCENT] = "'%%'";
    artKindOfs[ARTTS__PERCENT_PERCENT] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__PERCENT_PERCENT] = true;
    artLabelStrings[ARTTS__AMPERSAND] = "&";
    artLabelInternalStrings[ARTTS__AMPERSAND] = "'&'";
    artKindOfs[ARTTS__AMPERSAND] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__AMPERSAND] = true;
    artLabelStrings[ARTTS__LPAR] = "(";
    artLabelInternalStrings[ARTTS__LPAR] = "'('";
    artKindOfs[ARTTS__LPAR] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__LPAR] = true;
    artLabelStrings[ARTTS__RPAR] = ")";
    artLabelInternalStrings[ARTTS__RPAR] = "')'";
    artKindOfs[ARTTS__RPAR] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__RPAR] = true;
    artLabelStrings[ARTTS__STAR] = "*";
    artLabelInternalStrings[ARTTS__STAR] = "'*'";
    artKindOfs[ARTTS__STAR] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__STAR] = true;
    artLabelStrings[ARTTS__PLUS] = "+";
    artLabelInternalStrings[ARTTS__PLUS] = "'+'";
    artKindOfs[ARTTS__PLUS] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__PLUS] = true;
    artLabelStrings[ARTTS__COMMA] = ",";
    artLabelInternalStrings[ARTTS__COMMA] = "','";
    artKindOfs[ARTTS__COMMA] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__COMMA] = true;
    artLabelStrings[ARTTS__PERIOD] = ".";
    artLabelInternalStrings[ARTTS__PERIOD] = "'.'";
    artKindOfs[ARTTS__PERIOD] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__PERIOD] = true;
    artLabelStrings[ARTTS__PERIOD_PERIOD] = "..";
    artLabelInternalStrings[ARTTS__PERIOD_PERIOD] = "'..'";
    artKindOfs[ARTTS__PERIOD_PERIOD] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__PERIOD_PERIOD] = true;
    artLabelStrings[ARTTS__COLON] = ":";
    artLabelInternalStrings[ARTTS__COLON] = "':'";
    artKindOfs[ARTTS__COLON] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__COLON] = true;
    artLabelStrings[ARTTS__COLON_COLON_EQUAL] = "::=";
    artLabelInternalStrings[ARTTS__COLON_COLON_EQUAL] = "'::='";
    artKindOfs[ARTTS__COLON_COLON_EQUAL] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__COLON_COLON_EQUAL] = true;
    artLabelStrings[ARTTS__COLON_TILDE_EQUAL] = ":~=";
    artLabelInternalStrings[ARTTS__COLON_TILDE_EQUAL] = "':~='";
    artKindOfs[ARTTS__COLON_TILDE_EQUAL] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__COLON_TILDE_EQUAL] = true;
    artLabelStrings[ARTTS__LT] = "<";
    artLabelInternalStrings[ARTTS__LT] = "'<'";
    artKindOfs[ARTTS__LT] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__LT] = true;
    artLabelStrings[ARTTS__LT_LT] = "<<";
    artLabelInternalStrings[ARTTS__LT_LT] = "'<<'";
    artKindOfs[ARTTS__LT_LT] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__LT_LT] = true;
    artLabelStrings[ARTTS__GT] = ">";
    artLabelInternalStrings[ARTTS__GT] = "'>'";
    artKindOfs[ARTTS__GT] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__GT] = true;
    artLabelStrings[ARTTS__GT_GT] = ">>";
    artLabelInternalStrings[ARTTS__GT_GT] = "'>>'";
    artKindOfs[ARTTS__GT_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__GT_GT] = true;
    artLabelStrings[ARTTS__QUERY] = "?";
    artLabelInternalStrings[ARTTS__QUERY] = "'?'";
    artKindOfs[ARTTS__QUERY] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__QUERY] = true;
    artLabelStrings[ARTTS__AT] = "@";
    artLabelInternalStrings[ARTTS__AT] = "'@'";
    artKindOfs[ARTTS__AT] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__AT] = true;
    artLabelStrings[ARTTS_FIFODescriptors] = "FIFODescriptors";
    artLabelInternalStrings[ARTTS_FIFODescriptors] = "'FIFODescriptors'";
    artKindOfs[ARTTS_FIFODescriptors] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_FIFODescriptors] = true;
    artLabelStrings[ARTTS__LBRACK] = "[";
    artLabelInternalStrings[ARTTS__LBRACK] = "'['";
    artKindOfs[ARTTS__LBRACK] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__LBRACK] = true;
    artLabelStrings[ARTTS__BACKSLASH_BACKSLASH] = "\\\\";
    artLabelInternalStrings[ARTTS__BACKSLASH_BACKSLASH] = "'\\\\'";
    artKindOfs[ARTTS__BACKSLASH_BACKSLASH] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__BACKSLASH_BACKSLASH] = true;
    artLabelStrings[ARTTS__RBRACK] = "]";
    artLabelInternalStrings[ARTTS__RBRACK] = "']'";
    artKindOfs[ARTTS__RBRACK] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__RBRACK] = true;
    artLabelStrings[ARTTS__UPARROW] = "^";
    artLabelInternalStrings[ARTTS__UPARROW] = "'^'";
    artKindOfs[ARTTS__UPARROW] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__UPARROW] = true;
    artLabelStrings[ARTTS__UPARROW_UPARROW] = "^^";
    artLabelInternalStrings[ARTTS__UPARROW_UPARROW] = "'^^'";
    artKindOfs[ARTTS__UPARROW_UPARROW] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__UPARROW_UPARROW] = true;
    artLabelStrings[ARTTS__UPARROW_UPARROW_UPARROW] = "^^^";
    artLabelInternalStrings[ARTTS__UPARROW_UPARROW_UPARROW] = "'^^^'";
    artKindOfs[ARTTS__UPARROW_UPARROW_UPARROW] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__UPARROW_UPARROW_UPARROW] = true;
    artLabelStrings[ARTTS__UPARROW_] = "^_";
    artLabelInternalStrings[ARTTS__UPARROW_] = "'^_'";
    artKindOfs[ARTTS__UPARROW_] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__UPARROW_] = true;
    artLabelStrings[ARTTS_choose] = "choose";
    artLabelInternalStrings[ARTTS_choose] = "'choose'";
    artKindOfs[ARTTS_choose] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_choose] = true;
    artLabelStrings[ARTTS_cnp] = "cnp";
    artLabelInternalStrings[ARTTS_cnp] = "'cnp'";
    artKindOfs[ARTTS_cnp] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_cnp] = true;
    artLabelStrings[ARTTS_cnpGeneratorPool] = "cnpGeneratorPool";
    artLabelInternalStrings[ARTTS_cnpGeneratorPool] = "'cnpGeneratorPool'";
    artKindOfs[ARTTS_cnpGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_cnpGeneratorPool] = true;
    artLabelStrings[ARTTS_cnpIndexedAPI] = "cnpIndexedAPI";
    artLabelInternalStrings[ARTTS_cnpIndexedAPI] = "'cnpIndexedAPI'";
    artKindOfs[ARTTS_cnpIndexedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_cnpIndexedAPI] = true;
    artLabelStrings[ARTTS_cnpIndexedPool] = "cnpIndexedPool";
    artLabelInternalStrings[ARTTS_cnpIndexedPool] = "'cnpIndexedPool'";
    artKindOfs[ARTTS_cnpIndexedPool] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_cnpIndexedPool] = true;
    artLabelStrings[ARTTS_cnpLinkedAPI] = "cnpLinkedAPI";
    artLabelInternalStrings[ARTTS_cnpLinkedAPI] = "'cnpLinkedAPI'";
    artKindOfs[ARTTS_cnpLinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_cnpLinkedAPI] = true;
    artLabelStrings[ARTTS_earley] = "earley";
    artLabelInternalStrings[ARTTS_earley] = "'earley'";
    artKindOfs[ARTTS_earley] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_earley] = true;
    artLabelStrings[ARTTS_earley2007LinkedAPI] = "earley2007LinkedAPI";
    artLabelInternalStrings[ARTTS_earley2007LinkedAPI] = "'earley2007LinkedAPI'";
    artKindOfs[ARTTS_earley2007LinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_earley2007LinkedAPI] = true;
    artLabelStrings[ARTTS_earleyIndexedAPI] = "earleyIndexedAPI";
    artLabelInternalStrings[ARTTS_earleyIndexedAPI] = "'earleyIndexedAPI'";
    artKindOfs[ARTTS_earleyIndexedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_earleyIndexedAPI] = true;
    artLabelStrings[ARTTS_earleyIndexedData] = "earleyIndexedData";
    artLabelInternalStrings[ARTTS_earleyIndexedData] = "'earleyIndexedData'";
    artKindOfs[ARTTS_earleyIndexedData] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_earleyIndexedData] = true;
    artLabelStrings[ARTTS_earleyIndexedPool] = "earleyIndexedPool";
    artLabelInternalStrings[ARTTS_earleyIndexedPool] = "'earleyIndexedPool'";
    artKindOfs[ARTTS_earleyIndexedPool] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_earleyIndexedPool] = true;
    artLabelStrings[ARTTS_earleyLinkedAPI] = "earleyLinkedAPI";
    artLabelInternalStrings[ARTTS_earleyLinkedAPI] = "'earleyLinkedAPI'";
    artKindOfs[ARTTS_earleyLinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_earleyLinkedAPI] = true;
    artLabelStrings[ARTTS_earleyTable] = "earleyTable";
    artLabelInternalStrings[ARTTS_earleyTable] = "'earleyTable'";
    artKindOfs[ARTTS_earleyTable] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_earleyTable] = true;
    artLabelStrings[ARTTS_earleyTableIndexedAPI] = "earleyTableIndexedAPI";
    artLabelInternalStrings[ARTTS_earleyTableIndexedAPI] = "'earleyTableIndexedAPI'";
    artKindOfs[ARTTS_earleyTableIndexedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_earleyTableIndexedAPI] = true;
    artLabelStrings[ARTTS_earleyTableIndexedData] = "earleyTableIndexedData";
    artLabelInternalStrings[ARTTS_earleyTableIndexedData] = "'earleyTableIndexedData'";
    artKindOfs[ARTTS_earleyTableIndexedData] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_earleyTableIndexedData] = true;
    artLabelStrings[ARTTS_earleyTableIndexedPool] = "earleyTableIndexedPool";
    artLabelInternalStrings[ARTTS_earleyTableIndexedPool] = "'earleyTableIndexedPool'";
    artKindOfs[ARTTS_earleyTableIndexedPool] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_earleyTableIndexedPool] = true;
    artLabelStrings[ARTTS_earleyTableLinkedAPI] = "earleyTableLinkedAPI";
    artLabelInternalStrings[ARTTS_earleyTableLinkedAPI] = "'earleyTableLinkedAPI'";
    artKindOfs[ARTTS_earleyTableLinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_earleyTableLinkedAPI] = true;
    artLabelStrings[ARTTS_ebnfClosureLeft] = "ebnfClosureLeft";
    artLabelInternalStrings[ARTTS_ebnfClosureLeft] = "'ebnfClosureLeft'";
    artKindOfs[ARTTS_ebnfClosureLeft] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_ebnfClosureLeft] = true;
    artLabelStrings[ARTTS_ebnfClosureRight] = "ebnfClosureRight";
    artLabelInternalStrings[ARTTS_ebnfClosureRight] = "'ebnfClosureRight'";
    artKindOfs[ARTTS_ebnfClosureRight] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_ebnfClosureRight] = true;
    artLabelStrings[ARTTS_ebnfLeftFactor] = "ebnfLeftFactor";
    artLabelInternalStrings[ARTTS_ebnfLeftFactor] = "'ebnfLeftFactor'";
    artKindOfs[ARTTS_ebnfLeftFactor] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_ebnfLeftFactor] = true;
    artLabelStrings[ARTTS_ebnfMultiplyOut] = "ebnfMultiplyOut";
    artLabelInternalStrings[ARTTS_ebnfMultiplyOut] = "'ebnfMultiplyOut'";
    artKindOfs[ARTTS_ebnfMultiplyOut] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_ebnfMultiplyOut] = true;
    artLabelStrings[ARTTS_ebnfracketToNonterminal] = "ebnfracketToNonterminal";
    artLabelInternalStrings[ARTTS_ebnfracketToNonterminal] = "'ebnfracketToNonterminal'";
    artKindOfs[ARTTS_ebnfracketToNonterminal] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_ebnfracketToNonterminal] = true;
    artLabelStrings[ARTTS_false] = "false";
    artLabelInternalStrings[ARTTS_false] = "'false'";
    artKindOfs[ARTTS_false] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_false] = true;
    artLabelStrings[ARTTS_generateC_PLUS_PLUS] = "generateC++";
    artLabelInternalStrings[ARTTS_generateC_PLUS_PLUS] = "'generateC++'";
    artKindOfs[ARTTS_generateC_PLUS_PLUS] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_generateC_PLUS_PLUS] = true;
    artLabelStrings[ARTTS_generateDynamic] = "generateDynamic";
    artLabelInternalStrings[ARTTS_generateDynamic] = "'generateDynamic'";
    artKindOfs[ARTTS_generateDynamic] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_generateDynamic] = true;
    artLabelStrings[ARTTS_generateFragment] = "generateFragment";
    artLabelInternalStrings[ARTTS_generateFragment] = "'generateFragment'";
    artKindOfs[ARTTS_generateFragment] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_generateFragment] = true;
    artLabelStrings[ARTTS_generateJava] = "generateJava";
    artLabelInternalStrings[ARTTS_generateJava] = "'generateJava'";
    artKindOfs[ARTTS_generateJava] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_generateJava] = true;
    artLabelStrings[ARTTS_generatePool] = "generatePool";
    artLabelInternalStrings[ARTTS_generatePool] = "'generatePool'";
    artKindOfs[ARTTS_generatePool] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_generatePool] = true;
    artLabelStrings[ARTTS_generateState] = "generateState";
    artLabelInternalStrings[ARTTS_generateState] = "'generateState'";
    artKindOfs[ARTTS_generateState] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_generateState] = true;
    artLabelStrings[ARTTS_generateStatic] = "generateStatic";
    artLabelInternalStrings[ARTTS_generateStatic] = "'generateStatic'";
    artKindOfs[ARTTS_generateStatic] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_generateStatic] = true;
    artLabelStrings[ARTTS_gll] = "gll";
    artLabelInternalStrings[ARTTS_gll] = "'gll'";
    artKindOfs[ARTTS_gll] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_gll] = true;
    artLabelStrings[ARTTS_gllClusteredGeneratorPool] = "gllClusteredGeneratorPool";
    artLabelInternalStrings[ARTTS_gllClusteredGeneratorPool] = "'gllClusteredGeneratorPool'";
    artKindOfs[ARTTS_gllClusteredGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_gllClusteredGeneratorPool] = true;
    artLabelStrings[ARTTS_gllGeneratorPool] = "gllGeneratorPool";
    artLabelInternalStrings[ARTTS_gllGeneratorPool] = "'gllGeneratorPool'";
    artKindOfs[ARTTS_gllGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_gllGeneratorPool] = true;
    artLabelStrings[ARTTS_gllTWEGeneratorPool] = "gllTWEGeneratorPool";
    artLabelInternalStrings[ARTTS_gllTWEGeneratorPool] = "'gllTWEGeneratorPool'";
    artKindOfs[ARTTS_gllTWEGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_gllTWEGeneratorPool] = true;
    artLabelStrings[ARTTS_import] = "import";
    artLabelInternalStrings[ARTTS_import] = "'import'";
    artKindOfs[ARTTS_import] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_import] = true;
    artLabelStrings[ARTTS_inputFile] = "inputFile";
    artLabelInternalStrings[ARTTS_inputFile] = "'inputFile'";
    artKindOfs[ARTTS_inputFile] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_inputFile] = true;
    artLabelStrings[ARTTS_inputFileIfExists] = "inputFileIfExists";
    artLabelInternalStrings[ARTTS_inputFileIfExists] = "'inputFileIfExists'";
    artKindOfs[ARTTS_inputFileIfExists] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_inputFileIfExists] = true;
    artLabelStrings[ARTTS_inputString] = "inputString";
    artLabelInternalStrings[ARTTS_inputString] = "'inputString'";
    artKindOfs[ARTTS_inputString] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_inputString] = true;
    artLabelStrings[ARTTS_lcnp] = "lcnp";
    artLabelInternalStrings[ARTTS_lcnp] = "'lcnp'";
    artKindOfs[ARTTS_lcnp] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lcnp] = true;
    artLabelStrings[ARTTS_lcnpGeneratorPool] = "lcnpGeneratorPool";
    artLabelInternalStrings[ARTTS_lcnpGeneratorPool] = "'lcnpGeneratorPool'";
    artKindOfs[ARTTS_lcnpGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lcnpGeneratorPool] = true;
    artLabelStrings[ARTTS_lcnpIndexedAPI] = "lcnpIndexedAPI";
    artLabelInternalStrings[ARTTS_lcnpIndexedAPI] = "'lcnpIndexedAPI'";
    artKindOfs[ARTTS_lcnpIndexedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lcnpIndexedAPI] = true;
    artLabelStrings[ARTTS_lcnpIndexedPool] = "lcnpIndexedPool";
    artLabelInternalStrings[ARTTS_lcnpIndexedPool] = "'lcnpIndexedPool'";
    artKindOfs[ARTTS_lcnpIndexedPool] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lcnpIndexedPool] = true;
    artLabelStrings[ARTTS_lcnpLinkedAPI] = "lcnpLinkedAPI";
    artLabelInternalStrings[ARTTS_lcnpLinkedAPI] = "'lcnpLinkedAPI'";
    artKindOfs[ARTTS_lcnpLinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lcnpLinkedAPI] = true;
    artLabelStrings[ARTTS_lexCFParse] = "lexCFParse";
    artLabelInternalStrings[ARTTS_lexCFParse] = "'lexCFParse'";
    artKindOfs[ARTTS_lexCFParse] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexCFParse] = true;
    artLabelStrings[ARTTS_lexCFRecognise] = "lexCFRecognise";
    artLabelInternalStrings[ARTTS_lexCFRecognise] = "'lexCFRecognise'";
    artKindOfs[ARTTS_lexCFRecognise] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexCFRecognise] = true;
    artLabelStrings[ARTTS_lexDFA] = "lexDFA";
    artLabelInternalStrings[ARTTS_lexDFA] = "'lexDFA'";
    artKindOfs[ARTTS_lexDFA] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexDFA] = true;
    artLabelStrings[ARTTS_lexDead] = "lexDead";
    artLabelInternalStrings[ARTTS_lexDead] = "'lexDead'";
    artKindOfs[ARTTS_lexDead] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexDead] = true;
    artLabelStrings[ARTTS_lexExtents] = "lexExtents";
    artLabelInternalStrings[ARTTS_lexExtents] = "'lexExtents'";
    artKindOfs[ARTTS_lexExtents] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexExtents] = true;
    artLabelStrings[ARTTS_lexLongestAcross] = "lexLongestAcross";
    artLabelInternalStrings[ARTTS_lexLongestAcross] = "'lexLongestAcross'";
    artKindOfs[ARTTS_lexLongestAcross] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexLongestAcross] = true;
    artLabelStrings[ARTTS_lexLongestWithin] = "lexLongestWithin";
    artLabelInternalStrings[ARTTS_lexLongestWithin] = "'lexLongestWithin'";
    artKindOfs[ARTTS_lexLongestWithin] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexLongestWithin] = true;
    artLabelStrings[ARTTS_lexPrintTWESet] = "lexPrintTWESet";
    artLabelInternalStrings[ARTTS_lexPrintTWESet] = "'lexPrintTWESet'";
    artKindOfs[ARTTS_lexPrintTWESet] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexPrintTWESet] = true;
    artLabelStrings[ARTTS_lexPriority] = "lexPriority";
    artLabelInternalStrings[ARTTS_lexPriority] = "'lexPriority'";
    artKindOfs[ARTTS_lexPriority] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexPriority] = true;
    artLabelStrings[ARTTS_lexRecursive] = "lexRecursive";
    artLabelInternalStrings[ARTTS_lexRecursive] = "'lexRecursive'";
    artKindOfs[ARTTS_lexRecursive] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexRecursive] = true;
    artLabelStrings[ARTTS_lexSegments] = "lexSegments";
    artLabelInternalStrings[ARTTS_lexSegments] = "'lexSegments'";
    artKindOfs[ARTTS_lexSegments] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexSegments] = true;
    artLabelStrings[ARTTS_lexWSSuffix] = "lexWSSuffix";
    artLabelInternalStrings[ARTTS_lexWSSuffix] = "'lexWSSuffix'";
    artKindOfs[ARTTS_lexWSSuffix] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexWSSuffix] = true;
    artLabelStrings[ARTTS_lexerData] = "lexerData";
    artLabelInternalStrings[ARTTS_lexerData] = "'lexerData'";
    artKindOfs[ARTTS_lexerData] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexerData] = true;
    artLabelStrings[ARTTS_lexerName] = "lexerName";
    artLabelInternalStrings[ARTTS_lexerName] = "'lexerName'";
    artKindOfs[ARTTS_lexerName] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_lexerName] = true;
    artLabelStrings[ARTTS_longest] = "longest";
    artLabelInternalStrings[ARTTS_longest] = "'longest'";
    artKindOfs[ARTTS_longest] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_longest] = true;
    artLabelStrings[ARTTS_mgll] = "mgll";
    artLabelInternalStrings[ARTTS_mgll] = "'mgll'";
    artKindOfs[ARTTS_mgll] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_mgll] = true;
    artLabelStrings[ARTTS_mgllGeneratorPool] = "mgllGeneratorPool";
    artLabelInternalStrings[ARTTS_mgllGeneratorPool] = "'mgllGeneratorPool'";
    artKindOfs[ARTTS_mgllGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_mgllGeneratorPool] = true;
    artLabelStrings[ARTTS_module] = "module";
    artLabelInternalStrings[ARTTS_module] = "'module'";
    artKindOfs[ARTTS_module] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_module] = true;
    artLabelStrings[ARTTS_namespace] = "namespace";
    artLabelInternalStrings[ARTTS_namespace] = "'namespace'";
    artKindOfs[ARTTS_namespace] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_namespace] = true;
    artLabelStrings[ARTTS_option] = "option";
    artLabelInternalStrings[ARTTS_option] = "'option'";
    artKindOfs[ARTTS_option] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_option] = true;
    artLabelStrings[ARTTS_osbrd] = "osbrd";
    artLabelInternalStrings[ARTTS_osbrd] = "'osbrd'";
    artKindOfs[ARTTS_osbrd] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_osbrd] = true;
    artLabelStrings[ARTTS_osbrdGenerator] = "osbrdGenerator";
    artLabelInternalStrings[ARTTS_osbrdGenerator] = "'osbrdGenerator'";
    artKindOfs[ARTTS_osbrdGenerator] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_osbrdGenerator] = true;
    artLabelStrings[ARTTS_outputDirectory] = "outputDirectory";
    artLabelInternalStrings[ARTTS_outputDirectory] = "'outputDirectory'";
    artKindOfs[ARTTS_outputDirectory] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_outputDirectory] = true;
    artLabelStrings[ARTTS_parserName] = "parserName";
    artLabelInternalStrings[ARTTS_parserName] = "'parserName'";
    artKindOfs[ARTTS_parserName] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_parserName] = true;
    artLabelStrings[ARTTS_phaseAG] = "phaseAG";
    artLabelInternalStrings[ARTTS_phaseAG] = "'phaseAG'";
    artKindOfs[ARTTS_phaseAG] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_phaseAG] = true;
    artLabelStrings[ARTTS_phaseDerivationSelect] = "phaseDerivationSelect";
    artLabelInternalStrings[ARTTS_phaseDerivationSelect] = "'phaseDerivationSelect'";
    artKindOfs[ARTTS_phaseDerivationSelect] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_phaseDerivationSelect] = true;
    artLabelStrings[ARTTS_phaseGIFT] = "phaseGIFT";
    artLabelInternalStrings[ARTTS_phaseGIFT] = "'phaseGIFT'";
    artKindOfs[ARTTS_phaseGIFT] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_phaseGIFT] = true;
    artLabelStrings[ARTTS_phaseLex] = "phaseLex";
    artLabelInternalStrings[ARTTS_phaseLex] = "'phaseLex'";
    artKindOfs[ARTTS_phaseLex] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_phaseLex] = true;
    artLabelStrings[ARTTS_phaseModule] = "phaseModule";
    artLabelInternalStrings[ARTTS_phaseModule] = "'phaseModule'";
    artKindOfs[ARTTS_phaseModule] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_phaseModule] = true;
    artLabelStrings[ARTTS_phaseParse] = "phaseParse";
    artLabelInternalStrings[ARTTS_phaseParse] = "'phaseParse'";
    artKindOfs[ARTTS_phaseParse] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_phaseParse] = true;
    artLabelStrings[ARTTS_phasePostChoose] = "phasePostChoose";
    artLabelInternalStrings[ARTTS_phasePostChoose] = "'phasePostChoose'";
    artKindOfs[ARTTS_phasePostChoose] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_phasePostChoose] = true;
    artLabelStrings[ARTTS_phasePreChoose] = "phasePreChoose";
    artLabelInternalStrings[ARTTS_phasePreChoose] = "'phasePreChoose'";
    artKindOfs[ARTTS_phasePreChoose] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_phasePreChoose] = true;
    artLabelStrings[ARTTS_phaseSOS] = "phaseSOS";
    artLabelInternalStrings[ARTTS_phaseSOS] = "'phaseSOS'";
    artKindOfs[ARTTS_phaseSOS] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_phaseSOS] = true;
    artLabelStrings[ARTTS_phaseTR] = "phaseTR";
    artLabelInternalStrings[ARTTS_phaseTR] = "'phaseTR'";
    artKindOfs[ARTTS_phaseTR] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_phaseTR] = true;
    artLabelStrings[ARTTS_postLongestAcross] = "postLongestAcross";
    artLabelInternalStrings[ARTTS_postLongestAcross] = "'postLongestAcross'";
    artKindOfs[ARTTS_postLongestAcross] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_postLongestAcross] = true;
    artLabelStrings[ARTTS_postLongestWithin] = "postLongestWithin";
    artLabelInternalStrings[ARTTS_postLongestWithin] = "'postLongestWithin'";
    artKindOfs[ARTTS_postLongestWithin] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_postLongestWithin] = true;
    artLabelStrings[ARTTS_postPriority] = "postPriority";
    artLabelInternalStrings[ARTTS_postPriority] = "'postPriority'";
    artKindOfs[ARTTS_postPriority] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_postPriority] = true;
    artLabelStrings[ARTTS_postUseTerminals] = "postUseTerminals";
    artLabelInternalStrings[ARTTS_postUseTerminals] = "'postUseTerminals'";
    artKindOfs[ARTTS_postUseTerminals] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_postUseTerminals] = true;
    artLabelStrings[ARTTS_predictivePops] = "predictivePops";
    artLabelInternalStrings[ARTTS_predictivePops] = "'predictivePops'";
    artKindOfs[ARTTS_predictivePops] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_predictivePops] = true;
    artLabelStrings[ARTTS_prelude] = "prelude";
    artLabelInternalStrings[ARTTS_prelude] = "'prelude'";
    artKindOfs[ARTTS_prelude] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_prelude] = true;
    artLabelStrings[ARTTS_showAG] = "showAG";
    artLabelInternalStrings[ARTTS_showAG] = "'showAG'";
    artKindOfs[ARTTS_showAG] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_showAG] = true;
    artLabelStrings[ARTTS_showAll] = "showAll";
    artLabelInternalStrings[ARTTS_showAll] = "'showAll'";
    artKindOfs[ARTTS_showAll] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_showAll] = true;
    artLabelStrings[ARTTS_showBSR] = "showBSR";
    artLabelInternalStrings[ARTTS_showBSR] = "'showBSR'";
    artKindOfs[ARTTS_showBSR] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_showBSR] = true;
    artLabelStrings[ARTTS_showDT] = "showDT";
    artLabelInternalStrings[ARTTS_showDT] = "'showDT'";
    artKindOfs[ARTTS_showDT] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_showDT] = true;
    artLabelStrings[ARTTS_showGIFT] = "showGIFT";
    artLabelInternalStrings[ARTTS_showGIFT] = "'showGIFT'";
    artKindOfs[ARTTS_showGIFT] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_showGIFT] = true;
    artLabelStrings[ARTTS_showSOS] = "showSOS";
    artLabelInternalStrings[ARTTS_showSOS] = "'showSOS'";
    artKindOfs[ARTTS_showSOS] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_showSOS] = true;
    artLabelStrings[ARTTS_showSPPFCore] = "showSPPFCore";
    artLabelInternalStrings[ARTTS_showSPPFCore] = "'showSPPFCore'";
    artKindOfs[ARTTS_showSPPFCore] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_showSPPFCore] = true;
    artLabelStrings[ARTTS_showSPPFFull] = "showSPPFFull";
    artLabelInternalStrings[ARTTS_showSPPFFull] = "'showSPPFFull'";
    artKindOfs[ARTTS_showSPPFFull] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_showSPPFFull] = true;
    artLabelStrings[ARTTS_showTR] = "showTR";
    artLabelInternalStrings[ARTTS_showTR] = "'showTR'";
    artKindOfs[ARTTS_showTR] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_showTR] = true;
    artLabelStrings[ARTTS_showTWE] = "showTWE";
    artLabelInternalStrings[ARTTS_showTWE] = "'showTWE'";
    artKindOfs[ARTTS_showTWE] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_showTWE] = true;
    artLabelStrings[ARTTS_start] = "start";
    artLabelInternalStrings[ARTTS_start] = "'start'";
    artKindOfs[ARTTS_start] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_start] = true;
    artLabelStrings[ARTTS_statistics] = "statistics";
    artLabelInternalStrings[ARTTS_statistics] = "'statistics'";
    artKindOfs[ARTTS_statistics] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_statistics] = true;
    artLabelStrings[ARTTS_support] = "support";
    artLabelInternalStrings[ARTTS_support] = "'support'";
    artKindOfs[ARTTS_support] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_support] = true;
    artLabelStrings[ARTTS_suppressPopGuard] = "suppressPopGuard";
    artLabelInternalStrings[ARTTS_suppressPopGuard] = "'suppressPopGuard'";
    artKindOfs[ARTTS_suppressPopGuard] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_suppressPopGuard] = true;
    artLabelStrings[ARTTS_suppressProductionGuard] = "suppressProductionGuard";
    artLabelInternalStrings[ARTTS_suppressProductionGuard] = "'suppressProductionGuard'";
    artKindOfs[ARTTS_suppressProductionGuard] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_suppressProductionGuard] = true;
    artLabelStrings[ARTTS_suppressSemantics] = "suppressSemantics";
    artLabelInternalStrings[ARTTS_suppressSemantics] = "'suppressSemantics'";
    artKindOfs[ARTTS_suppressSemantics] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_suppressSemantics] = true;
    artLabelStrings[ARTTS_suppressTestRepeat] = "suppressTestRepeat";
    artLabelInternalStrings[ARTTS_suppressTestRepeat] = "'suppressTestRepeat'";
    artKindOfs[ARTTS_suppressTestRepeat] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_suppressTestRepeat] = true;
    artLabelStrings[ARTTS_terminal] = "terminal";
    artLabelInternalStrings[ARTTS_terminal] = "'terminal'";
    artKindOfs[ARTTS_terminal] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_terminal] = true;
    artLabelStrings[ARTTS_trace] = "trace";
    artLabelInternalStrings[ARTTS_trace] = "'trace'";
    artKindOfs[ARTTS_trace] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_trace] = true;
    artLabelStrings[ARTTS_true] = "true";
    artLabelInternalStrings[ARTTS_true] = "'true'";
    artKindOfs[ARTTS_true] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_true] = true;
    artLabelStrings[ARTTS_verbosity] = "verbosity";
    artLabelInternalStrings[ARTTS_verbosity] = "'verbosity'";
    artKindOfs[ARTTS_verbosity] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_verbosity] = true;
    artLabelStrings[ARTTS_whitespace] = "whitespace";
    artLabelInternalStrings[ARTTS_whitespace] = "'whitespace'";
    artKindOfs[ARTTS_whitespace] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS_whitespace] = true;
    artLabelStrings[ARTTS__BAR] = "|";
    artLabelInternalStrings[ARTTS__BAR] = "'|'";
    artKindOfs[ARTTS__BAR] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__BAR] = true;
    artLabelStrings[ARTTS__BAR_BAR] = "||";
    artLabelInternalStrings[ARTTS__BAR_BAR] = "'||'";
    artKindOfs[ARTTS__BAR_BAR] = ARTK_CASE_SENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTS__BAR_BAR] = true;
    artLabelStrings[ARTTI__QUOTE_QUOTE] = "''";
    artLabelInternalStrings[ARTTI__QUOTE_QUOTE] = "\"''\"";
    artKindOfs[ARTTI__QUOTE_QUOTE] = ARTK_CASE_INSENSITIVE_TERMINAL;
    artTerminalRequiresWhiteSpace[ARTTI__QUOTE_QUOTE] = true;
    artTerminalCaseInsensitive[ARTTI__QUOTE_QUOTE] = true;
    artTableInitialiser_ARTV3_CHAR_BQ();
    artTableInitialiser_ARTV3_ID();
    artTableInitialiser_ARTV3_IDList();
    artTableInitialiser_ARTV3_IDopt();
    artTableInitialiser_ARTV3_INTEGER();
    artTableInitialiser_ARTV3_REAL();
    artTableInitialiser_ARTV3_STRING_BRACE_NEST();
    artTableInitialiser_ARTV3_STRING_DOLLAR();
    artTableInitialiser_ARTV3_STRING_DQ();
    artTableInitialiser_ARTV3_STRING_PLAIN_SQ();
    artTableInitialiser_ARTV3_TYPE();
    artTableInitialiser_ARTV3_TypeList();
    artTableInitialiser_ARTV3_TypeNest();
    artTableInitialiser_ARTV3_abbrev();
    artTableInitialiser_ARTV3_action();
    artTableInitialiser_ARTV3_alt();
    artTableInitialiser_ARTV3_alt1();
    artTableInitialiser_ARTV3_annotation();
    artTableInitialiser_ARTV3_annotations();
    artTableInitialiser_ARTV3_attribute();
    artTableInitialiser_ARTV3_attributes();
    artTableInitialiser_ARTV3_attributesOpt();
    artTableInitialiser_ARTV3_builtinTerminal();
    artTableInitialiser_ARTV3_caseInsensitiveTerminal();
    artTableInitialiser_ARTV3_caseSensitiveTerminal();
    artTableInitialiser_ARTV3_cat();
    artTableInitialiser_ARTV3_catTail();
    artTableInitialiser_ARTV3_characterSetTerminal();
    artTableInitialiser_ARTV3_characterTerminal();
    artTableInitialiser_ARTV3_choiceElement();
    artTableInitialiser_ARTV3_chooser();
    artTableInitialiser_ARTV3_choosers();
    artTableInitialiser_ARTV3_delay();
    artTableInitialiser_ARTV3_deleter();
    artTableInitialiser_ARTV3_diff();
    artTableInitialiser_ARTV3_directive();
    artTableInitialiser_ARTV3_element();
    artTableInitialiser_ARTV3_epsilon();
    artTableInitialiser_ARTV3_fold();
    artTableInitialiser_ARTV3_gather();
    artTableInitialiser_ARTV3_grammarRule();
    artTableInitialiser_ARTV3_insertion();
    artTableInitialiser_ARTV3_insertionName();
    artTableInitialiser_ARTV3_iter();
    artTableInitialiser_ARTV3_moduleHeader();
    artTableInitialiser_ARTV3_modules();
    artTableInitialiser_ARTV3_name();
    artTableInitialiser_ARTV3_nonterminal();
    artTableInitialiser_ARTV3_not();
    artTableInitialiser_ARTV3_optionSingle();
    artTableInitialiser_ARTV3_optionalColon();
    artTableInitialiser_ARTV3_options();
    artTableInitialiser_ARTV3_rhs();
    artTableInitialiser_ARTV3_slot();
    artTableInitialiser_ARTV3_term();
    artTableInitialiser_ARTV3_terminaliser();
    artTableInitialiser_ARTV3_terminalisers();
    artTableInitialiser_ARTV3_terms();
    artTableInitialiser_ARTV3_termsOpt();
    artTableInitialiser_ARTV3_text();
    artTableInitialiser_ARTV3_textElement();
    artTableInitialiser_ARTV3_textElements();
    artTableInitialiser_ARTV3_trueFalse();
    artTableInitialiser_ARTV3_union();
  }

  public ARTParser(ARTLexerBase artLexerBase) {
    this(null, artLexerBase);
  }

  public ARTParser(ARTGrammar artGrammar, ARTLexerBase artLexerBase) {
    super(artGrammar, artLexerBase);
    artFirstTerminalLabel = ARTTS__SHREIK;
    artFirstUnusedLabel = ARTX_LABEL_EXTENT + 1;
    artSetExtent = ARTX_EPSILON + 1;
    ARTL_EOS = ARTX_EOS;
    ARTL_EPSILON = ARTX_EPSILON;
    ARTL_DUMMY = ARTX_DUMMY;
    artGrammarKind = ARTModeGrammarKind.BNF;
    artDefaultStartSymbolLabel = ARTL_ARTV3_text;
    artBuildOptions = "ARTOptionBlock [verbosityLevel=0, statistics=false, trace=false, inputFilenames=[], phaseModule=true, phaseLex=true, phasePreChoose=true, phaseParse=true, phasePostChoose=true, phaseDerivationSelect=true, phaseGIFT=true, phaseAG=true, phaseTR=true, phaseSOS=true, showTWE=false, showBSR=false, showSPPFFull=false, showSPPFCore=false, showDT=false, showGIFT=false, showAG=false, showTR=false, showSOS=false, ebnfClosureLeft=false, ebnfClosureRight=false, ebnfMultiplyOut=false, ebnfLeftFactor=false, ebnfBracketToNonterminal=false, lexWSSuffix=false, lexExtents=false, lexSegments=false, lexRecursive=false, lexPrintTWESet=false, lexDFA=false, lexCFRecognise=false, lexCFParse=true, lexDead=false, lexLongestWithin=false, lexLongestAcross=false, lexPriority=false, postLongestWithin=false, postLongestAcross=false, postPriority=false, outputDirectory=., parserName=ARTParser, lexerName=ARTLexer, namespace=uk.ac.rhul.cs.csle.art.manager.parser, despatchMode=fragment, supportMode=HashPool, targetLanguageMode=Java, predictivePops=false, FIFODescriptors=false, suppressPopGuard=false, suppressProductionGuard=false, suppressTestRepeat=false, suppressSemantics=false, clusteredGSS=false, mGLL=false, algorithmMode=gllGeneratorPool, treeLevel=3]";
    artFIFODescriptors = false;
    artSetInitialise();
    artTableInitialise();
  }

  private ARTGLLRDT artRDT;
  private int artNextFreeNodeNumber = 1;
 
  ARTManager artManager; 
  ARTModule currentModule;

  public static class ARTAT_ARTV3_CHAR_BQ extends ARTGLLAttributeBlock {
    public int rightExtent;
    public int leftExtent;
    public String lexeme;
    public String v;
    public String toString() {
      String ret = "";
    ret += " rightExtent=" + rightExtent;
    ret += " leftExtent=" + leftExtent;
    ret += " lexeme=" + lexeme;
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_ID extends ARTGLLAttributeBlock {
    public boolean b;
    public int rightExtent;
    public int leftExtent;
    public String lexeme;
    public String v;
    public String toString() {
      String ret = "";
    ret += " b=" + b;
    ret += " rightExtent=" + rightExtent;
    ret += " leftExtent=" + leftExtent;
    ret += " lexeme=" + lexeme;
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_IDopt extends ARTGLLAttributeBlock {
    public String v;
    ARTGLLRDTHandle ID1;
    public String toString() {
      String ret = "";
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_INTEGER extends ARTGLLAttributeBlock {
    public int v;
    public int rightExtent;
    public int leftExtent;
    public String lexeme;
    public String toString() {
      String ret = "";
    ret += " v=" + v;
    ret += " rightExtent=" + rightExtent;
    ret += " leftExtent=" + leftExtent;
    ret += " lexeme=" + lexeme;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_REAL extends ARTGLLAttributeBlock {
    public int rightExtent;
    public int leftExtent;
    public String lexeme;
    public double v;
    public String toString() {
      String ret = "";
    ret += " rightExtent=" + rightExtent;
    ret += " leftExtent=" + leftExtent;
    ret += " lexeme=" + lexeme;
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_STRING_BRACE_NEST extends ARTGLLAttributeBlock {
    public int rightExtent;
    public int leftExtent;
    public String lexeme;
    public String v;
    public String toString() {
      String ret = "";
    ret += " rightExtent=" + rightExtent;
    ret += " leftExtent=" + leftExtent;
    ret += " lexeme=" + lexeme;
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_STRING_DOLLAR extends ARTGLLAttributeBlock {
    public int rightExtent;
    public int leftExtent;
    public String lexeme;
    public String v;
    public String toString() {
      String ret = "";
    ret += " rightExtent=" + rightExtent;
    ret += " leftExtent=" + leftExtent;
    ret += " lexeme=" + lexeme;
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_STRING_DQ extends ARTGLLAttributeBlock {
    public int rightExtent;
    public int leftExtent;
    public String lexeme;
    public String v;
    public String toString() {
      String ret = "";
    ret += " rightExtent=" + rightExtent;
    ret += " leftExtent=" + leftExtent;
    ret += " lexeme=" + lexeme;
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_STRING_PLAIN_SQ extends ARTGLLAttributeBlock {
    public int rightExtent;
    public int leftExtent;
    public String lexeme;
    public String v;
    public String toString() {
      String ret = "";
    ret += " rightExtent=" + rightExtent;
    ret += " leftExtent=" + leftExtent;
    ret += " lexeme=" + lexeme;
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_TYPE extends ARTGLLAttributeBlock {
    public int rightExtent;
    public int leftExtent;
    public String lexeme;
    public String v;
    public String toString() {
      String ret = "";
    ret += " rightExtent=" + rightExtent;
    ret += " leftExtent=" + leftExtent;
    ret += " lexeme=" + lexeme;
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_action extends ARTGLLAttributeBlock {
    public String v;
    ARTGLLRDTHandle STRING_BRACE_NEST1;
    public String toString() {
      String ret = "";
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_attribute extends ARTGLLAttributeBlock {
    public String lhs;
    ARTGLLRDTHandle ID1;
    ARTGLLRDTHandle TYPE1;
    public String toString() {
      String ret = "";
    ret += " lhs=" + lhs;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_attributes extends ARTGLLAttributeBlock {
    public String lhs;
    ARTGLLRDTHandle attribute1;
    ARTGLLRDTHandle attributes1;
    public String toString() {
      String ret = "";
    ret += " lhs=" + lhs;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_attributesOpt extends ARTGLLAttributeBlock {
    public String lhs;
    ARTGLLRDTHandle attributes1;
    public String toString() {
      String ret = "";
    ret += " lhs=" + lhs;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_builtinTerminal extends ARTGLLAttributeBlock {
    public String v;
    ARTGLLRDTHandle ID1;
    public String toString() {
      String ret = "";
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_caseInsensitiveTerminal extends ARTGLLAttributeBlock {
    public String v;
    ARTGLLRDTHandle STRING_DQ1;
    public String toString() {
      String ret = "";
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_caseSensitiveTerminal extends ARTGLLAttributeBlock {
    public String v;
    ARTGLLRDTHandle STRING_PLAIN_SQ1;
    public String toString() {
      String ret = "";
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_characterSetTerminal extends ARTGLLAttributeBlock {
    public String lo;
    public String hi;
    ARTGLLRDTHandle CHAR_BQ1;
    ARTGLLRDTHandle CHAR_BQ2;
    public String toString() {
      String ret = "";
    ret += " lo=" + lo;
    ret += " hi=" + hi;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_characterTerminal extends ARTGLLAttributeBlock {
    public String v;
    ARTGLLRDTHandle CHAR_BQ1;
    public String toString() {
      String ret = "";
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_choiceElement extends ARTGLLAttributeBlock {
    public ARTValueTerm t;
    ARTGLLRDTHandle ID1;
    ARTGLLRDTHandle builtinTerminal1;
    ARTGLLRDTHandle caseInsensitiveTerminal1;
    ARTGLLRDTHandle caseSensitiveTerminal1;
    ARTGLLRDTHandle characterSetTerminal1;
    ARTGLLRDTHandle characterTerminal1;
    ARTGLLRDTHandle nonterminal1;
    public String toString() {
      String ret = "";
    ret += " t=" + t;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_element extends ARTGLLAttributeBlock {
    public boolean doFirst;
    ARTGLLRDTHandle builtinTerminal1;
    ARTGLLRDTHandle caseInsensitiveTerminal1;
    ARTGLLRDTHandle caseSensitiveTerminal1;
    ARTGLLRDTHandle characterSetTerminal1;
    ARTGLLRDTHandle characterTerminal1;
    ARTGLLRDTHandle nonterminal1;
    public String toString() {
      String ret = "";
    ret += " doFirst=" + doFirst;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_insertionName extends ARTGLLAttributeBlock {
    public String v;
    ARTGLLRDTHandle ID1;
    public String toString() {
      String ret = "";
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_nonterminal extends ARTGLLAttributeBlock {
    public String v;
    ARTGLLRDTHandle ID1;
    ARTGLLRDTHandle STRING_DOLLAR1;
    public String toString() {
      String ret = "";
    ret += " v=" + v;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_rhs extends ARTGLLAttributeBlock {
    public String lhs;
    public boolean isDeleter;
    ARTGLLRDTHandle rhs1;
    public String toString() {
      String ret = "";
    ret += " lhs=" + lhs;
    ret += " isDeleter=" + isDeleter;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_terminaliser extends ARTGLLAttributeBlock {
    public boolean isWhiteSpace;
    ARTGLLRDTHandle builtinTerminal1;
    ARTGLLRDTHandle nonterminal1;
    public String toString() {
      String ret = "";
    ret += " isWhiteSpace=" + isWhiteSpace;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_terminalisers extends ARTGLLAttributeBlock {
    public boolean isWhiteSpace;
    ARTGLLRDTHandle terminaliser1;
    ARTGLLRDTHandle terminalisers1;
    public String toString() {
      String ret = "";
    ret += " isWhiteSpace=" + isWhiteSpace;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_text extends ARTGLLAttributeBlock {
    public ARTManager artManager;
    public String toString() {
      String ret = "";
    ret += " artManager=" + artManager;
      return ret + " ";
}
  }

  public static class ARTAT_ARTV3_trueFalse extends ARTGLLAttributeBlock {
    public boolean v;
    public String toString() {
      String ret = "";
    ret += " v=" + v;
      return ret + " ";
}
  }

  public void ARTRD_CHAR_BQ(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_CHAR_BQ CHAR_BQ) throws ARTException {
  ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
      /*ARTV3.CHAR_BQ ::= &CHAR_BQ .*/
      case ARTL_ARTV3_CHAR_BQ_1652: 
                ARTRD_CHAR_BQ(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, CHAR_BQ);
                CHAR_BQ.lexeme = artLexeme(CHAR_BQ.leftExtent, CHAR_BQ.rightExtent); CHAR_BQ.v = artLexemeAsString(CHAR_BQ.leftExtent, CHAR_BQ.rightExtent, 1, 0); 
        break;
        default:
          throw new ARTException("ARTRD_CHAR_BQ: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_ID ID) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.ID ::= &ID .*/
    case ARTL_ARTV3_ID_1584: 
            ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID);
            ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent); ID.v = artLexemeAsID(ID.leftExtent, ID.rightExtent); 
      break;
        default:
          throw new ARTException("ARTRD_ID: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_IDList(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_ID ID1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.IDList ::= ARTV3.ID .*/
    case ARTL_ARTV3_IDList_1516: 
      ID1 = new ARTAT_ARTV3_ID();
            ARTRD_IDList(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1);
      ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
            break;
    /*ARTV3.IDList ::= ARTV3.ID ARTV3.IDList .*/
    case ARTL_ARTV3_IDList_1522: 
      ID1 = new ARTAT_ARTV3_ID();
            ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, ID1);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_IDList(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
        default:
          throw new ARTException("ARTRD_IDList: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_IDopt(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_IDopt IDopt, ARTAT_ARTV3_ID ID1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.IDopt ::= ARTV3.ID .*/
    case ARTL_ARTV3_IDopt_1526: 
      ID1 = new ARTAT_ARTV3_ID();
            ARTRD_IDopt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, IDopt, ID1);
      ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
      IDopt.v = ID1.v; 
      break;
    /*ARTV3.IDopt ::= # .*/
    case ARTL_ARTV3_IDopt_1534: 
      ID1 = new ARTAT_ARTV3_ID();
      IDopt.v = null;
      ARTRD_IDopt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, IDopt, ID1);
                  break;
        default:
          throw new ARTException("ARTRD_IDopt: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_INTEGER(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_INTEGER INTEGER) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.INTEGER ::= &INTEGER .*/
    case ARTL_ARTV3_INTEGER_1622: 
            ARTRD_INTEGER(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, INTEGER);
            INTEGER.lexeme = artLexeme(INTEGER.leftExtent, INTEGER.rightExtent); INTEGER.v = artLexemeAsInteger(INTEGER.leftExtent, INTEGER.rightExtent); 
      break;
        default:
          throw new ARTException("ARTRD_INTEGER: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_REAL(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_REAL REAL) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.REAL ::= &REAL .*/
    case ARTL_ARTV3_REAL_1628: 
            ARTRD_REAL(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, REAL);
            REAL.lexeme = artLexeme(REAL.leftExtent, REAL.rightExtent); REAL.v = artLexemeAsReal(REAL.leftExtent, REAL.rightExtent); 
      break;
        default:
          throw new ARTException("ARTRD_REAL: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_STRING_BRACE_NEST(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_STRING_BRACE_NEST STRING_BRACE_NEST) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.STRING_BRACE_NEST ::= &STRING_BRACE_NEST .*/
    case ARTL_ARTV3_STRING_BRACE_NEST_1658: 
            ARTRD_STRING_BRACE_NEST(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_BRACE_NEST);
            STRING_BRACE_NEST.lexeme = artLexeme(STRING_BRACE_NEST.leftExtent, STRING_BRACE_NEST.rightExtent); STRING_BRACE_NEST.v = artLexemeAsString(STRING_BRACE_NEST.leftExtent, STRING_BRACE_NEST.rightExtent); 
      break;
        default:
          throw new ARTException("ARTRD_STRING_BRACE_NEST: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_STRING_DOLLAR(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_STRING_DOLLAR STRING_DOLLAR) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.STRING_DOLLAR ::= &STRING_DOLLAR .*/
    case ARTL_ARTV3_STRING_DOLLAR_1640: 
            ARTRD_STRING_DOLLAR(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_DOLLAR);
            STRING_DOLLAR.lexeme = artLexeme(STRING_DOLLAR.leftExtent, STRING_DOLLAR.rightExtent); STRING_DOLLAR.v = artLexemeAsString(STRING_DOLLAR.leftExtent, STRING_DOLLAR.rightExtent); 
      break;
        default:
          throw new ARTException("ARTRD_STRING_DOLLAR: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_STRING_DQ(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_STRING_DQ STRING_DQ) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.STRING_DQ ::= &STRING_DQ .*/
    case ARTL_ARTV3_STRING_DQ_1634: 
            ARTRD_STRING_DQ(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_DQ);
            STRING_DQ.lexeme = artLexeme(STRING_DQ.leftExtent, STRING_DQ.rightExtent); STRING_DQ.v = artLexemeAsString(STRING_DQ.leftExtent, STRING_DQ.rightExtent); 
      break;
        default:
          throw new ARTException("ARTRD_STRING_DQ: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_STRING_PLAIN_SQ(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_STRING_PLAIN_SQ STRING_PLAIN_SQ) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.STRING_PLAIN_SQ ::= &STRING_PLAIN_SQ .*/
    case ARTL_ARTV3_STRING_PLAIN_SQ_1646: 
            ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_PLAIN_SQ);
            STRING_PLAIN_SQ.lexeme = artLexeme(STRING_PLAIN_SQ.leftExtent, STRING_PLAIN_SQ.rightExtent); STRING_PLAIN_SQ.v = artLexemeAsRawString(STRING_PLAIN_SQ.leftExtent, STRING_PLAIN_SQ.rightExtent, 1, 1); 
      break;
        default:
          throw new ARTException("ARTRD_STRING_PLAIN_SQ: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_TYPE(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_TYPE TYPE) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.TYPE ::= ARTV3.TypeNest .*/
    case ARTL_ARTV3_TYPE_1590: 
            ARTRD_TYPE(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, TYPE);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_TypeNest(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
      TYPE.lexeme = artLexeme(TYPE.leftExtent, TYPE.rightExtent); TYPE.v = artLexemeAsID(TYPE.leftExtent, TYPE.rightExtent).trim(); 
      break;
        default:
          throw new ARTException("ARTRD_TYPE: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_TypeList(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.TypeList ::= ARTV3.TypeNest .*/
    case ARTL_ARTV3_TypeList_1610: 
            ARTRD_TypeList(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_TypeNest(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.TypeList ::= ARTV3.TypeNest ',' . ARTV3.TypeList */
    case ARTL_ARTV3_TypeList_1616: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_TypeNest(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.TypeList ::= ARTV3.TypeNest ',' ARTV3.TypeList .*/
    case ARTL_ARTV3_TypeList_1618: 
            ARTRD_TypeList(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_TypeList(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_TypeList: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_TypeNest(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.TypeNest ::= &ID .*/
    case ARTL_ARTV3_TypeNest_1596: 
            ARTRD_TypeNest(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.TypeNest ::= &ID '<' . ARTV3.TypeList '>' */
    case ARTL_ARTV3_TypeNest_1602: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.TypeNest ::= &ID '<' ARTV3.TypeList . '>' */
    case ARTL_ARTV3_TypeNest_1604: 
      ARTRD_TypeNest(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_TypeList(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.TypeNest ::= &ID '<' ARTV3.TypeList '>' .*/
    case ARTL_ARTV3_TypeNest_1606: 
            ARTRD_TypeNest(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default:
          throw new ARTException("ARTRD_TypeNest: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_abbrev(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.abbrev ::= ARTV3.iter .*/
    case ARTL_ARTV3_abbrev_1230: 
            ARTRD_abbrev(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_iter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.abbrev ::= ARTV3.iter '*' .*/
    case ARTL_ARTV3_abbrev_1236: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_iter(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.abbrev ::= ARTV3.iter '+' .*/
    case ARTL_ARTV3_abbrev_1242: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_iter(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.abbrev ::= ARTV3.iter '?' .*/
    case ARTL_ARTV3_abbrev_1248: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_iter(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default:
          throw new ARTException("ARTRD_abbrev: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_action(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_action action, ARTAT_ARTV3_STRING_BRACE_NEST STRING_BRACE_NEST1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.action ::= ARTV3.STRING_BRACE_NEST .*/
    case ARTL_ARTV3_action_1496: 
      STRING_BRACE_NEST1 = new ARTAT_ARTV3_STRING_BRACE_NEST();
            ARTRD_action(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, action, STRING_BRACE_NEST1);
      STRING_BRACE_NEST1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_BRACE_NEST1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_STRING_BRACE_NEST(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_BRACE_NEST1);
       action.v = STRING_BRACE_NEST1.v; 
      break;
    /*ARTV3.action ::= '\\' ARTV3.term .*/
    case ARTL_ARTV3_action_1504: 
      STRING_BRACE_NEST1 = new ARTAT_ARTV3_STRING_BRACE_NEST();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_term(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null, null, null);
            break;
        default:
          throw new ARTException("ARTRD_action: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_alt(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.alt ::= ARTV3.cat .*/
    case ARTL_ARTV3_alt_1178: 
            ARTRD_alt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cat(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.alt ::= ARTV3.cat '|' . ARTV3.alt1 */
    case ARTL_ARTV3_alt_1184: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cat(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*ARTV3.alt ::= ARTV3.cat '|' ARTV3.alt1 .*/
    case ARTL_ARTV3_alt_1186: 
            ARTRD_alt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_alt1(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_alt: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_alt1(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.alt1 ::= ARTV3.cat .*/
    case ARTL_ARTV3_alt1_1190: 
            ARTRD_alt1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cat(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.alt1 ::= ARTV3.cat '|' . ARTV3.alt1 */
    case ARTL_ARTV3_alt1_1196: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cat(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*ARTV3.alt1 ::= ARTV3.cat '|' ARTV3.alt1 .*/
    case ARTL_ARTV3_alt1_1198: 
            ARTRD_alt1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_alt1(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_alt1: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_annotation(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.annotation ::= ARTV3.name .*/
    case ARTL_ARTV3_annotation_1386: 
            ARTRD_annotation(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_name(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
    /*ARTV3.annotation ::= ARTV3.delay .*/
    case ARTL_ARTV3_annotation_1390: 
            ARTRD_annotation(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_delay(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.annotation ::= ARTV3.gather .*/
    case ARTL_ARTV3_annotation_1394: 
            ARTRD_annotation(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_gather(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
    /*ARTV3.annotation ::= ARTV3.fold .*/
    case ARTL_ARTV3_annotation_1398: 
            ARTRD_annotation(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_fold(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_annotation: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_annotations(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.annotations ::= ARTV3.annotation .*/
    case ARTL_ARTV3_annotations_1376: 
            ARTRD_annotations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotation(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.annotations ::= ARTV3.annotation ARTV3.annotations .*/
    case ARTL_ARTV3_annotations_1382: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_annotation(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_annotations: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_attribute(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_attribute attribute, ARTAT_ARTV3_ID ID1, ARTAT_ARTV3_TYPE TYPE1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.attribute ::= ARTV3.ID ':' . ARTV3.TYPE */
    case ARTL_ARTV3_attribute_1152: 
      ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, ID1);
                        break;
    /*ARTV3.attribute ::= ARTV3.ID ':' ARTV3.TYPE .*/
    case ARTL_ARTV3_attribute_1154: 
      ID1 = new ARTAT_ARTV3_ID();
      TYPE1 = new ARTAT_ARTV3_TYPE();
            ARTRD_attribute(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attribute, ID1, TYPE1);
      TYPE1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      TYPE1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), TYPE1));
      ARTRD_TYPE(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, TYPE1);
       currentModule.addAttribute(attribute.lhs, ID1.v, TYPE1.v); 
      break;
        default:
          throw new ARTException("ARTRD_attribute: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_attributes(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_attributes attributes, ARTAT_ARTV3_attribute attribute1, ARTAT_ARTV3_attributes attributes1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.attributes ::= ARTV3.attribute ARTV3.attributes .*/
    case ARTL_ARTV3_attributes_1142: 
      attribute1 = new ARTAT_ARTV3_attribute();
      attributes1 = new ARTAT_ARTV3_attributes();
      attribute1.lhs = attributes.lhs; attributes1.lhs = attributes.lhs; 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), attribute1));
      ARTRD_attribute(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, attribute1, null, null);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_attributes(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, attributes1, null, null);
            break;
    /*ARTV3.attributes ::= # .*/
    case ARTL_ARTV3_attributes_1146: 
      attribute1 = new ARTAT_ARTV3_attribute();
      attributes1 = new ARTAT_ARTV3_attributes();
            ARTRD_attributes(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attributes, attribute1, attributes1);
                  break;
        default:
          throw new ARTException("ARTRD_attributes: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_attributesOpt(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_attributesOpt attributesOpt, ARTAT_ARTV3_attributes attributes1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.attributesOpt ::= '<' ARTV3.attributes . '>' */
    case ARTL_ARTV3_attributesOpt_1128: 
                  artNewWriteable = false; artNewParent = artParent;
      ARTRD_attributes(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, attributes1, null, null);
            break;
    /*ARTV3.attributesOpt ::= '<' ARTV3.attributes '>' .*/
    case ARTL_ARTV3_attributesOpt_1130: 
      attributes1 = new ARTAT_ARTV3_attributes();
      attributes1.lhs = attributesOpt.lhs;
      ARTRD_attributesOpt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attributesOpt, attributes1);
                  break;
    /*ARTV3.attributesOpt ::= # .*/
    case ARTL_ARTV3_attributesOpt_1134: 
      attributes1 = new ARTAT_ARTV3_attributes();
            ARTRD_attributesOpt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attributesOpt, attributes1);
                  break;
        default:
          throw new ARTException("ARTRD_attributesOpt: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_builtinTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_builtinTerminal builtinTerminal, ARTAT_ARTV3_ID ID1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.builtinTerminal ::= '&' ARTV3.ID .*/
    case ARTL_ARTV3_builtinTerminal_1478: 
      ID1 = new ARTAT_ARTV3_ID();
                        ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
      builtinTerminal.v = ID1.v; 
      break;
        default:
          throw new ARTException("ARTRD_builtinTerminal: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_caseInsensitiveTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_caseInsensitiveTerminal caseInsensitiveTerminal, ARTAT_ARTV3_STRING_DQ STRING_DQ1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.caseInsensitiveTerminal ::= ARTV3.STRING_DQ .*/
    case ARTL_ARTV3_caseInsensitiveTerminal_1452: 
      STRING_DQ1 = new ARTAT_ARTV3_STRING_DQ();
            ARTRD_caseInsensitiveTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, caseInsensitiveTerminal, STRING_DQ1);
      STRING_DQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_DQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_STRING_DQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_DQ1);
      caseInsensitiveTerminal.v = STRING_DQ1.v;
      break;
        default:
          throw new ARTException("ARTRD_caseInsensitiveTerminal: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_caseSensitiveTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_caseSensitiveTerminal caseSensitiveTerminal, ARTAT_ARTV3_STRING_PLAIN_SQ STRING_PLAIN_SQ1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.caseSensitiveTerminal ::= ARTV3.STRING_PLAIN_SQ .*/
    case ARTL_ARTV3_caseSensitiveTerminal_1446: 
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
            ARTRD_caseSensitiveTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, caseSensitiveTerminal, STRING_PLAIN_SQ1);
      STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
      caseSensitiveTerminal.v = STRING_PLAIN_SQ1.v;
      break;
        default:
          throw new ARTException("ARTRD_caseSensitiveTerminal: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_cat(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.cat ::= ARTV3.slot ARTV3.catTail .*/
    case ARTL_ARTV3_cat_1204: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_slot(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, null);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_catTail(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_cat: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_catTail(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.catTail ::= ARTV3.abbrev ARTV3.slot .*/
    case ARTL_ARTV3_catTail_1210: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_abbrev(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_slot(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
    /*ARTV3.catTail ::= ARTV3.abbrev ARTV3.slot . ARTV3.catTail */
    case ARTL_ARTV3_catTail_1216: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_abbrev(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_slot(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
    /*ARTV3.catTail ::= ARTV3.abbrev ARTV3.slot ARTV3.catTail .*/
    case ARTL_ARTV3_catTail_1218: 
            ARTRD_catTail(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_catTail(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_catTail: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_characterSetTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_characterSetTerminal characterSetTerminal, ARTAT_ARTV3_CHAR_BQ CHAR_BQ1, ARTAT_ARTV3_CHAR_BQ CHAR_BQ2) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.characterSetTerminal ::= ARTV3.CHAR_BQ '..' . ARTV3.CHAR_BQ */
    case ARTL_ARTV3_characterSetTerminal_1468: 
      CHAR_BQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode));
      CHAR_BQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_CHAR_BQ(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, CHAR_BQ1);
       characterSetTerminal.lo = CHAR_BQ1.v; 
                  break;
    /*ARTV3.characterSetTerminal ::= ARTV3.CHAR_BQ '..' ARTV3.CHAR_BQ .*/
    case ARTL_ARTV3_characterSetTerminal_1470: 
      CHAR_BQ1 = new ARTAT_ARTV3_CHAR_BQ();
      CHAR_BQ2 = new ARTAT_ARTV3_CHAR_BQ();
            ARTRD_characterSetTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, characterSetTerminal, CHAR_BQ1, CHAR_BQ2);
      CHAR_BQ2.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      CHAR_BQ2.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_CHAR_BQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, CHAR_BQ2);
       characterSetTerminal.hi = CHAR_BQ2.v;
      break;
        default:
          throw new ARTException("ARTRD_characterSetTerminal: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_characterTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_characterTerminal characterTerminal, ARTAT_ARTV3_CHAR_BQ CHAR_BQ1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.characterTerminal ::= ARTV3.CHAR_BQ .*/
    case ARTL_ARTV3_characterTerminal_1458: 
      CHAR_BQ1 = new ARTAT_ARTV3_CHAR_BQ();
            ARTRD_characterTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, characterTerminal, CHAR_BQ1);
      CHAR_BQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      CHAR_BQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_CHAR_BQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, CHAR_BQ1);
      characterTerminal.v = CHAR_BQ1.v;
      break;
        default:
          throw new ARTException("ARTRD_characterTerminal: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_choiceElement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_choiceElement choiceElement, ARTAT_ARTV3_ID ID1, ARTAT_ARTV3_builtinTerminal builtinTerminal1, ARTAT_ARTV3_caseInsensitiveTerminal caseInsensitiveTerminal1, ARTAT_ARTV3_caseSensitiveTerminal caseSensitiveTerminal1, ARTAT_ARTV3_characterSetTerminal characterSetTerminal1, ARTAT_ARTV3_characterTerminal characterTerminal1, ARTAT_ARTV3_nonterminal nonterminal1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.choiceElement ::= ARTV3.nonterminal .*/
    case ARTL_ARTV3_choiceElement_202: 
      ID1 = new ARTAT_ARTV3_ID();
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_choiceElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, choiceElement, ID1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       choiceElement.t = new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v)); 
      break;
    /*ARTV3.choiceElement ::= ARTV3.caseSensitiveTerminal .*/
    case ARTL_ARTV3_choiceElement_208: 
      ID1 = new ARTAT_ARTV3_ID();
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_choiceElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, choiceElement, ID1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), caseSensitiveTerminal1));
      ARTRD_caseSensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, caseSensitiveTerminal1, null);
       choiceElement.t = new ARTValueTerm("caseSensitiveTerminal", new ARTValueTerm(caseSensitiveTerminal1.v)); 
      break;
    /*ARTV3.choiceElement ::= ARTV3.caseInsensitiveTerminal .*/
    case ARTL_ARTV3_choiceElement_214: 
      ID1 = new ARTAT_ARTV3_ID();
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_choiceElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, choiceElement, ID1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), caseInsensitiveTerminal1));
      ARTRD_caseInsensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, caseInsensitiveTerminal1, null);
       choiceElement.t = new ARTValueTerm("caseInsensitiveTerminal", new ARTValueTerm(caseInsensitiveTerminal1.v)); 
      break;
    /*ARTV3.choiceElement ::= ARTV3.characterTerminal .*/
    case ARTL_ARTV3_choiceElement_220: 
      ID1 = new ARTAT_ARTV3_ID();
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_choiceElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, choiceElement, ID1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), characterTerminal1));
      ARTRD_characterTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, characterTerminal1, null);
       choiceElement.t = new ARTValueTerm("characterTerminal", new ARTValueTerm(characterTerminal1.v)); 
      break;
    /*ARTV3.choiceElement ::= ARTV3.characterSetTerminal .*/
    case ARTL_ARTV3_choiceElement_226: 
      ID1 = new ARTAT_ARTV3_ID();
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_choiceElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, choiceElement, ID1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), characterSetTerminal1));
      ARTRD_characterSetTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, characterSetTerminal1, null, null);
       choiceElement.t = new ARTValueTerm("characterSetTerminal", new ARTValueTerm(characterSetTerminal1.lo), new ARTValueTerm(characterSetTerminal1.hi)); 
      break;
    /*ARTV3.choiceElement ::= ARTV3.builtinTerminal .*/
    case ARTL_ARTV3_choiceElement_232: 
      ID1 = new ARTAT_ARTV3_ID();
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_choiceElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, choiceElement, ID1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), builtinTerminal1));
      ARTRD_builtinTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, builtinTerminal1, null);
       choiceElement.t = new ARTValueTerm("builtinTerminal", new ARTValueTerm(builtinTerminal1.v)); 
      break;
    /*ARTV3.choiceElement ::= "''" .*/
    case ARTL_ARTV3_choiceElement_238: 
      ID1 = new ARTAT_ARTV3_ID();
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_choiceElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, choiceElement, ID1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       choiceElement.t = new ARTValueTerm("allSingletons"); 
      break;
    /*ARTV3.choiceElement ::= '.' ARTV3.ID .*/
    case ARTL_ARTV3_choiceElement_246: 
      ID1 = new ARTAT_ARTV3_ID();
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
       choiceElement.t = new ARTValueTerm("productionLabel", new ARTValueTerm(ID1.v)); 
      break;
        default:
          throw new ARTException("ARTRD_choiceElement: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_chooser(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_choiceElement choiceElement1, ARTAT_ARTV3_choiceElement choiceElement2) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.chooser ::= ARTV3.choiceElement '>' . ARTV3.choiceElement */
    case ARTL_ARTV3_chooser_156: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), choiceElement1));
      ARTRD_choiceElement(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, choiceElement1, null, null, null, null, null, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.chooser ::= ARTV3.choiceElement '>' ARTV3.choiceElement .*/
    case ARTL_ARTV3_chooser_158: 
      choiceElement1 = new ARTAT_ARTV3_choiceElement();
      choiceElement2 = new ARTAT_ARTV3_choiceElement();
            ARTRD_chooser(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, choiceElement1, choiceElement2);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), choiceElement2));
      ARTRD_choiceElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, choiceElement2, null, null, null, null, null, null, null);
       currentModule.addHigher(choiceElement1.t, choiceElement2.t); 
      break;
    /*ARTV3.chooser ::= ARTV3.choiceElement '<' . ARTV3.choiceElement */
    case ARTL_ARTV3_chooser_166: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), choiceElement1));
      ARTRD_choiceElement(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, choiceElement1, null, null, null, null, null, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.chooser ::= ARTV3.choiceElement '<' ARTV3.choiceElement .*/
    case ARTL_ARTV3_chooser_168: 
      choiceElement1 = new ARTAT_ARTV3_choiceElement();
      choiceElement2 = new ARTAT_ARTV3_choiceElement();
            ARTRD_chooser(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, choiceElement1, choiceElement2);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), choiceElement2));
      ARTRD_choiceElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, choiceElement2, null, null, null, null, null, null, null);
       currentModule.addHigher(choiceElement2.t, choiceElement1.t); 
      break;
    /*ARTV3.chooser ::= ARTV3.choiceElement '>>' . ARTV3.choiceElement */
    case ARTL_ARTV3_chooser_176: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), choiceElement1));
      ARTRD_choiceElement(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, choiceElement1, null, null, null, null, null, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.chooser ::= ARTV3.choiceElement '>>' ARTV3.choiceElement .*/
    case ARTL_ARTV3_chooser_178: 
      choiceElement1 = new ARTAT_ARTV3_choiceElement();
      choiceElement2 = new ARTAT_ARTV3_choiceElement();
            ARTRD_chooser(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, choiceElement1, choiceElement2);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), choiceElement2));
      ARTRD_choiceElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, choiceElement2, null, null, null, null, null, null, null);
       currentModule.addLonger(choiceElement1.t, choiceElement2.t); 
      break;
    /*ARTV3.chooser ::= ARTV3.choiceElement '<<' . ARTV3.choiceElement */
    case ARTL_ARTV3_chooser_186: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), choiceElement1));
      ARTRD_choiceElement(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, choiceElement1, null, null, null, null, null, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.chooser ::= ARTV3.choiceElement '<<' ARTV3.choiceElement .*/
    case ARTL_ARTV3_chooser_188: 
      choiceElement1 = new ARTAT_ARTV3_choiceElement();
      choiceElement2 = new ARTAT_ARTV3_choiceElement();
            ARTRD_chooser(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, choiceElement1, choiceElement2);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), choiceElement2));
      ARTRD_choiceElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, choiceElement2, null, null, null, null, null, null, null);
       currentModule.addLonger(choiceElement2.t, choiceElement1.t); 
      break;
    /*ARTV3.chooser ::= 'longest' ARTV3.choiceElement .*/
    case ARTL_ARTV3_chooser_196: 
      choiceElement1 = new ARTAT_ARTV3_choiceElement();
      choiceElement2 = new ARTAT_ARTV3_choiceElement();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), choiceElement1));
      ARTRD_choiceElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, choiceElement1, null, null, null, null, null, null, null);
       currentModule.addLonger(choiceElement1.t, choiceElement1.t); 
      break;
        default:
          throw new ARTException("ARTRD_chooser: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_choosers(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.choosers ::= ARTV3.chooser .*/
    case ARTL_ARTV3_choosers_144: 
            ARTRD_choosers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooser(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null);
            break;
    /*ARTV3.choosers ::= ARTV3.chooser ARTV3.choosers .*/
    case ARTL_ARTV3_choosers_150: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_chooser(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, null, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_choosers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_choosers: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_delay(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.delay ::= '<' .*/
    case ARTL_ARTV3_delay_1408: 
            ARTRD_delay(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default:
          throw new ARTException("ARTRD_delay: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_deleter(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_nonterminal nonterminal1, ARTAT_ARTV3_rhs rhs1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.deleter ::= ARTV3.nonterminal ':~=' . ARTV3.rhs */
    case ARTL_ARTV3_deleter_1116: 
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
                  rhs1.lhs = nonterminal1.v; rhs1.isDeleter = true; 
      break;
    /*ARTV3.deleter ::= ARTV3.nonterminal ':~=' ARTV3.rhs .*/
    case ARTL_ARTV3_deleter_1120: 
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
      rhs1 = new ARTAT_ARTV3_rhs();
            ARTRD_deleter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, nonterminal1, rhs1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), rhs1));
      ARTRD_rhs(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, rhs1, null);
            break;
        default:
          throw new ARTException("ARTRD_deleter: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_diff(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.diff ::= ARTV3.union .*/
    case ARTL_ARTV3_diff_1264: 
            ARTRD_diff(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_union(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.diff ::= ARTV3.diff '\\' . ARTV3.union */
    case ARTL_ARTV3_diff_1270: 
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_diff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.diff ::= ARTV3.diff '\\' ARTV3.union .*/
    case ARTL_ARTV3_diff_1272: 
            ARTRD_diff(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_union(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_diff: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_directive(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_ID ID1, ARTAT_ARTV3_STRING_BRACE_NEST STRING_BRACE_NEST1, ARTAT_ARTV3_nonterminal nonterminal1, ARTAT_ARTV3_terminalisers terminalisers1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.directive ::= 'import' ARTV3.ID .*/
    case ARTL_ARTV3_directive_60: 
      ID1 = new ARTAT_ARTV3_ID();
      STRING_BRACE_NEST1 = new ARTAT_ARTV3_STRING_BRACE_NEST();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
      terminalisers1 = new ARTAT_ARTV3_terminalisers();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
            break;
    /*ARTV3.directive ::= 'start' ARTV3.nonterminal .*/
    case ARTL_ARTV3_directive_66: 
      ID1 = new ARTAT_ARTV3_ID();
      STRING_BRACE_NEST1 = new ARTAT_ARTV3_STRING_BRACE_NEST();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
      terminalisers1 = new ARTAT_ARTV3_terminalisers();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       currentModule.setDefaultStart(nonterminal1.v); 
      break;
    /*ARTV3.directive ::= 'whitespace' ARTV3.terminalisers .*/
    case ARTL_ARTV3_directive_76: 
      ID1 = new ARTAT_ARTV3_ID();
      STRING_BRACE_NEST1 = new ARTAT_ARTV3_STRING_BRACE_NEST();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
      terminalisers1 = new ARTAT_ARTV3_terminalisers();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
       currentModule.seenWhitespaceDeclaration = true; terminalisers1.isWhiteSpace = true;  
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), terminalisers1));
      ARTRD_terminalisers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, terminalisers1, null, null);
            break;
    /*ARTV3.directive ::= 'terminal' ARTV3.terminalisers .*/
    case ARTL_ARTV3_directive_84: 
      ID1 = new ARTAT_ARTV3_ID();
      STRING_BRACE_NEST1 = new ARTAT_ARTV3_STRING_BRACE_NEST();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
      terminalisers1 = new ARTAT_ARTV3_terminalisers();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
       terminalisers1.isWhiteSpace = false; 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), terminalisers1));
      ARTRD_terminalisers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, terminalisers1, null, null);
            break;
    /*ARTV3.directive ::= 'choose' ARTV3.choosers .*/
    case ARTL_ARTV3_directive_90: 
      ID1 = new ARTAT_ARTV3_ID();
      STRING_BRACE_NEST1 = new ARTAT_ARTV3_STRING_BRACE_NEST();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
      terminalisers1 = new ARTAT_ARTV3_terminalisers();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_choosers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.directive ::= 'option' ARTV3.options .*/
    case ARTL_ARTV3_directive_96: 
      ID1 = new ARTAT_ARTV3_ID();
      STRING_BRACE_NEST1 = new ARTAT_ARTV3_STRING_BRACE_NEST();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
      terminalisers1 = new ARTAT_ARTV3_terminalisers();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_options(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.directive ::= 'prelude' ARTV3.STRING_BRACE_NEST .*/
    case ARTL_ARTV3_directive_102: 
      ID1 = new ARTAT_ARTV3_ID();
      STRING_BRACE_NEST1 = new ARTAT_ARTV3_STRING_BRACE_NEST();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
      terminalisers1 = new ARTAT_ARTV3_terminalisers();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            STRING_BRACE_NEST1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_BRACE_NEST1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_BRACE_NEST1));
      ARTRD_STRING_BRACE_NEST(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_BRACE_NEST1);
       currentModule.addPreludeString(STRING_BRACE_NEST1.v); 
      break;
    /*ARTV3.directive ::= 'support' ARTV3.STRING_BRACE_NEST .*/
    case ARTL_ARTV3_directive_110: 
      ID1 = new ARTAT_ARTV3_ID();
      STRING_BRACE_NEST1 = new ARTAT_ARTV3_STRING_BRACE_NEST();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
      terminalisers1 = new ARTAT_ARTV3_terminalisers();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            STRING_BRACE_NEST1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_BRACE_NEST1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_BRACE_NEST1));
      ARTRD_STRING_BRACE_NEST(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_BRACE_NEST1);
       currentModule.addSupportString(STRING_BRACE_NEST1.v); 
      break;
        default:
          throw new ARTException("ARTRD_directive: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_element(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_element element, ARTAT_ARTV3_builtinTerminal builtinTerminal1, ARTAT_ARTV3_caseInsensitiveTerminal caseInsensitiveTerminal1, ARTAT_ARTV3_caseSensitiveTerminal caseSensitiveTerminal1, ARTAT_ARTV3_characterSetTerminal characterSetTerminal1, ARTAT_ARTV3_characterTerminal characterTerminal1, ARTAT_ARTV3_nonterminal nonterminal1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.element ::= ARTV3.epsilon .*/
    case ARTL_ARTV3_element_1298: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_element(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_epsilon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.element ::= ARTV3.nonterminal .*/
    case ARTL_ARTV3_element_1302: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_element(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
            break;
    /*ARTV3.element ::= ARTV3.caseSensitiveTerminal .*/
    case ARTL_ARTV3_element_1306: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_element(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), caseSensitiveTerminal1));
      ARTRD_caseSensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, caseSensitiveTerminal1, null);
            break;
    /*ARTV3.element ::= ARTV3.caseInsensitiveTerminal .*/
    case ARTL_ARTV3_element_1310: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_element(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), caseInsensitiveTerminal1));
      ARTRD_caseInsensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, caseInsensitiveTerminal1, null);
            break;
    /*ARTV3.element ::= ARTV3.characterTerminal .*/
    case ARTL_ARTV3_element_1314: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_element(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), characterTerminal1));
      ARTRD_characterTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, characterTerminal1, null);
            break;
    /*ARTV3.element ::= ARTV3.characterSetTerminal .*/
    case ARTL_ARTV3_element_1318: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_element(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), characterSetTerminal1));
      ARTRD_characterSetTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, characterSetTerminal1, null, null);
            break;
    /*ARTV3.element ::= ARTV3.builtinTerminal .*/
    case ARTL_ARTV3_element_1322: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_element(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), builtinTerminal1));
      ARTRD_builtinTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, builtinTerminal1, null);
            break;
    /*ARTV3.element ::= ARTV3.epsilon ARTV3.annotations .*/
    case ARTL_ARTV3_element_1328: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_epsilon(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.element ::= ARTV3.nonterminal ARTV3.annotations .*/
    case ARTL_ARTV3_element_1334: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.element ::= ARTV3.caseSensitiveTerminal ARTV3.annotations .*/
    case ARTL_ARTV3_element_1340: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), caseSensitiveTerminal1));
      ARTRD_caseSensitiveTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, caseSensitiveTerminal1, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.element ::= ARTV3.caseInsensitiveTerminal ARTV3.annotations .*/
    case ARTL_ARTV3_element_1346: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), caseInsensitiveTerminal1));
      ARTRD_caseInsensitiveTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, caseInsensitiveTerminal1, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.element ::= ARTV3.characterTerminal ARTV3.annotations .*/
    case ARTL_ARTV3_element_1352: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), characterTerminal1));
      ARTRD_characterTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, characterTerminal1, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.element ::= ARTV3.characterSetTerminal ARTV3.annotations .*/
    case ARTL_ARTV3_element_1358: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), characterSetTerminal1));
      ARTRD_characterSetTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, characterSetTerminal1, null, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.element ::= ARTV3.builtinTerminal ARTV3.annotations .*/
    case ARTL_ARTV3_element_1364: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), builtinTerminal1));
      ARTRD_builtinTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, builtinTerminal1, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.element ::= '(' ARTV3.alt . ')' */
    case ARTL_ARTV3_element_1370: 
            if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_alt(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.element ::= '(' ARTV3.alt ')' .*/
    case ARTL_ARTV3_element_1372: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ARTV3_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ARTV3_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ARTV3_characterSetTerminal();
      characterTerminal1 = new ARTAT_ARTV3_characterTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_element(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
                  break;
        default:
          throw new ARTException("ARTRD_element: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_epsilon(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.epsilon ::= '#' .*/
    case ARTL_ARTV3_epsilon_1492: 
            ARTRD_epsilon(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default:
          throw new ARTException("ARTRD_epsilon: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_fold(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.fold ::= '^_' .*/
    case ARTL_ARTV3_fold_1418: 
            ARTRD_fold(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.fold ::= '^' .*/
    case ARTL_ARTV3_fold_1422: 
            ARTRD_fold(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.fold ::= '^^' .*/
    case ARTL_ARTV3_fold_1426: 
            ARTRD_fold(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.fold ::= '^^^' .*/
    case ARTL_ARTV3_fold_1430: 
            ARTRD_fold(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default:
          throw new ARTException("ARTRD_fold: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_gather(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_ID ID1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.gather ::= '!' ARTV3.ID .*/
    case ARTL_ARTV3_gather_1414: 
      ID1 = new ARTAT_ARTV3_ID();
                        ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
            break;
        default:
          throw new ARTException("ARTRD_gather: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_grammarRule(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_attributesOpt attributesOpt1, ARTAT_ARTV3_nonterminal nonterminal1, ARTAT_ARTV3_rhs rhs1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.grammarRule ::= ARTV3.nonterminal ARTV3.attributesOpt . '::=' ARTV3.rhs */
    case ARTL_ARTV3_grammarRule_1104: 
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       attributesOpt1.lhs = nonterminal1.v;; if (currentModule.getDefaultStart() == null) currentModule.setDefaultStart(nonterminal1.v); 
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_attributesOpt(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, attributesOpt1, null);
            break;
    /*ARTV3.grammarRule ::= ARTV3.nonterminal ARTV3.attributesOpt '::=' . ARTV3.rhs */
    case ARTL_ARTV3_grammarRule_1106: 
      ARTRD_grammarRule(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attributesOpt1, nonterminal1, rhs1);
            rhs1.lhs = nonterminal1.v; rhs1.isDeleter = false; 
      break;
    /*ARTV3.grammarRule ::= ARTV3.nonterminal ARTV3.attributesOpt '::=' ARTV3.rhs .*/
    case ARTL_ARTV3_grammarRule_1110: 
      attributesOpt1 = new ARTAT_ARTV3_attributesOpt();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
      rhs1 = new ARTAT_ARTV3_rhs();
            ARTRD_grammarRule(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attributesOpt1, nonterminal1, rhs1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), rhs1));
      ARTRD_rhs(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, rhs1, null);
            break;
        default:
          throw new ARTException("ARTRD_grammarRule: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_insertion(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.insertion ::= '[' ARTV3.alt . ']' */
    case ARTL_ARTV3_insertion_1510: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_alt(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.insertion ::= '[' ARTV3.alt ']' .*/
    case ARTL_ARTV3_insertion_1512: 
            ARTRD_insertion(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default:
          throw new ARTException("ARTRD_insertion: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_insertionName(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_insertionName insertionName, ARTAT_ARTV3_ID ID1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.insertionName ::= '%%' ARTV3.ID .*/
    case ARTL_ARTV3_insertionName_1486: 
      ID1 = new ARTAT_ARTV3_ID();
                        ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
      insertionName.v = ID1.v;
      break;
        default:
          throw new ARTException("ARTRD_insertionName: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_iter(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.iter ::= ARTV3.diff .*/
    case ARTL_ARTV3_iter_1252: 
            ARTRD_iter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_diff(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.iter ::= ARTV3.diff '@' . ARTV3.iter */
    case ARTL_ARTV3_iter_1258: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_diff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.iter ::= ARTV3.diff '@' ARTV3.iter .*/
    case ARTL_ARTV3_iter_1260: 
            ARTRD_iter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_iter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_iter: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_moduleHeader(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_ID ID1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.moduleHeader ::= 'module' ARTV3.ID .*/
    case ARTL_ARTV3_moduleHeader_30: 
      ID1 = new ARTAT_ARTV3_ID();
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
       currentModule = artManager.findModule(ID1.v); 
    if (artManager.getDefaultMainModule() == null || artManager.getDefaultMainModule().getId().equals("ART")) artManager.setDefaultMainModule(currentModule); 
      break;
        default:
          throw new ARTException("ARTRD_moduleHeader: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_modules(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.modules ::= # .*/
    case ARTL_ARTV3_modules_16: 
            ARTRD_modules(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
    /*ARTV3.modules ::= ARTV3.moduleHeader ARTV3.textElements . ARTV3.modules */
    case ARTL_ARTV3_modules_22: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_moduleHeader(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, null);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_textElements(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.modules ::= ARTV3.moduleHeader ARTV3.textElements ARTV3.modules .*/
    case ARTL_ARTV3_modules_24: 
            ARTRD_modules(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_modules(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_modules: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_name(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_ID ID1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.name ::= ':' ARTV3.ID .*/
    case ARTL_ARTV3_name_1404: 
      ID1 = new ARTAT_ARTV3_ID();
                        ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
            break;
        default:
          throw new ARTException("ARTRD_name: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_nonterminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_nonterminal nonterminal, ARTAT_ARTV3_ID ID1, ARTAT_ARTV3_STRING_DOLLAR STRING_DOLLAR1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.nonterminal ::= ARTV3.ID .*/
    case ARTL_ARTV3_nonterminal_1434: 
      ID1 = new ARTAT_ARTV3_ID();
      STRING_DOLLAR1 = new ARTAT_ARTV3_STRING_DOLLAR();
            ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, nonterminal, ID1, STRING_DOLLAR1);
      ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
      nonterminal.v = ID1.v;
      break;
    /*ARTV3.nonterminal ::= ARTV3.STRING_DOLLAR .*/
    case ARTL_ARTV3_nonterminal_1440: 
      ID1 = new ARTAT_ARTV3_ID();
      STRING_DOLLAR1 = new ARTAT_ARTV3_STRING_DOLLAR();
            ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, nonterminal, ID1, STRING_DOLLAR1);
      STRING_DOLLAR1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_DOLLAR1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_STRING_DOLLAR(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_DOLLAR1);
      nonterminal.v = "$" + STRING_DOLLAR1.v + "$";
      break;
        default:
          throw new ARTException("ARTRD_nonterminal: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_not(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_element element1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.not ::= ARTV3.element .*/
    case ARTL_ARTV3_not_1288: 
      element1 = new ARTAT_ARTV3_element();
            ARTRD_not(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), element1));
      ARTRD_element(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, element1, null, null, null, null, null, null);
            break;
    /*ARTV3.not ::= '\\' ARTV3.element .*/
    case ARTL_ARTV3_not_1294: 
      element1 = new ARTAT_ARTV3_element();
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), element1));
      ARTRD_element(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, element1, null, null, null, null, null, null);
            break;
        default:
          throw new ARTException("ARTRD_not: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_optionSingle(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_ID ID1, ARTAT_ARTV3_INTEGER INTEGER1, ARTAT_ARTV3_STRING_PLAIN_SQ STRING_PLAIN_SQ1, ARTAT_ARTV3_trueFalse trueFalse1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.optionSingle ::= 'verbosity' ARTV3.optionalColon . ARTV3.INTEGER */
    case ARTL_ARTV3_optionSingle_264: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'verbosity' ARTV3.optionalColon ARTV3.INTEGER .*/
    case ARTL_ARTV3_optionSingle_266: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      INTEGER1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      INTEGER1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), INTEGER1));
      ARTRD_INTEGER(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, INTEGER1);
       artManager.optionBlock.verbosityLevel = INTEGER1.v; 
      break;
    /*ARTV3.optionSingle ::= 'statistics' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_274: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'statistics' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_276: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.statistics = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'trace' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_284: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'trace' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_286: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.trace = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'inputFile' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ */
    case ARTL_ARTV3_optionSingle_294: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'inputFile' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .*/
    case ARTL_ARTV3_optionSingle_296: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_PLAIN_SQ1));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
       artManager.optionBlock.inputs.add(ARTText.readFile(STRING_PLAIN_SQ1.v)); artManager.optionBlock.inputFilenames.add(STRING_PLAIN_SQ1.v); 
      break;
    /*ARTV3.optionSingle ::= 'inputFileIfExists' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ */
    case ARTL_ARTV3_optionSingle_304: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'inputFileIfExists' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .*/
    case ARTL_ARTV3_optionSingle_306: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_PLAIN_SQ1));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
       if (Files.isRegularFile(Paths.get(STRING_PLAIN_SQ1.v))) { artManager.optionBlock.inputs.add(ARTText.readFile(STRING_PLAIN_SQ1.v)); artManager.optionBlock.inputFilenames.add(STRING_PLAIN_SQ1.v); }
      break;
    /*ARTV3.optionSingle ::= 'inputFile' ARTV3.optionalColon . ARTV3.ID */
    case ARTL_ARTV3_optionSingle_314: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'inputFile' ARTV3.optionalColon ARTV3.ID .*/
    case ARTL_ARTV3_optionSingle_316: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
       artManager.optionBlock.inputs.add(ARTText.readFile(ID1.v)); artManager.optionBlock.inputFilenames.add(ID1.v); 
      break;
    /*ARTV3.optionSingle ::= 'inputFileIfExists' ARTV3.optionalColon . ARTV3.ID */
    case ARTL_ARTV3_optionSingle_324: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'inputFileIfExists' ARTV3.optionalColon ARTV3.ID .*/
    case ARTL_ARTV3_optionSingle_326: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
       if (Files.isRegularFile(Paths.get(ID1.v))) { artManager.optionBlock.inputs.add(ARTText.readFile(ID1.v)); artManager.optionBlock.inputFilenames.add(STRING_PLAIN_SQ1.v); }
      break;
    /*ARTV3.optionSingle ::= 'inputString' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ */
    case ARTL_ARTV3_optionSingle_334: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'inputString' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .*/
    case ARTL_ARTV3_optionSingle_336: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_PLAIN_SQ1));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
       artManager.optionBlock.inputs.add(STRING_PLAIN_SQ1.v); 
      break;
    /*ARTV3.optionSingle ::= 'phaseModule' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_344: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'phaseModule' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_346: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.phaseModule = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'phaseLex' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_354: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'phaseLex' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_356: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.phaseLex = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'phasePreChoose' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_364: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'phasePreChoose' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_366: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.phasePreChoose = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'phaseParse' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_374: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'phaseParse' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_376: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.phaseParse = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'phasePostChoose' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_384: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'phasePostChoose' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_386: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.phasePostChoose = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'phaseDerivationSelect' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_394: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'phaseDerivationSelect' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_396: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.phaseDerivationSelect = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'phaseGIFT' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_404: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'phaseGIFT' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_406: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.phaseGIFT = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'phaseAG' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_414: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'phaseAG' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_416: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.phaseAG = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'phaseTR' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_424: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'phaseTR' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_426: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.phaseTR = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'phaseSOS' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_434: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'phaseSOS' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_436: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.phaseSOS = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'showTWE' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_444: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'showTWE' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_446: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.showTWE = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'showBSR' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_454: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'showBSR' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_456: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.showBSR = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'showSPPFFull' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_464: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'showSPPFFull' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_466: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.showSPPFFull = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'showSPPFCore' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_474: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'showSPPFCore' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_476: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.showSPPFCore = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'showDT' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_484: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'showDT' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_486: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.showDT = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'showGIFT' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_494: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'showGIFT' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_496: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.showGIFT = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'showAG' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_504: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'showAG' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_506: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.showAG = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'showTR' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_514: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'showTR' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_516: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.showTR = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'showSOS' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_524: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'showSOS' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_526: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.showSOS = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'showAll' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_534: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'showAll' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_536: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.showTWE = trueFalse1.v;
                                                             artManager.optionBlock.showBSR = trueFalse1.v;
                                                             artManager.optionBlock.showSPPFFull = trueFalse1.v;
                                                             artManager.optionBlock.showSPPFCore = trueFalse1.v;
                                                             artManager.optionBlock.showDT = trueFalse1.v;
                                                             artManager.optionBlock.showGIFT = trueFalse1.v;
                                                             artManager.optionBlock.showAG = trueFalse1.v;
                                                             artManager.optionBlock.showTR = trueFalse1.v;                                                            
                                                             artManager.optionBlock.showSOS = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'ebnfMultiplyOut' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_544: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'ebnfMultiplyOut' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_546: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.ebnfMultiplyOut = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'ebnfracketToNonterminal' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_554: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'ebnfracketToNonterminal' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_556: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.ebnfBracketToNonterminal = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'ebnfClosureRight' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_564: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'ebnfClosureRight' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_566: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.ebnfClosureLeft = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'ebnfClosureLeft' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_574: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'ebnfClosureLeft' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_576: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.ebnfClosureRight = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'ebnfLeftFactor' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_584: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'ebnfLeftFactor' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_586: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.ebnfLeftFactor = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexDFA' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_594: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexDFA' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_596: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.lexDFA = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexCFRecognise' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_604: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexCFRecognise' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_606: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.lexCFRecognise = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexCFParse' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_614: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexCFParse' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_616: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.lexCFParse = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexWSSuffix' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_624: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexWSSuffix' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_626: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.lexWSSuffix = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexExtents' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_634: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexExtents' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_636: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.lexExtents = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexSegments' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_644: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexSegments' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_646: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.lexSegments = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexRecursive' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_654: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexRecursive' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_656: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.lexRecursive = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexPrintTWESet' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_664: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexPrintTWESet' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_666: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.lexPrintTWESet = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexDead' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_674: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexDead' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_676: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.lexDead = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexLongestWithin' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_684: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexLongestWithin' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_686: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.lexLongestWithin = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexLongestAcross' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_694: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexLongestAcross' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_696: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.lexLongestAcross = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexPriority' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_704: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexPriority' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_706: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.lexPriority = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'postUseTerminals' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_714: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'postUseTerminals' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_716: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.postUseTerminals = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'postLongestWithin' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_724: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'postLongestWithin' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_726: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.postLongestWithin = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'postLongestAcross' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_734: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'postLongestAcross' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_736: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.postLongestAcross = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'postPriority' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_744: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'postPriority' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_746: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.postPriority = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'outputDirectory' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ */
    case ARTL_ARTV3_optionSingle_754: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'outputDirectory' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .*/
    case ARTL_ARTV3_optionSingle_756: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_PLAIN_SQ1));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
       artManager.optionBlock.outputDirectory = STRING_PLAIN_SQ1.v; 
      break;
    /*ARTV3.optionSingle ::= 'namespace' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ */
    case ARTL_ARTV3_optionSingle_764: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'namespace' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .*/
    case ARTL_ARTV3_optionSingle_766: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_PLAIN_SQ1));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
       artManager.optionBlock.namespace = STRING_PLAIN_SQ1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexerName' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ */
    case ARTL_ARTV3_optionSingle_774: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'lexerName' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .*/
    case ARTL_ARTV3_optionSingle_776: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_PLAIN_SQ1));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
       artManager.optionBlock.lexerName = STRING_PLAIN_SQ1.v; 
      break;
    /*ARTV3.optionSingle ::= 'parserName' ARTV3.optionalColon . ARTV3.STRING_PLAIN_SQ */
    case ARTL_ARTV3_optionSingle_784: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'parserName' ARTV3.optionalColon ARTV3.STRING_PLAIN_SQ .*/
    case ARTL_ARTV3_optionSingle_786: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_PLAIN_SQ1));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
       artManager.optionBlock.parserName = STRING_PLAIN_SQ1.v; 
      break;
    /*ARTV3.optionSingle ::= 'generateDynamic' .*/
    case ARTL_ARTV3_optionSingle_792: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.despatchMode = ARTModeDespatch.dynamic; 
      break;
    /*ARTV3.optionSingle ::= 'generateStatic' .*/
    case ARTL_ARTV3_optionSingle_798: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.despatchMode = ARTModeDespatch.static_; 
      break;
    /*ARTV3.optionSingle ::= 'generateState' .*/
    case ARTL_ARTV3_optionSingle_804: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.despatchMode = ARTModeDespatch.state; 
      break;
    /*ARTV3.optionSingle ::= 'generateFragment' .*/
    case ARTL_ARTV3_optionSingle_810: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.despatchMode = ARTModeDespatch.fragment; 
      break;
    /*ARTV3.optionSingle ::= 'generatePool' .*/
    case ARTL_ARTV3_optionSingle_816: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.supportMode = ARTModeSupport.HashPool; 
      break;
    /*ARTV3.optionSingle ::= 'generateJava' .*/
    case ARTL_ARTV3_optionSingle_822: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.targetLanguageMode = ARTModeTargetLanguage.Java; 
      break;
    /*ARTV3.optionSingle ::= 'generateC++' .*/
    case ARTL_ARTV3_optionSingle_828: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.targetLanguageMode = ARTModeTargetLanguage.CPP; 
      break;
    /*ARTV3.optionSingle ::= 'predictivePops' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_836: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'predictivePops' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_838: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.predictivePops = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'FIFODescriptors' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_846: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'FIFODescriptors' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_848: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.FIFODescriptors = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'suppressPopGuard' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_856: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'suppressPopGuard' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_858: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.suppressPopGuard = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'suppressProductionGuard' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_866: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'suppressProductionGuard' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_868: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.suppressProductionGuard = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'suppressTestRepeat' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_876: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'suppressTestRepeat' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_878: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.suppressTestRepeat = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'suppressSemantics' ARTV3.optionalColon . ARTV3.trueFalse */
    case ARTL_ARTV3_optionSingle_886: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionalColon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.optionSingle ::= 'suppressSemantics' ARTV3.optionalColon ARTV3.trueFalse .*/
    case ARTL_ARTV3_optionSingle_888: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.optionBlock.suppressSemantics = trueFalse1.v; 
      break;
    /*ARTV3.optionSingle ::= 'lexerData' .*/
    case ARTL_ARTV3_optionSingle_894: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.lexerData; 
      break;
    /*ARTV3.optionSingle ::= 'earley' .*/
    case ARTL_ARTV3_optionSingle_900: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.earleyLinkedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'earley2007LinkedAPI' .*/
    case ARTL_ARTV3_optionSingle_906: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.earley2007LinkedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'earleyLinkedAPI' .*/
    case ARTL_ARTV3_optionSingle_912: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.earleyLinkedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'earleyIndexedAPI' .*/
    case ARTL_ARTV3_optionSingle_918: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.earleyIndexedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'earleyIndexedPool' .*/
    case ARTL_ARTV3_optionSingle_924: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.earleyIndexedPool; 
      break;
    /*ARTV3.optionSingle ::= 'earleyIndexedData' .*/
    case ARTL_ARTV3_optionSingle_930: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.earleyIndexedData; 
      break;
    /*ARTV3.optionSingle ::= 'earleyTable' .*/
    case ARTL_ARTV3_optionSingle_936: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.earleyTableLinkedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'earleyTableLinkedAPI' .*/
    case ARTL_ARTV3_optionSingle_942: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.earleyTableLinkedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'earleyTableIndexedAPI' .*/
    case ARTL_ARTV3_optionSingle_948: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.earleyTableIndexedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'earleyTableIndexedPool' .*/
    case ARTL_ARTV3_optionSingle_954: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.earleyTableIndexedPool; 
      break;
    /*ARTV3.optionSingle ::= 'earleyTableIndexedData' .*/
    case ARTL_ARTV3_optionSingle_960: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.earleyTableIndexedData; 
      break;
    /*ARTV3.optionSingle ::= 'cnp' .*/
    case ARTL_ARTV3_optionSingle_966: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.cnpLinkedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'cnpLinkedAPI' .*/
    case ARTL_ARTV3_optionSingle_972: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.cnpLinkedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'cnpIndexedAPI' .*/
    case ARTL_ARTV3_optionSingle_978: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.cnpIndexedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'cnpIndexedPool' .*/
    case ARTL_ARTV3_optionSingle_984: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.cnpIndexedPool; 
      break;
    /*ARTV3.optionSingle ::= 'cnpGeneratorPool' .*/
    case ARTL_ARTV3_optionSingle_990: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.cnpGeneratorPool; 
      break;
    /*ARTV3.optionSingle ::= 'lcnp' .*/
    case ARTL_ARTV3_optionSingle_996: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.lcnpLinkedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'lcnpLinkedAPI' .*/
    case ARTL_ARTV3_optionSingle_1002: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.lcnpLinkedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'lcnpIndexedAPI' .*/
    case ARTL_ARTV3_optionSingle_1008: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.lcnpIndexedAPI; 
      break;
    /*ARTV3.optionSingle ::= 'lcnpIndexedPool' .*/
    case ARTL_ARTV3_optionSingle_1014: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.lcnpIndexedPool; 
      break;
    /*ARTV3.optionSingle ::= 'lcnpGeneratorPool' .*/
    case ARTL_ARTV3_optionSingle_1020: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.lcnpGeneratorPool; 
      break;
    /*ARTV3.optionSingle ::= 'gll' .*/
    case ARTL_ARTV3_optionSingle_1026: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.gllGeneratorPool; 
      break;
    /*ARTV3.optionSingle ::= 'gllGeneratorPool' .*/
    case ARTL_ARTV3_optionSingle_1032: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.gllGeneratorPool; 
      break;
    /*ARTV3.optionSingle ::= 'gllTWEGeneratorPool' .*/
    case ARTL_ARTV3_optionSingle_1038: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.gllTWEGeneratorPool; 
      break;
    /*ARTV3.optionSingle ::= 'gllClusteredGeneratorPool' .*/
    case ARTL_ARTV3_optionSingle_1044: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.gllGeneratorPool; artManager.optionBlock.clusteredGSS = true; 
      break;
    /*ARTV3.optionSingle ::= 'mgll' .*/
    case ARTL_ARTV3_optionSingle_1050: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.gllGeneratorPool; artManager.optionBlock.mGLL = true; 
      break;
    /*ARTV3.optionSingle ::= 'mgllGeneratorPool' .*/
    case ARTL_ARTV3_optionSingle_1056: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.gllGeneratorPool; artManager.optionBlock.mGLL = true; 
      break;
    /*ARTV3.optionSingle ::= 'osbrd' .*/
    case ARTL_ARTV3_optionSingle_1062: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.osbrdGenerator; 
      break;
    /*ARTV3.optionSingle ::= 'osbrdGenerator' .*/
    case ARTL_ARTV3_optionSingle_1068: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      STRING_PLAIN_SQ1 = new ARTAT_ARTV3_STRING_PLAIN_SQ();
      trueFalse1 = new ARTAT_ARTV3_trueFalse();
            ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_PLAIN_SQ1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.optionBlock.algorithmMode = ARTModeAlgorithm.osbrdGenerator; 
      break;
        default:
          throw new ARTException("ARTRD_optionSingle: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_optionalColon(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.optionalColon ::= # .*/
    case ARTL_ARTV3_optionalColon_1074: 
            ARTRD_optionalColon(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.optionalColon ::= ':' .*/
    case ARTL_ARTV3_optionalColon_1078: 
            ARTRD_optionalColon(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default:
          throw new ARTException("ARTRD_optionalColon: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_options(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.options ::= ARTV3.optionSingle .*/
    case ARTL_ARTV3_options_252: 
            ARTRD_options(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_optionSingle(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null, null, null);
            break;
    /*ARTV3.options ::= ARTV3.optionSingle ARTV3.options .*/
    case ARTL_ARTV3_options_258: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_optionSingle(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, null, null, null, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_options(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_options: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_rhs(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_rhs rhs, ARTAT_ARTV3_rhs rhs1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.rhs ::= ARTV3.cat .*/
    case ARTL_ARTV3_rhs_1160: 
      rhs1 = new ARTAT_ARTV3_rhs();
            ARTRD_rhs(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, rhs, rhs1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cat(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
       if (rhs.isDeleter) currentModule.addDeleter(rhs.lhs, artNewParent); else currentModule.addProduction(rhs.lhs, artNewParent);
      break;
    /*ARTV3.rhs ::= ARTV3.cat '|' . ARTV3.rhs */
    case ARTL_ARTV3_rhs_1170: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cat(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
       if (rhs.isDeleter) currentModule.addDeleter(rhs.lhs, artNewParent); else currentModule.addProduction(rhs.lhs, artNewParent);
            rhs1.lhs = rhs.lhs; rhs1.isDeleter = rhs.isDeleter; 
      break;
    /*ARTV3.rhs ::= ARTV3.cat '|' ARTV3.rhs .*/
    case ARTL_ARTV3_rhs_1174: 
      rhs1 = new ARTAT_ARTV3_rhs();
            ARTRD_rhs(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, rhs, rhs1);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_rhs(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, rhs1, null);
            break;
        default:
          throw new ARTException("ARTRD_rhs: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_slot(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_action action1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.slot ::= # .*/
    case ARTL_ARTV3_slot_1222: 
      action1 = new ARTAT_ARTV3_action();
            ARTRD_slot(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, action1);
                  break;
    /*ARTV3.slot ::= ARTV3.action .*/
    case ARTL_ARTV3_slot_1226: 
      action1 = new ARTAT_ARTV3_action();
            ARTRD_slot(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, action1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), action1));
      ARTRD_action(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, action1, null);
            break;
        default:
          throw new ARTException("ARTRD_slot: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_term(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_ID ID1, ARTAT_ARTV3_INTEGER INTEGER1, ARTAT_ARTV3_REAL REAL1, ARTAT_ARTV3_STRING_DQ STRING_DQ1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.term ::= ARTV3.INTEGER .*/
    case ARTL_ARTV3_term_1538: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      REAL1 = new ARTAT_ARTV3_REAL();
      STRING_DQ1 = new ARTAT_ARTV3_STRING_DQ();
            ARTRD_term(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, REAL1, STRING_DQ1);
      INTEGER1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      INTEGER1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), INTEGER1));
      ARTRD_INTEGER(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, INTEGER1);
            break;
    /*ARTV3.term ::= ARTV3.REAL .*/
    case ARTL_ARTV3_term_1542: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      REAL1 = new ARTAT_ARTV3_REAL();
      STRING_DQ1 = new ARTAT_ARTV3_STRING_DQ();
            ARTRD_term(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, REAL1, STRING_DQ1);
      REAL1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      REAL1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), REAL1));
      ARTRD_REAL(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, REAL1);
            break;
    /*ARTV3.term ::= ARTV3.STRING_DQ .*/
    case ARTL_ARTV3_term_1546: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      REAL1 = new ARTAT_ARTV3_REAL();
      STRING_DQ1 = new ARTAT_ARTV3_STRING_DQ();
            ARTRD_term(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, REAL1, STRING_DQ1);
      STRING_DQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_DQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_DQ1));
      ARTRD_STRING_DQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_DQ1);
            break;
    /*ARTV3.term ::= ARTV3.ID .*/
    case ARTL_ARTV3_term_1550: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      REAL1 = new ARTAT_ARTV3_REAL();
      STRING_DQ1 = new ARTAT_ARTV3_STRING_DQ();
            ARTRD_term(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, REAL1, STRING_DQ1);
      ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
            break;
    /*ARTV3.term ::= ARTV3.ID '(' . ARTV3.terms ')' */
    case ARTL_ARTV3_term_1556: 
      ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, ID1);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.term ::= ARTV3.ID '(' ARTV3.terms . ')' */
    case ARTL_ARTV3_term_1558: 
      ARTRD_term(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, REAL1, STRING_DQ1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_terms(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.term ::= ARTV3.ID '(' ARTV3.terms ')' .*/
    case ARTL_ARTV3_term_1560: 
      ID1 = new ARTAT_ARTV3_ID();
      INTEGER1 = new ARTAT_ARTV3_INTEGER();
      REAL1 = new ARTAT_ARTV3_REAL();
      STRING_DQ1 = new ARTAT_ARTV3_STRING_DQ();
            ARTRD_term(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, REAL1, STRING_DQ1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default:
          throw new ARTException("ARTRD_term: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_terminaliser(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_terminaliser terminaliser, ARTAT_ARTV3_builtinTerminal builtinTerminal1, ARTAT_ARTV3_nonterminal nonterminal1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.terminaliser ::= ARTV3.nonterminal .*/
    case ARTL_ARTV3_terminaliser_132: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_terminaliser(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, terminaliser, builtinTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       if (terminaliser.isWhiteSpace) currentModule.addWhiteSpaceTerminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v)));
        else currentModule.addDeclaredTerminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); 
      break;
    /*ARTV3.terminaliser ::= ARTV3.builtinTerminal .*/
    case ARTL_ARTV3_terminaliser_138: 
      builtinTerminal1 = new ARTAT_ARTV3_builtinTerminal();
      nonterminal1 = new ARTAT_ARTV3_nonterminal();
            ARTRD_terminaliser(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, terminaliser, builtinTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), builtinTerminal1));
      ARTRD_builtinTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, builtinTerminal1, null);
       if (terminaliser.isWhiteSpace) currentModule.addWhiteSpaceTerminal(new ARTValueTerm("builtinTerminal", new ARTValueTerm(builtinTerminal1.v)));
        else currentModule.addDeclaredTerminal(new ARTValueTerm("builtinTerminal", new ARTValueTerm(builtinTerminal1.v))); 
      break;
        default:
          throw new ARTException("ARTRD_terminaliser: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_terminalisers(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_terminalisers terminalisers, ARTAT_ARTV3_terminaliser terminaliser1, ARTAT_ARTV3_terminalisers terminalisers1) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.terminalisers ::= ARTV3.terminaliser .*/
    case ARTL_ARTV3_terminalisers_118: 
      terminaliser1 = new ARTAT_ARTV3_terminaliser();
      terminalisers1 = new ARTAT_ARTV3_terminalisers();
      terminaliser1.isWhiteSpace = terminalisers.isWhiteSpace; 
      ARTRD_terminalisers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, terminalisers, terminaliser1, terminalisers1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), terminaliser1));
      ARTRD_terminaliser(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, terminaliser1, null, null);
            break;
    /*ARTV3.terminalisers ::= ARTV3.terminaliser ARTV3.terminalisers .*/
    case ARTL_ARTV3_terminalisers_128: 
      terminaliser1 = new ARTAT_ARTV3_terminaliser();
      terminalisers1 = new ARTAT_ARTV3_terminalisers();
      terminaliser1.isWhiteSpace = terminalisers.isWhiteSpace; 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), terminaliser1));
      ARTRD_terminaliser(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, terminaliser1, null, null);
      terminalisers1.isWhiteSpace = terminalisers.isWhiteSpace; 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), terminalisers1));
      ARTRD_terminalisers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, terminalisers1, null, null);
            break;
        default:
          throw new ARTException("ARTRD_terminalisers: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_terms(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.terms ::= ARTV3.term .*/
    case ARTL_ARTV3_terms_1572: 
            ARTRD_terms(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_term(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null, null, null);
            break;
    /*ARTV3.terms ::= ARTV3.term ',' . ARTV3.term */
    case ARTL_ARTV3_terms_1578: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_term(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, null, null, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.terms ::= ARTV3.term ',' ARTV3.term .*/
    case ARTL_ARTV3_terms_1580: 
            ARTRD_terms(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_term(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null, null, null);
            break;
        default:
          throw new ARTException("ARTRD_terms: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_termsOpt(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.termsOpt ::= # .*/
    case ARTL_ARTV3_termsOpt_1564: 
            ARTRD_termsOpt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.termsOpt ::= ARTV3.terms .*/
    case ARTL_ARTV3_termsOpt_1568: 
            ARTRD_termsOpt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_terms(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_termsOpt: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_text(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_text text) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.text ::= ARTV3.textElements .*/
    case ARTL_ARTV3_text_6: 
       artManager = text.artManager; currentModule = artManager.findModule("ART"); if (artManager.getDefaultMainModule() == null) artManager.setDefaultMainModule(currentModule); 
      ARTRD_text(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, text);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_textElements(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.text ::= ARTV3.modules .*/
    case ARTL_ARTV3_text_12: 
       artManager = text.artManager; 
      ARTRD_text(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, text);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_modules(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default:
          throw new ARTException("ARTRD_text: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_textElement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.textElement ::= ARTV3.directive .*/
    case ARTL_ARTV3_textElement_46: 
            ARTRD_textElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_directive(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null, null, null);
            break;
    /*ARTV3.textElement ::= ARTV3.grammarRule .*/
    case ARTL_ARTV3_textElement_50: 
            ARTRD_textElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_grammarRule(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null, null);
            break;
    /*ARTV3.textElement ::= ARTV3.deleter .*/
    case ARTL_ARTV3_textElement_54: 
            ARTRD_textElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_deleter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null);
            break;
        default:
          throw new ARTException("ARTRD_textElement: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_textElements(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.textElements ::= ARTV3.textElement ARTV3.textElements .*/
    case ARTL_ARTV3_textElements_38: 
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_textElement(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_textElements(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ARTV3.textElements ::= # .*/
    case ARTL_ARTV3_textElements_42: 
            ARTRD_textElements(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default:
          throw new ARTException("ARTRD_textElements: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_trueFalse(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ARTV3_trueFalse trueFalse) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.trueFalse ::= # .*/
    case ARTL_ARTV3_trueFalse_1082: 
            ARTRD_trueFalse(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, trueFalse);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       trueFalse.v = true; 
      break;
    /*ARTV3.trueFalse ::= 'true' .*/
    case ARTL_ARTV3_trueFalse_1088: 
            ARTRD_trueFalse(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, trueFalse);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       trueFalse.v = true; 
      break;
    /*ARTV3.trueFalse ::= 'false' .*/
    case ARTL_ARTV3_trueFalse_1094: 
            ARTRD_trueFalse(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, trueFalse);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       trueFalse.v = false; 
      break;
        default:
          throw new ARTException("ARTRD_trueFalse: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void ARTRD_union(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable) throws ARTException {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ARTV3.union ::= ARTV3.not .*/
    case ARTL_ARTV3_union_1276: 
            ARTRD_union(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_not(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
    /*ARTV3.union ::= ARTV3.union '||' . ARTV3.not */
    case ARTL_ARTV3_union_1282: 
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_union(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ARTV3.union ::= ARTV3.union '||' ARTV3.not .*/
    case ARTL_ARTV3_union_1284: 
            ARTRD_union(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_not(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
        default:
          throw new ARTException("ARTRD_union: unhandled pack node " + artPackedNode + " with label " + artSPPFPackedNodeLabel(artPackedNode) + " - " + artLabelInternalStrings[artSPPFPackedNodeLabel(artPackedNode)]);
        }
      }
    }
}

public void artEvaluate(ARTGLLRDTHandle artElement, Object artAttributes, ARTGLLRDTVertex artParent, Boolean artWriteable) throws ARTException {
  switch (artSPPFNodeLabel(artElement.element)) {
    case ARTL_ARTV3_CHAR_BQ:  ARTRD_CHAR_BQ(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_CHAR_BQ) artAttributes); break;
    case ARTL_ARTV3_ID:  ARTRD_ID(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_ID) artAttributes); break;
    case ARTL_ARTV3_IDList: ARTRD_IDList(artElement.element, artParent, artWriteable, null); break;
    case ARTL_ARTV3_IDopt:  ARTRD_IDopt(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_IDopt) artAttributes, null); break;
    case ARTL_ARTV3_INTEGER:  ARTRD_INTEGER(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_INTEGER) artAttributes); break;
    case ARTL_ARTV3_REAL:  ARTRD_REAL(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_REAL) artAttributes); break;
    case ARTL_ARTV3_STRING_BRACE_NEST:  ARTRD_STRING_BRACE_NEST(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_STRING_BRACE_NEST) artAttributes); break;
    case ARTL_ARTV3_STRING_DOLLAR:  ARTRD_STRING_DOLLAR(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_STRING_DOLLAR) artAttributes); break;
    case ARTL_ARTV3_STRING_DQ:  ARTRD_STRING_DQ(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_STRING_DQ) artAttributes); break;
    case ARTL_ARTV3_STRING_PLAIN_SQ:  ARTRD_STRING_PLAIN_SQ(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_STRING_PLAIN_SQ) artAttributes); break;
    case ARTL_ARTV3_TYPE:  ARTRD_TYPE(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_TYPE) artAttributes); break;
    case ARTL_ARTV3_TypeList: ARTRD_TypeList(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_TypeNest: ARTRD_TypeNest(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_abbrev: ARTRD_abbrev(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_action:  ARTRD_action(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_action) artAttributes, null); break;
    case ARTL_ARTV3_alt: ARTRD_alt(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_alt1: ARTRD_alt1(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_annotation: ARTRD_annotation(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_annotations: ARTRD_annotations(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_attribute:  ARTRD_attribute(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_attribute) artAttributes, null, null); break;
    case ARTL_ARTV3_attributes:  ARTRD_attributes(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_attributes) artAttributes, null, null); break;
    case ARTL_ARTV3_attributesOpt:  ARTRD_attributesOpt(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_attributesOpt) artAttributes, null); break;
    case ARTL_ARTV3_builtinTerminal:  ARTRD_builtinTerminal(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_builtinTerminal) artAttributes, null); break;
    case ARTL_ARTV3_caseInsensitiveTerminal:  ARTRD_caseInsensitiveTerminal(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_caseInsensitiveTerminal) artAttributes, null); break;
    case ARTL_ARTV3_caseSensitiveTerminal:  ARTRD_caseSensitiveTerminal(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_caseSensitiveTerminal) artAttributes, null); break;
    case ARTL_ARTV3_cat: ARTRD_cat(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_catTail: ARTRD_catTail(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_characterSetTerminal:  ARTRD_characterSetTerminal(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_characterSetTerminal) artAttributes, null, null); break;
    case ARTL_ARTV3_characterTerminal:  ARTRD_characterTerminal(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_characterTerminal) artAttributes, null); break;
    case ARTL_ARTV3_choiceElement:  ARTRD_choiceElement(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_choiceElement) artAttributes, null, null, null, null, null, null, null); break;
    case ARTL_ARTV3_chooser: ARTRD_chooser(artElement.element, artParent, artWriteable, null, null); break;
    case ARTL_ARTV3_choosers: ARTRD_choosers(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_delay: ARTRD_delay(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_deleter: ARTRD_deleter(artElement.element, artParent, artWriteable, null, null); break;
    case ARTL_ARTV3_diff: ARTRD_diff(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_directive: ARTRD_directive(artElement.element, artParent, artWriteable, null, null, null, null); break;
    case ARTL_ARTV3_element:  ARTRD_element(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_element) artAttributes, null, null, null, null, null, null); break;
    case ARTL_ARTV3_epsilon: ARTRD_epsilon(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_fold: ARTRD_fold(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_gather: ARTRD_gather(artElement.element, artParent, artWriteable, null); break;
    case ARTL_ARTV3_grammarRule: ARTRD_grammarRule(artElement.element, artParent, artWriteable, null, null, null); break;
    case ARTL_ARTV3_insertion: ARTRD_insertion(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_insertionName:  ARTRD_insertionName(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_insertionName) artAttributes, null); break;
    case ARTL_ARTV3_iter: ARTRD_iter(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_moduleHeader: ARTRD_moduleHeader(artElement.element, artParent, artWriteable, null); break;
    case ARTL_ARTV3_modules: ARTRD_modules(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_name: ARTRD_name(artElement.element, artParent, artWriteable, null); break;
    case ARTL_ARTV3_nonterminal:  ARTRD_nonterminal(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_nonterminal) artAttributes, null, null); break;
    case ARTL_ARTV3_not: ARTRD_not(artElement.element, artParent, artWriteable, null); break;
    case ARTL_ARTV3_optionSingle: ARTRD_optionSingle(artElement.element, artParent, artWriteable, null, null, null, null); break;
    case ARTL_ARTV3_optionalColon: ARTRD_optionalColon(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_options: ARTRD_options(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_rhs:  ARTRD_rhs(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_rhs) artAttributes, null); break;
    case ARTL_ARTV3_slot: ARTRD_slot(artElement.element, artParent, artWriteable, null); break;
    case ARTL_ARTV3_term: ARTRD_term(artElement.element, artParent, artWriteable, null, null, null, null); break;
    case ARTL_ARTV3_terminaliser:  ARTRD_terminaliser(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_terminaliser) artAttributes, null, null); break;
    case ARTL_ARTV3_terminalisers:  ARTRD_terminalisers(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_terminalisers) artAttributes, null, null); break;
    case ARTL_ARTV3_terms: ARTRD_terms(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_termsOpt: ARTRD_termsOpt(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_text:  ARTRD_text(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_text) artAttributes); break;
    case ARTL_ARTV3_textElement: ARTRD_textElement(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_textElements: ARTRD_textElements(artElement.element, artParent, artWriteable); break;
    case ARTL_ARTV3_trueFalse:  ARTRD_trueFalse(artElement.element, artParent, artWriteable, (ARTAT_ARTV3_trueFalse) artAttributes); break;
    case ARTL_ARTV3_union: ARTRD_union(artElement.element, artParent, artWriteable); break;
  }
}

public ARTGLLRDT artEvaluator() throws ARTException {
  ARTAT_ARTV3_text text1 = new ARTAT_ARTV3_text();
  return  artEvaluator(text1);
}

public ARTGLLRDT artEvaluator(ARTAT_ARTV3_text text1) throws ARTException {
  artRDT = new ARTGLLRDT("RDT", artKindOfs, artLabelStrings, artAnnotations, artLexer.artInputString);
  ARTGLLRDTVertex artNewParent = new ARTGLLRDTVertex(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artRootSPPFNode),artSPPFNodeRightExtent(artRootSPPFNode),artSPPFNodeLabel(artRootSPPFNode), text1));
  artRDT.setRoot(artNewParent);
  boolean artNewWriteable = true;
  artEvaluate(new ARTGLLRDTHandle(artRootSPPFNode), text1, artNewParent, artNewWriteable);
  return artRDT;
}
};
