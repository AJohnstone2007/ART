
package uk.ac.rhul.cs.csle.art.script;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import uk.ac.rhul.cs.csle.art.cfgParsers.Chooser;
import uk.ac.rhul.cs.csle.art.cfgParsers.ParserBase;
import uk.ac.rhul.cs.csle.art.cfgParsers.chart.AlgX;
import uk.ac.rhul.cs.csle.art.cfgParsers.chart.CYK;
import uk.ac.rhul.cs.csle.art.cfgParsers.gll.GLLBaseLine;
import uk.ac.rhul.cs.csle.art.cfgParsers.gll.GLLHashPool;
import uk.ac.rhul.cs.csle.art.cfgParsers.grammar.GIFTKind;
import uk.ac.rhul.cs.csle.art.cfgParsers.grammar.Grammar;
import uk.ac.rhul.cs.csle.art.cfgParsers.grammar.GrammarKind;
import uk.ac.rhul.cs.csle.art.cfgParsers.grammar.GrammarNode;
import uk.ac.rhul.cs.csle.art.cfgParsers.grammar.LKind;
import uk.ac.rhul.cs.csle.art.cfgParsers.lexer.LexerSingletonLongestMatch;
import uk.ac.rhul.cs.csle.art.cfgParsers.rdsob.RDSOBExplicitStack;
import uk.ac.rhul.cs.csle.art.cfgParsers.rdsob.RDSOBFunction;
import uk.ac.rhul.cs.csle.art.cfgParsers.rdsob.RDSOBGenerator;
import uk.ac.rhul.cs.csle.art.term.ITerms;
import uk.ac.rhul.cs.csle.art.term.Rewriter;
import uk.ac.rhul.cs.csle.art.term.TermTool;
import uk.ac.rhul.cs.csle.art.term.TermTraverser;
import uk.ac.rhul.cs.csle.art.term.TermTraverserText;
import uk.ac.rhul.cs.csle.art.util.Util;

public class ScriptTermInterpreter {
  // Bootstrap parser term
//@formatter:off
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot)), cfgRule(cfgLHS(rule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot)), cfgRule(cfgLHS(cfgRule), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot)), cfgRule(cfgLHS(cfgLHS), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAlts), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot)), cfgRule(cfgLHS(cfgAlt), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot)), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot)), cfgRule(cfgLHS(cfgAltNoAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot)), cfgRule(cfgLHS(cfgElems), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot)), cfgRule(cfgLHS(cfgExtended), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot)), cfgRule(cfgLHS(cfgAnnotation), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot)), cfgRule(cfgLHS(cfgFoldUnder), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot)), cfgRule(cfgLHS(cfgFoldOver), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot)), cfgRule(cfgLHS(cfgDoFirst), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(cfgOptional), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot)), cfgRule(cfgLHS(cfgPositive), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(cfgKleene), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(cfgPrim), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterRangeTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot)), cfgRule(cfgLHS(cfgNonterminal), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot)), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(cfgCharacterTerminal), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgEpsilon), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot)), cfgRule(cfgLHS(cfgSlotSymbol), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(.), cfgSlot)), cfgRule(cfgLHS(cfgActions), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot)), cfgRule(cfgLHS(cfgActionSeq), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot)), cfgRule(cfgLHS(cfgAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot)), cfgRule(cfgLHS(cfgEquation), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgAssignment), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgInsert), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAttribute), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgSeq), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(trRule), cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot)), cfgRule(cfgLHS(trLabel), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(tr), cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot)), cfgRule(cfgLHS(trPremises), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot)), cfgRule(cfgLHS(trMatch), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTransition), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTuple), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleList)), cfgSlot)), cfgRule(cfgLHS(trTupleList), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleList)), cfgSlot)), cfgRule(cfgLHS(trTerm), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(trArgList), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot)), cfgRule(cfgLHS(trInlineTransition), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(chooseRule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot)), cfgRule(cfgLHS(chooseElementRule), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot)), cfgRule(cfgLHS(chooseSlotRule), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot)), cfgRule(cfgLHS(chooseElementExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot)), cfgRule(cfgLHS(chooseSlotExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot)), cfgRule(cfgLHS(chooseElement), cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(chooseSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(choosePredefinedElementSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot)), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot)), cfgRule(cfgLHS(chooserOp), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot)), cfgRule(cfgLHS(chooseHigher), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(chooseLower), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot)), cfgRule(cfgLHS(chooseLonger), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot)), cfgRule(cfgLHS(chooseShorter), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot)), cfgRule(cfgLHS(chooseSetOp), cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot)), cfgRule(cfgLHS(chooseUnion), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(chooseDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot)), cfgRule(cfgLHS(chooseIntersection), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(chooseSymmetricDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot)), cfgRule(cfgLHS(directive), cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot)), cfgRule(cfgLHS(directiveElement), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(rewriter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(rewriter)), cfgSlot, cfgFoldUnder(cfgNonterminal(rewriterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot)), cfgRule(cfgLHS(file), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(lexerElements), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot)), cfgRule(cfgLHS(lexerElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElements), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot)), cfgRule(cfgLHS(paraterminalElements), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot)), cfgRule(cfgLHS(paraterminalElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot)), cfgRule(cfgLHS(parserElements), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot)), cfgRule(cfgLHS(parserElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot)), cfgRule(cfgLHS(rewriterElements), cfgSeq(cfgSlot, cfgNonterminal(rewriterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rewriterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(rewriterElements)), cfgSlot)), cfgRule(cfgLHS(rewriterElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot)), cfgRule(cfgLHS(displayElements), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot)), cfgRule(cfgLHS(displayElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(tokens)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(rewrite)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot)), cfgRule(cfgLHS(\\_\\_bool), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot)), cfgRule(cfgLHS(\\_\\_char), cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(\\_\\_int32), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot)), cfgRule(cfgLHS(\\_\\_real64), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot)), cfgRule(cfgLHS(\\_\\_string), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(ID), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot)), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), cfgRule(cfgLHS(STRING\\_DQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot)), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot)), cfgRule(cfgLHS(CHAR\\_BQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot)), cfgRule(cfgLHS(TRRELATION), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot)))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot)), cfgRule(cfgLHS(rule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot)), cfgRule(cfgLHS(cfgRule), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot)), cfgRule(cfgLHS(cfgLHS), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAlts), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot)), cfgRule(cfgLHS(cfgAlt), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot)), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot)), cfgRule(cfgLHS(cfgAltNoAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot)), cfgRule(cfgLHS(cfgElems), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot)), cfgRule(cfgLHS(cfgExtended), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot)), cfgRule(cfgLHS(cfgAnnotation), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot)), cfgRule(cfgLHS(cfgFoldUnder), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot)), cfgRule(cfgLHS(cfgFoldOver), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot)), cfgRule(cfgLHS(cfgDoFirst), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(cfgOptional), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot)), cfgRule(cfgLHS(cfgPositive), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(cfgKleene), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(cfgPrim), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterRangeTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot)), cfgRule(cfgLHS(cfgNonterminal), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot)), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(cfgCharacterTerminal), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgEpsilon), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot)), cfgRule(cfgLHS(cfgSlotSymbol), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(.), cfgSlot)), cfgRule(cfgLHS(cfgActions), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot)), cfgRule(cfgLHS(cfgActionSeq), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot)), cfgRule(cfgLHS(cfgAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot)), cfgRule(cfgLHS(cfgEquation), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgAssignment), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgInsert), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAttribute), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgSeq), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(trRule), cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot)), cfgRule(cfgLHS(trLabel), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(tr), cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot)), cfgRule(cfgLHS(trPremises), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot)), cfgRule(cfgLHS(trMatch), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTransition), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTuple), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleList)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(trTupleList), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleList)), cfgSlot)), cfgRule(cfgLHS(trTerm), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(trArgList), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot)), cfgRule(cfgLHS(trInlineTransition), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(chooseRule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot)), cfgRule(cfgLHS(chooseElementRule), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot)), cfgRule(cfgLHS(chooseSlotRule), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot)), cfgRule(cfgLHS(chooseElementExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot)), cfgRule(cfgLHS(chooseSlotExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot)), cfgRule(cfgLHS(chooseElement), cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(chooseSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(choosePredefinedElementSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot)), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot)), cfgRule(cfgLHS(chooserOp), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot)), cfgRule(cfgLHS(chooseHigher), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(chooseLower), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot)), cfgRule(cfgLHS(chooseLonger), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot)), cfgRule(cfgLHS(chooseShorter), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot)), cfgRule(cfgLHS(chooseSetOp), cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot)), cfgRule(cfgLHS(chooseUnion), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(chooseDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot)), cfgRule(cfgLHS(chooseIntersection), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(chooseSymmetricDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot)), cfgRule(cfgLHS(directive), cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot)), cfgRule(cfgLHS(directiveElement), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(rewriter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(rewriter)), cfgSlot, cfgFoldUnder(cfgNonterminal(rewriterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot)), cfgRule(cfgLHS(file), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(lexerElements), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot)), cfgRule(cfgLHS(lexerElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElements), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot)), cfgRule(cfgLHS(paraterminalElements), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot)), cfgRule(cfgLHS(paraterminalElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot)), cfgRule(cfgLHS(parserElements), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot)), cfgRule(cfgLHS(parserElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot)), cfgRule(cfgLHS(rewriterElements), cfgSeq(cfgSlot, cfgNonterminal(rewriterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rewriterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(rewriterElements)), cfgSlot)), cfgRule(cfgLHS(rewriterElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot)), cfgRule(cfgLHS(displayElements), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot)), cfgRule(cfgLHS(displayElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(tokens)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(rewrite)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot)), cfgRule(cfgLHS(\\_\\_bool), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot)), cfgRule(cfgLHS(\\_\\_char), cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(\\_\\_int32), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot)), cfgRule(cfgLHS(\\_\\_real64), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot)), cfgRule(cfgLHS(\\_\\_string), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(ID), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot)), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), cfgRule(cfgLHS(STRING\\_DQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot)), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot)), cfgRule(cfgLHS(CHAR\\_BQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot)), cfgRule(cfgLHS(TRRELATION), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot)))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot)), cfgRule(cfgLHS(rule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot)), cfgRule(cfgLHS(cfgRule), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot)), cfgRule(cfgLHS(cfgLHS), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAlts), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot)), cfgRule(cfgLHS(cfgAlt), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot)), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot)), cfgRule(cfgLHS(cfgEpsilon), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot)), cfgRule(cfgLHS(cfgAltNoAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot)), cfgRule(cfgLHS(cfgElems), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot)), cfgRule(cfgLHS(cfgExtended), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot)), cfgRule(cfgLHS(cfgAnnotation), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot)), cfgRule(cfgLHS(cfgFoldUnder), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot)), cfgRule(cfgLHS(cfgFoldOver), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot)), cfgRule(cfgLHS(cfgDoFirst), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(cfgOptional), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot)), cfgRule(cfgLHS(cfgPositive), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(cfgKleene), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(cfgPrim), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgPrimCarrier), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot)), cfgRule(cfgLHS(cfgNonterminal), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot)), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgCharacterTerminal), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot)), cfgRule(cfgLHS(cfgRange), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgActions), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot)), cfgRule(cfgLHS(cfgActionSeq), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot)), cfgRule(cfgLHS(cfgAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot)), cfgRule(cfgLHS(cfgEquation), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgAssignment), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgInsert), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAttribute), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgSeq), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(trRule), cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot)), cfgRule(cfgLHS(trLabel), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(tr), cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot)), cfgRule(cfgLHS(trPremises), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot)), cfgRule(cfgLHS(trMatch), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTransition), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTuple), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(trTupleTail), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot)), cfgRule(cfgLHS(trTerm), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(trArgList), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot)), cfgRule(cfgLHS(trInlineTransition), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot)), cfgRule(cfgLHS(chooseRule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot)), cfgRule(cfgLHS(chooseElementRule), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot)), cfgRule(cfgLHS(chooseSlotRule), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot)), cfgRule(cfgLHS(chooseElementExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot)), cfgRule(cfgLHS(chooseSlotExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot)), cfgRule(cfgLHS(chooseElement), cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(chooseSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(choosePredefinedElementSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot)), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot)), cfgRule(cfgLHS(chooserOp), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot)), cfgRule(cfgLHS(chooseHigher), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(chooseLower), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot)), cfgRule(cfgLHS(chooseLonger), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot)), cfgRule(cfgLHS(chooseShorter), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot)), cfgRule(cfgLHS(chooseSetOp), cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot)), cfgRule(cfgLHS(chooseUnion), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(chooseDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot)), cfgRule(cfgLHS(chooseIntersection), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(chooseSymmetricDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot)), cfgRule(cfgLHS(directive), cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot)), cfgRule(cfgLHS(directiveElement), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(rewriter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(rewriter)), cfgSlot, cfgFoldUnder(cfgNonterminal(rewriterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot)), cfgRule(cfgLHS(file), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(lexerElements), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot)), cfgRule(cfgLHS(lexerElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElements), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot)), cfgRule(cfgLHS(paraterminalElements), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot)), cfgRule(cfgLHS(paraterminalElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot)), cfgRule(cfgLHS(parserElements), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot)), cfgRule(cfgLHS(parserElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot)), cfgRule(cfgLHS(rewriterElements), cfgSeq(cfgSlot, cfgNonterminal(rewriterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rewriterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(rewriterElements)), cfgSlot)), cfgRule(cfgLHS(rewriterElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot)), cfgRule(cfgLHS(displayElements), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot)), cfgRule(cfgLHS(displayElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(tokens)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(rewrite)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot)), cfgRule(cfgLHS(\\_\\_bool), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot)), cfgRule(cfgLHS(\\_\\_char), cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(\\_\\_int32), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot)), cfgRule(cfgLHS(\\_\\_real64), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot)), cfgRule(cfgLHS(\\_\\_string), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(ID), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot)), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), cfgRule(cfgLHS(STRING\\_DQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot)), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot)), cfgRule(cfgLHS(CHAR\\_BQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot)), cfgRule(cfgLHS(TRRELATION), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot)))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot)), cfgRule(cfgLHS(rule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot)), cfgRule(cfgLHS(cfgRule), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot)), cfgRule(cfgLHS(cfgLHS), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAlts), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot)), cfgRule(cfgLHS(cfgAlt), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot)), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot)), cfgRule(cfgLHS(cfgEpsilon), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot)), cfgRule(cfgLHS(cfgAltNoAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot)), cfgRule(cfgLHS(cfgElems), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot)), cfgRule(cfgLHS(cfgExtended), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot)), cfgRule(cfgLHS(cfgAnnotation), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot)), cfgRule(cfgLHS(cfgFoldUnder), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot)), cfgRule(cfgLHS(cfgFoldOver), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot)), cfgRule(cfgLHS(cfgDoFirst), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(cfgOptional), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot)), cfgRule(cfgLHS(cfgPositive), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(cfgKleene), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(cfgPrim), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgPrimCarrier), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot)), cfgRule(cfgLHS(cfgNonterminal), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot)), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgCharacterTerminal), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot)), cfgRule(cfgLHS(cfgRange), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgActions), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot)), cfgRule(cfgLHS(cfgActionSeq), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot)), cfgRule(cfgLHS(cfgAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot)), cfgRule(cfgLHS(cfgEquation), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgAssignment), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgInsert), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAttribute), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgSeq), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(trRule), cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot)), cfgRule(cfgLHS(trLabel), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(tr), cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot)), cfgRule(cfgLHS(trPremises), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot)), cfgRule(cfgLHS(trMatch), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTransition), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTuple), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(trTupleTail), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot)), cfgRule(cfgLHS(trTerm), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(trArgList), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot)), cfgRule(cfgLHS(trInlineTransition), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot)), cfgRule(cfgLHS(chooseRule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot)), cfgRule(cfgLHS(chooseElementRule), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot)), cfgRule(cfgLHS(chooseSlotRule), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot)), cfgRule(cfgLHS(chooseElementExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot)), cfgRule(cfgLHS(chooseSlotExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot)), cfgRule(cfgLHS(chooseElement), cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(chooseSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(choosePredefinedElementSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot)), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot)), cfgRule(cfgLHS(chooserOp), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot)), cfgRule(cfgLHS(chooseHigher), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(chooseLower), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot)), cfgRule(cfgLHS(chooseLonger), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot)), cfgRule(cfgLHS(chooseShorter), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot)), cfgRule(cfgLHS(chooseSetOp), cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot)), cfgRule(cfgLHS(chooseUnion), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(chooseDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot)), cfgRule(cfgLHS(chooseIntersection), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(chooseSymmetricDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot)), cfgRule(cfgLHS(directive), cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot)), cfgRule(cfgLHS(directiveElement), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot)), cfgRule(cfgLHS(file), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(lexerElements), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot)), cfgRule(cfgLHS(lexerElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElements), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot)), cfgRule(cfgLHS(paraterminalElements), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot)), cfgRule(cfgLHS(paraterminalElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot)), cfgRule(cfgLHS(parserElements), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot)), cfgRule(cfgLHS(parserElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot)), cfgRule(cfgLHS(interpreterElements), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot)), cfgRule(cfgLHS(interpreterElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot)), cfgRule(cfgLHS(displayElements), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot)), cfgRule(cfgLHS(displayElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(tokens)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot)), cfgRule(cfgLHS(\\_\\_bool), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot)), cfgRule(cfgLHS(\\_\\_char), cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(\\_\\_int32), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot)), cfgRule(cfgLHS(\\_\\_real64), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot)), cfgRule(cfgLHS(\\_\\_string), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(ID), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot)), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), cfgRule(cfgLHS(STRING\\_DQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot)), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot)), cfgRule(cfgLHS(CHAR\\_BQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot)), cfgRule(cfgLHS(TRRELATION), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot)))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot)), cfgRule(cfgLHS(rule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot)), cfgRule(cfgLHS(cfgRule), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot)), cfgRule(cfgLHS(cfgLHS), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAlts), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot)), cfgRule(cfgLHS(cfgAlt), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot)), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot)), cfgRule(cfgLHS(cfgEpsilon), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot)), cfgRule(cfgLHS(cfgAltNoAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot)), cfgRule(cfgLHS(cfgElems), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot)), cfgRule(cfgLHS(cfgExtended), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot)), cfgRule(cfgLHS(cfgAnnotation), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot)), cfgRule(cfgLHS(cfgFoldUnder), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot)), cfgRule(cfgLHS(cfgFoldOver), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot)), cfgRule(cfgLHS(cfgDoFirst), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(cfgOptional), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot)), cfgRule(cfgLHS(cfgPositive), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(cfgKleene), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(cfgPrim), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgPrimCarrier), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot)), cfgRule(cfgLHS(cfgNonterminal), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot)), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgCharacterTerminal), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot)), cfgRule(cfgLHS(cfgRange), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgActions), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot)), cfgRule(cfgLHS(cfgActionSeq), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot)), cfgRule(cfgLHS(cfgAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot)), cfgRule(cfgLHS(cfgEquation), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgAssignment), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgInsert), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAttribute), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgSeq), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(trRule), cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot)), cfgRule(cfgLHS(trLabel), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(tr), cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot)), cfgRule(cfgLHS(trPremises), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot)), cfgRule(cfgLHS(trMatch), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTransition), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTuple), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(trTupleTail), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot)), cfgRule(cfgLHS(trTerm), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(trArgList), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot)), cfgRule(cfgLHS(trInlineTransition), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot)), cfgRule(cfgLHS(chooseRule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot)), cfgRule(cfgLHS(chooseElementRule), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot)), cfgRule(cfgLHS(chooseSlotRule), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot)), cfgRule(cfgLHS(chooseElementExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot)), cfgRule(cfgLHS(chooseSlotExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot)), cfgRule(cfgLHS(chooseElement), cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(chooseSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(choosePredefinedElementSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot)), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot)), cfgRule(cfgLHS(chooserOp), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot)), cfgRule(cfgLHS(chooseHigher), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(chooseLower), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot)), cfgRule(cfgLHS(chooseLonger), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot)), cfgRule(cfgLHS(chooseShorter), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot)), cfgRule(cfgLHS(chooseSetOp), cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot)), cfgRule(cfgLHS(chooseUnion), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(chooseDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot)), cfgRule(cfgLHS(chooseIntersection), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(chooseSymmetricDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot)), cfgRule(cfgLHS(directive), cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot)), cfgRule(cfgLHS(directiveElement), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(latex)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot)), cfgRule(cfgLHS(file), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(lexerElements), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot)), cfgRule(cfgLHS(lexerElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElements), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot)), cfgRule(cfgLHS(paraterminalElements), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot)), cfgRule(cfgLHS(paraterminalElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot)), cfgRule(cfgLHS(parserElements), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot)), cfgRule(cfgLHS(parserElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot)), cfgRule(cfgLHS(interpreterElements), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot)), cfgRule(cfgLHS(interpreterElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot)), cfgRule(cfgLHS(displayElements), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot)), cfgRule(cfgLHS(displayElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexerProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexicalisation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(gss), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(bsr)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot)), cfgRule(cfgLHS(\\_\\_bool), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot)), cfgRule(cfgLHS(\\_\\_char), cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(\\_\\_int32), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot)), cfgRule(cfgLHS(\\_\\_real64), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot)), cfgRule(cfgLHS(\\_\\_string), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(ID), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot)), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), cfgRule(cfgLHS(STRING\\_DQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot)), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot)), cfgRule(cfgLHS(CHAR\\_BQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot)), cfgRule(cfgLHS(TRRELATION), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot)))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot)), cfgRule(cfgLHS(rule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot)), cfgRule(cfgLHS(cfgRule), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot)), cfgRule(cfgLHS(cfgLHS), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAlts), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot)), cfgRule(cfgLHS(cfgAlt), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot)), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot)), cfgRule(cfgLHS(cfgEpsilon), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot)), cfgRule(cfgLHS(cfgAltNoAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot)), cfgRule(cfgLHS(cfgElems), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot)), cfgRule(cfgLHS(cfgExtended), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot)), cfgRule(cfgLHS(cfgAnnotation), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot)), cfgRule(cfgLHS(cfgFoldUnder), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot)), cfgRule(cfgLHS(cfgFoldOver), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot)), cfgRule(cfgLHS(cfgDoFirst), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(cfgOptional), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot)), cfgRule(cfgLHS(cfgPositive), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(cfgKleene), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(cfgPrim), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgPrimCarrier), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot)), cfgRule(cfgLHS(cfgNonterminal), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot)), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgCharacterTerminal), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot)), cfgRule(cfgLHS(cfgRange), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgActions), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot)), cfgRule(cfgLHS(cfgActionSeq), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot)), cfgRule(cfgLHS(cfgAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot)), cfgRule(cfgLHS(cfgEquation), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgAssignment), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgInsert), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAttribute), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgSeq), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(trRule), cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot)), cfgRule(cfgLHS(trLabel), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(tr), cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot)), cfgRule(cfgLHS(trPremises), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot)), cfgRule(cfgLHS(trMatch), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTransition), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTuple), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgCaseSensitiveTerminal(\\,), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(trTupleTail), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot)), cfgRule(cfgLHS(trTerm), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(trArgList), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot)), cfgRule(cfgLHS(trInlineTransition), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot)), cfgRule(cfgLHS(chooseRule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot)), cfgRule(cfgLHS(chooseElementRule), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot)), cfgRule(cfgLHS(chooseSlotRule), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot)), cfgRule(cfgLHS(chooseElementExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot)), cfgRule(cfgLHS(chooseSlotExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot)), cfgRule(cfgLHS(chooseElement), cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(chooseSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(choosePredefinedElementSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot)), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot)), cfgRule(cfgLHS(chooserOp), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot)), cfgRule(cfgLHS(chooseHigher), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(chooseLower), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot)), cfgRule(cfgLHS(chooseLonger), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot)), cfgRule(cfgLHS(chooseShorter), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot)), cfgRule(cfgLHS(chooseSetOp), cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot)), cfgRule(cfgLHS(chooseUnion), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(chooseDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot)), cfgRule(cfgLHS(chooseIntersection), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(chooseSymmetricDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot)), cfgRule(cfgLHS(directive), cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot)), cfgRule(cfgLHS(directiveElement), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(latex)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot)), cfgRule(cfgLHS(file), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(lexerElements), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot)), cfgRule(cfgLHS(lexerElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElements), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot)), cfgRule(cfgLHS(paraterminalElements), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot)), cfgRule(cfgLHS(paraterminalElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot)), cfgRule(cfgLHS(parserElements), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot)), cfgRule(cfgLHS(parserElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot)), cfgRule(cfgLHS(interpreterElements), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot)), cfgRule(cfgLHS(interpreterElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot)), cfgRule(cfgLHS(displayElements), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot)), cfgRule(cfgLHS(displayElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexerProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexicalisation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(gss), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(bsr)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot)), cfgRule(cfgLHS(\\_\\_bool), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot)), cfgRule(cfgLHS(\\_\\_char), cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(\\_\\_int32), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot)), cfgRule(cfgLHS(\\_\\_real64), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot)), cfgRule(cfgLHS(\\_\\_string), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(ID), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot)), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), cfgRule(cfgLHS(STRING\\_DQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot)), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot)), cfgRule(cfgLHS(CHAR\\_BQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot)), cfgRule(cfgLHS(TRRELATION), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot)))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot)), cfgRule(cfgLHS(rule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot)), cfgRule(cfgLHS(cfgRule), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot)), cfgRule(cfgLHS(cfgLHS), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAlts), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot)), cfgRule(cfgLHS(cfgAlt), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot)), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot)), cfgRule(cfgLHS(cfgEpsilon), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot)), cfgRule(cfgLHS(cfgAltNoAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot)), cfgRule(cfgLHS(cfgElems), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot)), cfgRule(cfgLHS(cfgExtended), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot)), cfgRule(cfgLHS(cfgAnnotation), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot)), cfgRule(cfgLHS(cfgFoldUnder), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot)), cfgRule(cfgLHS(cfgFoldOver), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot)), cfgRule(cfgLHS(cfgDoFirst), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(cfgOptional), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot)), cfgRule(cfgLHS(cfgPositive), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(cfgKleene), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(cfgPrim), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgPrimCarrier), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot)), cfgRule(cfgLHS(cfgNonterminal), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot)), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgCharacterTerminal), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot)), cfgRule(cfgLHS(cfgRange), cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(cfgActions), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot)), cfgRule(cfgLHS(cfgActionSeq), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot)), cfgRule(cfgLHS(cfgAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot)), cfgRule(cfgLHS(cfgEquation), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgAssignment), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), cfgRule(cfgLHS(cfgInsert), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgAttribute), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(cfgSeq), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), cfgRule(cfgLHS(trRule), cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot)), cfgRule(cfgLHS(trLabel), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot)), cfgRule(cfgLHS(tr), cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot)), cfgRule(cfgLHS(trPremises), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot)), cfgRule(cfgLHS(trMatch), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTransition), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot)), cfgRule(cfgLHS(trTuple), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(trTupleTail), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot)), cfgRule(cfgLHS(trTerm), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(trArgList), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot)), cfgRule(cfgLHS(trInlineTransition), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot)), cfgRule(cfgLHS(chooseRule), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot)), cfgRule(cfgLHS(chooseElementRule), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot)), cfgRule(cfgLHS(chooseSlotRule), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot)), cfgRule(cfgLHS(chooseElementExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot)), cfgRule(cfgLHS(chooseSlotExpr), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot)), cfgRule(cfgLHS(chooseElement), cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(chooseSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot)), cfgRule(cfgLHS(choosePredefinedElementSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot)), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot)), cfgRule(cfgLHS(chooserOp), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot)), cfgRule(cfgLHS(chooseHigher), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot)), cfgRule(cfgLHS(chooseLower), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot)), cfgRule(cfgLHS(chooseLonger), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot)), cfgRule(cfgLHS(chooseShorter), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot)), cfgRule(cfgLHS(chooseSetOp), cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot)), cfgRule(cfgLHS(chooseUnion), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot)), cfgRule(cfgLHS(chooseDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot)), cfgRule(cfgLHS(chooseIntersection), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot)), cfgRule(cfgLHS(chooseSymmetricDifference), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot)), cfgRule(cfgLHS(directive), cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot)), cfgRule(cfgLHS(directiveElement), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(latex)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot)), cfgRule(cfgLHS(file), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot)), cfgRule(cfgLHS(lexerElements), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot)), cfgRule(cfgLHS(lexerElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElements), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot)), cfgRule(cfgLHS(whiteSpaceElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot)), cfgRule(cfgLHS(paraterminalElements), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot)), cfgRule(cfgLHS(paraterminalElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot)), cfgRule(cfgLHS(parserElements), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot)), cfgRule(cfgLHS(parserElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot)), cfgRule(cfgLHS(interpreterElements), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot)), cfgRule(cfgLHS(interpreterElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot)), cfgRule(cfgLHS(displayElements), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot)), cfgRule(cfgLHS(displayElement), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexerProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexicalisation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(gss), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(bsr)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot)), cfgRule(cfgLHS(\\_\\_bool), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot)), cfgRule(cfgLHS(\\_\\_char), cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot)), cfgRule(cfgLHS(\\_\\_int32), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot)), cfgRule(cfgLHS(\\_\\_real64), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot)), cfgRule(cfgLHS(\\_\\_string), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot)), cfgRule(cfgLHS(ID), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot)), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), cfgRule(cfgLHS(STRING\\_DQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot)), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot)), cfgRule(cfgLHS(CHAR\\_BQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot)), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot)), cfgRule(cfgLHS(TRRELATION), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot)))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot))), cfgRule(cfgLHS(rule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot))), cfgRule(cfgLHS(cfgRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot))), cfgRule(cfgLHS(cfgLHS), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAlts), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot))), cfgRule(cfgLHS(cfgAlt), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot))), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot))), cfgRule(cfgLHS(cfgEpsilon), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot))), cfgRule(cfgLHS(cfgAltNoAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot))), cfgRule(cfgLHS(cfgElems), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot))), cfgRule(cfgLHS(cfgExtended), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot))), cfgRule(cfgLHS(cfgAnnotation), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot))), cfgRule(cfgLHS(cfgFoldUnder), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot))), cfgRule(cfgLHS(cfgFoldOver), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot))), cfgRule(cfgLHS(cfgDoFirst), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgOptional), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot))), cfgRule(cfgLHS(cfgPositive), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(cfgKleene), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(cfgPrim), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgPrimCarrier), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot))), cfgRule(cfgLHS(cfgNonterminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot))), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgCharacterTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot))), cfgRule(cfgLHS(cfgRange), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgActions), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot))), cfgRule(cfgLHS(cfgActionSeq), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot))), cfgRule(cfgLHS(cfgAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot))), cfgRule(cfgLHS(cfgEquation), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot))), cfgRule(cfgLHS(cfgAssignment), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(trTerm), cfgSlot))), cfgRule(cfgLHS(cfgInsert), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAttribute), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgSeq), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(cfgSlot), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(trRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot))), cfgRule(cfgLHS(trLabel), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(tr), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot))), cfgRule(cfgLHS(trPremises), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot))), cfgRule(cfgLHS(trMatch), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTransition), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTuple), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(trTupleTail), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot))), cfgRule(cfgLHS(trTerm), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(trArgList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot))), cfgRule(cfgLHS(trInlineTransition), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot))), cfgRule(cfgLHS(chooseRule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot))), cfgRule(cfgLHS(chooseElementRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot))), cfgRule(cfgLHS(chooseSlotRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot))), cfgRule(cfgLHS(chooseElementExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot))), cfgRule(cfgLHS(chooseSlotExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot))), cfgRule(cfgLHS(chooseElement), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(chooseSlot), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(choosePredefinedElementSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot))), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot))), cfgRule(cfgLHS(chooserOp), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot))), cfgRule(cfgLHS(chooseHigher), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(chooseLower), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot))), cfgRule(cfgLHS(chooseLonger), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot))), cfgRule(cfgLHS(chooseShorter), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot))), cfgRule(cfgLHS(chooseSetOp), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot))), cfgRule(cfgLHS(chooseUnion), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(chooseDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot))), cfgRule(cfgLHS(chooseIntersection), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(chooseSymmetricDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot))), cfgRule(cfgLHS(directive), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot))), cfgRule(cfgLHS(directiveElement), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(latex)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot))), cfgRule(cfgLHS(file), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(lexerElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot))), cfgRule(cfgLHS(lexerElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot))), cfgRule(cfgLHS(paraterminalElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot))), cfgRule(cfgLHS(paraterminalElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot))), cfgRule(cfgLHS(parserElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot))), cfgRule(cfgLHS(parserElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot))), cfgRule(cfgLHS(interpreterElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot))), cfgRule(cfgLHS(interpreterElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot))), cfgRule(cfgLHS(displayElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot))), cfgRule(cfgLHS(displayElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexerProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexicalisation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(gss), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(bsr)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot))), cfgRule(cfgLHS(\\_\\_bool), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot))), cfgRule(cfgLHS(\\_\\_char), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(\\_\\_int32), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot))), cfgRule(cfgLHS(\\_\\_real64), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot))), cfgRule(cfgLHS(\\_\\_string), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(ID), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot))), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot))), cfgRule(cfgLHS(STRING\\_DQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot))), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot))), cfgRule(cfgLHS(CHAR\\_BQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot))), cfgRule(cfgLHS(TRRELATION), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot))))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot))), cfgRule(cfgLHS(rule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot))), cfgRule(cfgLHS(cfgRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot))), cfgRule(cfgLHS(cfgLHS), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAlts), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot))), cfgRule(cfgLHS(cfgAlt), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot))), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot))), cfgRule(cfgLHS(cfgEpsilon), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot))), cfgRule(cfgLHS(cfgAltNoAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot))), cfgRule(cfgLHS(cfgElems), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot))), cfgRule(cfgLHS(cfgExtended), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot))), cfgRule(cfgLHS(cfgAnnotation), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot))), cfgRule(cfgLHS(cfgFoldUnder), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot))), cfgRule(cfgLHS(cfgFoldOver), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot))), cfgRule(cfgLHS(cfgDoFirst), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgOptional), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot))), cfgRule(cfgLHS(cfgPositive), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(cfgKleene), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(cfgPrim), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgPrimCarrier), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot))), cfgRule(cfgLHS(cfgNonterminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot))), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgCharacterTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot))), cfgRule(cfgLHS(cfgRange), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgActions), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot))), cfgRule(cfgLHS(cfgActionSeq), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot))), cfgRule(cfgLHS(cfgAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot))), cfgRule(cfgLHS(cfgEquation), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgAssignment), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgInsert), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAttribute), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgExpression), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgExpressionList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot))), cfgRule(cfgLHS(cfgSeq), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(cfgSlot), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(trRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot))), cfgRule(cfgLHS(trLabel), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(tr), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot))), cfgRule(cfgLHS(trPremises), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot))), cfgRule(cfgLHS(trMatch), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTransition), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTuple), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(trTupleTail), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot))), cfgRule(cfgLHS(trTerm), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(trArgList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot))), cfgRule(cfgLHS(trInlineTransition), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot))), cfgRule(cfgLHS(chooseRule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot))), cfgRule(cfgLHS(chooseElementRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot))), cfgRule(cfgLHS(chooseSlotRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot))), cfgRule(cfgLHS(chooseElementExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot))), cfgRule(cfgLHS(chooseSlotExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot))), cfgRule(cfgLHS(chooseElement), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(chooseSlot), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(choosePredefinedElementSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot))), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot))), cfgRule(cfgLHS(chooserOp), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot))), cfgRule(cfgLHS(chooseHigher), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(chooseLower), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot))), cfgRule(cfgLHS(chooseLonger), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot))), cfgRule(cfgLHS(chooseShorter), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot))), cfgRule(cfgLHS(chooseSetOp), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot))), cfgRule(cfgLHS(chooseUnion), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(chooseDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot))), cfgRule(cfgLHS(chooseIntersection), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(chooseSymmetricDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot))), cfgRule(cfgLHS(directive), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot))), cfgRule(cfgLHS(directiveElement), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(latex)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot))), cfgRule(cfgLHS(file), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(lexerElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot))), cfgRule(cfgLHS(lexerElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot))), cfgRule(cfgLHS(paraterminalElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot))), cfgRule(cfgLHS(paraterminalElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot))), cfgRule(cfgLHS(parserElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot))), cfgRule(cfgLHS(parserElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot))), cfgRule(cfgLHS(interpreterElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot))), cfgRule(cfgLHS(interpreterElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot))), cfgRule(cfgLHS(displayElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot))), cfgRule(cfgLHS(displayElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexerProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexicalisation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(gss), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(bsr)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot))), cfgRule(cfgLHS(\\_\\_bool), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot))), cfgRule(cfgLHS(\\_\\_char), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(\\_\\_int32), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot))), cfgRule(cfgLHS(\\_\\_real64), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot))), cfgRule(cfgLHS(\\_\\_string), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(ID), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot))), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot))), cfgRule(cfgLHS(STRING\\_DQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot))), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot))), cfgRule(cfgLHS(CHAR\\_BQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot))), cfgRule(cfgLHS(TRRELATION), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot))))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot))), cfgRule(cfgLHS(rule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot))), cfgRule(cfgLHS(cfgRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot))), cfgRule(cfgLHS(cfgLHS), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAlts), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot))), cfgRule(cfgLHS(cfgAlt), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot))), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot))), cfgRule(cfgLHS(cfgEpsilon), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot))), cfgRule(cfgLHS(cfgAltNoAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot))), cfgRule(cfgLHS(cfgElems), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot))), cfgRule(cfgLHS(cfgExtended), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot))), cfgRule(cfgLHS(cfgAnnotation), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot))), cfgRule(cfgLHS(cfgFoldUnder), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot))), cfgRule(cfgLHS(cfgFoldOver), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot))), cfgRule(cfgLHS(cfgDoFirst), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgOptional), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot))), cfgRule(cfgLHS(cfgPositive), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(cfgKleene), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(cfgPrim), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrimCarrier)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgPrimCarrier), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot))), cfgRule(cfgLHS(cfgNonterminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot))), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgCharacterTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot))), cfgRule(cfgLHS(cfgRange), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgActions), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot))), cfgRule(cfgLHS(cfgActionSeq), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot))), cfgRule(cfgLHS(cfgAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot))), cfgRule(cfgLHS(cfgEquation), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgAssignment), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgInsert), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAttribute), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgExpression), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAttribute)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgExpressionList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot))), cfgRule(cfgLHS(cfgSeq), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(cfgSlot), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(trRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot))), cfgRule(cfgLHS(trLabel), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(tr), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot))), cfgRule(cfgLHS(trPremises), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot))), cfgRule(cfgLHS(trMatch), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTransition), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTuple), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(trTupleTail), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot))), cfgRule(cfgLHS(trTerm), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(trArgList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot))), cfgRule(cfgLHS(trInlineTransition), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot))), cfgRule(cfgLHS(chooseRule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot))), cfgRule(cfgLHS(chooseElementRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot))), cfgRule(cfgLHS(chooseSlotRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot))), cfgRule(cfgLHS(chooseElementExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot))), cfgRule(cfgLHS(chooseSlotExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot))), cfgRule(cfgLHS(chooseElement), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(chooseSlot), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(choosePredefinedElementSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot))), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot))), cfgRule(cfgLHS(chooserOp), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot))), cfgRule(cfgLHS(chooseHigher), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(chooseLower), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot))), cfgRule(cfgLHS(chooseLonger), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot))), cfgRule(cfgLHS(chooseShorter), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot))), cfgRule(cfgLHS(chooseSetOp), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot))), cfgRule(cfgLHS(chooseUnion), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(chooseDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot))), cfgRule(cfgLHS(chooseIntersection), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(chooseSymmetricDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot))), cfgRule(cfgLHS(directive), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot))), cfgRule(cfgLHS(directiveElement), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(latex)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot))), cfgRule(cfgLHS(file), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(lexerElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot))), cfgRule(cfgLHS(lexerElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot))), cfgRule(cfgLHS(paraterminalElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot))), cfgRule(cfgLHS(paraterminalElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot))), cfgRule(cfgLHS(parserElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot))), cfgRule(cfgLHS(parserElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot))), cfgRule(cfgLHS(interpreterElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot))), cfgRule(cfgLHS(interpreterElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot))), cfgRule(cfgLHS(displayElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot))), cfgRule(cfgLHS(displayElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexerProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexicalisation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(gss), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(bsr)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot))), cfgRule(cfgLHS(\\_\\_bool), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot))), cfgRule(cfgLHS(\\_\\_char), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(\\_\\_int32), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot))), cfgRule(cfgLHS(\\_\\_real64), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot))), cfgRule(cfgLHS(\\_\\_string), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(ID), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot))), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot))), cfgRule(cfgLHS(STRING\\_DQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot))), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot))), cfgRule(cfgLHS(CHAR\\_BQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot))), cfgRule(cfgLHS(TRRELATION), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot))))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot))), cfgRule(cfgLHS(rule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot))), cfgRule(cfgLHS(cfgRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot))), cfgRule(cfgLHS(cfgLHS), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAlts), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot))), cfgRule(cfgLHS(cfgAlt), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot))), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot))), cfgRule(cfgLHS(cfgEpsilon), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot))), cfgRule(cfgLHS(cfgAltNoAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot))), cfgRule(cfgLHS(cfgElems), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot))), cfgRule(cfgLHS(cfgExtended), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot))), cfgRule(cfgLHS(cfgAnnotation), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot))), cfgRule(cfgLHS(cfgFoldUnder), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot))), cfgRule(cfgLHS(cfgFoldOver), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot))), cfgRule(cfgLHS(cfgDoFirst), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgOptional), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot))), cfgRule(cfgLHS(cfgPositive), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(cfgKleene), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(cfgName), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgPrim), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot))), cfgRule(cfgLHS(cfgNonterminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot))), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgCharacterTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot))), cfgRule(cfgLHS(cfgRange), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgActions), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot))), cfgRule(cfgLHS(cfgActionSeq), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot))), cfgRule(cfgLHS(cfgAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot))), cfgRule(cfgLHS(cfgEquation), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgAssignment), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgInsert), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAttribute), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgExpression), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAttribute)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgExpressionList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot))), cfgRule(cfgLHS(cfgSeq), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(cfgSlot), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(trRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot))), cfgRule(cfgLHS(trLabel), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(tr), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot))), cfgRule(cfgLHS(trPremises), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot))), cfgRule(cfgLHS(trMatch), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTransition), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTuple), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(trTupleTail), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot))), cfgRule(cfgLHS(trTerm), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(trArgList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot))), cfgRule(cfgLHS(trInlineTransition), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot))), cfgRule(cfgLHS(chooseRule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot))), cfgRule(cfgLHS(chooseElementRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot))), cfgRule(cfgLHS(chooseSlotRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot))), cfgRule(cfgLHS(chooseElementExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot))), cfgRule(cfgLHS(chooseSlotExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot))), cfgRule(cfgLHS(chooseElement), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(chooseSlot), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(choosePredefinedElementSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot))), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot))), cfgRule(cfgLHS(chooserOp), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot))), cfgRule(cfgLHS(chooseHigher), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(chooseLower), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot))), cfgRule(cfgLHS(chooseLonger), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot))), cfgRule(cfgLHS(chooseShorter), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot))), cfgRule(cfgLHS(chooseSetOp), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot))), cfgRule(cfgLHS(chooseUnion), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(chooseDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot))), cfgRule(cfgLHS(chooseIntersection), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(chooseSymmetricDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot))), cfgRule(cfgLHS(directive), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot))), cfgRule(cfgLHS(directiveElement), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(latex)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot))), cfgRule(cfgLHS(file), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(lexerElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot))), cfgRule(cfgLHS(lexerElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot))), cfgRule(cfgLHS(paraterminalElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot))), cfgRule(cfgLHS(paraterminalElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot))), cfgRule(cfgLHS(parserElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot))), cfgRule(cfgLHS(parserElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot))), cfgRule(cfgLHS(interpreterElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot))), cfgRule(cfgLHS(interpreterElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot))), cfgRule(cfgLHS(displayElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot))), cfgRule(cfgLHS(displayElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexerProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexicalisation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(gss), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(bsr)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot))), cfgRule(cfgLHS(\\_\\_bool), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot))), cfgRule(cfgLHS(\\_\\_char), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(\\_\\_int32), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot))), cfgRule(cfgLHS(\\_\\_real64), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot))), cfgRule(cfgLHS(\\_\\_string), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(ID), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot))), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot))), cfgRule(cfgLHS(STRING\\_DQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot))), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot))), cfgRule(cfgLHS(CHAR\\_BQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot))), cfgRule(cfgLHS(TRRELATION), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot))))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot))), cfgRule(cfgLHS(rule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot))), cfgRule(cfgLHS(cfgRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot))), cfgRule(cfgLHS(cfgLHS), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAlts), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot))), cfgRule(cfgLHS(cfgAlt), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot))), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot))), cfgRule(cfgLHS(cfgEpsilon), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot))), cfgRule(cfgLHS(cfgAltNoAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgName), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot))), cfgRule(cfgLHS(cfgElems), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot))), cfgRule(cfgLHS(cfgExtended), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgName), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgName)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot))), cfgRule(cfgLHS(cfgAnnotation), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot))), cfgRule(cfgLHS(cfgFoldUnder), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot))), cfgRule(cfgLHS(cfgFoldOver), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot))), cfgRule(cfgLHS(cfgDoFirst), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgOptional), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot))), cfgRule(cfgLHS(cfgPositive), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(cfgKleene), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(cfgName), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgPrim), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot))), cfgRule(cfgLHS(cfgNonterminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot))), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgCharacterTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot))), cfgRule(cfgLHS(cfgRange), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgActions), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot))), cfgRule(cfgLHS(cfgActionSeq), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot))), cfgRule(cfgLHS(cfgAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot))), cfgRule(cfgLHS(cfgEquation), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgAssignment), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgInsert), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAttribute), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgExpression), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAttribute)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgExpressionList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot))), cfgRule(cfgLHS(cfgSeq), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(cfgSlot), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(trRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot))), cfgRule(cfgLHS(trLabel), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(tr), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot))), cfgRule(cfgLHS(trPremises), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot))), cfgRule(cfgLHS(trMatch), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTransition), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTuple), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(trTupleTail), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot))), cfgRule(cfgLHS(trTerm), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(trArgList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot))), cfgRule(cfgLHS(trInlineTransition), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot))), cfgRule(cfgLHS(chooseRule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot))), cfgRule(cfgLHS(chooseElementRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot))), cfgRule(cfgLHS(chooseSlotRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot))), cfgRule(cfgLHS(chooseElementExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot))), cfgRule(cfgLHS(chooseSlotExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot))), cfgRule(cfgLHS(chooseElement), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(chooseSlot), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(choosePredefinedElementSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot))), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot))), cfgRule(cfgLHS(chooserOp), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot))), cfgRule(cfgLHS(chooseHigher), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(chooseLower), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot))), cfgRule(cfgLHS(chooseLonger), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot))), cfgRule(cfgLHS(chooseShorter), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot))), cfgRule(cfgLHS(chooseSetOp), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot))), cfgRule(cfgLHS(chooseUnion), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(chooseDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot))), cfgRule(cfgLHS(chooseIntersection), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(chooseSymmetricDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot))), cfgRule(cfgLHS(directive), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot))), cfgRule(cfgLHS(directiveElement), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(latex)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot))), cfgRule(cfgLHS(file), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(lexerElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot))), cfgRule(cfgLHS(lexerElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot))), cfgRule(cfgLHS(paraterminalElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot))), cfgRule(cfgLHS(paraterminalElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot))), cfgRule(cfgLHS(parserElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot))), cfgRule(cfgLHS(parserElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot))), cfgRule(cfgLHS(interpreterElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot))), cfgRule(cfgLHS(interpreterElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot))), cfgRule(cfgLHS(displayElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot))), cfgRule(cfgLHS(displayElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexerProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexicalisation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(gss), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(bsr)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot))), cfgRule(cfgLHS(\\_\\_bool), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot))), cfgRule(cfgLHS(\\_\\_char), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(\\_\\_int32), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot))), cfgRule(cfgLHS(\\_\\_real64), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot))), cfgRule(cfgLHS(\\_\\_string), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(ID), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot))), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot))), cfgRule(cfgLHS(STRING\\_DQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot))), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot))), cfgRule(cfgLHS(CHAR\\_BQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot))), cfgRule(cfgLHS(TRRELATION), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot))))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot))), cfgRule(cfgLHS(rule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot))), cfgRule(cfgLHS(cfgRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot))), cfgRule(cfgLHS(cfgLHS), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAlts), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot))), cfgRule(cfgLHS(cfgAlt), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot))), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot))), cfgRule(cfgLHS(cfgEpsilon), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot))), cfgRule(cfgLHS(cfgAltNoAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgName), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot))), cfgRule(cfgLHS(cfgElems), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot))), cfgRule(cfgLHS(cfgExtended), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgName), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgName)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot))), cfgRule(cfgLHS(cfgAnnotation), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgTear)), cfgSlot))), cfgRule(cfgLHS(cfgFoldUnder), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot))), cfgRule(cfgLHS(cfgFoldOver), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot))), cfgRule(cfgLHS(cfgTear), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^^)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^^)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgDoFirst), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgOptional), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot))), cfgRule(cfgLHS(cfgPositive), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(cfgKleene), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(cfgName), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgPrim), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot))), cfgRule(cfgLHS(cfgNonterminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot))), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgCharacterTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot))), cfgRule(cfgLHS(cfgRange), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgActions), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot))), cfgRule(cfgLHS(cfgActionSeq), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot))), cfgRule(cfgLHS(cfgAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot))), cfgRule(cfgLHS(cfgEquation), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgAssignment), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgInsert), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAttribute), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgExpression), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAttribute)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgExpressionList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot))), cfgRule(cfgLHS(cfgSeq), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(cfgSlot), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(trRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot))), cfgRule(cfgLHS(trLabel), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(tr), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot))), cfgRule(cfgLHS(trPremises), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot))), cfgRule(cfgLHS(trMatch), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTransition), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTuple), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(trTupleTail), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot))), cfgRule(cfgLHS(trTerm), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(trArgList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot))), cfgRule(cfgLHS(trInlineTransition), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot))), cfgRule(cfgLHS(chooseRule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot))), cfgRule(cfgLHS(chooseElementRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot))), cfgRule(cfgLHS(chooseSlotRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot))), cfgRule(cfgLHS(chooseElementExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot))), cfgRule(cfgLHS(chooseSlotExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot))), cfgRule(cfgLHS(chooseElement), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(chooseSlot), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(choosePredefinedElementSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot))), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot))), cfgRule(cfgLHS(chooserOp), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot))), cfgRule(cfgLHS(chooseHigher), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(chooseLower), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot))), cfgRule(cfgLHS(chooseLonger), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot))), cfgRule(cfgLHS(chooseShorter), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot))), cfgRule(cfgLHS(chooseSetOp), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot))), cfgRule(cfgLHS(chooseUnion), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(chooseDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot))), cfgRule(cfgLHS(chooseIntersection), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(chooseSymmetricDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot))), cfgRule(cfgLHS(directive), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot))), cfgRule(cfgLHS(directiveElement), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(latex)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot))), cfgRule(cfgLHS(file), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(lexerElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot))), cfgRule(cfgLHS(lexerElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot))), cfgRule(cfgLHS(paraterminalElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot))), cfgRule(cfgLHS(paraterminalElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot))), cfgRule(cfgLHS(parserElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot))), cfgRule(cfgLHS(parserElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot))), cfgRule(cfgLHS(interpreterElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot))), cfgRule(cfgLHS(interpreterElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot))), cfgRule(cfgLHS(displayElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot))), cfgRule(cfgLHS(displayElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexerProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexicalisation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(gss), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(bsr)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot))), cfgRule(cfgLHS(\\_\\_bool), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot))), cfgRule(cfgLHS(\\_\\_char), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(\\_\\_int32), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot))), cfgRule(cfgLHS(\\_\\_real64), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot))), cfgRule(cfgLHS(\\_\\_string), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(ID), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot))), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot))), cfgRule(cfgLHS(STRING\\_DQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot))), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot))), cfgRule(cfgLHS(CHAR\\_BQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot))), cfgRule(cfgLHS(TRRELATION), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot))))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot))), cfgRule(cfgLHS(rule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot))), cfgRule(cfgLHS(cfgRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot))), cfgRule(cfgLHS(cfgLHS), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAlts), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot))), cfgRule(cfgLHS(cfgAlt), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot))), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot))), cfgRule(cfgLHS(cfgEpsilon), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot))), cfgRule(cfgLHS(cfgAltNoAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgName), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot))), cfgRule(cfgLHS(cfgElems), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot))), cfgRule(cfgLHS(cfgExtended), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgName), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgName)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot))), cfgRule(cfgLHS(cfgAnnotation), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgTear)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgTearNamed)), cfgSlot))), cfgRule(cfgLHS(cfgFoldUnder), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot))), cfgRule(cfgLHS(cfgFoldOver), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot))), cfgRule(cfgLHS(cfgTear), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^^)), cfgSlot))), cfgRule(cfgLHS(cfgTearNamed), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^^)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgDoFirst), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgOptional), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot))), cfgRule(cfgLHS(cfgPositive), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(cfgKleene), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(cfgName), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgPrim), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot))), cfgRule(cfgLHS(cfgNonterminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot))), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgCharacterTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot))), cfgRule(cfgLHS(cfgRange), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgActions), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot))), cfgRule(cfgLHS(cfgActionSeq), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot))), cfgRule(cfgLHS(cfgAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot))), cfgRule(cfgLHS(cfgEquation), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgAssignment), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgInsert), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAttribute), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgExpression), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAttribute)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgExpressionList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot))), cfgRule(cfgLHS(cfgSeq), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(cfgSlot), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(trRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot))), cfgRule(cfgLHS(trLabel), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(tr), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot))), cfgRule(cfgLHS(trPremises), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot))), cfgRule(cfgLHS(trMatch), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTransition), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTuple), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(trTupleTail), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot))), cfgRule(cfgLHS(trTerm), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(trArgList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot))), cfgRule(cfgLHS(trInlineTransition), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot))), cfgRule(cfgLHS(chooseRule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot))), cfgRule(cfgLHS(chooseElementRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot))), cfgRule(cfgLHS(chooseSlotRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot))), cfgRule(cfgLHS(chooseElementExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot))), cfgRule(cfgLHS(chooseSlotExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot))), cfgRule(cfgLHS(chooseElement), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(chooseSlot), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(choosePredefinedElementSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot))), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot))), cfgRule(cfgLHS(chooserOp), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot))), cfgRule(cfgLHS(chooseHigher), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(chooseLower), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot))), cfgRule(cfgLHS(chooseLonger), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot))), cfgRule(cfgLHS(chooseShorter), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot))), cfgRule(cfgLHS(chooseSetOp), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot))), cfgRule(cfgLHS(chooseUnion), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(chooseDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot))), cfgRule(cfgLHS(chooseIntersection), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(chooseSymmetricDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot))), cfgRule(cfgLHS(directive), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot))), cfgRule(cfgLHS(directiveElement), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(latex)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot))), cfgRule(cfgLHS(file), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(lexerElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot))), cfgRule(cfgLHS(lexerElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot))), cfgRule(cfgLHS(paraterminalElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot))), cfgRule(cfgLHS(paraterminalElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot))), cfgRule(cfgLHS(parserElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot))), cfgRule(cfgLHS(parserElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot))), cfgRule(cfgLHS(interpreterElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot))), cfgRule(cfgLHS(interpreterElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot))), cfgRule(cfgLHS(displayElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot))), cfgRule(cfgLHS(displayElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexerProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexicalisation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(gss), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(bsr)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot))), cfgRule(cfgLHS(\\_\\_bool), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot))), cfgRule(cfgLHS(\\_\\_char), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(\\_\\_int32), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot))), cfgRule(cfgLHS(\\_\\_real64), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot))), cfgRule(cfgLHS(\\_\\_string), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(ID), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot))), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot))), cfgRule(cfgLHS(STRING\\_DQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot))), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot))), cfgRule(cfgLHS(CHAR\\_BQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot))), cfgRule(cfgLHS(TRRELATION), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot))))";
//  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot))), cfgRule(cfgLHS(rule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot))), cfgRule(cfgLHS(cfgRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot))), cfgRule(cfgLHS(cfgLHS), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAlts), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot))), cfgRule(cfgLHS(cfgAlt), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot))), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot))), cfgRule(cfgLHS(cfgEpsilon), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot))), cfgRule(cfgLHS(cfgAltNoAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgName), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot))), cfgRule(cfgLHS(cfgElems), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot))), cfgRule(cfgLHS(cfgExtended), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgName), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgName)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot))), cfgRule(cfgLHS(cfgAnnotation), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgTear)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgTearNamed)), cfgSlot))), cfgRule(cfgLHS(cfgFoldUnder), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot))), cfgRule(cfgLHS(cfgFoldOver), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot))), cfgRule(cfgLHS(cfgTear), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^^)), cfgSlot))), cfgRule(cfgLHS(cfgTearNamed), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^^)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgDoFirst), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgOptional), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot))), cfgRule(cfgLHS(cfgPositive), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(cfgKleene), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(cfgName), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgPrim), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot))), cfgRule(cfgLHS(cfgNonterminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot))), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgCharacterTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot))), cfgRule(cfgLHS(cfgRange), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgActions), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot))), cfgRule(cfgLHS(cfgActionSeq), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot))), cfgRule(cfgLHS(cfgAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgInsert)), cfgSlot))), cfgRule(cfgLHS(cfgEquation), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgAssignment), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgInsert), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAttribute), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgExpression), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAttribute)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgExpressionList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot))), cfgRule(cfgLHS(cfgSeq), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(cfgSlot), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(trRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot))), cfgRule(cfgLHS(trLabel), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(tr), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot))), cfgRule(cfgLHS(trPremises), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot))), cfgRule(cfgLHS(trMatch), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTransition), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTuple), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(trTupleTail), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot))), cfgRule(cfgLHS(trTerm), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(trArgList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot))), cfgRule(cfgLHS(trInlineTransition), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot))), cfgRule(cfgLHS(chooseRule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot))), cfgRule(cfgLHS(chooseElementRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot))), cfgRule(cfgLHS(chooseSlotRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot))), cfgRule(cfgLHS(chooseElementExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot))), cfgRule(cfgLHS(chooseSlotExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot))), cfgRule(cfgLHS(chooseElement), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(chooseSlot), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(choosePredefinedElementSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot))), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot))), cfgRule(cfgLHS(chooserOp), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot))), cfgRule(cfgLHS(chooseHigher), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(chooseLower), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot))), cfgRule(cfgLHS(chooseLonger), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot))), cfgRule(cfgLHS(chooseShorter), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot))), cfgRule(cfgLHS(chooseSetOp), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot))), cfgRule(cfgLHS(chooseUnion), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(chooseDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot))), cfgRule(cfgLHS(chooseIntersection), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(chooseSymmetricDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot))), cfgRule(cfgLHS(directive), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot))), cfgRule(cfgLHS(directiveElement), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(latex)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot))), cfgRule(cfgLHS(file), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(lexerElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot))), cfgRule(cfgLHS(lexerElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot))), cfgRule(cfgLHS(paraterminalElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot))), cfgRule(cfgLHS(paraterminalElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot))), cfgRule(cfgLHS(parserElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot))), cfgRule(cfgLHS(parserElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot))), cfgRule(cfgLHS(interpreterElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot))), cfgRule(cfgLHS(interpreterElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot))), cfgRule(cfgLHS(displayElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot))), cfgRule(cfgLHS(displayElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexerProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexicalisation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(gss), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(bsr)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot))), cfgRule(cfgLHS(\\_\\_bool), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot))), cfgRule(cfgLHS(\\_\\_char), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(\\_\\_int32), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot))), cfgRule(cfgLHS(\\_\\_real64), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot))), cfgRule(cfgLHS(\\_\\_string), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(ID), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot))), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot))), cfgRule(cfgLHS(STRING\\_DQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot))), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot))), cfgRule(cfgLHS(CHAR\\_BQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot))), cfgRule(cfgLHS(TRRELATION), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot))))";
  private final String scriptParserTermString = "rules(directive(whitespace(cfgBuiltinTerminal(SIMPLE\\_WHITESPACE), cfgBuiltinTerminal(COMMENT\\_NEST\\_ART), cfgBuiltinTerminal(COMMENT\\_LINE\\_C))), cfgRule(cfgLHS(rules), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot, cfgFoldUnder(cfgNonterminal(rules)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(rule), cfgSlot))), cfgRule(cfgLHS(rule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(!)), cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot))), cfgRule(cfgLHS(cfgRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:\\:=)), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot))), cfgRule(cfgLHS(cfgLHS), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAlts), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot))), cfgRule(cfgLHS(cfgAlt), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot))), cfgRule(cfgLHS(cfgEpsilonCarrier), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot))), cfgRule(cfgLHS(cfgEpsilon), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot))), cfgRule(cfgLHS(cfgAltNoAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgName), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot))), cfgRule(cfgLHS(cfgElems), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot))), cfgRule(cfgLHS(cfgExtended), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgName), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgName)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot))), cfgRule(cfgLHS(cfgAnnotation), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgTear)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgTearNamed)), cfgSlot))), cfgRule(cfgLHS(cfgFoldUnder), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^)), cfgSlot))), cfgRule(cfgLHS(cfgFoldOver), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^)), cfgSlot))), cfgRule(cfgLHS(cfgTear), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^^)), cfgSlot))), cfgRule(cfgLHS(cfgTearNamed), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^^^)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgDoFirst), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgOptional), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(?)), cfgSlot))), cfgRule(cfgLHS(cfgPositive), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(cfgKleene), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(cfgAlts), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(cfgName), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgPrim), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseInsensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCharacterRangeTerminal)), cfgSlot))), cfgRule(cfgLHS(cfgNonterminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DOLLAR), cfgSlot))), cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(cfgCaseInsensitiveTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(cfgBuiltinTerminal), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(&)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgCharacterTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgCharacterRangeTerminal), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgRange), cfgSlot))), cfgRule(cfgLHS(cfgRange), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(..)), cfgSlot, cfgNonterminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(cfgActions), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot))), cfgRule(cfgLHS(cfgActionSeq), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot))), cfgRule(cfgLHS(cfgAction), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgInsert)), cfgSlot))), cfgRule(cfgLHS(cfgEquation), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgAssignment), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\:=)), cfgSlot, cfgNonterminal(cfgExpression), cfgSlot))), cfgRule(cfgLHS(cfgInsert), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(^+)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgAttribute), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(cfgExpression), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAttribute)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(cfgExpressionList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgExpression), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgExpressionList)), cfgSlot))), cfgRule(cfgLHS(cfgSeq), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(cfgSlot), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)))), cfgRule(cfgLHS(trRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot))), cfgRule(cfgLHS(trLabel), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot, cfgNonterminal(ID), cfgSlot))), cfgRule(cfgLHS(tr), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(---)), cfgSlot, cfgNonterminal(trTransition), cfgSlot))), cfgRule(cfgLHS(trPremises), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot))), cfgRule(cfgLHS(trMatch), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(|>)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTransition), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgNonterminal(trTuple), cfgSlot))), cfgRule(cfgLHS(trTuple), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(trTupleTail), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trTupleTail)), cfgSlot))), cfgRule(cfgLHS(trTerm), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_bool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(trArgList), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trInlineTransition), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(trArgList)), cfgSlot))), cfgRule(cfgLHS(trInlineTransition), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(trTransition)), cfgSlot))), cfgRule(cfgLHS(chooseRule), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElementRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlotRule)), cfgSlot))), cfgRule(cfgLHS(chooseElementRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot))), cfgRule(cfgLHS(chooseSlotRule), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooserOp)), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot))), cfgRule(cfgLHS(chooseElementExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot))), cfgRule(cfgLHS(chooseSlotExpr), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseSlot)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldOver(cfgNonterminal(chooseSetOp)), cfgSlot, cfgNonterminal(chooseSlot), cfgSlot))), cfgRule(cfgLHS(chooseElement), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgNonterminal(choosePredefinedElementSet)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseElementExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(chooseSlot), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgCaseSensitiveTerminal(\\:\\:=), cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgNonterminal(chooseSlotExpr), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot))), cfgRule(cfgLHS(choosePredefinedElementSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCharacterTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyCaseInsensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyParaterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyLiteralTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anyNonterminal), cfgSlot))), cfgRule(cfgLHS(choosePredefinedSlotSet), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(anySlot), cfgSlot))), cfgRule(cfgLHS(chooserOp), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot))), cfgRule(cfgLHS(chooseHigher), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>)), cfgSlot))), cfgRule(cfgLHS(chooseLower), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<)), cfgSlot))), cfgRule(cfgLHS(chooseLonger), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(>>)), cfgSlot))), cfgRule(cfgLHS(chooseShorter), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(<<)), cfgSlot))), cfgRule(cfgLHS(chooseSetOp), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(chooseUnion), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDifference), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseIntersection), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseSymmetricDifference), cfgSlot))), cfgRule(cfgLHS(chooseUnion), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(+)), cfgSlot))), cfgRule(cfgLHS(chooseDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(-)), cfgSlot))), cfgRule(cfgLHS(chooseIntersection), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\*)), cfgSlot))), cfgRule(cfgLHS(chooseSymmetricDifference), cfgAlts(cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(/)), cfgSlot))), cfgRule(cfgLHS(directive), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(directiveElement), cfgSlot))), cfgRule(cfgLHS(directiveElement), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(include), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(whitespace)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\()), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\))), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(paraterminal)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(start)), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(#)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(configuration)), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(trace)), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(print)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(latex)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(show)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(log)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(file), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(trTuple), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(try)), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(=)), cfgSlot, cfgNonterminal(trTuple), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(termTool)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(nop)), cfgSlot))), cfgRule(cfgLHS(file), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot))), cfgRule(cfgLHS(lexerElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(lexerElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgNonterminal(lexerElements), cfgSlot))), cfgRule(cfgLHS(lexerElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(LongestMatch)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(whiteSpaceElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(whiteSpaceElements)), cfgSlot))), cfgRule(cfgLHS(whiteSpaceElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot))), cfgRule(cfgLHS(paraterminalElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(paraterminalElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalElements)), cfgSlot))), cfgRule(cfgLHS(paraterminalElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot))), cfgRule(cfgLHS(parserElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(parserElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(parserElements)), cfgSlot))), cfgRule(cfgLHS(parserElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot))), cfgRule(cfgLHS(interpreterElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(interpreterElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(interpreterElements)), cfgSlot))), cfgRule(cfgLHS(interpreterElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(eSOS)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(attribute)), cfgSlot))), cfgRule(cfgLHS(displayElements), cfgAlts(cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(displayElement), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(\\,)), cfgSlot, cfgFoldUnder(cfgNonterminal(displayElements)), cfgSlot))), cfgRule(cfgLHS(displayElement), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(script)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptExpansion)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(scriptDerivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexer)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexerProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(input)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(twe)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(lexicalisation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammar)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(grammarProperties)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(parser)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(gss), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(sppf)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(bsr)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(derivation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpreter)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(interpretation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(outcome)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgCaseSensitiveTerminal(statistics)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot))), cfgRule(cfgLHS(\\_\\_bool), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(true), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(false), cfgSlot))), cfgRule(cfgLHS(\\_\\_char), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot))), cfgRule(cfgLHS(\\_\\_int32), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot))), cfgRule(cfgLHS(\\_\\_real64), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot))), cfgRule(cfgLHS(\\_\\_string), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot))), cfgRule(cfgLHS(ID), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot))), cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgAlts(cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal(.)), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot))), cfgRule(cfgLHS(STRING\\_DQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_DOLLAR), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot))), cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot))), cfgRule(cfgLHS(CHAR\\_BQ), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot))), cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgAlts(cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot))), cfgRule(cfgLHS(TRRELATION), cfgAlts(cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(->\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(=>\\*), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal(~>\\*), cfgSlot))))";
//@formatter:on

  public final ITerms iTerms;

  private final GLLBaseLine scriptParser = new GLLBaseLine();
  private final LexerSingletonLongestMatch scriptLexer = new LexerSingletonLongestMatch();
  private final int scriptParserTerm;

  private int scriptDerivationTerm;
  private final TermTraverser scriptTraverser;
  public TermTraverserText plainTextTraverser;
  public final TermTraverserText latexTraverser;

  private ParserBase currentParser = new GLLBaseLine(); // default current parser is GLL base line - change to MGLL when available
  private final LexerSingletonLongestMatch currentLexer = new LexerSingletonLongestMatch(); // default current lexer is longest match - change to TWE set lexer
                                                                                            // when available
  public Grammar currentGrammar; // scriptTraverser builds grammar rules into this grammar
  private int currentDerivationTerm = 0;
  private int currentRewriteTerm = 0;
  private int currentConfiguration = 0;

  private final Chooser currentChooser;
  public final Set<Integer> chooseRules = new LinkedHashSet<>();

  private final Rewriter currentRewriter;
  public final Map<Integer, Map<Integer, List<Integer>>> trRules = new LinkedHashMap<>();
  public int defaultStartRelation = 0;

  public ScriptTermInterpreter(ITerms iTerms) {
    this.iTerms = iTerms;

    plainTextTraverser = loadPlainTextTraverser();
    // 2a. Debug - load text traverser default action to print message if we encounter an unknown constructor
    // plainTextTraverser.addAction(-1, (Integer t) -> plainTextTraverser.append("??" + iTerms.toString(t) + "?? "), null, null);
    plainTextTraverser.addAction(-1, (Integer t) -> { // Load default actions

      // Preorder
      plainTextTraverser.appendAlias(iTerms.getTermSymbolIndex(t));
      if (iTerms.getTermArity(t) > 0) plainTextTraverser.append("(");
    },

        // Inorder
        (Integer t) -> {
          plainTextTraverser.append(", ");
        },

        // Postorder
        (Integer t) -> {
          if (iTerms.getTermArity(t) > 0) plainTextTraverser.append(")");
        });

    // 2b. Debug - print keys from text traverser tables
    // System.out.println("text traverser: " + pp.tt);

    latexTraverser = loadLaTeXTraverser();

    scriptTraverser = new TermTraverser(iTerms);
    initialiseScriptTraverser();
    scriptParserTerm = iTerms.findTerm(scriptParserTermString);

    // Bootstrap in action: build the script parser's grammar by traversing the scriptParserTerm and normalising, then making the result the script parser
    currentGrammar = new Grammar("Script grammar", iTerms);
    scriptTraverser.traverse(scriptParserTerm); // Construct the script parser grammar by walking the script parser term from the last bootstrap
    currentGrammar.normalise();
    currentChooser = new Chooser(iTerms);
    currentChooser.normalise(currentGrammar, chooseRules);
    scriptParser.grammar = currentGrammar;

    // Initialise rewriter
    currentRewriter = new Rewriter(iTerms, plainTextTraverser);
  }

  private void initialiseScriptTraverser() { // Initialise scriptTraverser

    scriptTraverser.addActionBreak("directive", (Integer t) -> directiveAction(t), null, null);

    scriptTraverser.addActionBreak("cfgLHS", (Integer t) -> currentGrammar.lhsAction(childSymbolString(t)), null, null);
    scriptTraverser.addAction("cfgSeq", (Integer t) -> currentGrammar.altAction(), null, (Integer t) -> currentGrammar.endAction(""));

    scriptTraverser.addAction("cfgEpsilon", (Integer t) -> currentGrammar.updateWorkingNode(GrammarKind.EPS, "#"), null, null);
    scriptTraverser.addActionBreak("cfgNonterminal", (Integer t) -> currentGrammar.updateWorkingNode(GrammarKind.N, childSymbolString(t)), null, null);
    scriptTraverser.addActionBreak("cfgCaseSensitiveTerminal", (Integer t) -> currentGrammar.updateWorkingNode(GrammarKind.T, childSymbolString(t)), null,
        null);
    scriptTraverser.addActionBreak("cfgBuiltinTerminal", (Integer t) -> currentGrammar.updateWorkingNode(GrammarKind.B, childSymbolString(t)), null, null);

    scriptTraverser.addActionBreak("cfgCharacterTerminal", (Integer t) -> currentGrammar.updateWorkingNode(GrammarKind.C, childSymbolString(t)), null, null);
    scriptTraverser.addActionBreak("cfgCharacterRangeTerminal", (Integer t) -> currentGrammar.updateWorkingNode(GrammarKind.C, childSymbolString(t)), null,
        null); // Not implemeneted yet

    scriptTraverser.addAction("cfgDoFirst", (Integer t) -> currentGrammar.updateWorkingNode(GrammarKind.DO, null), null, null);
    scriptTraverser.addAction("cfgOptional", (Integer t) -> currentGrammar.updateWorkingNode(GrammarKind.OPT, null), null, null);
    scriptTraverser.addAction("cfgKleene", (Integer t) -> currentGrammar.updateWorkingNode(GrammarKind.KLN, null), null, null);
    scriptTraverser.addAction("cfgPositive", (Integer t) -> currentGrammar.updateWorkingNode(GrammarKind.POS, null), null, null);

    scriptTraverser.addAction("cfgFoldNone", (Integer t) -> currentGrammar.workingFold = GIFTKind.NONE, null, null);
    scriptTraverser.addAction("cfgFoldUnder", (Integer t) -> currentGrammar.workingFold = GIFTKind.UNDER, null, null);
    scriptTraverser.addAction("cfgFoldOver", (Integer t) -> currentGrammar.workingFold = GIFTKind.OVER, null, null);
    scriptTraverser.addAction("cfgFoldTear", (Integer t) -> currentGrammar.workingFold = GIFTKind.TEAR, null, null);

    // scriptTraverser.addAction("cfgSlot", (Integer t) -> currentGrammar.workingAction = t, null, null);
    scriptTraverser.addAction("chooseRule", (Integer t) -> buildChooseRule(t), null, null);

    scriptTraverser.addAction("trRule", (Integer t) -> buildTRRule(t), null, null);
  }

  private void buildChooseRule(int term) {
    // System.out.println("Building choose rule " + iTerms.toString(term));
    chooseRules.add(term);
  }

  private void buildTRRule(int term) {
    // System.out.println("Processing trRule: " + iTerms.toString(term));
    int relation = iTerms.getSubterm(term, 1, 1, 1);
    int constructorIndex = iTerms.getTermSymbolIndex((iTerms.getSubterm(term, 1, 1, 0)));
    // System.out.println("Building TR rule " + iTerms.toString(term) + "\nwith relation " + iTerms.toString(relation) + "\nand constructor "
    // + iTerms.getString(constructorIndex));
    if (trRules.get(relation) == null) trRules.put(relation, new HashMap<>());
    Map<Integer, List<Integer>> map = trRules.get(relation);
    if (map.get(constructorIndex) == null) map.put(constructorIndex, new LinkedList<>());
    map.get(constructorIndex).add(term);
    if (defaultStartRelation == 0) defaultStartRelation = relation;
  }

  private void directiveAction(int term) {
    // System.out.println("Processing " + iTerms.toString(term));
    switch (iTerms.getTermSymbolString(iTerms.getSubterm(term, 0))) {
    case "termTool":
      new TermTool(iTerms);
      break;
    case "trace":
      Util.traceLevel = (int) iTerms.valueFromTerm(iTerms.getSubterm(term, 0, 0)).javaValue();
      System.out.println("Trace level set to " + Util.traceLevel);
      break;
    case "configuration":
      currentConfiguration = iTerms.getSubterm(term, 0);
      break;
    case "whitespace":
      currentGrammar.whitespaces.clear();
      for (int i = 0; i < iTerms.getTermArity(iTerms.getSubterm(term, 0)); i++)
        if (iTerms.getTermSymbolString(iTerms.getSubterm(term, 0, i)).equals("cfgBuiltinTerminal"))
          switch (iTerms.getTermSymbolString(iTerms.getSubterm(term, 0, i, 0))) {
          case "SIMPLE_WHITESPACE":
          currentGrammar.whitespaces.add(LKind.SIMPLE_WHITESPACE);
          break;
          case "COMMENT_NEST_ART":
          currentGrammar.whitespaces.add(LKind.COMMENT_NEST_ART);
          break;
          case "COMMENT_LINE_C":
          currentGrammar.whitespaces.add(LKind.COMMENT_LINE_C);
          break;
          case "COMMENT_BLOCK_C":
          currentGrammar.whitespaces.add(LKind.COMMENT_BLOCK_C);
          break;
          default:
          Util.fatal("Unexpected !whitespace element " + iTerms.toString(iTerms.getSubterm(term, 0, i, 0)));
          }
      break;

    case "clearRules":
      currentGrammar = new Grammar("currentGrammar", iTerms);
      break;
    // case "adl":
    // if (currentDerivationTerm == 0) break;
    // ADL adl = new ADL(iTerms);
    // __mapChain env = new __mapChain();
    // Value result = iTerms.valueBottom;
    // try {
    // result = adl.interpret(currentDerivationTerm, env);
    // } catch (ValueException e) {
    // System.out.println("Value exception: " + e.getMessage());
    // }
    //
    // System.out.println("ADL interpreter returns " + result + " with environment " + env);
    // break;
    case "lexer":
      break;
    case "parser":
      for (int i = 0; i < iTerms.getTermArity(iTerms.getSubterm(term, 0)); i++)
        switch (iTerms.getTermSymbolString(iTerms.getSubterm(term, 0, i)).toLowerCase()) {
        case "algx":
          currentParser = new AlgX(iTerms);
          break;
        case "cyk":
          currentParser = new CYK(iTerms);
          break;
        case "gllhashpool":
          currentParser = new GLLHashPool();
          break;
        case "gllbaseline":
          currentParser = new GLLBaseLine();
          break;
        case "rdsobgenerator":
          new RDSOBGenerator(currentGrammar, "OSBRDG");
          return;
        case "rdsobfunction":
          currentParser = new RDSOBFunction();
          break;
        case "rdsobexplicitstack":
          currentParser = new RDSOBExplicitStack();
          break;
        default:
          Util.fatal("Unexpected !parser argument " + iTerms.toString(iTerms.getSubterm(term, 0, i)));
        }
      break;

    case "show":
      for (int i = 0; i < iTerms.getTermArity(iTerms.getSubterm(term, 0)); i++)
        switch (iTerms.getTermSymbolString(iTerms.getSubterm(term, 0, i))) {
        case "grammar":
          currentGrammar.normalise();
          currentGrammar.show("grammar.dot");
          break;
        }
      GrammarNode.caseSensitiveTerminalStrop = ""; // Switch off stropping to reduce clutter in display
      currentParser.show();
      GrammarNode.caseSensitiveTerminalStrop = "\'"; // Restore stropping for text output
      break;
    case "print", "log", "latex":
      for (int i = 0; i < iTerms.getTermArity(iTerms.getSubterm(term, 0)); i++)
        renderDisplayElement(term, i);
      break;
    case "try":
      // System.out.println("try at " + iTerms.toString(term));
      switch (iTerms.getTermSymbolString(iTerms.getSubterm(term, 0, 0))) {
      case "__string":
        tryParse("", iTerms.getTermSymbolString(iTerms.getSubterm(term, 0, 0, 0)), true, true);
        break;
      case "file":
        try {
          String filename = iTerms.getTermSymbolString(iTerms.getSubterm(term, 0, 0, 0));
          // System.out.println("Attempting to open file " + filename);
          tryParse(filename, Files.readString(Paths.get(filename)), true, true);
        } catch (IOException e) {
          Util.fatal("Unable to open try file; skipping " + iTerms.toString(term));
        }
        break;
      default:
        currentDerivationTerm = iTerms.getSubterm(term, 0, 0); // Go straight to the rewrite stage
      }
      currentRewriteTerm = currentRewriter.rewrite(currentDerivationTerm, trRules, defaultStartRelation);
      if (iTerms.getTermArity(iTerms.getSubterm(term, 0, 0)) == 2) if (currentRewriteTerm == iTerms.getSubterm(term, 0, 0, 1))
        System.out.println("Good");
      else
        System.out.println("Bad");
      break;
    case "nop": // No operation
      break;
    default:
      Util.fatal("Unknown directive !" + iTerms.toString(iTerms.getSubterm(term, 0)));
    }
  }

  private void renderDisplayElement(int term, int i) {
    String directive = iTerms.getTermSymbolString(iTerms.getSubterm(term, 0));
    String displayElement = iTerms.toString(iTerms.getSubterm(term, 0, i));
    TermTraverserText rtt = directive.equals("latex") ? latexTraverser : plainTextTraverser;

    switch (displayElement) {
    case "script":
      System.out.println(rtt.toString(scriptDerivationTerm, null));
      break;

    case "scriptExpansion":
      // currentRewriter.normalise();
      currentGrammar.normalise();
      System.out.println(currentGrammar);
      break;

    case "scriptDerivation":
      // Switch comments if you wanted one line or indented derivations
      // System.out.println("script derivation term: [" + scriptDerivationTerm + "]\n" + iTerms.toString(scriptDerivationTerm, false, -1, null));
      System.out.println("Script derivation term: [" + scriptDerivationTerm + "]\n" + iTerms.toString(scriptDerivationTerm, true, -1, null));
      break;

    case "grammar":
      currentGrammar.normalise();
      System.out.println(currentGrammar);
      break;

    case "outcome":
      System.out.println(currentParser.inLanguage ? "Accept" : "Reject");

      break;
    case "derivation":
      // Switch comments if you wanted one line or indented derivations
      System.out.println("Current derivation term: [" + currentDerivationTerm + "]\n" + iTerms.toString(currentDerivationTerm, false, -1, null));
      // System.out.println("current derivation term: [" + currentDerivationTerm + "]\n" + iTerms.toString(currentDerivationTerm, true, -1, null));
      if (scriptParserTerm == currentDerivationTerm) System.out.println("Bootstrap achieved: script parser term and current derivation term identical");
      break;

    case "interpretation":
      // Switch comments if you wanted one line or indented derivations
      System.out.println("Current rewrite term: [" + currentRewriteTerm + "]\n" + iTerms.toString(currentRewriteTerm, false, -1, null));
      // System.out.println("current derivation term: [" + currentRewriteTerm + "]\n" + iTerms.toString(currentRewriteTerm, true, -1, null));
      break;

    case "statistics":
      System.out.println(currentParser.statisticsToString());
      break;

    case "__string":
      System.out.println(iTerms.getTermSymbolString(iTerms.getSubterm(term, 0, 0, 0)));
      break;
    default:
      Util.fatal("No implementation for !" + directive + " " + displayElement);
    }
  }

  private String childSymbolString(int t) {
    return iTerms.getTermSymbolString(iTerms.getSubterm(t, 0));
  }

  private void tryParse(String inputStringName, String inputString, boolean outcome, boolean suppressOutput) {
    // System.out.println("Try parse on input \"" + inputString + "\"");
    currentParser.resetStatistics();
    currentParser.loadStartMemory();
    currentGrammar.normalise();
    if (currentGrammar.isEmpty()) {
      System.out.println("Try failed: grammar has no rules");
      return;
    }
    var currentChooser = new Chooser(iTerms);
    currentChooser.normalise(currentGrammar, chooseRules);
    currentParser.traceLevel = Util.traceLevel;
    currentParser.inputStringName = inputStringName;
    currentParser.inputString = inputString;
    currentParser.grammar = currentGrammar;
    currentDerivationTerm = 0;
    currentParser.inLanguage = false;
    currentParser.loadSetupTime();
    currentLexer.lex(inputString, currentGrammar.lexicalKindsArray(), currentGrammar.lexicalStringsArray(), currentGrammar.whitespacesArray());
    // currentLexer.report();
    currentParser.input = currentLexer.tokens;
    currentParser.positions = currentLexer.positions;
    currentParser.loadLexTime();
    if (currentParser.input != null) currentParser.parse();
    currentParser.loadParseTime();
    if (currentParser.inLanguage) {
      currentParser.chooseLongestMatch();
      currentParser.loadParseChooseTime();
      currentDerivationTerm = currentParser.derivationAsTerm();
      currentParser.loadTermGenerateTime();
    } else
      System.out.println("Try failed: syntax error");
    currentParser.loadEndMemory();
  }

  // This version interprets the string with no tricks
  public void interpret(String scriptString) {
    currentGrammar = new Grammar("currentGrammar", iTerms);
    // Lex the script string
    scriptParser.inputString = scriptString;
    scriptParser.inLanguage = false;
    scriptLexer.lex(scriptParser.inputString, scriptParser.grammar.lexicalKindsArray(), scriptParser.grammar.lexicalStringsArray(),
        scriptParser.grammar.whitespacesArray());
    // scriptLexer.report();
    if (scriptLexer.tokens == null) Util.fatal("Lexical error in script");
    scriptParser.input = scriptLexer.tokens;
    scriptParser.positions = scriptLexer.positions;
    scriptParser.parse();
    if (!scriptParser.inLanguage) Util.fatal("Syntax error in script");
    scriptDerivationTerm = scriptParser.derivationAsTerm();
    // System.out.println("Script term:\n" + iTerms.toString(scriptDerivationTerm, true, -1, null));
    scriptTraverser.traverse(scriptDerivationTerm);
  }

  public Grammar getGrammar() {
    return currentGrammar;
  }

  private TermTraverserText loadPlainTextTraverser() {
    TermTraverserText ret = new TermTraverserText(iTerms);
    // -1: uncomment these to suppress types have interpreted type renditions
    // ret.addEmptyAction("__bool", "__char", "__int32", "__real64", "__string");
    ret.addAction("__map", "{", ", ", "}");

    // 0. Directive and top level pretty print controls
    ret.addEmptyAction("rules");
    ret.addActionBreak("directive", (Integer t) -> {
      ret.append("!" + iTerms.getTermSymbolString(iTerms.getSubterm(t, 0)));
      for (int i = 0; i < iTerms.getTermArity(iTerms.getSubterm(t, 0)); i++)
        ret.append(" " + iTerms.getTermSymbolString(iTerms.getSubterm(t, 0, i)));
    }, null, (Integer t) -> ret.append("\n\n"));
    ret.addAction("latexDeclaration", null, " = ", null);

    // 1. Context Free Grammar pretty print controls
    ret.addEmptyAction("cfgSlot");

    ret.addActionBreak("cfgLHS", (Integer t) -> {
      ret.appendAlias(iTerms.getTermSymbolIndex(iTerms.getSubterm(t, 0)));
      ret.append(" ::=");
    }, null, null);

    ret.addAction("cfgRule", null, null, "\n\n");
    ret.addAction("cfgAlts", null, "|", null);
    ret.addAction("cfgSeq", null, " ", null);
    ret.addAction("cfgName", null, ":", null);
    ret.addActionBreak("cfgNonterminal", (Integer t) -> ret.appendAlias(iTerms.getTermSymbolIndex(iTerms.getSubterm(t, 0))), null, null);
    ret.addActionBreak("cfgCaseInsensitiveTerminal", (Integer t) -> ret.appendAlias("\"", iTerms.getTermSymbolIndex(iTerms.getSubterm(t, 0)), "\""), null,
        null);
    ret.addActionBreak("cfgCaseSensitiveTerminal", (Integer t) -> ret.appendAlias("'", iTerms.getTermSymbolIndex(iTerms.getSubterm(t, 0)), "'"), null, null);
    ret.addActionBreak("cfgCharacterTerminal", (Integer t) -> ret.appendAlias("`", iTerms.getTermSymbolIndex(iTerms.getSubterm(t, 0)), ""), null, null);
    ret.addActionBreak("cfgCharacterRangeTerminal", (Integer t) -> ret
        .append("`" + iTerms.getTermSymbolString(iTerms.getSubterm(t, 0, 0)) + "..`" + iTerms.getTermSymbolString(iTerms.getSubterm(t, 0, 1))), null, null);
    ret.addActionBreak("cfgBuiltinTerminal", (Integer t) -> ret.appendAlias("&", iTerms.getTermSymbolIndex(iTerms.getSubterm(t, 0)), ""), null, null);
    ret.addAction("cfgOptional", "(", null, ")?");
    ret.addAction("cfgKleene", "(", null, ")*");
    ret.addAction("cfgPositive", "(", null, ")+");
    ret.addAction("cfgDoFirst", "(", null, ")");
    ret.addAction("cfgEpsilon", "#", null, null);

    ret.addAction("cfgFoldUnder", null, null, "^");
    ret.addAction("cfgFoldOver", null, null, "^^");
    ret.addAction("cfgTear", null, null, "^^^");
    ret.addAction("cfgTearNamed", null, "^^^:", null);
    ret.addAction("cfgInsert", " ^+", null, null);

    ret.addAction("cfgAttribute", null, ".", null);
    ret.addAction("cfgEquation", null, " = ", null);
    ret.addAction("cfgAssignment", null, " := ", null);

    // 2. Chooser pretty print controls
    ret.addEmptyAction("chooseElement");
    ret.addAction("chooseRule", null, null, "\n");
    ret.addAction("chooseHigher", " > ", null, null);
    ret.addAction("chooseLower", " < ", null, null);
    ret.addAction("chooseLonger", " >> ", null, null);
    ret.addAction("chooseShorter", " << ", null, null);
    ret.addAction("chooseDiff", "(", " \\ ", ")");
    ret.addAction("chooseUnion", "(", " | ", ")");
    ret.addAction("chooseIntersection", "(", " / ", ")");
    ret.addActionBreak("choosePredefinedSet", (Integer t) -> ret.append(ret.childSymbolString(t, 0)), null, null);

    // 3. Term rewrite pretty print controls
    ret.addAction("trRule", null, null, "\n\n");
    ret.addAction("tr", null, " --- ", null);
    ret.addAction("trPremises", null, "    ", null);
    ret.addActionBreak("trLabel", (Integer t) -> ret.append(iTerms.getTermArity(t) > 0 ? ("-" + ret.childSymbolString(t, 0) + " ") : " "), null, null);
    ret.addAction("trMatch", null, (Integer t) -> ret.append(" |> "), null);
    ret.addEmptyAction("trTransition");
    ret.addActionBreak("TRRELATION", (Integer t) -> ret.append(" " + ret.childSymbolString(t, 0) + " "), null, null);
    ret.addActionBreak("trTerm", (Integer t) -> ret.append(iTerms.toString(iTerms.getSubterm(t, 0))), null, null);
    ret.addAction("trTuple", "<", ", ", ">");

    return ret;
  }

  private TermTraverserText loadLaTeXTraverser() {
    TermTraverserText ret = new TermTraverserText(iTerms);
    // -1: uncomment these to suppress types have interpreted type renditions
    // ret.addEmptyAction("__bool", "__char", "__int32", "__real64", "__string");
    ret.addAction("__map", "{", ", ", "}");

    // 0. Directive and top level pretty print controls
    ret.addEmptyAction("rules");
    ret.addActionBreak("directive", (Integer t) -> {
      ret.append("!" + iTerms.getTermSymbolString(iTerms.getSubterm(t, 0)));
      for (int i = 0; i < iTerms.getTermArity(iTerms.getSubterm(t, 0)); i++)
        ret.append(" " + iTerms.getTermSymbolString(iTerms.getSubterm(t, 0, i)));
    }, null, (Integer t) -> ret.append("\n\n"));
    ret.addAction("latexDeclaration", null, " = ", null);

    // 1. Context Free Grammar pretty print controls
    ret.addEmptyAction("cfgSlot");

    ret.addActionBreak("cfgLHS", (Integer t) -> {
      ret.appendAlias(iTerms.getTermSymbolIndex(iTerms.getSubterm(t, 0)));
      ret.append(" ::=");
    }, null, null);

    ret.addAction("cfgRule", null, null, "\n\n");
    ret.addAction("cfgAlts", null, "|", null);
    ret.addAction("cfgSeq", null, " ", null);
    ret.addAction("cfgName", null, ":", null);
    ret.addActionBreak("cfgNonterminal", (Integer t) -> ret.appendAlias(iTerms.getTermSymbolIndex(iTerms.getSubterm(t, 0))), null, null);
    ret.addActionBreak("cfgCaseInsensitiveTerminal", (Integer t) -> ret.appendAlias("\"", iTerms.getTermSymbolIndex(iTerms.getSubterm(t, 0)), "\""), null,
        null);
    ret.addActionBreak("cfgCaseSensitiveTerminal", (Integer t) -> ret.appendAlias("'", iTerms.getTermSymbolIndex(iTerms.getSubterm(t, 0)), "'"), null, null);
    ret.addActionBreak("cfgCharacterTerminal", (Integer t) -> ret.appendAlias("`", iTerms.getTermSymbolIndex(iTerms.getSubterm(t, 0)), ""), null, null);
    ret.addActionBreak("cfgCharacterRangeTerminal", (Integer t) -> ret
        .append("`" + iTerms.getTermSymbolString(iTerms.getSubterm(t, 0, 0)) + "..`" + iTerms.getTermSymbolString(iTerms.getSubterm(t, 0, 1))), null, null);
    ret.addActionBreak("cfgBuiltinTerminal", (Integer t) -> ret.appendAlias("&", iTerms.getTermSymbolIndex(iTerms.getSubterm(t, 0)), ""), null, null);
    ret.addAction("cfgOptional", "(", null, ")?");
    ret.addAction("cfgKleene", "(", null, ")*");
    ret.addAction("cfgPositive", "(", null, ")+");
    ret.addAction("cfgDoFirst", "(", null, ")");
    ret.addAction("cfgEpsilon", "#", null, null);

    ret.addAction("cfgFoldUnder", null, null, "^");
    ret.addAction("cfgFoldOver", null, null, "^^");
    ret.addAction("cfgTear", null, null, "^^^");
    ret.addAction("cfgTearNamed", null, "^^^:", null);
    ret.addAction("cfgInsert", " ^+", null, null);

    ret.addAction("cfgAttribute", null, ".", null);
    ret.addAction("cfgEquation", null, " = ", null);
    ret.addAction("cfgAssignment", null, " := ", null);

    // 2. Chooser pretty print controls
    ret.addEmptyAction("chooseElement");
    ret.addAction("chooseRule", null, null, "\n");
    ret.addAction("chooseHigher", " > ", null, null);
    ret.addAction("chooseLower", " < ", null, null);
    ret.addAction("chooseLonger", " >> ", null, null);
    ret.addAction("chooseShorter", " << ", null, null);
    ret.addAction("chooseDiff", "(", " \\ ", ")");
    ret.addAction("chooseUnion", "(", " | ", ")");
    ret.addAction("chooseIntersection", "(", " / ", ")");
    ret.addActionBreak("choosePredefinedSet", (Integer t) -> ret.append(ret.childSymbolString(t, 0)), null, null);

    // 3. Term rewrite pretty print controls
    ret.addAction("trRule", null, null, "\n\n");
    ret.addAction("tr", null, " --- ", null);
    ret.addAction("trPremises", null, "    ", null);
    ret.addActionBreak("trLabel", (Integer t) -> ret.append(iTerms.getTermArity(t) > 0 ? ("-" + ret.childSymbolString(t, 0) + " ") : " "), null, null);
    ret.addAction("trMatch", null, (Integer t) -> ret.append(" |> "), null);
    ret.addEmptyAction("trTransition");
    ret.addActionBreak("TRRELATION", (Integer t) -> ret.append(" " + ret.childSymbolString(t, 0) + " "), null, null);
    ret.addActionBreak("trTerm", (Integer t) -> ret.append(iTerms.toString(iTerms.getSubterm(t, 0))), null, null);
    ret.addAction("trTuple", "<", ", ", ">");

    return ret;
  }

}
