(* ART script grammar rules - suitable for RDSOB parsers: No left recursive rules; Alterates in decreasing length order;   directive at end of each rule *)
!parser gll
//!parser rdsobFunction // Uncomment this line to try bootstrapping with Recursive Descent Singleton Ordered Backtracking parser instead of default GLL parser
!whitespace &SIMPLE_WHITESPACE, &COMMENT_NEST_ART, &COMMENT_LINE_C 
rules ::= rule rules^ | rule
rule  ::= cfgRule^^ | trRule^^ | chooseRule^^ | directive^^   

(* Context Free Grammar rules ************************************************)
cfgRule  ::= cfgLHS '::='^ cfgAlts
  cfgLHS ::= ID | ID '<'^ cfgAttributeDeclarations '>'^
  cfgAttributeDeclarations ::=  cfgAttributeDeclaration | cfgAttributeDeclaration cfgAttributeDeclarations^  
  cfgAttributeDeclaration  ::= ID ':'^ ID 

cfgAlts ::= cfgAlt '|'^ cfgAlts^ | cfgAlt  
cfgAlt  ::= cfgSeq^^ cfgActions cfgEpsilonCarrier | cfgSeq^^ cfgActions cfgEpsilon | cfgSeq^^ cfgElems^ cfgActions (* final actions in sequence *)  
  cfgEpsilonCarrier ::= cfgEpsilon cfgAnnotation^^ 
cfgEpsilon ::= '#'^

cfgAltNoAction ::= cfgSeq^^ cfgSlot cfgName cfgSlot   // This matches a single element with no actions allowed for use in abbreviated Kleene operations
cfgElems ::= cfgActions cfgExtended cfgElems^ | cfgActions cfgExtended  

cfgExtended ::= cfgName cfgAnnotation^^ | cfgName^^ | cfgOptional^^ | cfgKleene^^ | cfgPositive^^ | cfgDoFirst^^  
cfgAnnotation ::= cfgFoldUnder^^ | cfgFoldOver^^  | cfgFoldTear^^ | cfgFoldTearNamed^^ | cfgDelay^^
  cfgFoldUnder ::= '^'^  
  cfgFoldOver ::= '^^'^  
  cfgFoldTear ::= '^^^'^
  cfgFoldTearNamed ::= '^^^'^ ':'^ ID 
  cfgDelay ::= '!<'
cfgDoFirst  ::= '('^ cfgAlts ')'^  
cfgOptional ::= '('^ cfgAlts ')'^ '?'^ | cfgAltNoAction '?'^  
cfgPositive ::= '('^ cfgAlts ')'^ '+'^ | cfgAltNoAction '+'^  
cfgKleene   ::= '('^ cfgAlts ')'^ '*'^ | cfgAltNoAction '*'^  

cfgName ::= cfgPrim^^ | cfgPrim ':'^ ID           // second child if present is a local name
cfgPrim ::= cfgNonterminal^^ | cfgCaseSensitiveTerminal^^| cfgCaseInsensitiveTerminal^^ | cfgBuiltinTerminal^^ | cfgBuiltinNoWSTerminal^^ | cfgCharacterTerminal^^ | cfgCharacterSetTerminal^^| cfgCharacterAntiSetTerminal^^ | cfgStartString^^
  cfgNonterminal ::= ID | STRING_DOLLAR
  cfgCaseSensitiveTerminal ::= STRING_SQ
  cfgCaseInsensitiveTerminal ::= STRING_DQ
  cfgBuiltinTerminal ::= '&'^ ID
  cfgBuiltinNoWSTerminal ::= '&&'^ ID
  cfgCharacterTerminal ::= CHAR_BQ
  cfgStartString ::= '!$$'
  cfgCharacterSetTerminal ::= STRING_BRACE
  cfgCharacterAntiSetTerminal ::= '~'^ STRING_BRACE
cfgPrims ::= cfgPrim | cfgPrim ','^ cfgPrims^ 


cfgActions ::= cfgSlot^^ cfgActionSeq^ | cfgSlot^^   
  cfgActionSeq ::= cfgAction cfgActionSeq^ | cfgAction  
  cfgAction  ::= cfgEquation^^ | cfgAssignment^^ | cfgNative^^ | cfgInsert^^  
cfgEquation ::= cfgAttribute '='^ cfgExpression  
cfgAssignment ::= cfgAttribute ':='^ cfgExpression
cfgNative ::= STRING_SHRIEK_SHRIEK
cfgInsert ::= '^+:'^ ID  
cfgAttribute ::= ID | ID '.'^ ID   

cfgExpression ::= __bool^^ | __intAP^^ | __int32^^ | __realAP^^ | __real64^^ | __string^^ | __char^^ | cfgAttribute^^ | ID^^ | ID^^ '('^  cfgExpressionList^ ')'^
cfgExpressionList ::= cfgExpression | cfgExpression ','^ cfgExpressionList^

cfgSeq ::= #^   // Dirty trick: both cfgAlt and cfgAltNoAction promote cfgSeq to achieve gather operation
cfgSlot ::= #^  

(* Term rewrite rules ********************************************************)
trRule ::= trLabel tr
trLabel ::= #^ | '-'^ ID  
tr ::= trPremises '---'^ trTransition
trPremises ::= #^ | trMatch trPremises^ | trTransition trPremises^
trMatch ::= trTopTuple '|>'^ trTopTuple

trTransition ::= trTopTuple trRelation^ trTopTuple
trTopTuple ::= trTerm | trTuple^^ trTerms^
trTuple ::= #^  
trTerms ::= trTerm trTermsTail^
trTermsTail ::= ','^ trTerm | ','^ trTerm trTermsTail^

trTerm ::= 
  __bool^^ | __char^^ | __intAP^^ | __int32^^ | __realAP^^ | __real64^^ | __string^^  // lexical from builtins - see below  
| __array^^ | __list^^ | __set^^ | __map^^ 
| ID^^ | IDSTAR^^ | ID^^ '('^ ')'^ | ID^^ '('^ trTerm ')'^ | ID^^ '('^ trTerms^ ')'^ | trTuple^^ '<'^ trTerms^ '>'^


__array ::= '['^  __int32 '|'^ ']'^ | '['^ __int32 '|'^ __a ']'^
__a ::= trTerm | trTerm ','^ __a

__list ::= '['^ ']'^ | '['^ __l ']'^
__l ::= trTerm | trTerm ','^ __l

__set  ::= '{'^ '}'^ | '{'^ __s '}'^ 
__s ::= trTerm | trTerm ','^ __s

__map  ::= '{'^ '='^ '}'^  |'{'^ __m '}'^  // Note ugly empty map syntax
__m ::= trTerm '='^ trTerm | trTerm '='^ trTerm ','^ __m

trRelation ::= '->' | '=>' | '~>' | ':->' | ':=>' | ':~>'  

(* Choose rules ***************************************************************)
chooseRule ::= chooseElementRule^^ | chooseSlotRule^^

chooseElementRule ::= chooseElementExpr chooserOp^^ chooseElementExpr 
chooseSlotRule ::= chooseSlotExpr chooserOp^^ chooseSlotExpr  

chooseElementExpr ::= chooseElement^^ | chooseElementExpr chooseSetOp^^ chooseElement 
chooseSlotExpr    ::= chooseSlot^^    | chooseSlotExpr    chooseSetOp^^ chooseSlot

chooseElement ::= cfgNonterminal | cfgCharacterTerminal | cfgBuiltinTerminal | cfgCaseInsensitiveTerminal | cfgCaseSensitiveTerminal | choosePredefinedElementSet^ | '('^ chooseElementExpr ')'^
chooseSlot ::= cfgLHS '::=' cfgAlt | '('^ chooseSlotExpr ')'^

choosePredefinedElementSet ::=
  'anyCharacterTerminal' | 'anyBuiltinTerminal' | 'anyCaseSensitiveTerminal' | 'anyCaseInsensitiveTerminal' 
| 'anyParaterminal'      | 'anyLiteralTerminal' | 'anyTerminal'              | 'anyNonterminal' 

choosePredefinedSlotSet ::= 'anySlot'

chooserOp ::= chooseHigher^^ | chooseLower^^ | chooseLonger^^ | chooseShorter^^
chooseHigher ::= '>'^
chooseLower ::= '<'^
chooseLonger ::= '>>'^
chooseShorter ::= '<<'^

chooseSetOp ::= chooseUnion | chooseDifference| chooseIntersection 
chooseUnion ::= '+'^
chooseDifference ::= '-'^
chooseIntersection ::= '*'^

(* Directives ****************************************************************)
directive ::= directiveCarrier

directiveCarrier ::=  
  '!nop'^^

| '!prompt'^^ | '!prompt'^^ &STRING_DQ
| '!print'^^ displayElements^
| '!show'^^ displayElements^
| '!trace'^^ __int32

| '!clear'^^ ID | '!lexer'^^ ID | '!parser'^^ ID | '!interpreter'^^ ID | '!mode'^^ ID 

| '!whitespace'^^ cfgPrims^
| '!paraterminal'^^ paraterminalElements^
| '!token'^^ cfgPrims^

| '!generate'^^ __int32 ID | '!generate'^^ ID  
| '!support'^^ cfgNative cfgNative 

| '!start'^^ cfgNonterminal | '!start'^^ trRelation // Set parser start nonterminal or rewriter start relation
| '!configuration'^^ trRelation configurationElements
| '!terminal'^^ trRelation trTerm
| '!terminal'^^ trRelation trTerm trTermsTail^

| '!try'^^ file       | '!try'^^ file '='^ trTopTuple 
| '!try'^^ trTopTuple | '!try'^^ trTopTuple '='^ trTopTuple

(* Undocumented research features *)
| '!deleteTokens'^^ __int32 | '!swapTokens'^^ __int32 
| '!sppfBreakCycles'^^ | '!sppfBreakCyclesRelation'^^

file ::= &STRING_SQ


configurationElements ::= configurationElement | configurationElement ','^ configurationElements^
configurationElement ::= ID ':'^ ID

paraterminalElements ::= paraterminalElement | paraterminalElement ','^ paraterminalElements^
paraterminalElement  ::= cfgNonterminal^^

displayElements ::= ID | ID displayElements^ | file displayElements^ | __string | __string displayElements^

(* Lexical elements **********************************************************)
__bool ::= 'true' | 'false'
__char ::= &CHAR_BQ
__intAP ::= &AP_INTEGER
__int32 ::= &SIGNED_INTEGER
__realAP ::= &AP_REAL
__real64 ::= &SIGNED_REAL 
__string ::= &STRING_DQ

ID ::= &ID^^
IDSTAR ::= ID '*'^
ID_ATTRIBUTE ::= &ID '.'^ &ID
STRING_SQ ::= &STRING_SQ^^ 
STRING_DQ ::= &STRING_DQ^^ 
STRING_DOLLAR ::= &STRING_DOLLAR^^
STRING_SHRIEK_SHRIEK ::= &STRING_SHRIEK_SHRIEK^^
STRING_BRACE ::= &STRING_BRACE^^
CHAR_BQ ::= &CHAR_BQ^^
