(* ART script grammar rules - suitable for RDSOB parsers: No left recursive rules; Alterates in decreasing length order;   directive at end of each rule *)
//!parser rdsobFunction // Uncomment this line to try bootstrapping with Recursive Descent Singleton Ordered Backtracking parser instead of default GLL parser
!whitespace &SIMPLE_WHITESPACE, &COMMENT_NEST_ART, &COMMENT_LINE_C 
rules ::= rule rules^ | rule
rule  ::= cfgRule^^ | trRule^^ | chooseRule^^ | '!'^ directive^^   

(* Context Free Grammar rules ************************************************)
cfgRule  ::= cfgLHS '::='^ cfgAlts
  cfgLHS ::= ID  
cfgAlts ::= cfgAlt '|'^ cfgAlts^ | cfgAlt  
cfgAlt  ::= cfgSeq^^ cfgActions cfgEpsilonCarrier | cfgSeq^^ cfgActions cfgEpsilon | cfgSeq^^ cfgElems^ cfgActions (* final actions in sequence *)  
  cfgEpsilonCarrier ::= cfgEpsilon cfgAnnotation^^  
cfgEpsilon ::= '#'^

cfgAltNoAction ::= cfgSeq^^ cfgSlot cfgName cfgSlot   // This matches a single element with no actions allowed for use in abbreviated Kleene operations
cfgElems ::= cfgActions cfgExtended cfgElems^ | cfgActions cfgExtended  

cfgExtended ::= cfgName cfgAnnotation^^ | cfgName^^ | cfgOptional^^ | cfgKleene^^ | cfgPositive^^ | cfgDoFirst^^  
cfgAnnotation ::= cfgFoldUnder^^ | cfgFoldOver^^  | cfgTear^^ | cfgTearNamed^^
  cfgFoldUnder ::= '^'^  
  cfgFoldOver ::= '^^'^  
  cfgTear ::= '^^^'^
  cfgTearNamed ::= '^^^'^ ':'^ ID 
cfgDoFirst  ::= '('^ cfgAlts ')'^  
cfgOptional ::= '('^ cfgAlts ')'^ '?'^ | cfgAltNoAction '?'^  
cfgPositive ::= '('^ cfgAlts ')'^ '+'^ | cfgAltNoAction '+'^  
cfgKleene   ::= '('^ cfgAlts ')'^ '*'^ | cfgAltNoAction '*'^  

cfgName ::= cfgPrim^^ | cfgPrim ':'^ ID           // second child if present is a local name
cfgPrim ::= cfgNonterminal^^ | cfgCaseSensitiveTerminal^^| cfgCaseInsensitiveTerminal^^ | cfgBuiltinTerminal^^ | cfgCharacterTerminal^^ | cfgCharacterRangeTerminal^^   
  cfgNonterminal ::= ID | STRING_DOLLAR
  cfgCaseSensitiveTerminal ::= STRING_PLAIN_SQ
  cfgCaseInsensitiveTerminal ::= STRING_DQ
  cfgBuiltinTerminal ::= '&'^ ID
  cfgCharacterTerminal ::= CHAR_BQ
  cfgCharacterRangeTerminal ::= cfgRange
    cfgRange ::= CHAR_BQ '..'^ CHAR_BQ

cfgActions ::= cfgSlot^^ cfgActionSeq^ | cfgSlot^^   
  cfgActionSeq ::= cfgAction cfgActionSeq^ | cfgAction  
  cfgAction  ::= cfgEquation^^ | cfgAssignment^^ | cfgInsert^^  
cfgEquation ::= cfgAttribute '='^ cfgExpression  
cfgAssignment ::= cfgAttribute ':='^ cfgExpression
cfgInsert ::= '^+'^ ID  
cfgAttribute ::= ID | ID '.'^ ID   

cfgExpression ::= __bool^^ | __int32^^ | __real64^^ | __string^^ | __char^^ | cfgAttribute^^ | ID^^ | ID^^ '('^  cfgExpressionList^ ')'^
cfgExpressionList ::= cfgExpression | cfgExpression ','^ cfgExpressionList^

cfgSeq ::= #^   // Dirty trick: both cfgAlt and cfgAltNoAction promote cfgSeq to achieve gather operation
cfgSlot ::= #^  

(* Term rewrite rules ********************************************************)
trRule ::= trLabel tr
trLabel ::= #^ | '-'^ ID  
tr ::= trPremises '---'^ trTransition
trPremises ::= #^ | trMatch trPremises^ | trTransition trPremises^
trMatch ::= trTopTuple '|>'^ trTopTuple

trTransition ::= trTopTuple trRelation^ trTopTuple
trTopTuple ::= trTerm | trTuple^^ terms^
trTuple ::= #^  
terms ::= trTerm termsTail^
termsTail ::= ','^ trTerm | ','^ trTerm termsTail^

trTerm ::= __bool^^ | __int32^^ | __real64^^ | __string^^ | __char^^ | list^^ | __map^^ | ID^^ | IDSTAR^^ | ID^^ '('^ ')'^ | ID^^ '('^ trTerm ')'^ | ID^^ '('^ terms^ ')'^ | trTuple^^ '<'^ terms^ '>'^

list ::= '['^ listElements^^ ']'^

listElements ::= emptyList^^ |  __list^^ trTerm emptyList | __list^^ trTerm ','^ listElements
emptyList ::=  __list^^ __empty
__list ::= #^
__empty ::= #^


trRelation ::= '->' | '=>'  | '/>' | '\>' | '~>'  

(* Choose rules ***************************************************************)
chooseRule ::= chooseElementRule^^ | chooseSlotRule^^

chooseElementRule ::= chooseElementExpr chooserOp^^ chooseElementExpr 
chooseSlotRule ::= chooseSlotExpr chooserOp^^ chooseSlotExpr  

chooseElementExpr ::= chooseElement^^ | chooseElementExpr chooseSetOp^^ chooseElement 
chooseSlotExpr    ::= chooseSlot^^    | chooseSlotExpr    chooseSetOp^^ chooseSlot

chooseElement ::= cfgNonterminal | cfgCharacterTerminal | cfgBuiltinTerminal | cfgCaseInsensitiveTerminal | cfgCaseSensitiveTerminal | choosePredefinedElementSet^ | '('^ chooseElementExpr ')'^
chooseSlot ::= cfgLHS '::=' cfgAlt | '('^ chooseSlotExpr ')'^

choosePredefinedElementSet ::=
  'anyCharacterTerminal' | 'anyBuiltinTerminal' | 'anyCaseSensitiveTerminal' | 'anyCaseInsensitiveTerminal' 
| 'anyParaterminal'      | 'anyLiteralTerminal' | 'anyTerminal'              | 'anyNonterminal' 

choosePredefinedSlotSet ::= 'anySlot'

chooserOp ::= chooseHigher^^ | chooseLower^^ | chooseLonger^^ | chooseShorter^^
chooseHigher ::= '>'^
chooseLower ::= '<'^
chooseLonger ::= '>>'^
chooseShorter ::= '<<'^

chooseSetOp ::= chooseUnion | chooseDifference| chooseIntersection  | chooseSymmetricDifference
chooseUnion ::= '+'^
chooseDifference ::= '-'^
chooseIntersection ::= '*'^
chooseSymmetricDifference ::= '/'^

(* Directives ****************************************************************)
directive ::= directiveElement

directiveElement ::=
  'include' file
| 'whitespace'^^ '#'^ | 'whitespace'^^ whiteSpaceElements^ | 'whitespace'^^ '('^ whiteSpaceElements^ ')'^
| 'paraterminal'^^ '#'^ | 'paraterminal'^^ paraterminalElements^

| 'lexer'^^ '#'^ | 'lexer'^^ ID
| 'parser'^^ '#'^ | 'parser'^^ ID
| 'interpreter'^^ '#'^ | 'interpreter'^^ ID

| 'start'^^ cfgNonterminal | 'start'^^ trRelation // Set parser start nonterminal or rewriter start relation
| 'configuration'^^  '#'^ | 'configuration'^^ trRelation ','^ trTerm

| 'clear'^^ 'allRules' | 'clear'^^ 'cfgRules' | 'clear'^^ 'chooseRules' | 'clear'^^ 'trRules'

| 'trace'^^ __int32
| 'print'^^ displayElements^
| 'show'^^ displayElements^
| 'prompt'^^ | 'prompt'^^ &STRING_DQ

| 'try'^^ file              
| 'try'^^ file '='^ trTopTuple 
| 'try'^^ trTopTuple  
| 'try'^^ trTopTuple '='^ trTopTuple

| 'breakSPPFcycles'^^ | 'mode'^^ ID

| 'nop'^^

file ::= &STRING_PLAIN_SQ

whiteSpaceElements ::= whiteSpaceElement | whiteSpaceElement ','^ whiteSpaceElements^
whiteSpaceElement  ::= cfgNonterminal^^ | cfgBuiltinTerminal^^

paraterminalElements ::= paraterminalElement | paraterminalElement ','^ paraterminalElements^
paraterminalElement  ::= cfgNonterminal^^

displayElements ::= displayElement^ | displayElement^ displayElements^
displayElement  ::= 
  'latex' | file 
| 'script' | 'scriptDerivation' 
| 'allRules' | 'cfgRules' | 'chooseRules' | 'trRules'
| 'lexer' | 'parser' | 'interpreter'
| 'input' | 'twe' | 'lexicalisation' | 'gss' | 'sppf' | 'bsr' | 'derivation' | 'interpretation' 
| 'statistics' | __string
| 'cycles'

(* Lexical elements **********************************************************)
__bool ::= 'true' | 'false'
__char ::= &CHAR_BQ
__int32 ::= &SIGNED_INTEGER
__real64 ::= &SIGNED_REAL 
__string ::= &STRING_DQ
__map ::= '{'^ elements '}'^ | '{'^ elements '}'^  ':'^ trTerm
elements ::= #^ | trTopTuple^

ID ::= &ID^^
IDSTAR ::= ID '*'^
ID_ATTRIBUTE ::= &ID '.'^ &ID
STRING_DQ ::= &STRING_DQ^^ 
STRING_DOLLAR ::= &STRING_DOLLAR^^
STRING_PLAIN_SQ ::= &STRING_PLAIN_SQ^^
CHAR_BQ ::= &CHAR_BQ^^
