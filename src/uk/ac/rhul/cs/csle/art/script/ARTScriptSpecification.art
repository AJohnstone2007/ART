(* ART script grammar rules - suitable for RDSOB parsers: No left recursive rules; Alterates in decreasing length order;   directive at end of each rule *)
//!parser rdsobFunction // Uncomment this line to try bootstrapping with Recursive Descent Singleton Ordered Backtracking parser instead of default GLL parser
!whitespace &SIMPLE_WHITESPACE, &COMMENT_NEST_ART, &COMMENT_LINE_C 
rules ::= rule rules^ | rule
rule  ::= cfgRule^^ | trRule^^ | chooseRule^^ | '!'^ directive^^   

(* Context Free Grammar rules ************************************************)
cfgRule  ::= cfgLHS '::='^ cfgAlts^  
  cfgLHS ::= ID  
cfgAlts ::= cfgAlt '|'^ cfgAlts^ | cfgAlt  
cfgAlt  ::= cfgSeq^^ cfgActions cfgEpsilonCarrier | cfgSeq^^ cfgActions cfgEpsilon | cfgSeq^^ cfgElems^ cfgActions (* final actions in sequence *)  
  cfgEpsilonCarrier ::= cfgEpsilon cfgAnnotation^^  
cfgEpsilon ::= '#'^

cfgAltNoAction ::= cfgSeq^^ cfgSlot cfgPrim cfgSlot   // This matches a single element with no actions allowed for use in abbreviated Kleene operations
cfgElems ::= cfgActions cfgExtended cfgElems^ | cfgActions cfgExtended  

cfgExtended ::= cfgPrim cfgAnnotation^^ | cfgPrim^^ | cfgOptional^^ | cfgKleene^^ | cfgPositive^^ | cfgDoFirst^^  
cfgAnnotation ::= cfgFoldUnder^^ | cfgFoldOver^^  
  cfgFoldUnder ::= '^'^  
  cfgFoldOver ::= '^^'^  

cfgDoFirst  ::= '('^ cfgAlts^ ')'^  
cfgOptional ::= '('^ cfgAlts^ ')'^ '?'^ | cfgAltNoAction '?'^  
cfgPositive ::= '('^ cfgAlts^ ')'^ '+'^ | cfgAltNoAction '+'^  
cfgKleene   ::= '('^ cfgAlts^ ')'^ '*'^ | cfgAltNoAction '*'^  

cfgPrim ::= cfgPrimCarrier^^ | cfgPrimCarrier^^ ':'^ ID           // second child if present is a local name
cfgPrimCarrier ::= cfgNonterminal^^ | cfgCaseSensitiveTerminal^^| cfgCaseInsensitiveTerminal^^ | cfgBuiltinTerminal^^ | cfgCharacterTerminal^^ | cfgCharacterRangeTerminal^^   
  cfgNonterminal ::= ID | STRING_DOLLAR
  cfgCaseSensitiveTerminal ::= STRING_PLAIN_SQ
  cfgCaseInsensitiveTerminal ::= STRING_DQ
  cfgBuiltinTerminal ::= '&'^ ID
  cfgCharacterTerminal ::= CHAR_BQ
  cfgCharacterRangeTerminal ::= cfgRange
    cfgRange ::= CHAR_BQ '..'^ CHAR_BQ

cfgActions ::= cfgSlot^^ cfgActionSeq^ | cfgSlot^^   
  cfgActionSeq ::= cfgAction cfgActionSeq^ | cfgAction  
  cfgAction  ::= cfgEquation^^ | cfgAssignment^^ | cfgInsert  
cfgEquation ::= cfgAttribute '='^ trTerm  
cfgAssignment ::= cfgAttribute ':='^ trTerm  
cfgInsert ::= '^+'^ ID  
cfgAttribute ::= ID '.'^ ID   

cfgSeq ::= #^   // Dirty trick: both cfgAlt and cfgAltNoAction promote cfgSeq to achieve gather operation
cfgSlot ::= #^  

(* Term rewrite rules ********************************************************)
trRule ::= trLabel tr
trLabel ::= #^ | '-'^ ID  
tr ::= trPremises '---'^ trTransition
trPremises ::= #^ | trMatch trPremises^ | trTransition trPremises^
trMatch ::= trTuple '|>'^ trTuple
trTransition ::= trTuple TRRELATION^ trTuple
trTuple ::= trTerm^^ | trTerm ','^ trTupleTail^ | '<'^ trTerm ','^ trTupleTail^ '>'^ 
trTupleTail ::= trTerm | trTerm ','^ trTupleTail^

trTerm ::= __bool^^ | __int32^^ | __real64^^ | __string^^ | __char^^ | ID^^ | ID^^ '.'^ ID | ID^^  '('^  ')'^ | ID^^ '('^  trArgList^ ')'^
trArgList ::= trTuple | trTuple ','^ trArgList^ | trInlineTransition | trInlineTransition ','^ trArgList^
trInlineTransition ::= trTransition^

(* Choose rules ***************************************************************)
chooseRule ::= chooseElementRule^^ | chooseSlotRule^^

chooseElementRule ::= chooseElementExpr chooserOp^^ chooseElementExpr 
chooseSlotRule ::= chooseSlotExpr chooserOp^^ chooseSlotExpr  

chooseElementExpr ::= chooseElement^^ | chooseElementExpr chooseSetOp^^ chooseElement 
chooseSlotExpr    ::= chooseSlot^^    | chooseSlotExpr    chooseSetOp^^ chooseSlot

chooseElement ::= cfgNonterminal | cfgCharacterTerminal | cfgBuiltinTerminal | cfgCaseInsensitiveTerminal | cfgCaseSensitiveTerminal | choosePredefinedElementSet^ | '('^ chooseElementExpr ')'^
chooseSlot ::= cfgLHS '::=' cfgAlt | '('^ chooseSlotExpr ')'^

choosePredefinedElementSet ::=
  'anyCharacterTerminal' | 'anyBuiltinTerminal' | 'anyCaseSensitiveTerminal' | 'anyCaseInsensitiveTerminal' 
| 'anyParaterminal'      | 'anyLiteralTerminal' | 'anyTerminal'              | 'anyNonterminal' 

choosePredefinedSlotSet ::= 'anySlot'

chooserOp ::= chooseHigher^^ | chooseLower^^ | chooseLonger^^ | chooseShorter^^
chooseHigher ::= '>'^
chooseLower ::= '<'^
chooseLonger ::= '>>'^
chooseShorter ::= '<<'^

chooseSetOp ::= chooseUnion | chooseDifference| chooseIntersection  | chooseSymmetricDifference
chooseUnion ::= '+'^
chooseDifference ::= '-'^
chooseIntersection ::= '*'^
chooseSymmetricDifference ::= '/'^

(* Directives ****************************************************************)
directive ::= directiveElement

directiveElement ::=
  'include' file
| 'lexer'^^ '#'^ | 'lexer'^^ lexerElements 
| 'whitespace'^^ '#'^ | 'whitespace'^^ whiteSpaceElements^ | 'whitespace'^^ '('^ whiteSpaceElements^ ')'^
| 'paraterminal'^^ '#'^ | 'paraterminal'^^ paraterminalElements^
| 'parser'^^ '#'^ | 'parser'^^ parserElements^
| 'start'^^ '#'^ | 'start'^^ cfgNonterminal // Set parser start nonterminal
| 'interpreter'^^ '#'^ | 'interpreter'^^ interpreterElements^
| 'configuration'^^ '#'^ | 'configuration'^^ TRRELATION | 'configuration'^^ TRRELATION ','^ trTerm
| 'trace'^^ __int32
| 'print'^^ displayElements^
| 'show'^^ displayElements^
| 'log'^^ displayElements^
| 'try'^^ file | 'try'^^ trTuple | 'try'^^ __string 
| 'try'^^ file '='^ trTuple | 'try'^^ trTuple '='^ trTuple | 'try'^^ __string '='^ trTuple
| 'termTool'^^
| 'nop'^^

file ::= &STRING_PLAIN_SQ

lexerElements ::= lexerElement | lexerElement ','^ lexerElements
lexerElement ::= 'LongestMatch'^^ | 'twe'^^

whiteSpaceElements ::= whiteSpaceElement | whiteSpaceElement ','^ whiteSpaceElements^
whiteSpaceElement  ::= cfgNonterminal^^ | cfgBuiltinTerminal^^

paraterminalElements ::= paraterminalElement | paraterminalElement ','^ paraterminalElements^
paraterminalElement  ::= cfgNonterminal^^

parserElements ::= parserElement | parserElement ','^ parserElements^
parserElement ::= ID^^

interpreterElements ::= interpreterElement | interpreterElement ','^ interpreterElements^
interpreterElement ::= 'eSOS'^^ | 'attribute'^^

displayElements ::= displayElement | displayElement ','^ displayElements^
displayElement  ::= 
  'script'^^ | 'scriptExpansion'^^ | 'scriptProperties'^^ | 'scriptDerivation'^^ 
| 'input'^^ | 'tokens'^^ | 'sppf'^^ | 'derivation'^^ | 'interpretation'^^ | 'outcome'^^ | 'statistics'^^ | __string^^

(* Lexical elements **********************************************************)
__bool ::= 'true' | 'false'
__char ::= &CHAR_BQ
__int32 ::= &SIGNED_INTEGER
__real64 ::= &SIGNED_REAL 
__string ::= &STRING_DQ
ID ::= &ID^^
ID_ATTRIBUTE ::= &ID '.'^ &ID
STRING_DQ ::= &STRING_DQ^^ 
STRING_DOLLAR ::= &STRING_DOLLAR^^
STRING_PLAIN_SQ ::= &STRING_PLAIN_SQ^^
CHAR_BQ ::= &CHAR_BQ^^
STRING_BRACE_NEST ::= &STRING_BRACE_NEST^^
STRING_BRACKET_NEST ::= &STRING_BRACKET_NEST^^
TRRELATION ::= '->' | '->*' | '=>'  | '=>*' | '~>'  | '~>*'  
