// adl - Adrian's dynamic language This is version 0.1 with lambdas and basic flow control but no pattern matching
!whitespace(&SIMPLE_WHITESPACE,&COMMENT_BLOCK_C,&COMMENT_LINE_C)
adl       ::= #^ | seq^^ | ';' | seq ';'                    // top level expression may be empty or a seq followed by optional semicolon
seq       ::= apply^^ | apply ';'^ seq                      // and-also (void-left) operator
apply     ::= flow^^ | flow apply                           // 'space' operator (juxtaposition) apply
flow      ::= def^^ | match^^ | matchr^^                    // non-linear flow control
  match   ::= def '?'^ flow '~'^ def | def '?'^ flow skip   // pattern matching
  matchr  ::= def '??'^ flow '~'^ def | def '??'^ flow skip // pattern matching and repeat
  skip    ::= #^                                            // do-nothing
def       ::= system^^ | const^^ | assign^^                 // assign and constant definition
  const   ::= lhslst '='^ def
  assign  ::= lhslst ':='^ def
  lhslst  ::= lhselm^ | lhselm^ ','^ lhselm^                // restricted syntax for LHS of definitions, function parameters and class parameters
  lhselm  ::= ID^^ | ID^^ '::'^ or                          // pair interpreted as paramater-name(default value) 
system    ::= slice^^ | slice '$$$'^ slice                  // system call: lhs is opcode, rhs is argument
slice     ::= list^^                                        // extract a sub list
            | list '#'^ or | list '#'^ or '..'^ or | list '#'^ or '..'^ or '..'^ or
list      ::= pair^^ | pair ','^ listtl^
  listtl  ::= pair  | pair ','^ listtl^
pair      ::= mesh^^ | mesh '::'^ mesh                      // sugar for list of exactly two elements
mesh      ::= or^^   | mesh translate^^ or | mesh extrude^^ or | mesh rotate^^ or | mesh scale^^ or | mesh affine^^ or | mesh bloat^^ or | mesh colour^^ or
or        ::= xor^^  |  or '|'^ xor 
xor       ::= and^^  | xor '^'^ and 
and       ::= eqs^^  | eqs '&'^ and
eqs       ::= rels^^ | rels eq^^ rels | rels ne^^ rels
rels      ::= cat^^  | cat ge^^ cat | cat gt^^ cat | cat le^^ cat | cat lt^^ cat
cat       ::= shs^^  | cat ':'^ shs
shs       ::= adds^^ | shs lsh^^ adds| shs rsh^^ adds| shs rol^^ adds| shs ror^^ adds| shs ash^^ adds
adds      ::= muls^^ | adds add^^ muls | adds sub^^ muls
muls      ::= exp^^  | muls mul^^ exp | muls div^^ exp | muls mod^^ exp
exp       ::= cast^^ | cast '**'^ exp
cast      ::= base^^ | base '$'^ ID^                        // attempt to cast a value to another type, throwing an exeption if unavailable
base      ::= pos^^ | neg^^ | not^^ | lom^^ | import^^ | export^^ | lambda^^ | class^^ | blist^^ | mtlist^^ | deref^^ | '('^ seq^^ ')'^  
            | __bool^^ | __int32^^ | __real64^^ | __char^^ | __string^^ | __done^^ | __empty^^ | any | break^^ | continue^^ | return^^ | yield^^
pos       ::= '!+'^ base
neg       ::= '!-'^ base
not       ::= '!'^ base
lom       ::= 'lom'^ '('^ list ','^ list ')'^
import    ::= 'import' '('^ seq ')'^
export    ::= 'export' '('^ seq ')'^
lambda    ::= lambkw^ lhslst body^ | lambkw^ '('^ lhslst ')'^ body^ | lambkw^ body^ | lambkw^ '('^ ')'^ body^
  lambkw  ::= '\'^ | 'fn'^
  body    ::= '{'^ seq '}'^ 
class     ::= clsskw^ lhslst body^ | clsskw^ body^
  clsskw  ::= 'class'^ | '\$'^ 
blist     ::= '['^ seq ']'^                                 // fully bracketed list, allowing single element lists
mtlist    ::= '['^ ']'^                                     // empty list (since empty seq is not allowed)
deref     ::= ID^
any       ::= '_'^  
break     ::= 'break'^
continue  ::= 'continue'^
return    ::= 'return'^
yield     ::= 'yield'^
translate ::= '^'^
extrude   ::= '^^'^
rotate    ::= '@'^
scale     ::= '%%'^
affine    ::= 'affine'^
bloat     ::= 'bloat'^
colour    ::= 'colour'^ | 'color'^
eq        ::= '=='^
ne        ::= '!='^ 
ge        ::= '>='^
gt        ::= '>'^ 
le        ::= '<='^ 
lt        ::= '<'^
lsh       ::= '<<'^
rsh       ::= '>>'^
rol       ::= '<<|'^ 
ror       ::= '>>|'^
ash       ::= '>>>'^ 
add       ::= '+'^ 
sub       ::= '-'^ 
mul       ::= '*'^
div       ::= '/'^ 
mod       ::= '%'^
ID        ::= &ID
__done    ::= 'done'^
__empty   ::= 'empty'^
__bool    ::= 'true'^^ | 'false'^^
__int32   ::= &INTEGER
__real64  ::= &REAL
__char    ::= &STRING_SQ
__string  ::= &STRING_DQ
