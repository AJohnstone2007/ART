(* This starts with smlSpec.art and attempts to exactly
match the 1997 Definition using BNF for the lexical specification
For choosers refer back to smlSpec.art *)

(* this uses the multilevel specification formulation described in
MLSspec.tex in EAS_docs above.
It looks as though it covers both SML FULL and the extra that is needed
for the bits of SML BEAR that are not in SML FULL
*)

(* mA
`a | `b | `c | `d | `e | `f | `g | `h | `i | `j | `k | `l | `m | 
`n | `o | `p | `q | `r | `s | `t | `u | `v | `w | `x | `y | `z | 
`A | `B | `C | `D | `E | `F | `G | `H | `I | `J | `K | `L | `M | 
`N | `O | `P | `Q | `R | `S | `T | `U | `V | `W | `X | `Y | `Z |
`0 | `1 | `2 | `3 | `4 | `5 | `6 | `7 | `8 | `9 |
 `_  | `\\ | `= | `> | `? | ` | `^ | `! | `& | `% | `- | `< | `( | `) | `* | 
`. | `[ | `] | `{ | `} | `: | `$ | `+ | `; | `# | `\| | `@ | `' | `  | `,
*)

(* mT
'op', ',', '|', 'withtype', ';', 'and, ':', 'of', 'as', '*', '(', ')',
'=', '{'[, '}', '#', '[', ']', 'let', 'in', 'end', 'andalso', 'orelse',
'handle', 'raise', 'if', 'then', 'else', 'while', 'do', 'case', 'of',
'fn', '=>', 'val', 'fun', 'type', 'datatype', 'abstype', 'with', 
'exception', 'local', 'open', 'infix', 'infixr', 'nonfix', 'rec',
'_', '...', '->', 'struct', ':>', 'structure', 'sig', 'where', 'type',

*)

(* mL
iden, ibase, int, word, num, hex, real, char, string, ascii, letter, digit
*)

(* mP *)
!paraterminal 
scon, lab, vid, tyvar, tycon, funid, sigid, 
d, strid
(* , longvid, longtycon, longstrid *)

(* mN  the LHSs of the phrase level grammar rules below *)


(*
!injectInstance WT 
!injectProductionOff
*)

(* use whitespace absorption via WT
WS ::= ( ` | `\t | `\n | `\r)( ` | `\t | `\n | `\r)*
WT ::= WS | #
*)



(* reserved words *)

(*
(* idRW *)
(* Section 2.1 *)
'abstype'  'and'  'andalso'  'as'  'case'  'do'  'else'
'end'  'exception'   'fn'    'fun'   'handle'   'if'  'in'  'infix'
'infixr'   'let'   'local'   'nonfix'   'of'  'op'   'open'   'orelse'
'raise'   'rec'   'then'   'type'  'val'  'with'   'withtype'  'while'

(* symKW *)
(* Section 2.1 *)
'('   ')'  '['  ']'  '{'  '}'  ','  ':'  ';'  '...'  '_'
'|'  '='  '=>'  '->'  '#'


'handle', 'raise', 'datatype', 
'struct', ':>', 'structure', 'sig', 'where',
'signature', 'eqtype', 'include', 'sharing'
*)

(* start rule *)
startSML ::= WT program

program ::= topdec scolon programOp |
            exp scolon  programOp   (* Ax A OK *)


(* whitespace *)
WS ::= ` | `\t | `\n | `\r |  ` WS | `\t WS | `\n WS | `\r WS
WT ::= WS | #

(* lexical grammar rules *)
(* scon  tyvar  vid  funid  sigid tycon lab d strid *)

scon  ::=  int WT  | word WT | real WT | string WT | char WT 

int  ::= intdec | inthex 
  
word ::= `0`w decnum | `0`w`x hexnum

real ::=  intdec`.intdec 
        | intdec`.intdec `e intdec
	| intdec`.intdec `E intdec
	| intdec `e intdec
	| intdec `E intdec 
  
string ::= `" stringbody `" 

char ::= `# `" format ascii  format `" |
         `# `" format ascii `" |
         `# `" format escape format`" |
	 `# `" format escape `" |
	 `# `" ascii format `" |
	 `# `" ascii `" |
	 `# `" escape format `" |
	 `# `" escape `" 


(* support nonterminals for the lexical nonterminals *)

intdec ::= decnum | `~ decnum 

inthex ::= `0`x hexnum | `~ `0`x hexnum 

digit ::= `0 | `1 | `2 | `3 | `4 | `5 | `6 | `7 | `8 | `9

decnum  ::= digit | digit decnum
  
hexdigit ::= `0 | `1 | `2 | `3 | `4 | `5 | `6 | `7 | `8 | `9 |
           `a | `b | `c | `d | `e | `f | `A | `B | `C | `D | `E | `F 

hexnum  ::= hexdigit  |  hexdigit hexnum

stringbody ::= ascii | escape | format |
          ascii stringbody | escape stringbody | format stringbody 

ascii ::=  letter | `_  | digit | `\\ | 
           `= | `> | `? | ` | `^ | `! | `& | `% | `- | `< | `( | `) |
           `* | `. | `[ | `] | `{ | `} | `: | `$ | `+ | `; | `# | 
           `| | `@ | `' | `~ | `,
	   (* eas: no pound sign can be in the script *)


(* eas to check these they are hard coded ART individual notations *)
escape ::= `\\`a | `\\`b | `\\`t | `\\`n | `\\`v | `\\`f | `\\`r |
           `\\`A | `\\`B | `\\`T | `\\`N | `\\`V | `\\`F | `\\`R |	
           `\\`^ letter | `\\ digit digit digit
	   | `\\`u hexdigit hexdigit hexdigit hexdigit | 
           `\\`U hexnum | `\\`"  | `\\`\\

(* eas: `U hexnum missing \f...\f *)

format ::= `\\ spaces `\\

(* eas: missing formfeed? *)	

spaces ::= ` | `\t | `\n | `\r | 
           ` spaces | `\t spaces | `\n spaces | `\r spaces

letter ::= `a | `b | `c | `d | `e | `f | `g | `h | `i | `j | `k | `l | `m | 
          `n | `o | `p | `q | `r | `s | `t | `u | `v | `w | `x | `y | `z | 
          `A | `B | `C | `D | `E | `F | `G | `H | `I | `J | `K | `L | `M | 
          `N | `O | `P | `Q | `R | `S | `T | `U | `V | `W | `X | `Y | `Z


(* eas: in the Definition but not used in this grammar *)
identifier ::= iden | `' idenBase


iden ::= letter idenBase | symIden (* excludes reserved words except '=' *)

symForIden ::= `! | `% | `& | `$ | `# | `+ | `- | `/ | `: | `< | `= | `> | 
      `? | `@ | `\\ | `~ | `` | `^ | `| | `* 

symIden ::= symForIden | symForIden symIden

idenBase ::= letter idenBase | digit idenBase | `' idenBase | `_ idenBase | # 


tyvar ::= `' idenBase WT

(* etyvar ::= `'`'idenBase  *)  

vid ::= iden WT

tycon ::= iden WT (* but excludes * *)

lab ::= iden WT | posDigit WT | posDigit decnum WT

posDigit ::=  `1 | `2 | `3 | `4 | `5 | `6 | `7 | `8 | `9 

d ::= digit WT (* eas: implicit in the 97 Defintion *)

strid ::=  letter idenBase WT

funid ::= letter idenBase WT

sigid ::= letter idenBase WT


(* Milner uses rules for the long ids, so perhaps these should be
nonterminals *)   
(*
longvid ::= idBaseDot iden WT

longtycon ::= idBaseDot iden WT

longstrid ::= idBaseDot  letter idenBase WT

idBaseDot ::= # |  letter idenBase `. idBaseDot
*)


longvid ::= idBaseDot vid

longtycon ::= idBaseDot tycon

longstrid ::= idBaseDot  strid

idBaseDot ::= # |  strid dot idBaseDot


(* keywords *)

dot ::= `. WT
op ::= `o`p WT 
comma ::= `, WT
bar ::= `| WT 
withtype ::= `w`i`t`h`t`y`p`e WT
scolon ::= `; WT  
colon ::= `: WT  
and ::= `a`n`d WT  
of ::= `o`f WT
as ::= `a`s WT
star ::= `* WT
lp ::= `( WT
rp ::= `) WT 
eq ::= `= WT
lb ::= `{ WT
rb ::= `} WT
hash ::= `# WT
lsb ::= `[ WT  
rsb ::= `] WT  
let ::= `l`e`t WT  
in ::= `i`n WT  
end ::= `e`n`d WT  
andalso ::= `a`n`d`a`l`s`o WT  
orelse ::= `o`r`e`l`s`e WT 
handle ::= `h`a`n`d`l`e WT  
raise ::= `r`a`i`s`e WT  
if ::= `i`f WT  
then ::= `t`h`e`n WT  
else ::= `e`l`s`e WT  
while ::= `w`h`i`l`e WT  
do ::= `d`o WT  
case ::= `c`a`s`e WT  
fn ::= `f`n WT  
implies ::= `=`> WT  
val ::= `v`a`l WT  
fun ::= `f`u`n WT  
type ::= `t`y`p`e WT  
datatype ::= `d`a`t`a`t`y`p`e WT  
abstype ::= `a`b`s`t`y`p`e WT  
with ::= `w`i`t`h WT  
exception ::= `e`x`c`e`p`t`i`o`n WT  
local ::= `l`o`c`a`l WT  
open ::= `o`p`e`n WT  
infix ::= `i`n`f`i`x WT  
infixr ::= `i`n`f`i`x`r WT  
nonfix ::= `n`o`n`f`i`x WT  
rec ::= `r`e`c WT 
ubar ::= `_ WT  
dots ::= `.`.`. WT  
rarrow ::= `-`> WT  
struct ::= `s`t`r`u`c`t WT  
colgt ::= `:`> WT  
structure ::= `s`t`r`u`c`t`u`r`e WT  
sig ::= `s`i`g WT  
where ::= `w`h`e`r`e WT  
type ::= `t`y`p`e WT 
eqtype ::= `e`q`t`y`p`e WT 
sharing ::= `s`h`a`r`i`n`g WT
signature ::= `s`i`g`n`a`t`u`r`e WT
functor ::= `f`u`n`c`t`o`r WT
include ::= `i`n`c`l`u`d`e WT

(* phrase level grammar rules*)
(* the alternates are in decreasing priority
L resp R associativity
types bind more tightly than expressions
longest match applies to iterated constructs such as match *)

opOp ::= op | #
patrowOp ::= patrow | #
patrowCommaOp ::=  comma patrow | #
tyOp ::= colon ty | #
tyrowOp ::= tyrow | #
tyrowCommaOp ::= comma tyrow | #
exprowOp ::= exprow | #
exprowCommaOp ::= comma exprow | #
matchBarOp ::= bar match | #
scolonOp ::= scolon | #
dOp ::= d | #
andvBindOp ::= and valbind | #
andtBindOp ::= and typbind | #
anddBindOp ::= and datbind | #
conbindBarOp ::= bar conbind | #
andexBindOp ::= and exbind | #
andstrBindOp ::= and strbind | #
andsigBindOp ::= and sigbind | #
andvaldescOp ::= and valdesc | #
andtypdescOp ::= and typdesc | #
anddatdescOp ::= and datdesc | #
condescBarOp ::= bar condesc | #
andexdescOp ::= and exdesc | #
andstrdescOp ::= and strdesc | #
andfunBindOp ::=  and funbind | #
topdecOp ::= topdec | #
programOp ::= program | #

withtypeBindOp ::= withtype typbind | # (* eas: in Appendix B *)
andfBindOp ::= and fvalbind | # (* eas: in Appendix B *)
oftyOp ::= of ty | #  (* eas: in Appendix B *)
aspatOp ::= as pat | #  (* eas: in Appendix B *)



longstridPosC ::= longstrid | longstrid longstridPosC
vidPosC ::= vid | vid vidPosC
longtyconList2 ::= longtycon eq longtycon | 
                   longtycon eq longtyconList2



(* From Ax B *)
expComList0 ::= # | exp | exp comma expComList0
expSemList2 ::= exp scolon exp | exp scolon expSemList2
expSemList1 ::= exp | exp scolon expSemList1
expComList2 ::= exp comma exp | exp comma expComList2
patComList2 ::= pat comma pat | pat comma patComList2
patComList0 ::= # | pat | pat comma patComList0
tyStarList2 ::= ty star ty | ty star tyStarList2



(* not checked - from Ax A *)

(* atpatList1 ::= atpat | atpat atpatList1 
longstridList1 ::= longstrid | longstrid longstridList1
*)


atpatStar ::= atpat atpatStar | #
andTyvarseqTyconTyStar ::= 
            and tyvarseq tycon eq ty andTyvarseqTyconTyStar | #
sigidPosC ::= sigid | sigid sigidPosC 
equalLongstridStar ::= eq longstrid equalLongstridStar  | #
andTypeTyvarseqLTyconTyStar ::= 
         and type tyvarseq longtycon eq ty andTypeTyvarseqLTyconTyStar | #


(* the seq lists *)
tyvarseq ::= tyvar | # | lp tyvarList rp
tyvarList ::=  tyvar | tyvar comma tyvarList
tyseq ::= ty | # | lp tyList rp
tyList ::=  ty | ty comma tyList


(* Section 2.8 *)
atpat ::= ubar |
          scon |
          opOp longvid |
          lb patrowOp rb |
          lp rp  |             (* Ax B OK *)
          lp patComList2 rp |  (* Ax B OK *)
          lsb patComList0 rsb  | (* Ax B OK *)
          lp pat rp


patrow ::= dots    |
           lab eq pat patrowCommaOp |
           vid tyOp aspatOp patrowCommaOp   (* Ax B OK *)

pat ::= atpat             |
        opOp longvid atpat |
        pat vid pat       |
        pat colon ty      |
        opOp vid tyOp as pat

ty ::= tyvar   |
       lb tyrowOp rb |
       tyseq longtycon |
       tyStarList2  |      (* Ax B OK *)
       ty rarrow ty |        (* R right associative *)
       lp ty rp

tyrow ::= lab colon ty tyrowCommaOp 



(* Section 2.9 *)

atexp ::= scon |
          opOp longvid  |
          lb exprowOp rb |
          hash lab   |             (* Ax B OK *)
          lp rp  |              (* Ax B OK *)
          lp expComList2 rp |   (* Ax B OK *)
          lsb expComList0 rsb |   (* Ax B OK *)
          lp expSemList2 rp |   (* Ax B OK *)
          let dec in expSemList1 end  | (* Ax B OK *)
          lp exp rp

exprow ::= lab eq exp exprowCommaOp         

appexp ::= atexp |   (* Ax B OK *)
           appexp atexp (* Ax B OK *)

infexp ::= appexp |    (* Ax B OK *)
           infexp vid infexp (* Ax B OK *)

exp ::= (* atexp | exp atexp | exp vid exp | *)
        infexp |         (* Ax B OK *)
        exp colon ty |     (* Ax B OK *) (* L left associative *)
        exp andalso exp | (* Ax B OK *)
        exp orelse exp   | (* Ax B OK *)
        exp handle match  |
        raise exp       |
        if exp then exp else exp | (* Ax B OK *)
        while exp do exp          |  (* Ax B OK *)
        case exp of match         |  (* Ax B OK *)
        fn match                    

match ::= mrule matchBarOp

mrule ::= pat implies exp

dec ::= val tyvarseq valbind    |
        fun tyvarseq fvalbind   | (* Ax B OK *)
        type typbind          |
        datatype datbind withtypeBindOp | (* Ax B OK *)
        datatype tycon eq datatype longtycon |
        abstype datbind withtypeBindOp 
                               with dec end | (* Ax B OK *)
        exception exbind     |
        local dec in dec end |
        open longstridPosC   |
        # |
        dec scolonOp dec |
        infix dOp vidPosC |
        infixr dOp vidPosC |
        nonfix vidPosC      

valbind ::= pat eq exp andvBindOp |
            rec valbind

(* Ax B *)
(* this is the original rule as in Ax B, it is not context free and is 
replaced by a rule that widens the accepted language 
A semantic check will need to be added to the translator

fvalbind ::= opOp vid atpat11 ... atpat1n tyOp eq exp    !m; n>=1
        baropOp vid atpat21 ... atpat2n tyOp eq exp     !See also note below
        bar ... ...
        baropOp vid atpatm1 ... atpatmn tyOp eq exp
                      andfBindOp

fvalbindList1 ::= opOp vid atpatList1 tyOp eq exp  |
                  opOp vid atpatList1 tyOp eq exp  bar fvalbindList1

fvalbind ::= fvalbindList1 andfBindOp
*)

(* eas: needs checking what are the last 4 for *)
fvalbindList1 ::= 
          opOp vid atpat atpatStar tyOp eq exp  |
          opOp vid atpat atpatStar tyOp eq exp  bar fvalbindList1 |
          atpat vid atpat tyOp eq exp |
          atpat vid atpat tyOp eq exp bar fvalbindList1 |
         lp atpat vid atpat rp atpatStar tyOp eq exp |
         lp atpat vid atpat rp atpatStar tyOp eq exp bar fvalbindList1

fvalbind ::= fvalbindList1 andfBindOp


typbind ::= tyvarseq tycon eq ty andtBindOp

datbind ::= tyvarseq tycon eq conbind anddBindOp

conbind ::= opOp vid oftyOp conbindBarOp

exbind ::= opOp vid oftyOp andexBindOp |
           opOp vid eq opOp longvid andexBindOp


strexp ::= struct strdec end | 
           longstrid               |
           strexp colon sigexp     |
           strexp colgt sigexp   |
           funid lp strexp rp |
           let strdec in strexp end |
           (* the next alternate comes from the rewrite rules*)
           funid lp strdec rp   (* Ax B *)



strdec ::= dec      |
           structure strbind |
           local strdec in strdec end |
            #  |
           strdec scolonOp strdec 

strbind ::= strid eq strexp andstrBindOp |
            (* the next two alternates come from the rewrite rules*)
            strid colon sigexp eq strexp andstrBindOp |  (* Ax B *)
            strid colgt sigexp eq strexp andstrBindOp    (* Ax B *)


sigexp ::= sig spec end  |
           sigid              |
  (* this alternate has been modified to add rewtire rule *)
          sigexp where type tyvarseq longtycon eq ty      (* Ax B *)
                                      andTypeTyvarseqLTyconTyStar 

sigdec ::= signature sigbind

sigbind ::= sigid eq sigexp andsigBindOp

spec ::= val valdesc   |
         type typdesc   |
         eqtype typdesc  |
         datatype datdesc |
         datatype tycon eq datatype longtycon |
         exception exdesc   |
         structure strdesc   |
         include sigexp       |
         # |
         spec scolonOp spec |
         spec sharing type longtyconList2 |  
  (* the next alternates come from the rewrite rules*)
         type tyvarseq tycon eq ty andTyvarseqTyconTyStar   |  (* Ax A *)
         include sigidPosC |       (* Ax A *) 
         spec sharing longstrid equalLongstridStar    (* Ax A *)

valdesc ::= vid colon ty andvaldescOp

typdesc ::= tyvarseq tycon andtypdescOp

datdesc ::= tyvarseq tycon eq condesc anddatdescOp

condesc ::= vid oftyOp condescBarOp

exdesc ::= vid oftyOp andexdescOp

strdesc ::= strid colon sigexp andstrdescOp

fundec ::= functor funbind

funbind ::= funid lp strid colon sigexp rp eq strexp  andfunBindOp |
            (* the next alternates come from the rewrite rules*)  
(* Ax B *)  funid lp strid colon sigexp rp colon sigexp eq strexp andfunBindOp |
(* Ax B *)  funid lp strid colon sigexp rp colgt sigexp eq strexp andfunBindOp |
(* Ax B *)  funid lp spec rp colon sigexp eq strexp andfunBindOp |
(* Ax B *)  funid lp spec rp eq strexp andfunBindOp |
(* Ax B *)  funid lp spec rp colgt sigexp eq strexp andfunBindOp  

topdec ::= strdec topdecOp |
           sigdec topdecOp |
           fundec topdecOp  

(* eas: there are some rules for nexp and nexprow *)



