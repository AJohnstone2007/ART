(* This starts with smlSpec.art and attempts to exactly
match the 1997 Definition using BNF for the lexical specification
For choosers refer back to smlSpec.art *)

(* this uses the multilevel specification formulation described in
MLSspec.tex in EAS_docs above.
It looks as though it covers both SML FULL and the extra that is needed
for the bits of SML BEAR that are not in SML FULL
*)

(* mA
`a | `b | `c | `d | `e | `f | `g | `h | `i | `j | `k | `l | `m | 
`n | `o | `p | `q | `r | `s | `t | `u | `v | `w | `x | `y | `z | 
`A | `B | `C | `D | `E | `F | `G | `H | `I | `J | `K | `L | `M | 
`N | `O | `P | `Q | `R | `S | `T | `U | `V | `W | `X | `Y | `Z |
`0 | `1 | `2 | `3 | `4 | `5 | `6 | `7 | `8 | `9 |
 `_  | `\\ | `= | `> | `? | ` | `^ | `! | `& | `% | `- | `< | `( | `) | `* | 
`. | `[ | `] | `{ | `} | `: | `$ | `+ | `; | `# | `\| | `@ | `' | `  | `,
*)

(* mT
'op', ',', '|', 'withtype', ';', 'and, ':', 'of', 'as', '*', '(', ')',
'=', '{'[, '}', '#', '[', ']', 'let', 'in', 'end', 'andalso', 'orelse',
'handle', 'raise', 'if', 'then', 'else', 'while', 'do', 'case', 'of',
'fn', '=>', 'val', 'fun', 'type', 'datatype', 'abstype', 'with', 
'exception', 'local', 'open', 'infix', 'infixr', 'nonfix', 'rec',
'_', '...', '->', 'struct', ':>', 'structure', 'sig', 'where', 'type',
'signature', 'eqtype', 'include', 'sharing'
*)

(* mL
iden, ibase, int, word, num, hex, real, char, string, ascii, letter, digit
*)

(* mP *)
!paraterminal 
scon, lab, vid, tyvar, tycon, funid, sigid, 
d, strid
(* , longvid, longtycon, longstrid *)

(* mN  the LHSs of the phrase level grammar rules below *)


(*
!injectInstance WT 
!injectProductionOff
*)

(* use whitespace absorption via WT
WS ::= ( ` | `\t | `\n | `\r)( ` | `\t | `\n | `\r)*
WT ::= WS | #
*)



(* reserved words *)

(*
(* idRW *)
(* Section 2.1 *)
'abstype'  'and'  'andalso'  'as'  'case'  'do'  'else'
'end'  'exception'   'fn'    'fun'   'handle'   'if'  'in'  'infix'
'infixr'   'let'   'local'   'nonfix'   'of'  'op'   'open'   'orelse'
'raise'   'rec'   'then'   'type'  'val'  'with'   'withtype'  'while'

(* symKW *)
(* Section 2.1 *)
'('   ')'  '['  ']'  '{'  '}'  ','  ':'  ';'  '...'  '_'
'|'  '='  '=>'  '->'  '#'


'handle', 'raise', 'datatype', 
'struct', ':>', 'structure', 'sig', 'where',
'signature', 'eqtype', 'include', 'sharing'
*)

(* start rule *)
startSML ::= WT program

program ::= topdec ';' programOp |
            exp ';'  programOp   (* Ax A OK *)


(* whitespace *)
WS ::= ` | `\t | `\n | `\r |  ` WS | `\t WS | `\n WS | `\r WS
WT ::= WS | #

(* lexical grammar rules *)
(* scon  tyvar  vid  funid  sigid tycon lab d strid *)

scon  ::=  int WT  | word WT | real WT | string WT | char WT 

int  ::= intdec | inthex 
  
word ::= `0`w decnum | `0`w`x hexnum

real ::=  intdec`.intdec 
        | intdec`.intdec `e intdec
	| intdec`.intdec `E intdec
	| intdec `e intdec
	| intdec `E intdec 
  
string ::= `" stringbody `" 

char ::= `# `" format ascii  format `" |
         `# `" format ascii `" |
         `# `" format escape format`" |
	 `# `" format escape `" |
	 `# `" ascii format `" |
	 `# `" ascii `" |
	 `# `" escape format `" |
	 `# `" escape `" 


(* support nonterminals for the lexical nonterminals *)

intdec ::= decnum | `~ decnum 

inthex ::= `0`x hexnum | `~ `0`x hexnum 

digit ::= `0 | `1 | `2 | `3 | `4 | `5 | `6 | `7 | `8 | `9

decnum  ::= digit | digit decnum
  
hexdigit ::= `0 | `1 | `2 | `3 | `4 | `5 | `6 | `7 | `8 | `9 |
           `a | `b | `c | `d | `e | `f | `A | `B | `C | `D | `E | `F 

hexnum  ::= hexdigit  |  hexdigit hexnum

stringbody ::= ascii | escape | format |
          ascii stringbody | escape stringbody | format stringbody 

ascii ::=  letter | `_  | digit | `\\ | 
           `= | `> | `? | ` | `^ | `! | `& | `% | `- | `< | `( | `) |
           `* | `. | `[ | `] | `{ | `} | `: | `$ | `+ | `; | `# | 
           `\| | `@ | `' | `  | `,
	   (* eas: no pound sign can be in the script *)


(* eas to check these they are hard coded ART individual notations *)
escape ::= `\\`a | `\\`b | `\\`t | `\\`n | `\\`v | `\\`f | `\\`r |
           `\\`A | `\\`B | `\\`T | `\\`N | `\\`V | `\\`F | `\\`R |	
           `\\`^ letter | `\\ digit digit digit
	   | `\\`u hexdigit hexdigit hexdigit hexdigit | 
           `\\`U hexnum | `\\`"  | `\\`\\

(* eas: `U hexnum missing \f...\f *)

format ::= `\\ spaces `\\

(* eas: missing formfeed? *)	

spaces ::= ` | `\t | `\n | `\r ` | 
           ` spaces | `\t spaces | `\n spaces | `\r spaces

letter ::= `a | `b | `c | `d | `e | `f | `g | `h | `i | `j | `k | `l | `m | 
          `n | `o | `p | `q | `r | `s | `t | `u | `v | `w | `x | `y | `z | 
          `A | `B | `C | `D | `E | `F | `G | `H | `I | `J | `K | `L | `M | 
          `N | `O | `P | `Q | `R | `S | `T | `U | `V | `W | `X | `Y | `Z


(* eas: in the Definition but not used in this grammar *)
identifier ::= iden | `' idenBase


iden ::= letter idenBase | symIden (* excludes reserved words except '=' *)

symForIden ::= `! | `% | `& | `$ | `# | `+ | `- | `/ | `: | `< | `= | `> | 
      `? | `@ | `\\ | `~ | `` | `^ | `| | `* 

symIden ::= symForIden | symForIden symIden

idenBase ::= letter idenBase | digit idenBase | `' idenBase | `_ idenBase | # 


tyvar ::= `' idenBase WT

(* etyvar ::= `'`'idenBase  *)  

vid ::= iden WT

tycon ::= iden WT (* but excludes * *)

lab ::= iden WT | posDigit WT | posDigit decnum WT

posDigit ::=  `1 | `2 | `3 | `4 | `5 | `6 | `7 | `8 | `9 

d ::= digit WT (* eas: implicit in the 97 Defintion *)

strid ::=  letter idenBase WT

funid ::= letter idenBase WT

sigid ::= letter idenBase WT


(* Milner uses rules for the long ids, so perhaps these should be
nonterminals *)   
(*
longvid ::= idBaseDot iden WT

longtycon ::= idBaseDot iden WT

longstrid ::= idBaseDot  letter idenBase WT

idBaseDot ::= # |  letter idenBase `. idBaseDot
*)


longvid ::= idBaseDot vid

longtycon ::= idBaseDot tycon

longstrid ::= idBaseDot  strid

idBaseDot ::= # |  strid '.' idBaseDot




(* phrase level grammar rules*)
(* the alternates are in decreasing priority
L resp R associativity
types bind more tightly than expressions
longest match applies to iterated constructs such as match *)

opOp ::= 'op' | #
patrowOp ::= patrow | #
patrowCommaOp ::=  ',' patrow | #
tyOp ::= ':' ty | #
tyrowOp ::= tyrow | #
tyrowCommaOp ::= ',' tyrow | #
exprowOp ::= exprow | #
exprowCommaOp ::= ',' exprow | #
matchBarOp ::= '|' match | #
scolonOp ::= ';' | #
dOp ::= d | #
andvBindOp ::= 'and' valbind | #
andtBindOp ::= 'and' typbind | #
anddBindOp ::= 'and' datbind | #
conbindBarOp ::= '|' conbind | #
andexBindOp ::= 'and' exbind | #
andstrBindOp ::= 'and' strbind | #
andsigBindOp ::= 'and' sigbind | #
andvaldescOp ::= 'and' valdesc | #
andtypdescOp ::= 'and' typdesc | #
anddatdescOp ::= 'and' datdesc | #
condescBarOp ::= '|' condesc | #
andexdescOp ::= 'and' exdesc | #
andstrdescOp ::= 'and' strdesc | #
andfunBindOp ::=  'and' funbind | #
topdecOp ::= topdec | #
programOp ::= program | #

withtypeBindOp ::= 'withtype' typbind | # (* eas: in Appendix B *)
andfBindOp ::= 'and' fvalbind | # (* eas: in Appendix B *)
oftyOp ::= 'of' ty | #  (* eas: in Appendix B *)
aspatOp ::= 'as' pat | #  (* eas: in Appendix B *)



longstridPosC ::= longstrid | longstrid longstridPosC
vidPosC ::= vid | vid vidPosC
longtyconList2 ::= longtycon '=' longtycon | 
                   longtycon '=' longtyconList2



(* From Ax B *)
expComList0 ::= # | exp | exp ',' expComList0
expSemList2 ::= exp ';' exp | exp ';' expSemList2
expSemList1 ::= exp | exp ';' expSemList1
expComList2 ::= exp ',' exp | exp ',' expComList2
patComList2 ::= pat ',' pat | pat ',' patComList2
patComList0 ::= # | pat | pat ',' patComList0
tyStarList2 ::= ty '*' ty | ty '*' tyStarList2



(* not checked - from Ax A *)

(* atpatList1 ::= atpat | atpat atpatList1 
longstridList1 ::= longstrid | longstrid longstridList1
*)


atpatStar ::= atpat atpatStar | #
andTyvarseqTyconTyStar ::= 
            'and' tyvarseq tycon '=' ty andTyvarseqTyconTyStar | #
sigidPosC ::= sigid | sigid sigidPosC 
equalLongstridStar ::= '=' longstrid equalLongstridStar  | #
andTypeTyvarseqLTyconTyStar ::= 
         'and' 'type' tyvarseq longtycon '=' ty andTypeTyvarseqLTyconTyStar | #


(* the seq lists *)
tyvarseq ::= tyvar | # | '(' tyvarList ')'
tyvarList ::=  tyvar | tyvar ',' tyvarList
tyseq ::= ty | # | '(' tyList ')'
tyList ::=  ty | ty ',' tyList


(* Section 2.8 *)
atpat ::= '_' |
          scon |
          opOp longvid |
          '{' patrowOp '}' |
          '(' ')'  |             (* Ax B OK *)
          '(' patComList2 ')' |  (* Ax B OK *)
          '[' patComList0 ']'  | (* Ax B OK *)
          '(' pat ')'


patrow ::= '...'    |
           lab '=' pat patrowCommaOp |
           vid tyOp aspatOp patrowCommaOp   (* Ax B OK *)

pat ::= atpat             |
        opOp longvid atpat |
        pat vid pat       |
        pat ':' ty      |
        opOp vid tyOp 'as' pat

ty ::= tyvar   |
       '{' tyrowOp '}' |
       tyseq longtycon |
       tyStarList2  |      (* Ax B OK *)
       ty '->' ty |        (* R right associative *)
       '(' ty ')'

tyrow ::= lab ':' ty tyrowCommaOp 



(* Section 2.9 *)

atexp ::= scon |
          opOp longvid  |
          '{' exprowOp '}' |
          '#' lab   |             (* Ax B OK *)
          '(' ')'  |              (* Ax B OK *)
          '(' expComList2 ')' |   (* Ax B OK *)
          '[' expComList0 ']' |   (* Ax B OK *)
          '(' expSemList2 ')' |   (* Ax B OK *)
          'let' dec 'in' expSemList1 'end'  | (* Ax B OK *)
          '(' exp ')'

exprow ::= lab '=' exp exprowCommaOp         

appexp ::= atexp |   (* Ax B OK *)
           appexp atexp (* Ax B OK *)

infexp ::= appexp |    (* Ax B OK *)
           infexp vid infexp (* Ax B OK *)

exp ::= (* atexp | exp atexp | exp vid exp | *)
        infexp |         (* Ax B OK *)
        exp ':' ty |     (* Ax B OK *) (* L left associative *)
        exp 'andalso' exp | (* Ax B OK *)
        exp 'orelse' exp   | (* Ax B OK *)
        exp 'handle' match  |
        'raise' exp       |
        'if' exp 'then' exp 'else' exp | (* Ax B OK *)
        'while' exp 'do' exp          |  (* Ax B OK *)
        'case' exp 'of' match         |  (* Ax B OK *)
        'fn' match                    

match ::= mrule matchBarOp

mrule ::= pat '=>' exp

dec ::= 'val' tyvarseq valbind    |
        'fun' tyvarseq fvalbind   | (* Ax B OK *)
        'type' typbind          |
        'datatype' datbind withtypeBindOp | (* Ax B OK *)
        'datatype' tycon '=' 'datatype' longtycon |
        'abstype' datbind withtypeBindOp 
                               'with' dec 'end' | (* Ax B OK *)
        'exception' exbind     |
        'local' dec 'in' dec 'end' |
        'open' longstridPosC   |
        # |
        dec scolonOp dec |
        'infix' dOp vidPosC |
        'infixr' dOp vidPosC |
        'nonfix' vidPosC      

valbind ::= pat '=' exp andvBindOp |
            'rec' valbind

(* Ax B *)
(* this is the original rule as in Ax B, it is not context free and is 
replaced by a rule that widens the accepted language 
A semantic check will need to be added to the translator

fvalbind ::= opOp vid atpat11 ... atpat1n tyOp '='exp    !m; n>=1
        '|'opOp vid atpat21 ... atpat2n tyOp '='exp     !See also note below
        '|' ... ...
        '|'opOp vid atpatm1 ... atpatmn tyOp '='exp
                      andfBindOp

fvalbindList1 ::= opOp vid atpatList1 tyOp '='exp  |
                  opOp vid atpatList1 tyOp '='exp  '|' fvalbindList1

fvalbind ::= fvalbindList1 andfBindOp
*)

(* eas: needs checking what are the last 4 for *)
fvalbindList1 ::= 
          opOp vid atpat atpatStar tyOp '='exp  |
          opOp vid atpat atpatStar tyOp '='exp  '|' fvalbindList1 |
          atpat vid atpat tyOp '=' exp |
          atpat vid atpat tyOp '=' exp '|' fvalbindList1 |
         '(' atpat vid atpat ')' atpatStar tyOp '=' exp |
         '(' atpat vid atpat ')' atpatStar tyOp '=' exp '|' fvalbindList1

fvalbind ::= fvalbindList1 andfBindOp


typbind ::= tyvarseq tycon '=' ty andtBindOp

datbind ::= tyvarseq tycon '=' conbind anddBindOp

conbind ::= opOp vid oftyOp conbindBarOp

exbind ::= opOp vid oftyOp andexBindOp |
           opOp vid '=' opOp longvid andexBindOp


strexp ::= 'struct' strdec 'end' | 
           longstrid               |
           strexp ':' sigexp     |
           strexp':>'sigexp   |
           funid '(' strexp ')' |
           'let' strdec 'in' strexp 'end' |
           (* the next alternate comes from the rewrite rules*)
           funid '(' strdec ')'   (* Ax B *)



strdec ::= dec      |
           'structure' strbind |
           'local' strdec 'in' strdec 'end' |
            #  |
           strdec scolonOp strdec 

strbind ::= strid '=' strexp andstrBindOp |
            (* the next two alternates come from the rewrite rules*)
            strid ':' sigexp '=' strexp andstrBindOp |  (* Ax B *)
            strid ':>' sigexp '=' strexp andstrBindOp    (* Ax B *)


sigexp ::= 'sig' spec 'end'  |
           sigid              |
  (* this alternate has been modified to add rewtire rule *)
          sigexp 'where' 'type' tyvarseq longtycon '=' ty      (* Ax B *)
                                      andTypeTyvarseqLTyconTyStar 

sigdec ::= 'signature' sigbind

sigbind ::= sigid '=' sigexp andsigBindOp

spec ::= 'val' valdesc   |
         'type' typdesc   |
         'eqtype' typdesc  |
         'datatype' datdesc |
         'datatype' tycon '=' 'datatype' longtycon |
         'exception' exdesc   |
         'structure' strdesc   |
         'include' sigexp       |
         # |
         spec scolonOp spec |
         spec 'sharing' 'type' longtyconList2 |  
  (* the next alternates come from the rewrite rules*)
         'type' tyvarseq tycon '=' ty andTyvarseqTyconTyStar   |  (* Ax A *)
         'include' sigidPosC |       (* Ax A *) 
         spec 'sharing' longstrid equalLongstridStar    (* Ax A *)

valdesc ::= vid ':' ty andvaldescOp

typdesc ::= tyvarseq tycon andtypdescOp

datdesc ::= tyvarseq tycon '=' condesc anddatdescOp

condesc ::= vid oftyOp condescBarOp

exdesc ::= vid oftyOp andexdescOp

strdesc ::= strid ':' sigexp andstrdescOp

fundec ::= 'functor' funbind

funbind ::= funid '(' strid ':' sigexp ')' '=' strexp  andfunBindOp |
            (* the next alternates come from the rewrite rules*)  
(* Ax B *)  funid '(' strid ':' sigexp ')' ':' sigexp '=' strexp andfunBindOp |
(* Ax B *)  funid '(' strid ':' sigexp ')' ':>' sigexp '=' strexp andfunBindOp |
(* Ax B *)  funid '(' spec ')' ':' sigexp '=' strexp andfunBindOp |
(* Ax B *)  funid '(' spec ')' '=' strexp andfunBindOp |
(* Ax B *)  funid '(' spec ')' ':>' sigexp '=' strexp andfunBindOp  

topdec ::= strdec topdecOp |
           sigdec topdecOp |
           fundec topdecOp  

(* eas: there are some rules for nexp and nexprow *)



