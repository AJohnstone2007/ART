(*******************************************************************************
*
* miniCalc.art for ART V5 - Adrian Johnstone 31 December 2024
*
*******************************************************************************)
statement ::= 'print' '(' printElements ')' ';'      // print statement 

printElements ::= 
  STRING_SQ !! System.out.print(STRING_SQ1.v); !! 
| STRING_SQ !! System.out.print(STRING_SQ1.v); !! ',' printElements 
| e0        !! System.out.print(e01.v); !!        
| e0        !! System.out.print(e01.v); !!        ',' printElements

e0 <v:int> ::= 
  e1         !! e0.v = e11.v; !! 
| e1 '>'  e1 !! e0.v = e11.v >  e12.v ? 1 : 0; !!       // Greater than
| e1 '<'  e1 !! e0.v = e11.v <  e12.v ? 1 : 0; !!       // Less than
| e1 '>=' e1 !! e0.v = e11.v >= e12.v ? 1 : 0; !!       // Greater than or equals
| e1 '<=' e1 !! e0.v = e11.v <= e12.v ? 1 : 0; !!       // Less than or equals
| e1 '==' e1 !! e0.v = e11.v == e12.v ? 1 : 0; !!       // Equal to
| e1 '!=' e1 !! e0.v = e11.v != e12.v ? 1 : 0; !!       // Not equal to

e1 <v:int>  ::= 
  e2         !! e1.v = e21.v; !! 
| e1 '+' e2  !! e1.v = e11.v + e21.v; !!                // Add 
| e1 '-' e2  !! e1.v = e11.v - e21.v; !!                // Subtract

e2  <v:int> ::= 
  e3         !! e2.v= e31.v; !! 
| e2 '*' e3  !! e2.v = e21.v * e31.v; !!                // Multiply 
| e2 '/' e3  !! e2.v = e21.v / e31.v; !!                // Divide 
| e2 '%' e3  !! e2.v = e21.v % e31.v; !!                // Mod 

e3  <v:int> ::= 
  e4         !!e3.v = e41.v; !!
| '+' e3     !!e3.v = e31.v; !!                         // Posite 
| '-' e3     !!e3.v = -e31.v; !!                        // Negate 

e4  <v:int> ::= 
  e5         !! e4.v = e51.v; !! 
| e5 '**' e4 !! e4.v = (int) Math.pow(e51.v, e41.v); !! // Exponentiate

e5  <v:int> ::= 
  INTEGER !!e5.v = INTEGER1.v; !!                       // Integer literal
| '(' e1 !! e5.v = e11.v; !! ')'                        // Parenthesised expression

(* Lexical productions *)
STRING_SQ <v:String> ::= &STRING_SQ !! STRING_SQ.v = lexemeCore().translateEscapes(); !!
INTEGER <v:int>      ::= &INTEGER   !! INTEGER.v = Integer.parseInt(lexeme()); !!

!interpreter attributeAction

!try "print('Result: ', 3+4, '\n');"
!print outcome
!generate actions 

