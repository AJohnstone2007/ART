(* slewa.pdf  Chapter 5 examples *)
!trace 4
(* Abbreviations *)
!print "A term with no abbreviations"
!print term a(b,c)  // Just a term with no abbreviations

!print "\n__bool"
!print term true
!printraw term true

!print term false
!printraw term false

!print "__char"
!print term `a
!printraw term `a

!print "__int32"
!print term 1234
!printraw term 1234

!print "__real64"
!print term 1234.0
!printraw term 1234.0

!print "__array of size 3"
!print term [3 | a,b,c ]
!printraw term [ 3 | a,b,c]

!print "__list"
!print term [ a,b,c ]
!printraw term [ a,b,c]

!print "__set"
!print term { a,b,c }
!printraw term { a,b,c }

!print "__map"
!print term { a->p, b->q, c->r }
!printraw term { a->p, b->q, c->r }

(* Part A - output of expressions *)
(*

!configuration -> _alpha:__list
-add 
_n1 |> __int32(_) _n2 |> __int32(_)
---
add(_n1, _n2), _alpha -> __add(_n1,_n2), _alpha

!print "First go "
!try add(2,2), __list

-outputInt 
_n |> __int32(_)
---
output(_n), _alpha -> __done, __put(_alpha, 0, _n)

!try output(3),__list

-outputIntResolve _E -> _EP
---
output(_E), _alpha -> __done, __put(_alpha, 0, _EP)


!try output(add(3,4)),__list

-addResolveLeft
_E1, _alpha -> _E1P, _alpha
---
add(_E1, _E2), _alpha -> __add(_E1P,_E2), _alpha

-addResolvRight
_n |>  __int32(_)  _E -> _EP, _alpha
---
add(_n, _E), _alpha -> __add(_n,_EP), _alpha

!try add(add(6,7),8), __list


!print "Second go"
!clear trRules

!try add(2,2), __list // to show that all the rules have been removed - not working!

*)
(*
(* Part B - development of the GCD language *)
!configuration -> _sig:__map

-assign
_n |> __int32(_)  __put(_sig, _X, _n) |> _sigP 
---
assign(_X, _n), _sig -> __done,  _sigP

!try assign(a, 3), __map

-deref
---
deref(_X),_sig -> __get(_sig, _X)

!try deref(a), __map(_m(a,7))
!try deref(a), {a->13}

*)

